	.file	"rising.c"
	.text
	.p2align 4
	.globl	zero
	.type	zero, @function
zero:
.LFB32:
	.cfi_startproc
	pxor	%xmm0, %xmm0
	ret
	.cfi_endproc
.LFE32:
	.size	zero, .-zero
	.p2align 4
	.type	periodic_function, @function
periodic_function:
.LFB92:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%r9, %r15
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	%ecx, %r14d
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%r8, %r13
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%edx, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%esi, %ebx
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movl	%esi, 20(%rsp)
	movl	%edx, 36(%rsp)
	call	*%r9
	movl	Period(%rip), %ecx
	testl	%ecx, %ecx
	je	.L4
	leal	-4(%r14), %eax
	movl	$2, 16(%rsp)
	subl	%eax, %ebx
	leal	(%rax,%rax), %ecx
	movl	%eax, 32(%rsp)
	movl	%ecx, 24(%rsp)
	movl	%ebx, 28(%rsp)
	movl	%ebx, 12(%rsp)
.L8:
	movl	12(%rsp), %eax
	movl	%eax, %ecx
	subl	20(%rsp), %ecx
	movl	%eax, %ebx
	movl	%ecx, (%rsp)
	cmpl	%eax, %r14d
	jle	.L5
	testl	%eax, %eax
	js	.L5
	movq	%r13, %rax
	movl	%ebp, %r13d
	movq	%rax, %rbp
	jmp	.L6
	.p2align 4,,10
	.p2align 3
.L47:
	cmpl	%ebx, %r14d
	jle	.L42
.L6:
	movl	%ebx, %esi
	movq	%rbp, %r8
	movl	%r14d, %ecx
	movl	%r13d, %edx
	movq	%r12, %rdi
	call	*%r15
	addl	(%rsp), %ebx
	jns	.L47
.L42:
	movq	%rbp, %rax
	movl	%r13d, %ebp
	movq	%rax, %r13
.L5:
	movl	24(%rsp), %edi
	addl	%edi, 12(%rsp)
	cmpl	$1, 16(%rsp)
	jne	.L22
	movl	Period+4(%rip), %edx
	testl	%edx, %edx
	je	.L3
	movl	36(%rsp), %eax
	subl	32(%rsp), %eax
	movl	$2, 44(%rsp)
	movl	%eax, 40(%rsp)
	movq	%r15, (%rsp)
.L17:
	movl	40(%rsp), %eax
	movl	%eax, %edi
	subl	36(%rsp), %edi
	movl	%eax, %ebp
	movl	%edi, 32(%rsp)
	cmpl	%eax, %r14d
	jle	.L10
	testl	%eax, %eax
	js	.L10
	.p2align 4,,10
	.p2align 3
.L15:
	movq	(%rsp), %rax
	movl	20(%rsp), %esi
	movq	%r13, %r8
	movl	%r14d, %ecx
	movl	%ebp, %edx
	movq	%r12, %rdi
	call	*%rax
	movl	28(%rsp), %eax
	movl	$2, 16(%rsp)
	movl	%eax, 12(%rsp)
.L14:
	movl	12(%rsp), %eax
	movl	%eax, %ebx
	movl	%eax, %r15d
	subl	20(%rsp), %ebx
	testl	%eax, %eax
	js	.L11
	cmpl	%eax, %r14d
	jle	.L11
	.p2align 4,,10
	.p2align 3
.L12:
	movl	%r15d, %esi
	movq	(%rsp), %rax
	movq	%r13, %r8
	movl	%r14d, %ecx
	movl	%ebp, %edx
	movq	%r12, %rdi
	call	*%rax
	addl	%ebx, %r15d
	js	.L11
	cmpl	%r15d, %r14d
	jg	.L12
.L11:
	movl	24(%rsp), %edx
	addl	%edx, 12(%rsp)
	cmpl	$1, 16(%rsp)
	jne	.L23
	addl	32(%rsp), %ebp
	js	.L10
	cmpl	%ebp, %r14d
	jg	.L15
.L10:
	movl	24(%rsp), %esi
	addl	%esi, 40(%rsp)
	cmpl	$1, 44(%rsp)
	je	.L3
	movl	$1, 44(%rsp)
	jmp	.L17
.L4:
	movl	Period+4(%rip), %eax
	testl	%eax, %eax
	jne	.L48
.L3:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L22:
	.cfi_restore_state
	movl	$1, 16(%rsp)
	jmp	.L8
.L48:
	movl	36(%rsp), %ecx
	leal	-4(%r14), %eax
	movl	20(%rsp), %ebp
	movq	%r15, (%rsp)
	leal	(%rax,%rax), %esi
	movl	$2, 16(%rsp)
	subl	%eax, %ecx
	movl	%esi, 24(%rsp)
	movl	%ecx, 12(%rsp)
.L21:
	movl	12(%rsp), %eax
	movl	%eax, %ebx
	movl	%eax, %r15d
	subl	36(%rsp), %ebx
	cmpl	%eax, %r14d
	jle	.L18
	testl	%eax, %eax
	jns	.L19
	jmp	.L18
	.p2align 4,,10
	.p2align 3
.L49:
	cmpl	%r15d, %r14d
	jle	.L18
.L19:
	movl	%r15d, %edx
	movq	(%rsp), %rax
	movq	%r13, %r8
	movl	%r14d, %ecx
	movl	%ebp, %esi
	movq	%r12, %rdi
	call	*%rax
	addl	%ebx, %r15d
	jns	.L49
.L18:
	movl	24(%rsp), %edi
	addl	%edi, 12(%rsp)
	cmpl	$1, 16(%rsp)
	je	.L3
	movl	$1, 16(%rsp)
	jmp	.L21
	.p2align 4,,10
	.p2align 3
.L23:
	movl	$1, 16(%rsp)
	jmp	.L14
	.cfi_endproc
.LFE92:
	.size	periodic_function, .-periodic_function
	.p2align 4
	.type	end_event_do, @function
end_event_do:
.LFB123:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	Events(%rip), %rbx
	movl	(%rbx), %edx
	testl	%edx, %edx
	jne	.L50
	movl	%edi, %r12d
	.p2align 4,,10
	.p2align 3
.L54:
	cmpl	$1234567890, 88(%rbx)
	jne	.L52
	testb	%r12b, %r12b
	jne	.L64
.L52:
	movl	112(%rbx), %eax
	addq	$112, %rbx
	testl	%eax, %eax
	je	.L54
.L50:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L64:
	.cfi_restore_state
	movq	%rbx, %rbp
	.p2align 4,,10
	.p2align 3
.L53:
	movq	%rbp, %rsi
	movsd	t(%rip), %xmm0
	movl	iter(%rip), %edi
	call	*8(%rbp)
	movq	104(%rbp), %rbp
	testq	%rbp, %rbp
	jne	.L53
	jmp	.L52
	.cfi_endproc
.LFE123:
	.size	end_event_do, .-end_event_do
	.p2align 4
	.globl	cartesian_boundary_level
	.type	cartesian_boundary_level, @function
cartesian_boundary_level:
.LFB154:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	%esi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	boundaries(%rip), %rbx
	testq	%rbx, %rbx
	je	.L65
.L66:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L65
.L68:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L66
	addq	$8, %rbx
	movl	%ebp, %edx
	movq	%r12, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L68
.L65:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE154:
	.size	cartesian_boundary_level, .-cartesian_boundary_level
	.p2align 4
	.globl	cartesian_boundary_face
	.type	cartesian_boundary_face, @function
cartesian_boundary_face:
.LFB155:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L76
	movslq	(%rdi), %rax
	testl	%eax, %eax
	js	.L76
	movq	_attribute(%rip), %rcx
	.p2align 4,,10
	.p2align 3
.L77:
	leaq	(%rax,%rax,4), %rdx
	addq	$4, %rdi
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movl	$2, 88(%rcx,%rax)
	movslq	(%rdi), %rax
	testl	%eax, %eax
	jns	.L77
.L76:
	testq	%rsi, %rsi
	je	.L75
	movslq	(%rsi), %rax
	testl	%eax, %eax
	js	.L75
	movq	_attribute(%rip), %rcx
	.p2align 4,,10
	.p2align 3
.L79:
	leaq	(%rax,%rax,4), %rdx
	addq	$4, %rsi
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movl	$2, 88(%rcx,%rax)
	movslq	(%rsi), %rax
	testl	%eax, %eax
	jns	.L79
.L75:
	ret
	.cfi_endproc
.LFE155:
	.size	cartesian_boundary_face, .-cartesian_boundary_face
	.p2align 4
	.type	symmetry, @function
symmetry:
.LFB156:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE156:
	.size	symmetry, .-symmetry
	.p2align 4
	.type	antisymmetry, @function
antisymmetry:
.LFB157:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	xorpd	.LC1(%rip), %xmm0
	ret
	.cfi_endproc
.LFE157:
	.size	antisymmetry, .-antisymmetry
	.p2align 4
	.globl	cartesian_init_vertex_scalar
	.type	cartesian_init_vertex_scalar, @function
cartesian_init_vertex_scalar:
.LFB159:
	.cfi_startproc
	movslq	%edi, %rax
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	leaq	(%rax,%rax,4), %rdx
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rax, %r12
	leaq	(%rax,%rdx,2), %rax
	movslq	nboundary(%rip), %rdx
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$-1, 40(%rax)
	testl	%edx, %edx
	jle	.L91
	movq	8(%rax), %rdi
	movq	(%rax), %rbp
	leaq	0(,%rdx,8), %r13
	leaq	(%rdi,%r13), %rax
	cmpq	%rax, %rbp
	jnb	.L95
	leaq	0(%rbp,%r13), %rax
	cmpq	%rax, %rdi
	jb	.L94
.L95:
	movq	%r13, %rdx
	xorl	%esi, %esi
	call	memset
	movq	%r13, %rdx
	xorl	%esi, %esi
	movq	%rbp, %rdi
	call	memset
.L91:
	movl	%r12d, %eax
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
.L94:
	.cfi_restore_state
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L92:
	movq	$0, (%rdi,%rax,8)
	movq	$0, 0(%rbp,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L92
	jmp	.L91
	.cfi_endproc
.LFE159:
	.size	cartesian_init_vertex_scalar, .-cartesian_init_vertex_scalar
	.p2align 4
	.type	periodic_bc, @function
periodic_bc:
.LFB173:
	.cfi_startproc
	movsd	.LC2(%rip), %xmm0
	ret
	.cfi_endproc
.LFE173:
	.size	periodic_bc, .-periodic_bc
	.p2align 4
	.type	periodic_boundary, @function
periodic_boundary:
.LFB174:
	.cfi_startproc
	movq	all(%rip), %rcx
	testq	%rcx, %rcx
	je	.L110
	movslq	(%rcx), %rax
	testl	%eax, %eax
	js	.L110
	movslq	%edi, %rdi
	movq	_attribute(%rip), %r8
	movslq	%eax, %rdx
	movq	%rcx, %r9
	leaq	0(,%rdi,8), %rsi
	.p2align 4,,10
	.p2align 3
.L102:
	leaq	(%rdx,%rdx,4), %r10
	addq	$4, %r9
	leaq	(%rdx,%r10,2), %rdx
	salq	$4, %rdx
	addq	%r8, %rdx
	movq	8(%rdx), %r10
	movq	(%rdx), %rdx
	movq	$periodic_bc, (%r10,%rsi)
	movq	$periodic_bc, (%rdx,%rsi)
	movslq	(%r9), %rdx
	testl	%edx, %edx
	jns	.L102
	.p2align 4,,10
	.p2align 3
.L104:
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	%r8, %rax
	movl	56(%rax), %edx
	testl	%edx, %edx
	je	.L103
	movslq	48(%rax), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	%r8, %rax
	movq	8(%rax), %rdx
	movq	(%rax), %rax
	movq	$0, (%rdx,%rsi)
	movq	$0, (%rax,%rsi)
.L103:
	movslq	4(%rcx), %rax
	addq	$4, %rcx
	testl	%eax, %eax
	jns	.L104
.L101:
	movq	$periodic_bc, default_scalar_bc(,%rdi,8)
	movq	$periodic_bc, default_vector_bc(,%rdi,8)
	ret
	.p2align 4,,10
	.p2align 3
.L110:
	movslq	%edi, %rdi
	jmp	.L101
	.cfi_endproc
.LFE174:
	.size	periodic_boundary, .-periodic_boundary
	.p2align 4
	.type	restriction_average, @function
restriction_average:
.LFB181:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	%rdi, %rax
	leal	-2(%rdi,%rdi), %ecx
	xorl	%r8d, %r8d
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	shrq	$32, %rax
	pxor	%xmm0, %xmm0
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	leal	-2(%rax,%rax), %eax
	movslq	%eax, %r11
	salq	$3, %r11
	movq	%rdi, -16(%rsp)
	movq	grid(%rip), %rdi
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movq	24(%rdi), %r10
	movslq	%esi, %rsi
	movslq	%edx, %rdi
	leaq	0(,%rsi,8), %rbx
	addq	$1, %rdi
	movq	(%r10,%rsi,8), %rdx
	movslq	%ecx, %rsi
	leaq	0(,%rdi,8), %r9
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rsi,8), %rbp
	leal	1(%rax), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
.L112:
	movq	0(%rbp,%r8,8), %rsi
	movq	(%rsi,%r11), %r14
	movq	(%rsi,%rdx), %rsi
	addsd	(%r14,%r9), %xmm0
	addsd	(%rsi,%r9), %xmm0
	cmpq	$1, %r8
	jne	.L113
	movq	-8(%r10,%rbx), %rdx
	addl	$2, %ecx
	addl	$2, %eax
	sarl	%ecx
	sarl	%eax
	movq	(%rdx), %rdx
	mulsd	.LC3(%rip), %xmm0
	movslq	%ecx, %rcx
	cltq
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	movsd	%xmm0, (%rax,%rdi,8)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L113:
	.cfi_restore_state
	movl	$1, %r8d
	jmp	.L112
	.cfi_endproc
.LFE181:
	.size	restriction_average, .-restriction_average
	.p2align 4
	.type	restriction_volume_average, @function
restriction_volume_average:
.LFB182:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	grid(%rip), %rcx
	movq	%rdi, %rax
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movq	24(%rcx), %r8
	movq	%rdi, %rbx
	shrq	$32, %rbx
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	%rdi, -16(%rsp)
	movslq	cm(%rip), %rdi
	movq	(%r8,%rsi,8), %rcx
	leaq	0(,%rsi,8), %r9
	movq	(%rcx), %rcx
	movq	16(%rcx), %r10
	movslq	%edx, %rcx
	leal	-2(%rax,%rax), %edx
	leal	-2(%rbx,%rbx), %eax
	addq	$1, %rcx
	leaq	0(,%rcx,8), %rsi
	cmpl	$65535, %edi
	jg	.L116
	movslq	%edx, %r11
	addl	$1, %edi
	movslq	%eax, %rbp
	xorl	%r14d, %r14d
	leaq	(%r10,%r11,8), %r12
	leal	1(%rax), %r10d
	movslq	%edi, %rdi
	salq	$3, %rbp
	movslq	%r10d, %r10
	leaq	0(,%rdi,8), %rbx
	pxor	%xmm0, %xmm0
	salq	$3, %r10
.L117:
	movq	(%r12,%r14,8), %r11
	movq	(%r11,%rbp), %r13
	movq	(%r11,%r10), %r11
	movsd	0(%r13,%rsi), %xmm1
	mulsd	0(%r13,%rbx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	(%r11,%rbx), %xmm1
	mulsd	(%r11,%rsi), %xmm1
	addsd	%xmm1, %xmm0
	cmpq	$1, %r14
	jne	.L120
	movq	-8(%r8,%r9), %rsi
	addl	$2, %edx
	addl	$2, %eax
	movsd	.LC4(%rip), %xmm1
	sarl	%edx
	sarl	%eax
	movq	(%rsi), %rsi
	mulsd	.LC3(%rip), %xmm0
	movslq	%edx, %rdx
	cltq
	movq	16(%rsi), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	addsd	(%rax,%rdi,8), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%rcx,8)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L120:
	.cfi_restore_state
	movl	$1, %r14d
	jmp	.L117
	.p2align 4,,10
	.p2align 3
.L116:
	movq	_constant(%rip), %r11
	movslq	%eax, %rbx
	pxor	%xmm0, %xmm0
	salq	$3, %rbx
	movsd	-524288(%r11,%rdi,8), %xmm1
	movslq	%edx, %rdi
	xorl	%r11d, %r11d
	leaq	(%r10,%rdi,8), %rbp
	leal	1(%rax), %edi
	movslq	%edi, %rdi
	salq	$3, %rdi
.L119:
	movq	0(%rbp,%r11,8), %r10
	movq	(%r10,%rbx), %r12
	movq	(%r10,%rdi), %r10
	movsd	(%r12,%rsi), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	movsd	(%r10,%rsi), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	cmpq	$1, %r11
	jne	.L121
	mulsd	.LC3(%rip), %xmm0
	movq	-8(%r8,%r9), %rsi
	addl	$2, %edx
	addl	$2, %eax
	addsd	.LC4(%rip), %xmm1
	sarl	%edx
	sarl	%eax
	movq	(%rsi), %rsi
	movslq	%edx, %rdx
	cltq
	movq	16(%rsi), %rsi
	divsd	%xmm1, %xmm0
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	movsd	%xmm0, (%rax,%rcx,8)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L121:
	.cfi_restore_state
	movl	$1, %r11d
	jmp	.L119
	.cfi_endproc
.LFE182:
	.size	restriction_volume_average, .-restriction_volume_average
	.p2align 4
	.type	restriction_face, @function
restriction_face:
.LFB184:
	.cfi_startproc
	movq	grid(%rip), %rcx
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movslq	%esi, %rsi
	movslq	%edx, %rdx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	addq	$1, %rsi
	leaq	(%rdx,%rdx,4), %rax
	movsd	.LC5(%rip), %xmm1
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leaq	(%rdx,%rax,2), %rdx
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%edi, %r12
	shrq	$32, %rdi
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	leal	-2(%r12,%r12), %r8d
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	24(%rcx), %rbp
	movslq	%r8d, %r8
	movslq	52(%rdx), %rax
	movslq	48(%rdx), %rdx
	movq	0(%rbp,%rsi,8), %rcx
	movq	-8(%rbp,%rsi,8), %rsi
	addq	$1, %rdx
	addq	$1, %rax
	movq	(%rcx), %rcx
	movq	(%rsi), %rsi
	movq	16(%rcx), %r10
	leal	-2(%rdi,%rdi), %ecx
	movq	16(%rsi), %r14
	movslq	%edi, %rdi
	movslq	%ecx, %rcx
	movq	(%r10,%r8,8), %r9
	leaq	1(%rcx), %r13
	movq	(%r14,%r12,8), %rsi
	leaq	0(,%rcx,8), %r11
	movq	8(%r14,%r12,8), %r12
	movq	(%r9,%rcx,8), %rbx
	movq	(%r9,%r13,8), %r15
	movq	(%rsi,%rdi,8), %rbp
	movq	(%r12,%rdi,8), %r12
	movsd	(%r15,%rdx,8), %xmm0
	addsd	(%rbx,%rdx,8), %xmm0
	movq	16(%r10,%r8,8), %r15
	mulsd	%xmm1, %xmm0
	movq	(%r15,%rcx,8), %r14
	movq	(%r15,%r13,8), %r13
	movsd	%xmm0, 0(%rbp,%rdx,8)
	movsd	(%r14,%rdx,8), %xmm0
	addsd	0(%r13,%rdx,8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%r12,%rdx,8)
	movq	8(%r10,%r8,8), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	16(%rdx,%r11), %rdx
	movsd	(%rcx,%rax,8), %xmm0
	addsd	(%rbx,%rax,8), %xmm0
	movq	8(%rsi,%rdi,8), %rcx
	movq	16(%r9,%r11), %rsi
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, 0(%rbp,%rax,8)
	movsd	(%rsi,%rax,8), %xmm0
	addsd	(%rdx,%rax,8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%rcx,%rax,8)
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE184:
	.size	restriction_face, .-restriction_face
	.p2align 4
	.type	restriction_vertex, @function
restriction_vertex:
.LFB185:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rcx
	movq	%rdi, %rax
	movslq	%edx, %rdx
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	leaq	8(,%rdx,8), %r8
	movslq	%ecx, %rdx
	shrq	$32, %rax
	leal	-2(%rax,%rax), %r9d
	cltq
	movslq	%r9d, %r9
	salq	$3, %rax
	movq	%rdi, -16(%rsp)
	movq	grid(%rip), %rdi
	salq	$3, %r9
	leaq	8(%rax), %r11
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	leaq	16(%r9), %rbx
	movq	24(%rdi), %r10
	addq	$1, %rsi
	movq	%rdx, %rdi
	salq	$4, %rdi
	movq	(%r10,%rsi,8), %rcx
	movq	(%rcx), %rcx
	addq	16(%rcx), %rdi
	movq	-8(%r10,%rsi,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	leaq	(%rcx,%rdx,8), %rbp
	xorl	%edx, %edx
.L126:
	movq	%rdx, %rcx
	salq	$4, %rcx
	movq	-16(%rdi,%rcx), %rsi
	movq	0(%rbp,%rdx,8), %rcx
	movq	(%rsi,%r9), %r10
	movq	(%rsi,%rbx), %rsi
	movsd	(%r10,%r8), %xmm0
	movq	(%rcx,%rax), %r10
	movq	(%rcx,%r11), %rcx
	movsd	%xmm0, (%r10,%r8)
	movsd	(%rsi,%r8), %xmm0
	movsd	%xmm0, (%rcx,%r8)
	cmpq	$1, %rdx
	jne	.L127
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L127:
	.cfi_restore_state
	movl	$1, %edx
	jmp	.L126
	.cfi_endproc
.LFE185:
	.size	restriction_vertex, .-restriction_vertex
	.p2align 4
	.type	no_restriction, @function
no_restriction:
.LFB186:
	.cfi_startproc
	ret
	.cfi_endproc
.LFE186:
	.size	no_restriction, .-no_restriction
	.p2align 4
	.type	no_data, @function
no_data:
.LFB187:
	.cfi_startproc
	movslq	%edx, %rdx
	movq	%rdi, %rcx
	movq	%rdi, %rax
	movq	%rdi, -16(%rsp)
	leaq	8(,%rdx,8), %rdi
	movl	%esi, -8(%rsp)
	movq	grid(%rip), %rdx
	addl	$1, %esi
	movslq	%esi, %rsi
	shrq	$32, %rax
	movsd	.LC2(%rip), %xmm0
	movq	24(%rdx), %rdx
	leal	-2(%rax,%rax), %eax
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rsi
	leal	-2(%rcx,%rcx), %edx
	movslq	%edx, %rdx
	movq	16(%rsi), %rcx
	movslq	%eax, %rsi
	addl	$1, %eax
	cltq
	salq	$3, %rsi
	leaq	(%rcx,%rdx,8), %r9
	salq	$3, %rax
	xorl	%ecx, %ecx
.L131:
	movq	(%r9,%rcx,8), %rdx
	movq	(%rdx,%rsi), %r8
	movq	(%rdx,%rax), %rdx
	movsd	%xmm0, (%r8,%rdi)
	movsd	%xmm0, (%rdx,%rdi)
	cmpq	$1, %rcx
	jne	.L132
	ret
	.p2align 4,,10
	.p2align 3
.L132:
	movl	$1, %ecx
	jmp	.L131
	.cfi_endproc
.LFE187:
	.size	no_data, .-no_data
	.p2align 4
	.type	refine_bilinear, @function
refine_bilinear:
.LFB191:
	.cfi_startproc
	movq	%rdi, %rax
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movslq	%edx, %rdx
	movsd	.LC6(%rip), %xmm4
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movsd	.LC7(%rip), %xmm3
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leal	-2(%rax,%rax), %ecx
	movq	grid(%rip), %rax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%ecx, %r14
	movsd	.LC8(%rip), %xmm2
	leal	2(%rcx), %r9d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	salq	$3, %r14
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	24(%rax), %r8
	leaq	8(,%rdx,8), %rax
	xorl	%ebx, %ebx
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	%rdi, -16(%rsp)
	leal	-2(%rdi,%rdi), %edi
	movq	-8(%r8,%rsi,8), %rdx
	leal	2(%rdi), %r12d
	movq	(%rdx), %rdx
	movq	16(%rdx), %r13
	movq	(%r8,%rsi,8), %rdx
	movslq	%edi, %rsi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rsi,8), %r15
.L135:
	movl	%r12d, %ecx
	leal	(%r12,%rbx), %edx
	movq	(%r15,%rbx,8), %rbp
	shrl	$31, %ecx
	addl	%edx, %ecx
	addq	%r14, %rbp
	sarl	%ecx
	movslq	%ecx, %rsi
	movq	0(%r13,%rsi,8), %r8
	movl	%edx, %esi
	shrl	$31, %esi
	addl	%esi, %edx
	andl	$1, %edx
	subl	%esi, %edx
	leal	-1(%rcx,%rdx,2), %edx
	xorl	%ecx, %ecx
	movslq	%edx, %rdx
	movq	0(%r13,%rdx,8), %rdi
.L134:
	leal	(%r9,%rcx), %edx
	movl	%r9d, %r10d
	movl	%edx, %r11d
	shrl	$31, %r10d
	shrl	$31, %r11d
	addl	%edx, %r10d
	addl	%r11d, %edx
	sarl	%r10d
	andl	$1, %edx
	movslq	%r10d, %rsi
	subl	%r11d, %edx
	movq	(%rdi,%rsi,8), %r11
	movq	(%r8,%rsi,8), %rsi
	leal	-1(%r10,%rdx,2), %edx
	movslq	%edx, %rdx
	movsd	(%r11,%rax), %xmm0
	movsd	(%rsi,%rax), %xmm1
	movq	(%r8,%rdx,8), %r10
	movq	(%rdi,%rdx,8), %rdx
	mulsd	%xmm3, %xmm1
	movq	0(%rbp,%rcx,8), %rsi
	addsd	(%r10,%rax), %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm1, %xmm0
	addsd	(%rdx,%rax), %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, (%rsi,%rax)
	cmpq	$1, %rcx
	jne	.L136
	cmpq	$1, %rbx
	jne	.L137
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L136:
	.cfi_restore_state
	movl	$1, %ecx
	jmp	.L134
	.p2align 4,,10
	.p2align 3
.L137:
	movl	$1, %ebx
	jmp	.L135
	.cfi_endproc
.LFE191:
	.size	refine_bilinear, .-refine_bilinear
	.p2align 4
	.type	refine_injection, @function
refine_injection:
.LFB198:
	.cfi_startproc
	movslq	%edi, %r11
	movq	%rdi, %rax
	movq	%rdi, -16(%rsp)
	movslq	%edx, %rdx
	movq	grid(%rip), %rdi
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	shrq	$32, %rax
	movslq	%eax, %r10
	addq	$1, %rdx
	leal	-2(%rax,%rax), %eax
	movq	24(%rdi), %r8
	leaq	0(,%rdx,8), %rdi
	movq	(%r8,%rsi,8), %r9
	movq	(%r9), %r9
	movq	16(%r9), %r9
	movq	(%r9,%r11,8), %r9
	movq	(%r9,%r10,8), %r9
	movsd	(%r9,%rdx,8), %xmm0
	movq	8(%r8,%rsi,8), %rdx
	movq	(%rdx), %rsi
	leal	-2(%r11,%r11), %edx
	movslq	%edx, %rdx
	movq	16(%rsi), %rcx
	movslq	%eax, %rsi
	addl	$1, %eax
	cltq
	salq	$3, %rsi
	leaq	(%rcx,%rdx,8), %r9
	salq	$3, %rax
	xorl	%ecx, %ecx
.L140:
	movq	(%r9,%rcx,8), %rdx
	movq	(%rdx,%rsi), %r8
	movq	(%rdx,%rax), %rdx
	movsd	%xmm0, (%r8,%rdi)
	movsd	%xmm0, (%rdx,%rdi)
	cmpq	$1, %rcx
	jne	.L141
	ret
	.p2align 4,,10
	.p2align 3
.L141:
	movl	$1, %ecx
	jmp	.L140
	.cfi_endproc
.LFE198:
	.size	refine_injection, .-refine_injection
	.p2align 4
	.type	prolongation_vertex, @function
prolongation_vertex:
.LFB213:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movslq	%esi, %rcx
	movl	%edx, %r8d
	movq	%rdi, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movslq	%edi, %r10
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rax, %r14
	movq	%r10, %r13
	salq	$3, %r10
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rcx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$16, %rsp
	.cfi_def_cfa_offset 72
	movq	grid(%rip), %rsi
	movq	%rdi, (%rsp)
	movslq	%r14d, %rdi
	movq	24(%rsi), %rdx
	leaq	0(,%rdi,8), %r11
	movl	%ecx, 8(%rsp)
	movq	(%rdx,%rcx,8), %rax
	movq	8(%rdx,%rcx,8), %rdx
	leal	-2(%r13,%r13), %ecx
	movl	%ecx, -96(%rsp)
	movslq	%ecx, %rcx
	movq	(%rax), %rax
	movq	16(%rax), %r12
	leaq	(%r12,%r10), %rax
	movq	8(%r12,%r10), %r10
	movq	(%rax), %rbx
	movq	%rax, -72(%rsp)
	movq	%r10, -56(%rsp)
	leaq	(%rbx,%r11), %rax
	movq	(%rax), %r9
	movq	%rax, -64(%rsp)
	movslq	%r8d, %rax
	addq	$1, %rax
	leaq	0(,%rax,8), %r15
	movq	%r15, -112(%rsp)
	leaq	8(%r11), %r15
	movq	%r15, -48(%rsp)
	movq	(%rdx), %r15
	movq	16(%r15), %rdx
	movq	%rdx, -104(%rsp)
	movq	8(%rdx,%rcx,8), %rdx
	leal	-2(%r14,%r14), %ecx
	movl	%ecx, -24(%rsp)
	movslq	%ecx, %rcx
	addq	$1, %rcx
	movq	%rdx, -40(%rsp)
	leaq	0(,%rcx,8), %r8
	movq	(%rdx,%rcx,8), %rcx
	movq	%r8, -32(%rsp)
	movq	(%r10,%rdi,8), %rdi
	movl	-96(%rsp), %edx
	movq	-112(%rsp), %r8
	movq	%r11, -16(%rsp)
	movsd	(%rdi,%rax,8), %xmm0
	movq	8(%rbx,%r11), %rdi
	addsd	(%r9,%rax,8), %xmm0
	movsd	.LC5(%rip), %xmm1
	addsd	(%rdi,%rax,8), %xmm0
	movq	8(%r10,%r11), %rdi
	movq	%r9, %r11
	addsd	(%rdi,%rax,8), %xmm0
	mulsd	.LC3(%rip), %xmm0
	xorl	%edi, %edi
	movsd	%xmm0, (%rcx,%rax,8)
	movl	16(%rsi), %eax
	movl	%eax, -116(%rsp)
	movl	%r14d, %eax
	subl	%r13d, %eax
	addl	%eax, %eax
	movl	%eax, -20(%rsp)
	leal	2(%r14), %eax
	movl	%eax, -96(%rsp)
	movl	%r13d, %eax
	movq	%r12, %r13
	movl	%eax, %r12d
.L143:
	movq	-104(%rsp), %rax
	movslq	%edx, %rsi
	movl	-24(%rsp), %ecx
	movl	%edi, -92(%rsp)
	salq	$3, %rsi
	movq	%rdi, -112(%rsp)
	leaq	(%rax,%rsi), %r10
	leal	(%r12,%rdi), %eax
	movq	%rsi, -88(%rsp)
	cltq
	leaq	0(%r13,%rax,8), %rax
	movq	%rax, -80(%rsp)
	movl	%r14d, %eax
.L145:
	cmpl	%ebp, -116(%rsp)
	jle	.L144
	cmpl	(%r15), %edx
	jl	.L144
	cmpl	4(%r15), %edx
	jge	.L144
	movq	(%r10), %rdi
	movq	%rdi, %rsi
	testq	%rdi, %rdi
	je	.L144
	movq	-88(%rsp), %rdi
	addq	8(%r15), %rdi
	cmpl	(%rdi), %ecx
	jge	.L157
	.p2align 4,,10
	.p2align 3
.L144:
	addl	$1, %eax
	addl	$2, %ecx
	cmpl	-96(%rsp), %eax
	jne	.L145
	cmpw	$0, 2(%r9)
	movq	-112(%rsp), %rdi
	je	.L146
	movq	(%r10), %rax
	movq	-32(%rsp), %rsi
	movq	(%rax,%rsi), %rax
	movq	-48(%rsp), %rsi
	movq	(%rbx,%rsi), %rcx
	movsd	(%rcx,%r8), %xmm0
	addsd	(%r9,%r8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r8)
.L146:
	cmpw	$0, 2(%r11)
	je	.L147
	movl	-20(%rsp), %eax
	movq	-40(%rsp), %rbx
	movl	-92(%rsp), %ecx
	addl	%edx, %eax
	cltq
	addl	%r14d, %ecx
	movq	(%rbx,%rax,8), %rax
	movq	-56(%rsp), %rbx
	movslq	%ecx, %rcx
	movq	(%rbx,%rcx,8), %rcx
	movsd	(%rcx,%r8), %xmm0
	addsd	(%r11,%r8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r8)
.L147:
	addl	$2, %edx
	cmpq	$1, %rdi
	je	.L142
	movq	-72(%rsp), %rax
	movl	$1, %edi
	movq	8(%rax), %rbx
	movq	-16(%rsp), %rax
	movq	(%rbx,%rax), %r9
	movq	-64(%rsp), %rax
	movq	8(%rax), %r11
	jmp	.L143
	.p2align 4,,10
	.p2align 3
.L142:
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L157:
	.cfi_restore_state
	cmpl	4(%rdi), %ecx
	jge	.L144
	movq	%rsi, %rdi
	movslq	%ecx, %rsi
	movq	(%rdi,%rsi,8), %rdi
	movq	%rdi, -8(%rsp)
	testq	%rdi, %rdi
	je	.L144
	movq	-80(%rsp), %rsi
	movslq	%eax, %rdi
	movq	(%rsi), %rsi
	movq	(%rsi,%rdi,8), %rsi
	movq	-8(%rsp), %rdi
	movsd	(%rsi,%r8), %xmm0
	movsd	%xmm0, (%rdi,%r8)
	jmp	.L144
	.cfi_endproc
.LFE213:
	.size	prolongation_vertex, .-prolongation_vertex
	.p2align 4
	.type	refine_face_x, @function
refine_face_x:
.LFB215:
	.cfi_startproc
	movq	%rdi, %rax
	movslq	%edx, %rdx
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%edi, %r10d
	shrq	$32, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rax, %r9
	leaq	(%rdx,%rdx,4), %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leaq	(%rdx,%rax,2), %rax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%r9d, %rdx
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	leaq	0(,%rdx,8), %rcx
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	48(%rax), %eax
	movl	%eax, -20(%rsp)
	movq	grid(%rip), %rax
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	movq	24(%rax), %r11
	leaq	0(,%rsi,8), %rax
	movq	%rdi, -16(%rsp)
	movq	%rax, -32(%rsp)
	movq	(%r11,%rsi,8), %rax
	movslq	%edi, %rsi
	leaq	0(,%rsi,8), %rbp
	movq	(%rax), %rax
	movq	16(%rax), %r8
	movq	-8(%r8,%rbp), %rax
	movq	(%r8,%rsi,8), %rdi
	movq	(%rax,%rdx,8), %rax
	movq	(%rdi,%rdx,8), %r15
	movl	4(%r15), %ebx
	testb	$2, (%rax)
	jne	.L159
	cmpw	$0, 2(%rax)
	jne	.L180
.L159:
	testl	%ebx, %ebx
	jne	.L181
.L161:
	movslq	-20(%rsp), %rax
	movq	8(%rdi,%rcx), %r13
	movq	-8(%rdi,%rcx), %rsi
	addq	$1, %rax
	movsd	0(%r13,%rax,8), %xmm0
	subsd	(%rsi,%rax,8), %xmm0
	leaq	(%r15,%rax,8), %r14
	movq	-32(%rsp), %rsi
	mulsd	.LC9(%rip), %xmm0
	movq	%r14, %r12
	movsd	(%r12), %xmm1
	movq	8(%r11,%rsi), %rsi
	movq	(%rsi), %r14
	leal	-2(%r10,%r10), %esi
	movslq	%esi, %rsi
	subsd	%xmm0, %xmm1
	movq	16(%r14), %r14
	movq	(%r14,%rsi,8), %r14
	leal	-2(%r9,%r9), %esi
	movslq	%esi, %r13
	addl	$1, %esi
	movq	(%r14,%r13,8), %r13
	movslq	%esi, %rsi
	movq	(%r14,%rsi,8), %rsi
	movsd	%xmm1, 0(%r13,%rax,8)
	addsd	(%r12), %xmm0
	movsd	%xmm0, (%rsi,%rax,8)
.L160:
	movq	8(%r8,%rbp), %rsi
	movq	(%rsi,%rdx,8), %rax
	movzwl	2(%rax), %edx
	testb	$2, (%rax)
	jne	.L162
	testw	%dx, %dx
	jne	.L163
.L167:
	testl	%ebx, %ebx
	jne	.L158
.L164:
	movslq	-20(%rsp), %rdx
	movq	8(%rdi,%rcx), %rbx
	movq	-8(%rdi,%rcx), %rdi
	movsd	.LC5(%rip), %xmm2
	addq	$1, %rdx
	movsd	(%rbx,%rdx,8), %xmm0
	movq	-32(%rsp), %rbx
	leaq	0(,%rdx,8), %r8
	subsd	(%rdi,%rdx,8), %xmm0
	movq	8(%rsi,%rcx), %rdi
	addq	%r8, %rax
	movq	-8(%rsi,%rcx), %rcx
	movsd	(%rax), %xmm1
	addsd	(%rdi,%rdx,8), %xmm0
	subsd	(%rcx,%rdx,8), %xmm0
	movq	8(%r11,%rbx), %rcx
	mulsd	.LC8(%rip), %xmm0
	movq	(%rcx), %rsi
	leal	-2(%r10,%r10), %ecx
	movslq	%ecx, %rcx
	movq	16(%rsi), %rsi
	movq	8(%rsi,%rcx,8), %rdi
	leaq	(%r15,%r8), %rcx
	leal	-2(%r9,%r9), %esi
	addsd	(%rcx), %xmm1
	movslq	%esi, %r8
	addl	$1, %esi
	movq	(%rdi,%r8,8), %r8
	movslq	%esi, %rsi
	movq	(%rdi,%rsi,8), %rsi
	mulsd	%xmm2, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r8,%rdx,8)
	movsd	(%rcx), %xmm1
	addsd	(%rax), %xmm1
	mulsd	%xmm2, %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi,%rdx,8)
.L158:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L181:
	.cfi_restore_state
	movl	4(%rax), %r12d
	testl	%r12d, %r12d
	jne	.L160
	jmp	.L161
	.p2align 4,,10
	.p2align 3
.L180:
	movl	4(%rax), %r13d
	testl	%r13d, %r13d
	jns	.L160
	jmp	.L159
	.p2align 4,,10
	.p2align 3
.L163:
	movl	4(%rax), %r8d
	testl	%r8d, %r8d
	jns	.L167
.L166:
	testl	%ebx, %ebx
	je	.L168
	movl	4(%rax), %edx
	testl	%edx, %edx
	jne	.L158
.L168:
	movslq	-20(%rsp), %r8
	movq	8(%rsi,%rcx), %rbp
	movq	-8(%rsi,%rcx), %rdx
	addq	$1, %r8
	movsd	0(%rbp,%r8,8), %xmm0
	subsd	(%rdx,%r8,8), %xmm0
	movq	-32(%rsp), %rdx
	mulsd	.LC9(%rip), %xmm0
	movq	8(%r11,%rdx), %rdx
	movq	(%rdx), %rbp
	leal	-2(%r10,%r10), %edx
	movslq	%edx, %rdx
	movq	16(%rbp), %rbp
	movq	16(%rbp,%rdx,8), %r13
	leaq	(%rax,%r8,8), %rbp
	leal	-2(%r9,%r9), %edx
	movsd	0(%rbp), %xmm1
	movslq	%edx, %r14
	addl	$1, %edx
	movq	0(%r13,%r14,8), %r14
	movslq	%edx, %rdx
	subsd	%xmm0, %xmm1
	movq	0(%r13,%rdx,8), %rdx
	movsd	%xmm1, (%r14,%r8,8)
	addsd	0(%rbp), %xmm0
	movsd	%xmm0, (%rdx,%r8,8)
	testl	%ebx, %ebx
	je	.L164
	jmp	.L158
	.p2align 4,,10
	.p2align 3
.L162:
	testw	%dx, %dx
	jne	.L166
	testl	%ebx, %ebx
	je	.L164
	jmp	.L158
	.cfi_endproc
.LFE215:
	.size	refine_face_x, .-refine_face_x
	.p2align 4
	.type	refine_face_y, @function
refine_face_y:
.LFB216:
	.cfi_startproc
	movq	%rdi, %rax
	movslq	%edx, %rdx
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%edi, %r10d
	shrq	$32, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rax, %r14
	leaq	(%rdx,%rdx,4), %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leaq	(%rdx,%rax,2), %rax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%r14d, %rdx
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	52(%rax), %eax
	movl	%eax, -28(%rsp)
	movq	grid(%rip), %rax
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	movq	24(%rax), %r11
	leaq	0(,%rsi,8), %rax
	movq	%rdi, -16(%rsp)
	movq	%rax, -40(%rsp)
	movq	(%r11,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rsi
	movslq	%edi, %rax
	leaq	0(,%rdx,8), %rdi
	leaq	0(,%rax,8), %r9
	movq	(%rsi,%rax,8), %r8
	movq	(%r8,%rdx,8), %rbx
	movq	-8(%r8,%rdi), %rax
	movq	%rbx, -24(%rsp)
	movl	4(%rbx), %ebp
	testb	$2, (%rax)
	jne	.L183
	cmpw	$0, 2(%rax)
	jne	.L205
.L183:
	testl	%ebp, %ebp
	jne	.L206
.L185:
	movq	8(%rsi,%r9), %rax
	movslq	-28(%rsp), %rcx
	movq	(%rax,%rdx,8), %rbx
	movq	-8(%rsi,%r9), %rax
	addq	$1, %rcx
	movq	(%rax,%rdx,8), %rax
	movsd	(%rbx,%rcx,8), %xmm0
	leal	-2(%r14,%r14), %ebx
	movslq	%ebx, %rbx
	subsd	(%rax,%rcx,8), %xmm0
	movq	-24(%rsp), %rax
	mulsd	.LC9(%rip), %xmm0
	leaq	(%rax,%rcx,8), %r13
	movq	-40(%rsp), %rax
	movsd	0(%r13), %xmm1
	movq	8(%r11,%rax), %rax
	movq	(%rax), %rax
	subsd	%xmm0, %xmm1
	movq	16(%rax), %r12
	leal	-2(%r10,%r10), %eax
	movslq	%eax, %r15
	addl	$1, %eax
	movq	(%r12,%r15,8), %r15
	cltq
	movq	(%r12,%rax,8), %rax
	movq	(%r15,%rbx,8), %r15
	movq	(%rax,%rbx,8), %rax
	movsd	%xmm1, (%r15,%rcx,8)
	addsd	0(%r13), %xmm0
	movsd	%xmm0, (%rax,%rcx,8)
.L184:
	movq	8(%r8,%rdi), %rax
	movzwl	2(%rax), %ecx
	testb	$2, (%rax)
	jne	.L186
.L207:
	testw	%cx, %cx
	jne	.L187
.L191:
	testl	%ebp, %ebp
	jne	.L182
.L188:
	movq	8(%rsi,%r9), %rbx
	movq	-8(%rsi,%r9), %rsi
	movslq	-28(%rsp), %rcx
	movsd	.LC5(%rip), %xmm2
	movq	(%rbx,%rdx,8), %r9
	movq	(%rsi,%rdx,8), %rdx
	addq	$1, %rcx
	movsd	(%r9,%rcx,8), %xmm0
	subsd	(%rdx,%rcx,8), %xmm0
	leaq	0(,%rcx,8), %r8
	movq	8(%rbx,%rdi), %rdx
	addq	%r8, %rax
	addq	-24(%rsp), %r8
	movsd	(%rax), %xmm1
	addsd	(%r8), %xmm1
	addsd	(%rdx,%rcx,8), %xmm0
	movq	8(%rsi,%rdi), %rdx
	leal	-2(%r10,%r10), %esi
	movq	-40(%rsp), %rdi
	movslq	%esi, %r9
	addl	$1, %esi
	subsd	(%rdx,%rcx,8), %xmm0
	mulsd	%xmm2, %xmm1
	movslq	%esi, %rsi
	movq	8(%r11,%rdi), %rdx
	mulsd	.LC8(%rip), %xmm0
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	leal	-2(%r14,%r14), %edx
	movslq	%edx, %rdx
	subsd	%xmm0, %xmm1
	movq	(%rdi,%r9,8), %r9
	addq	$1, %rdx
	movq	(%rdi,%rsi,8), %rsi
	movq	(%r9,%rdx,8), %r9
	movq	(%rsi,%rdx,8), %rdx
	movsd	%xmm1, (%r9,%rcx,8)
	movsd	(%r8), %xmm1
	addsd	(%rax), %xmm1
	mulsd	%xmm2, %xmm1
	addsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx,%rcx,8)
.L182:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L206:
	.cfi_restore_state
	movl	4(%rax), %ebx
	testl	%ebx, %ebx
	je	.L185
	movq	8(%r8,%rdi), %rax
	movzwl	2(%rax), %ecx
	testb	$2, (%rax)
	je	.L207
.L186:
	testw	%cx, %cx
	je	.L191
.L190:
	testl	%ebp, %ebp
	je	.L192
	movl	4(%rax), %ecx
	testl	%ecx, %ecx
	jne	.L182
.L192:
	movq	8(%rsi,%r9), %rcx
	movslq	-28(%rsp), %r8
	movq	8(%rcx,%rdi), %rbx
	movq	-8(%rsi,%r9), %rcx
	addq	$1, %r8
	movq	8(%rcx,%rdi), %rcx
	movsd	(%rbx,%r8,8), %xmm0
	movq	-40(%rsp), %rbx
	subsd	(%rcx,%r8,8), %xmm0
	mulsd	.LC9(%rip), %xmm0
	movq	8(%r11,%rbx), %rcx
	leal	-2(%r14,%r14), %ebx
	movslq	%ebx, %rbx
	movq	(%rcx), %rcx
	leaq	2(%rbx), %r12
	leaq	(%rax,%r8,8), %rbx
	movsd	(%rbx), %xmm1
	movq	16(%rcx), %r15
	leal	-2(%r10,%r10), %ecx
	movslq	%ecx, %r13
	subsd	%xmm0, %xmm1
	addl	$1, %ecx
	movq	(%r15,%r13,8), %r13
	movslq	%ecx, %rcx
	movq	(%r15,%rcx,8), %rcx
	movq	0(%r13,%r12,8), %r13
	movq	(%rcx,%r12,8), %rcx
	movsd	%xmm1, 0(%r13,%r8,8)
	addsd	(%rbx), %xmm0
	movsd	%xmm0, (%rcx,%r8,8)
	testl	%ebp, %ebp
	je	.L188
	jmp	.L182
	.p2align 4,,10
	.p2align 3
.L205:
	movl	4(%rax), %r12d
	testl	%r12d, %r12d
	jns	.L184
	testl	%ebp, %ebp
	je	.L185
	jmp	.L206
	.p2align 4,,10
	.p2align 3
.L187:
	movl	4(%rax), %r8d
	testl	%r8d, %r8d
	js	.L190
	testl	%ebp, %ebp
	je	.L188
	jmp	.L182
	.cfi_endproc
.LFE216:
	.size	refine_face_y, .-refine_face_y
	.p2align 4
	.globl	refine_face
	.type	refine_face, @function
refine_face:
.LFB217:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movslq	%edx, %rdx
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	leaq	(%rdx,%rdx,4), %rax
	leaq	(%rdx,%rax,2), %rax
	salq	$4, %rax
	subq	$24, %rsp
	.cfi_def_cfa_offset 48
	movq	_attribute(%rip), %rcx
	movq	%rdi, (%rsp)
	addq	%rcx, %rax
	movl	%esi, 8(%rsp)
	movq	48(%rax), %rbp
	movl	52(%rax), %ebx
	movslq	48(%rax), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	movl	%ebp, %edx
	shrq	$32, %rbp
	salq	$4, %rax
	call	*96(%rcx,%rax)
	movslq	%ebx, %rax
	movq	(%rsp), %rdi
	movl	8(%rsp), %esi
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	movq	%rbp, %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	96(%rax), %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	*%rax
	.cfi_endproc
.LFE217:
	.size	refine_face, .-refine_face
	.p2align 4
	.globl	refine_face_solenoidal
	.type	refine_face_solenoidal, @function
refine_face_solenoidal:
.LFB218:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	%rdi, %rax
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	shrq	$32, %rax
	movl	%edi, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	movq	%rax, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movslq	%edx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movslq	%esi, %rbx
	movl	%ebp, %edx
	movl	%ebx, %esi
	subq	$48, %rsp
	.cfi_def_cfa_offset 96
	movq	%rdi, (%rsp)
	movl	%ebx, 8(%rsp)
	call	refine_face
	movq	grid(%rip), %rax
	movslq	%r13d, %rdi
	movslq	%r12d, %rsi
	movq	24(%rax), %rdx
	movq	(%rdx,%rbx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movl	4(%rax), %esi
	testl	%esi, %esi
	jne	.L210
	leaq	0(%rbp,%rbp,4), %rax
	leaq	0(,%rbx,8), %rcx
	pxor	%xmm4, %xmm4
	movq	8(%rdx,%rcx), %rdx
	leaq	0(%rbp,%rax,2), %rax
	leal	-2(%r12,%r12), %ebp
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	leal	-2(%r13,%r13), %ebx
	movslq	%ebp, %r10
	movq	(%rdx), %rdx
	leaq	16(%rsp), %r8
	salq	$3, %r10
	movq	16(%rdx), %r12
	movslq	48(%rax), %rdx
	movslq	52(%rax), %rax
	leaq	8(,%rdx,8), %rdx
	leaq	8(,%rax,8), %rcx
	movslq	%ebx, %rax
	leaq	(%r12,%rax,8), %r9
.L213:
	movq	8(%r9), %r11
	movq	(%r9), %rdi
	xorl	%eax, %eax
	addq	%r10, %r11
	addq	%r10, %rdi
.L212:
	movq	(%rdi,%rax), %r13
	movq	(%r11,%rax), %r14
	movsd	(%r14,%rdx), %xmm0
	subsd	0(%r13,%rdx), %xmm0
	movq	8(%rdi,%rax), %r14
	addsd	%xmm4, %xmm0
	movsd	(%r14,%rcx), %xmm1
	subsd	0(%r13,%rcx), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%r8,%rax)
	addq	$8, %rax
	cmpq	$16, %rax
	jne	.L212
	addl	$2, %esi
	addq	$8, %r9
	addq	$16, %r8
	cmpl	$4, %esi
	jne	.L213
	movsd	40(%rsp), %xmm3
	movsd	16(%rsp), %xmm5
	movslq	%ebx, %rbx
	movslq	%ebp, %rbp
	movsd	32(%rsp), %xmm6
	movq	8(%r12,%rbx,8), %rdi
	leaq	1(%rbp), %rsi
	movsd	.LC6(%rip), %xmm2
	movapd	%xmm3, %xmm0
	movsd	.LC5(%rip), %xmm7
	movsd	.LC3(%rip), %xmm9
	movapd	%xmm6, %xmm8
	movq	(%rdi,%rsi,8), %rax
	mulsd	%xmm2, %xmm0
	mulsd	%xmm5, %xmm2
	leaq	(%rax,%rdx), %r8
	addq	(%rdi,%rbp,8), %rdx
	addq	%rcx, %rax
	mulsd	%xmm7, %xmm8
	addsd	%xmm5, %xmm0
	movapd	%xmm2, %xmm1
	movsd	(%r8), %xmm2
	addsd	%xmm3, %xmm1
	addsd	%xmm5, %xmm3
	mulsd	%xmm9, %xmm0
	mulsd	%xmm7, %xmm3
	mulsd	%xmm9, %xmm1
	addsd	%xmm8, %xmm0
	addsd	%xmm6, %xmm3
	addsd	%xmm0, %xmm2
	addsd	%xmm8, %xmm1
	subsd	%xmm3, %xmm0
	movsd	%xmm2, (%r8)
	movapd	%xmm3, %xmm2
	subsd	%xmm1, %xmm4
	subsd	%xmm1, %xmm2
	addsd	(%rdx), %xmm2
	movsd	%xmm2, (%rdx)
	movq	(%r12,%rbx,8), %rdx
	movq	(%rdx,%rsi,8), %rbx
	addq	%rcx, %rbx
	addsd	(%rbx), %xmm4
	movsd	%xmm4, (%rbx)
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
.L210:
	addq	$48, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE218:
	.size	refine_face_solenoidal, .-refine_face_solenoidal
	.p2align 4
	.globl	jet
	.type	jet, @function
jet:
.LFB250:
	.cfi_startproc
	movq	%rdi, %rdx
	movl	$-111, %esi
	movl	$-14, %edi
	xorl	%eax, %eax
	movsd	.LC11(%rip), %xmm2
	movsd	.LC10(%rip), %xmm1
	movl	$1, %ecx
	movsd	.LC12(%rip), %xmm3
	jmp	.L227
	.p2align 4,,10
	.p2align 3
.L234:
	cmpl	$110, %eax
	jg	.L233
	cmpl	$77, %eax
	jg	.L221
	leal	-46(%rax), %r8d
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%r8d, %xmm0
	mulsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdx)
.L222:
	leal	-79(%rax), %r8d
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 8(%rdx)
	cvtsi2sdl	%r8d, %xmm0
	mulsd	%xmm2, %xmm0
.L225:
	movsd	%xmm0, 16(%rdx)
.L228:
	addl	$1, %eax
	addl	$1, %ecx
	addq	$24, %rdx
	addl	$1, %edi
	addl	$1, %esi
.L227:
	cmpl	$46, %eax
	ja	.L234
	leal	-15(%rax), %r8d
	movq	$0x000000000, (%rdx)
	cmpl	$95, %r8d
	jbe	.L235
	movq	$0x000000000, 8(%rdx)
	cmpl	$14, %eax
	jle	.L230
.L232:
	movapd	%xmm1, %xmm0
	jmp	.L225
	.p2align 4,,10
	.p2align 3
.L233:
	pxor	%xmm0, %xmm0
	movq	$0x000000000, 8(%rdx)
	cvtsi2sdl	%esi, %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
.L220:
	movq	$0x000000000, 16(%rdx)
	cmpl	$127, %ecx
	jne	.L228
	ret
	.p2align 4,,10
	.p2align 3
.L230:
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%edi, %xmm0
	mulsd	%xmm3, %xmm0
	addsd	%xmm1, %xmm0
	jmp	.L225
.L221:
	movsd	%xmm1, (%rdx)
	cmpl	$78, %eax
	je	.L222
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%esi, %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, 8(%rdx)
	jmp	.L220
.L235:
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%edi, %xmm0
	mulsd	%xmm3, %xmm0
	movsd	%xmm0, 8(%rdx)
	jmp	.L232
	.cfi_endproc
.LFE250:
	.size	jet, .-jet
	.p2align 4
	.type	defaults_expr0, @function
defaults_expr0:
.LFB273:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE273:
	.size	defaults_expr0, .-defaults_expr0
	.p2align 4
	.type	cleanup_expr0, @function
cleanup_expr0:
.LFB275:
	.cfi_startproc
	movq	.LC13(%rip), %rax
	movq	%rax, (%rsi)
	movl	$1234567890, %eax
	ret
	.cfi_endproc
.LFE275:
	.size	cleanup_expr0, .-cleanup_expr0
	.p2align 4
	.type	_boundary0, @function
_boundary0:
.LFB290:
	.cfi_startproc
	movq	%rdx, -32(%rsp)
	movl	$1, %edx
	movq	%rdi, %rax
	movslq	%r8d, %r8
	movl	%ecx, -24(%rsp)
	movl	%esi, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm1
	sall	%cl, %edx
	movq	grid(%rip), %r9
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	cvtsi2sdl	%edx, %xmm0
	movq	%rdi, -16(%rsp)
	movslq	a(%rip), %rdi
	movq	24(%r9), %r9
	movslq	fm(%rip), %rdx
	movslq	alpha(%rip), %rcx
	movq	(%r9,%rsi,8), %rsi
	movq	%rax, %r9
	cltq
	divsd	%xmm0, %xmm1
	leaq	0(,%rax,8), %r10
	sarq	$32, %r9
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rax,8), %rax
	movq	(%rax,%r9,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	mulsd	L0(%rip), %xmm1
	cmpl	$65535, %edi
	jg	.L239
	cmpl	$65535, %edx
	jg	.L240
	movq	8(%rsi,%r10), %rax
	addl	$1, %edi
	addl	$1, %edx
	movslq	%edi, %rdi
	movslq	%edx, %rdx
	movq	(%rax,%r9,8), %rax
	movsd	(%rax,%rdi,8), %xmm2
	mulsd	(%rax,%rdx,8), %xmm2
	cmpl	$65535, %ecx
	jle	.L252
	movq	_constant(%rip), %rax
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L240:
	movq	_constant(%rip), %rax
	movsd	-524288(%rax,%rdx,8), %xmm2
	cmpl	$65535, %ecx
	jle	.L253
	movq	8(%rsi,%r10), %rdx
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%r9,8), %rdx
	mulsd	(%rdx,%rdi,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L239:
	movq	_constant(%rip), %rax
	movsd	-524288(%rax,%rdi,8), %xmm2
	cmpl	$65535, %edx
	jle	.L254
	cmpl	$65535, %ecx
	jle	.L255
	mulsd	-524288(%rax,%rdx,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L254:
	cmpl	$65535, %ecx
	jle	.L256
	movq	8(%rsi,%r10), %rsi
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rsi,%r9,8), %rsi
	mulsd	(%rsi,%rdx,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L252:
	addl	$1, %ecx
	movslq	%ecx, %rcx
	divsd	(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L256:
	movq	8(%rsi,%r10), %rax
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%r9,8), %rax
	mulsd	(%rax,%rdx,8), %xmm2
.L251:
	addl	$1, %ecx
	movslq	%ecx, %rcx
	divsd	(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L253:
	movq	8(%rsi,%r10), %rax
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rax,%r9,8), %rax
	mulsd	(%rax,%rdi,8), %xmm2
	jmp	.L251
	.p2align 4,,10
	.p2align 3
.L255:
	mulsd	-524288(%rax,%rdx,8), %xmm2
	movq	8(%rsi,%r10), %rax
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%r9,8), %rax
	divsd	(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.cfi_endproc
.LFE290:
	.size	_boundary0, .-_boundary0
	.p2align 4
	.type	_boundary0_homogeneous, @function
_boundary0_homogeneous:
.LFB291:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE291:
	.size	_boundary0_homogeneous, .-_boundary0_homogeneous
	.p2align 4
	.type	_boundary1, @function
_boundary1:
.LFB292:
	.cfi_startproc
	movq	%rdx, -32(%rsp)
	movl	$1, %edx
	movq	%rdi, %rax
	movslq	%r8d, %r8
	movl	%ecx, -24(%rsp)
	movl	%esi, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm1
	sall	%cl, %edx
	movq	grid(%rip), %r9
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	cvtsi2sdl	%edx, %xmm0
	movq	%rdi, -16(%rsp)
	movslq	a(%rip), %rdi
	movq	24(%r9), %r9
	movslq	fm(%rip), %rdx
	movslq	alpha(%rip), %rcx
	movq	(%r9,%rsi,8), %rsi
	movslq	%eax, %r9
	sarq	$32, %rax
	divsd	%xmm0, %xmm1
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%r9,8), %rsi
	movq	(%rsi,%rax,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	mulsd	L0(%rip), %xmm1
	cmpl	$65535, %edi
	jg	.L259
	cmpl	$65535, %edx
	jg	.L260
	addl	$1, %edi
	addl	$1, %edx
	movslq	%edi, %rdi
	movslq	%edx, %rdx
	movsd	(%rax,%rdi,8), %xmm2
	mulsd	(%rax,%rdx,8), %xmm2
	cmpl	$65535, %ecx
	jle	.L272
	movq	_constant(%rip), %rax
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L260:
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%rdx,8), %xmm2
	cmpl	$65535, %ecx
	jle	.L273
	addl	$1, %edi
	movslq	%edi, %rdi
	mulsd	(%rax,%rdi,8), %xmm2
	divsd	-524288(%rsi,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L259:
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%rdi,8), %xmm2
	cmpl	$65535, %edx
	jle	.L274
	cmpl	$65535, %ecx
	jle	.L275
	mulsd	-524288(%rsi,%rdx,8), %xmm2
	divsd	-524288(%rsi,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L274:
	addl	$1, %edx
	movslq	%edx, %rdx
	mulsd	(%rax,%rdx,8), %xmm2
	cmpl	$65535, %ecx
	jle	.L271
	divsd	-524288(%rsi,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L273:
	addl	$1, %edi
	movslq	%edi, %rdi
	mulsd	(%rax,%rdi,8), %xmm2
.L271:
	addl	$1, %ecx
	movslq	%ecx, %rcx
	divsd	(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L272:
	addl	$1, %ecx
	movslq	%ecx, %rcx
	divsd	(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L275:
	mulsd	-524288(%rsi,%rdx,8), %xmm2
	jmp	.L271
	.cfi_endproc
.LFE292:
	.size	_boundary1, .-_boundary1
	.p2align 4
	.type	_boundary2, @function
_boundary2:
.LFB294:
	.cfi_startproc
	movq	%rdx, -32(%rsp)
	movl	$1, %edx
	movq	%rdi, %rax
	movslq	%r8d, %r8
	movl	%ecx, -24(%rsp)
	movl	%esi, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm1
	sall	%cl, %edx
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	movslq	%eax, %rcx
	cvtsi2sdl	%edx, %xmm0
	sarq	$32, %rax
	movq	grid(%rip), %rdx
	cmpl	$65535, a(%rip)
	movq	%rdi, -16(%rsp)
	movl	fm(%rip), %r11d
	movq	24(%rdx), %rdx
	movl	alpha(%rip), %r10d
	movslq	a+4(%rip), %r9
	movslq	fm+4(%rip), %rdi
	divsd	%xmm0, %xmm1
	movq	(%rdx,%rsi,8), %rdx
	leaq	0(,%rax,8), %rsi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movslq	alpha+4(%rip), %rcx
	movq	(%rdx,%rax,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	mulsd	L0(%rip), %xmm1
	jg	.L277
	cmpl	$65535, %r11d
	jg	.L278
	movq	8(%rdx,%rsi), %rax
	movsd	8(%rax,%r9,8), %xmm2
	mulsd	8(%rax,%rdi,8), %xmm2
	cmpl	$65535, %r10d
	jle	.L289
	movq	_constant(%rip), %rax
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L278:
	movq	_constant(%rip), %rax
	movsd	-524288(%rax,%rdi,8), %xmm2
	cmpl	$65535, %r10d
	jle	.L290
	movq	8(%rdx,%rsi), %rdx
	mulsd	8(%rdx,%r9,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L277:
	movq	_constant(%rip), %rax
	movsd	-524288(%rax,%r9,8), %xmm2
	cmpl	$65535, %r11d
	jle	.L291
	cmpl	$65535, %r10d
	jle	.L292
	mulsd	-524288(%rax,%rdi,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L291:
	cmpl	$65535, %r10d
	jle	.L293
	movq	8(%rdx,%rsi), %rdx
	mulsd	8(%rdx,%rdi,8), %xmm2
	divsd	-524288(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L289:
	divsd	8(%rax,%rcx,8), %xmm2
	mulsd	%xmm2, %xmm1
	addsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L293:
	movq	8(%rdx,%rsi), %rax
	mulsd	8(%rax,%rdi,8), %xmm2
	divsd	8(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L290:
	movq	8(%rdx,%rsi), %rax
	mulsd	8(%rax,%r9,8), %xmm2
	divsd	8(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L292:
	mulsd	-524288(%rax,%rdi,8), %xmm2
	movq	8(%rdx,%rsi), %rax
	divsd	8(%rax,%rcx,8), %xmm2
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	ret
	.cfi_endproc
.LFE294:
	.size	_boundary2, .-_boundary2
	.p2align 4
	.type	_boundary3, @function
_boundary3:
.LFB296:
	.cfi_startproc
	movq	%rdx, -32(%rsp)
	movl	$1, %edx
	movq	%rdi, %rax
	movslq	%r8d, %r8
	movl	%ecx, -24(%rsp)
	movl	%esi, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm1
	sall	%cl, %edx
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	movl	fm(%rip), %r10d
	cvtsi2sdl	%edx, %xmm0
	movq	grid(%rip), %rdx
	movq	%rdi, -16(%rsp)
	movl	alpha(%rip), %r9d
	movslq	a+4(%rip), %rdi
	movq	24(%rdx), %rdx
	movslq	fm+4(%rip), %rcx
	divsd	%xmm0, %xmm1
	movq	(%rdx,%rsi,8), %rdx
	movslq	%eax, %rsi
	sarq	$32, %rax
	cmpl	$65535, a(%rip)
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx,%rax,8), %rax
	movslq	alpha+4(%rip), %rdx
	movsd	8(%rax,%r8,8), %xmm0
	mulsd	L0(%rip), %xmm1
	jg	.L295
	cmpl	$65535, %r10d
	jg	.L296
	movsd	8(%rax,%rdi,8), %xmm2
	mulsd	8(%rax,%rcx,8), %xmm2
	cmpl	$65535, %r9d
	jle	.L308
	movq	_constant(%rip), %rax
	divsd	-524288(%rax,%rdx,8), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L296:
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%rcx,8), %xmm2
	cmpl	$65535, %r9d
	jle	.L309
	mulsd	8(%rax,%rdi,8), %xmm2
	divsd	-524288(%rsi,%rdx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L295:
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%rdi,8), %xmm2
	cmpl	$65535, %r10d
	jle	.L310
	cmpl	$65535, %r9d
	jle	.L311
	mulsd	-524288(%rsi,%rcx,8), %xmm2
	divsd	-524288(%rsi,%rdx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L310:
	mulsd	8(%rax,%rcx,8), %xmm2
	cmpl	$65535, %r9d
	jle	.L307
	divsd	-524288(%rsi,%rdx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L308:
	divsd	8(%rax,%rdx,8), %xmm2
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L309:
	mulsd	8(%rax,%rdi,8), %xmm2
.L307:
	divsd	8(%rax,%rdx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L311:
	mulsd	-524288(%rsi,%rcx,8), %xmm2
	divsd	8(%rax,%rdx,8), %xmm2
	mulsd	%xmm1, %xmm2
	subsd	%xmm2, %xmm0
	ret
	.cfi_endproc
.LFE296:
	.size	_boundary3, .-_boundary3
	.p2align 4
	.type	set_dtmax_expr0, @function
set_dtmax_expr0:
.LFB304:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE304:
	.size	set_dtmax_expr0, .-set_dtmax_expr0
	.p2align 4
	.type	set_dtmax, @function
set_dtmax:
.LFB305:
	.cfi_startproc
	movsd	DT(%rip), %xmm0
	xorl	%eax, %eax
	movsd	%xmm0, dtmax(%rip)
	ret
	.cfi_endproc
.LFE305:
	.size	set_dtmax, .-set_dtmax
	.p2align 4
	.type	vof, @function
vof:
.LFB309:
	.cfi_startproc
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE309:
	.size	vof, .-vof
	.p2align 4
	.type	alpha_refine, @function
alpha_refine:
.LFB340:
	.cfi_startproc
	movl	%esi, -8(%rsp)
	movslq	%esi, %rsi
	movq	%rdi, %rax
	movslq	%edi, %r11
	movq	grid(%rip), %rcx
	shrq	$32, %rax
	movq	%rdi, -16(%rsp)
	leal	-2(%r11,%r11), %r9d
	movq	%rax, %r10
	movslq	%edx, %rax
	pxor	%xmm3, %xmm3
	movsd	.LC5(%rip), %xmm5
	movq	24(%rcx), %r8
	leaq	(%rax,%rax,4), %rdx
	movslq	%r10d, %rdi
	pxor	%xmm2, %xmm2
	leaq	(%rax,%rdx,2), %rdx
	addq	$1, %rax
	movq	(%r8,%rsi,8), %rcx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r11,8), %rcx
	movq	(%rcx,%rdi,8), %rdi
	leaq	0(,%rax,8), %rcx
	movsd	(%rdi,%rax,8), %xmm4
	movslq	144(%rdx), %rax
	movsd	8(%rdi,%rax,8), %xmm6
	movslq	148(%rdx), %rax
	addsd	%xmm4, %xmm4
	movq	8(%r8,%rsi,8), %rdx
	movslq	%r9d, %rsi
	movsd	8(%rdi,%rax,8), %xmm0
	leal	-2(%r10,%r10), %eax
	leal	2(%r9), %r10d
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rsi,8), %rdi
	movl	$-1, %edx
	movslq	%eax, %rsi
	cvtsi2sdl	%edx, %xmm3
	leal	1(%rax), %edx
	addl	$3, %eax
	salq	$3, %rsi
	movl	%eax, %r8d
	movslq	%edx, %rdx
	shrl	$31, %r8d
	salq	$3, %rdx
	addl	%r8d, %eax
	mulsd	%xmm0, %xmm3
	andl	$1, %eax
	subl	%r8d, %eax
	xorl	%r8d, %r8d
	leal	-1(%rax,%rax), %eax
	cvtsi2sdl	%eax, %xmm2
	mulsd	%xmm5, %xmm3
	mulsd	%xmm0, %xmm2
	mulsd	%xmm5, %xmm2
.L316:
	movl	%r10d, %r9d
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm1
	movq	(%rdi,%r8,8), %r11
	shrl	$31, %r9d
	leal	(%r9,%r8), %eax
	andl	$1, %eax
	subl	%r9d, %eax
	leal	-1(%rax,%rax), %eax
	cvtsi2sdl	%eax, %xmm0
	movq	(%r11,%rsi), %rax
	mulsd	%xmm6, %xmm0
	mulsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm1
	movapd	%xmm1, %xmm0
	subsd	%xmm2, %xmm1
	subsd	%xmm3, %xmm0
	movsd	%xmm0, (%rax,%rcx)
	movq	(%r11,%rdx), %rax
	movsd	%xmm1, (%rax,%rcx)
	cmpq	$1, %r8
	jne	.L317
	ret
	.p2align 4,,10
	.p2align 3
.L317:
	movl	$1, %r8d
	jmp	.L316
	.cfi_endproc
.LFE340:
	.size	alpha_refine, .-alpha_refine
	.p2align 4
	.type	vof_concentration_gradient_x, @function
vof_concentration_gradient_x:
.LFB348:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	%rdi, %rax
	movslq	%esi, %r8
	movslq	%edx, %rdx
	movq	%rdi, 16(%rsp)
	movq	grid(%rip), %rdi
	movslq	%eax, %r9
	sarq	$32, %rax
	leaq	0(,%r9,8), %r10
	addq	$1, %rdx
	movl	%esi, 24(%rsp)
	movq	24(%rdi), %rdi
	movq	(%rdi,%r8,8), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	-8(%rdi,%r10), %r8
	movq	(%rdi,%r9,8), %r9
	movq	8(%rdi,%r10), %rdi
	movq	(%r8,%rax,8), %r8
	movq	(%r9,%rax,8), %r9
	movq	(%rdi,%rax,8), %rdi
	movslq	%ecx, %rax
	movsd	(%r8,%rdx,8), %xmm6
	movsd	(%r9,%rdx,8), %xmm3
	movsd	(%rdi,%rdx,8), %xmm4
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	cmpb	$0, 140(%rdx)
	je	.L319
	movsd	.LC10(%rip), %xmm0
	movapd	%xmm0, %xmm7
	subsd	%xmm6, %xmm7
	movapd	%xmm7, %xmm6
	movapd	%xmm0, %xmm7
	subsd	%xmm4, %xmm0
	subsd	%xmm3, %xmm7
	movapd	%xmm0, %xmm4
	movapd	%xmm7, %xmm3
.L319:
	movsd	.LC5(%rip), %xmm1
	pxor	%xmm0, %xmm0
	comisd	%xmm1, %xmm3
	jb	.L318
	movq	16(%rdx), %r10
	pxor	%xmm0, %xmm0
	cmpq	$zero, %r10
	je	.L318
	movl	$1, %edx
	movl	%esi, %ecx
	pxor	%xmm2, %xmm2
	movsd	.LC10(%rip), %xmm5
	sall	%cl, %edx
	comisd	%xmm1, %xmm4
	cvtsi2sdl	%edx, %xmm2
	divsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm5
	jb	.L337
	addq	$1, %rax
	comisd	%xmm1, %xmm6
	movsd	(%rdi,%rax,8), %xmm2
	divsd	%xmm4, %xmm2
	jb	.L338
	movsd	(%r8,%rax,8), %xmm0
	divsd	%xmm6, %xmm0
	testq	%r10, %r10
	je	.L326
	movsd	(%r9,%rax,8), %xmm1
	movsd	%xmm5, 8(%rsp)
	divsd	%xmm3, %xmm1
	call	*%r10
	movsd	8(%rsp), %xmm5
	divsd	%xmm5, %xmm0
.L318:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L337:
	.cfi_restore_state
	comisd	%xmm1, %xmm6
	jb	.L318
	addq	$1, %rax
	movsd	(%r9,%rax,8), %xmm0
	movsd	(%r8,%rax,8), %xmm1
	divsd	%xmm3, %xmm0
	divsd	%xmm6, %xmm1
	subsd	%xmm1, %xmm0
	divsd	%xmm5, %xmm0
	jmp	.L318
	.p2align 4,,10
	.p2align 3
.L338:
	movsd	(%r9,%rax,8), %xmm0
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm2
	divsd	%xmm5, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L318
	.p2align 4,,10
	.p2align 3
.L326:
	subsd	%xmm0, %xmm2
	addsd	%xmm5, %xmm5
	divsd	%xmm5, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L318
	.cfi_endproc
.LFE348:
	.size	vof_concentration_gradient_x, .-vof_concentration_gradient_x
	.p2align 4
	.type	vof_concentration_gradient_y, @function
vof_concentration_gradient_y:
.LFB349:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	%rdi, %rax
	movslq	%esi, %r8
	movslq	%edx, %rdx
	movq	%rdi, 16(%rsp)
	movq	grid(%rip), %rdi
	addq	$1, %rdx
	movl	%esi, 24(%rsp)
	movq	24(%rdi), %rdi
	movq	(%rdi,%r8,8), %rdi
	movslq	%eax, %r8
	sarq	$32, %rax
	leaq	0(,%rax,8), %r10
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%r8,8), %rdi
	movq	(%rdi,%rax,8), %r9
	movq	-8(%rdi,%r10), %r8
	movslq	%ecx, %rax
	movq	8(%rdi,%r10), %rdi
	movsd	(%r8,%rdx,8), %xmm6
	movsd	(%r9,%rdx,8), %xmm3
	movsd	(%rdi,%rdx,8), %xmm4
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	cmpb	$0, 140(%rdx)
	je	.L341
	movsd	.LC10(%rip), %xmm0
	movapd	%xmm0, %xmm7
	subsd	%xmm6, %xmm7
	movapd	%xmm7, %xmm6
	movapd	%xmm0, %xmm7
	subsd	%xmm4, %xmm0
	subsd	%xmm3, %xmm7
	movapd	%xmm0, %xmm4
	movapd	%xmm7, %xmm3
.L341:
	movsd	.LC5(%rip), %xmm1
	pxor	%xmm0, %xmm0
	comisd	%xmm1, %xmm3
	jb	.L340
	movq	16(%rdx), %r10
	pxor	%xmm0, %xmm0
	cmpq	$zero, %r10
	je	.L340
	movl	$1, %edx
	movl	%esi, %ecx
	pxor	%xmm2, %xmm2
	movsd	.LC10(%rip), %xmm5
	sall	%cl, %edx
	comisd	%xmm1, %xmm4
	cvtsi2sdl	%edx, %xmm2
	divsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm5
	jb	.L359
	addq	$1, %rax
	comisd	%xmm1, %xmm6
	movsd	(%rdi,%rax,8), %xmm2
	divsd	%xmm4, %xmm2
	jb	.L360
	movsd	(%r8,%rax,8), %xmm0
	divsd	%xmm6, %xmm0
	testq	%r10, %r10
	je	.L348
	movsd	(%r9,%rax,8), %xmm1
	movsd	%xmm5, 8(%rsp)
	divsd	%xmm3, %xmm1
	call	*%r10
	movsd	8(%rsp), %xmm5
	divsd	%xmm5, %xmm0
.L340:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L359:
	.cfi_restore_state
	comisd	%xmm1, %xmm6
	jb	.L340
	addq	$1, %rax
	movsd	(%r9,%rax,8), %xmm0
	movsd	(%r8,%rax,8), %xmm1
	divsd	%xmm3, %xmm0
	divsd	%xmm6, %xmm1
	subsd	%xmm1, %xmm0
	divsd	%xmm5, %xmm0
	jmp	.L340
	.p2align 4,,10
	.p2align 3
.L360:
	movsd	(%r9,%rax,8), %xmm0
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm2
	divsd	%xmm5, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L340
	.p2align 4,,10
	.p2align 3
.L348:
	subsd	%xmm0, %xmm2
	addsd	%xmm5, %xmm5
	divsd	%xmm5, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L340
	.cfi_endproc
.LFE349:
	.size	vof_concentration_gradient_y, .-vof_concentration_gradient_y
	.p2align 4
	.type	vof_concentration_refine, @function
vof_concentration_refine:
.LFB352:
	.cfi_startproc
	movq	%rdi, %rax
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%esi, %ecx
	pxor	%xmm1, %xmm1
	shrq	$32, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	%edi, %r15d
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rax, %r14
	movl	$1, %eax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	sall	%cl, %eax
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	cvtsi2sdl	%eax, %xmm1
	movslq	%edx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	leaq	0(%rbp,%rbp,4), %rdx
	movq	%rbp, %r12
	leaq	0(%rbp,%rdx,2), %r13
	salq	$4, %r13
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movsd	.LC10(%rip), %xmm2
	movq	grid(%rip), %rdx
	movq	%rdi, 80(%rsp)
	movq	_attribute(%rip), %rdi
	movapd	%xmm2, %xmm0
	movslq	cm(%rip), %rax
	movl	%esi, 88(%rsp)
	divsd	%xmm1, %xmm0
	movsd	L0(%rip), %xmm1
	addq	%r13, %rdi
	movq	24(%rdx), %rsi
	movl	136(%rdi), %edx
	mulsd	%xmm0, %xmm1
	cmpl	$65535, %eax
	jg	.L363
	movslq	%ecx, %rbx
	movslq	%r15d, %r9
	movslq	%r14d, %r8
	addl	$1, %eax
	movq	(%rsi,%rbx,8), %rcx
	cltq
	pxor	%xmm0, %xmm0
	leaq	0(,%rbx,8), %r10
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r9,8), %rcx
	movq	(%rcx,%r8,8), %rcx
	ucomisd	(%rcx,%rax,8), %xmm0
	jp	.L393
	je	.L364
.L393:
	movslq	%edx, %rax
	addq	$1, %rax
	cmpb	$0, 140(%rdi)
	movsd	(%rcx,%rax,8), %xmm3
	leaq	0(,%rax,8), %r11
	je	.L398
	comisd	%xmm2, %xmm3
	jnb	.L364
.L367:
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	movl	%r12d, %ecx
	movl	%edx, 24(%rsp)
	movq	%rax, 64(%rsp)
	addq	$1, %rbp
	movq	%r8, 56(%rsp)
	movq	%r9, 48(%rsp)
	movq	%r11, 40(%rsp)
	movq	%r10, 32(%rsp)
	movsd	%xmm1, 8(%rsp)
	call	vof_concentration_gradient_x
	movl	24(%rsp), %edx
	movl	88(%rsp), %esi
	movl	%r12d, %ecx
	movsd	8(%rsp), %xmm1
	movapd	%xmm0, %xmm6
	movq	80(%rsp), %rdi
	mulsd	%xmm1, %xmm6
	movsd	%xmm1, 16(%rsp)
	movsd	%xmm6, 8(%rsp)
	call	vof_concentration_gradient_y
	movq	48(%rsp), %r9
	movsd	16(%rsp), %xmm1
	movq	_attribute(%rip), %rdx
	movq	56(%rsp), %r8
	movq	.LC10(%rip), %rsi
	mulsd	%xmm0, %xmm1
	movsd	8(%rsp), %xmm6
	movzbl	140(%rdx,%r13), %r12d
	movq	grid(%rip), %rdx
	leaq	0(,%rbp,8), %r13
	movq	32(%rsp), %r10
	movq	40(%rsp), %r11
	movq	%rsi, %xmm2
	movq	24(%rdx), %rdx
	testb	%r12b, %r12b
	movq	64(%rsp), %rax
	movq	(%rdx,%rbx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r9,8), %rcx
	movq	(%rcx,%r8,8), %rcx
	je	.L370
	movq	%rsi, %xmm0
	subsd	(%rcx,%rax,8), %xmm0
	movsd	(%rcx,%rbp,8), %xmm5
	divsd	%xmm0, %xmm5
.L371:
	movq	8(%rdx,%r10), %rdx
	movslq	cm(%rip), %rax
	leal	-2(%r15,%r15), %r8d
	movsd	.LC14(%rip), %xmm4
	movq	(%rdx), %rdx
	addq	$1, %rax
	mulsd	(%rcx,%rax,8), %xmm4
	leaq	0(,%rax,8), %rbx
	leal	-2(%r14,%r14), %eax
	movq	16(%rdx), %rsi
	movslq	%r8d, %rdx
	leal	4(%rax), %r15d
	leaq	(%rsi,%rdx,8), %rbp
	movq	%rsi, 8(%rsp)
	movslq	%eax, %rdx
	leal	2(%r8), %esi
	movl	%esi, 16(%rsp)
	leaq	0(,%rdx,8), %rsi
	movq	%rsi, 24(%rsp)
	leal	2(%rax), %esi
	movl	%esi, 32(%rsp)
.L375:
	leal	2(%r8), %eax
	pxor	%xmm7, %xmm7
	movq	8(%rsp), %rsi
	movq	0(%rbp), %r10
	movl	%eax, %edx
	movq	24(%rsp), %rdi
	shrl	$31, %edx
	addl	%edx, %eax
	andl	$1, %eax
	subl	%edx, %eax
	leal	-1(%rax,%rax), %edx
	movl	%r8d, %eax
	cvtsi2sdl	%edx, %xmm7
	subl	%edx, %eax
	cltq
	movq	(%rsi,%rax,8), %r14
	movl	32(%rsp), %eax
	mulsd	%xmm6, %xmm7
.L374:
	movl	%eax, %ecx
	movq	(%r14,%rdi), %rsi
	pxor	%xmm0, %xmm0
	shrl	$31, %ecx
	leal	(%rax,%rcx), %edx
	andl	$1, %edx
	subl	%ecx, %edx
	movq	(%r10,%rdi), %rcx
	leal	-1(%rdx,%rdx), %r9d
	cvtsi2sdl	%r9d, %xmm0
	leaq	(%rcx,%r13), %rdx
	addq	%r11, %rcx
	movsd	%xmm5, (%rdx)
	movsd	(%rsi,%rbx), %xmm3
	leal	-2(%rax), %esi
	subl	%r9d, %esi
	mulsd	%xmm7, %xmm3
	movslq	%esi, %rsi
	movq	(%r10,%rsi,8), %rsi
	mulsd	%xmm1, %xmm0
	divsd	%xmm4, %xmm3
	addsd	%xmm5, %xmm3
	movsd	%xmm3, (%rdx)
	mulsd	(%rsi,%rbx), %xmm0
	divsd	%xmm4, %xmm0
	addsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdx)
	testb	%r12b, %r12b
	je	.L372
	movapd	%xmm2, %xmm3
	subsd	(%rcx), %xmm3
.L373:
	mulsd	%xmm3, %xmm0
	addl	$1, %eax
	addq	$8, %rdi
	movsd	%xmm0, (%rdx)
	cmpl	%eax, %r15d
	jne	.L374
	addl	$1, %r8d
	addq	$8, %rbp
	cmpl	16(%rsp), %r8d
	jne	.L375
.L362:
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L363:
	.cfi_restore_state
	movq	_constant(%rip), %r8
	pxor	%xmm0, %xmm0
	movsd	-524288(%r8,%rax,8), %xmm3
	ucomisd	%xmm0, %xmm3
	jp	.L394
	je	.L377
.L394:
	movslq	%ecx, %rax
	movslq	%r15d, %r10
	movslq	%r14d, %r9
	movq	(%rsi,%rax,8), %r11
	leaq	0(,%rax,8), %rbx
	movq	%rbx, 8(%rsp)
	movslq	%edx, %rbx
	movq	(%r11), %r11
	addq	$1, %rbx
	cmpb	$0, 140(%rdi)
	leaq	0(,%rbx,8), %r8
	movq	16(%r11), %r11
	movq	(%r11,%r10,8), %r11
	movq	(%r11,%r9,8), %r11
	movsd	(%r11,%rbx,8), %xmm4
	je	.L399
	comisd	%xmm2, %xmm4
	jnb	.L377
.L380:
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	movl	%r12d, %ecx
	movl	%edx, 32(%rsp)
	movq	%r9, 72(%rsp)
	addq	$1, %rbp
	movq	%r10, 64(%rsp)
	movq	%rax, 56(%rsp)
	movq	%r8, 48(%rsp)
	movsd	%xmm3, 40(%rsp)
	movsd	%xmm1, 16(%rsp)
	call	vof_concentration_gradient_x
	movl	32(%rsp), %edx
	movl	88(%rsp), %esi
	movl	%r12d, %ecx
	movsd	16(%rsp), %xmm1
	movapd	%xmm0, %xmm5
	movq	80(%rsp), %rdi
	mulsd	%xmm1, %xmm5
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm5, 16(%rsp)
	call	vof_concentration_gradient_y
	movq	56(%rsp), %rax
	movq	64(%rsp), %r10
	leaq	0(,%rbp,8), %rcx
	movq	.LC10(%rip), %rsi
	movq	_attribute(%rip), %rdx
	movapd	%xmm0, %xmm6
	movsd	24(%rsp), %xmm1
	movq	72(%rsp), %r9
	movq	%rsi, %xmm2
	movq	grid(%rip), %rsi
	movq	48(%rsp), %r8
	mulsd	%xmm1, %xmm6
	movsd	16(%rsp), %xmm5
	movzbl	140(%rdx,%r13), %edx
	movq	24(%rsi), %rdi
	movsd	40(%rsp), %xmm3
	testb	%dl, %dl
	movq	(%rdi,%rax,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r10,8), %rax
	movq	(%rax,%r9,8), %rax
	je	.L383
	movapd	%xmm2, %xmm0
	subsd	(%rax,%rbx,8), %xmm0
	movsd	(%rax,%rbp,8), %xmm7
	divsd	%xmm0, %xmm7
.L384:
	movq	8(%rsp), %rbx
	leal	-2(%r15,%r15), %esi
	leal	-2(%r14,%r14), %eax
	movsd	.LC14(%rip), %xmm4
	movslq	%esi, %r9
	movslq	%eax, %r11
	leal	2(%rax), %r10d
	movq	8(%rdi,%rbx), %rdi
	mulsd	%xmm3, %xmm4
	salq	$3, %r11
	leal	2(%rsi), %ebx
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	leaq	(%rdi,%r9,8), %rbp
	xorl	%edi, %edi
.L388:
	movl	%ebx, %esi
	pxor	%xmm1, %xmm1
	movq	0(%rbp,%rdi,8), %r12
	shrl	$31, %esi
	leal	(%rsi,%rdi), %eax
	addq	%r11, %r12
	andl	$1, %eax
	subl	%esi, %eax
	xorl	%esi, %esi
	leal	-1(%rax,%rax), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm5, %xmm1
	mulsd	%xmm3, %xmm1
	divsd	%xmm4, %xmm1
	addsd	%xmm7, %xmm1
.L387:
	movl	%r10d, %r14d
	pxor	%xmm0, %xmm0
	movq	(%r12,%rsi,8), %rax
	shrl	$31, %r14d
	leal	(%r14,%rsi), %r13d
	leaq	(%rax,%rcx), %r9
	addq	%r8, %rax
	andl	$1, %r13d
	subl	%r14d, %r13d
	leal	-1(%r13,%r13), %r13d
	cvtsi2sdl	%r13d, %xmm0
	mulsd	%xmm6, %xmm0
	mulsd	%xmm3, %xmm0
	divsd	%xmm4, %xmm0
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%r9)
	testb	%dl, %dl
	je	.L385
	movapd	%xmm2, %xmm8
	subsd	(%rax), %xmm8
.L386:
	mulsd	%xmm8, %xmm0
	movsd	%xmm0, (%r9)
	cmpq	$1, %rsi
	jne	.L391
	cmpq	$1, %rdi
	je	.L362
	movl	$1, %edi
	jmp	.L388
	.p2align 4,,10
	.p2align 3
.L399:
	comisd	%xmm4, %xmm0
	jb	.L380
	.p2align 4,,10
	.p2align 3
.L377:
	addl	$1, %ecx
	leal	-2(%r14,%r14), %eax
	leaq	8(,%rbp,8), %rdi
	movslq	%ecx, %rcx
	movq	(%rsi,%rcx,8), %rdx
	movslq	%eax, %rsi
	addl	$1, %eax
	cltq
	salq	$3, %rsi
	movq	(%rdx), %rcx
	leal	-2(%r15,%r15), %edx
	salq	$3, %rax
	movslq	%edx, %rdx
	movq	16(%rcx), %rcx
	leaq	(%rcx,%rdx,8), %r9
	xorl	%ecx, %ecx
.L382:
	movq	(%r9,%rcx,8), %rdx
	movq	(%rdx,%rsi), %r8
	movq	(%rdx,%rax), %rdx
	movq	$0x000000000, (%r8,%rdi)
	movq	$0x000000000, (%rdx,%rdi)
	cmpq	$1, %rcx
	je	.L362
	movl	$1, %ecx
	jmp	.L382
	.p2align 4,,10
	.p2align 3
.L398:
	comisd	%xmm3, %xmm0
	jb	.L367
	.p2align 4,,10
	.p2align 3
.L364:
	movq	8(%rsi,%r10), %rdx
	leal	-2(%r14,%r14), %eax
	leaq	8(,%rbp,8), %rdi
	movslq	%eax, %rsi
	addl	$1, %eax
	movq	(%rdx), %rcx
	leal	-2(%r15,%r15), %edx
	cltq
	salq	$3, %rsi
	movslq	%edx, %rdx
	salq	$3, %rax
	movq	16(%rcx), %rcx
	leaq	(%rcx,%rdx,8), %r9
	xorl	%ecx, %ecx
.L369:
	movq	(%r9,%rcx,8), %rdx
	movq	(%rdx,%rsi), %r8
	movq	(%rdx,%rax), %rdx
	movq	$0x000000000, (%r8,%rdi)
	movq	$0x000000000, (%rdx,%rdi)
	cmpq	$1, %rcx
	je	.L362
	movl	$1, %ecx
	jmp	.L369
	.p2align 4,,10
	.p2align 3
.L391:
	movl	$1, %esi
	jmp	.L387
	.p2align 4,,10
	.p2align 3
.L372:
	movsd	(%rcx), %xmm3
	jmp	.L373
	.p2align 4,,10
	.p2align 3
.L385:
	movsd	(%rax), %xmm8
	jmp	.L386
	.p2align 4,,10
	.p2align 3
.L370:
	movsd	(%rcx,%rbp,8), %xmm5
	divsd	(%rcx,%rax,8), %xmm5
	jmp	.L371
	.p2align 4,,10
	.p2align 3
.L383:
	movsd	(%rax,%rbp,8), %xmm7
	divsd	(%rax,%rbx,8), %xmm7
	jmp	.L384
	.cfi_endproc
.LFE352:
	.size	vof_concentration_refine, .-vof_concentration_refine
	.p2align 4
	.type	defaults_1, @function
defaults_1:
.LFB354:
	.cfi_startproc
	movq	interfaces(%rip), %r8
	testq	%r8, %r8
	je	.L401
	movl	(%r8), %esi
	testl	%esi, %esi
	js	.L401
	movq	_attribute(%rip), %rdi
	jmp	.L404
	.p2align 4,,10
	.p2align 3
.L415:
	movl	4(%r8), %esi
	addq	$4, %r8
	testl	%esi, %esi
	js	.L401
.L404:
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	%rdi, %rax
	movq	128(%rax), %rdx
	movq	$fraction_refine, 96(%rax)
	movq	$fraction_refine, 112(%rax)
	movl	$1, 88(%rax)
	testq	%rdx, %rdx
	jne	.L413
	movl	4(%r8), %esi
	addq	$4, %r8
	testl	%esi, %esi
	jns	.L404
.L401:
	xorl	%eax, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L403:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rdi, %rax
	movq	$restriction_volume_average, 104(%rax)
	movq	$vof_concentration_refine, 96(%rax)
	movq	$vof_concentration_refine, 112(%rax)
	movl	$1, 88(%rax)
	movl	%esi, 136(%rax)
.L413:
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L403
	jmp	.L415
	.cfi_endproc
.LFE354:
	.size	defaults_1, .-defaults_1
	.p2align 4
	.type	stability_0, @function
stability_0:
.LFB358:
	.cfi_startproc
	movsd	.LC5(%rip), %xmm0
	movsd	CFL(%rip), %xmm1
	comisd	%xmm0, %xmm1
	jbe	.L417
	movsd	%xmm0, CFL(%rip)
.L417:
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE358:
	.size	stability_0, .-stability_0
	.p2align 4
	.type	tracer_advection_0, @function
tracer_advection_0:
.LFB367:
	.cfi_startproc
	movslq	f(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$refine_bilinear, 96(%rax)
	movl	$1, 88(%rax)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE367:
	.size	tracer_advection_0, .-tracer_advection_0
	.p2align 4
	.type	curvature_restriction, @function
curvature_restriction:
.LFB374:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	%rdi, %rax
	leal	-2(%rdi,%rdi), %ecx
	pxor	%xmm4, %xmm4
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	shrq	$32, %rax
	movsd	.LC2(%rip), %xmm0
	xorl	%r10d, %r10d
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	leal	-2(%rax,%rax), %eax
	movapd	%xmm4, %xmm1
	movapd	%xmm4, %xmm2
	movslq	%eax, %rbx
	movsd	.LC10(%rip), %xmm5
	salq	$3, %rbx
	movq	%rdi, -16(%rsp)
	movq	grid(%rip), %rdi
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movq	24(%rdi), %r8
	movslq	%esi, %rsi
	movslq	%edx, %rdi
	leaq	0(,%rsi,8), %r9
	addq	$1, %rdi
	movq	(%r8,%rsi,8), %rdx
	movslq	%ecx, %rsi
	leaq	0(,%rdi,8), %r11
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rsi,8), %rbp
	leal	1(%rax), %edx
	movslq	%edx, %rdx
	salq	$3, %rdx
.L426:
	movq	0(%rbp,%r10,8), %rsi
	movq	(%rsi,%rbx), %r14
	movsd	(%r14,%r11), %xmm3
	ucomisd	%xmm0, %xmm3
	jp	.L431
	je	.L422
.L431:
	addsd	%xmm3, %xmm2
	addsd	%xmm5, %xmm1
.L422:
	movq	(%rsi,%rdx), %rsi
	movsd	(%rsi,%r11), %xmm3
	ucomisd	%xmm0, %xmm3
	jp	.L432
	je	.L424
.L432:
	addsd	%xmm3, %xmm2
	addsd	%xmm5, %xmm1
.L424:
	cmpq	$1, %r10
	jne	.L429
	addl	$2, %ecx
	addl	$2, %eax
	sarl	%ecx
	sarl	%eax
	ucomisd	%xmm4, %xmm1
	jp	.L433
	jne	.L433
.L427:
	movq	-8(%r8,%r9), %rdx
	movslq	%ecx, %rcx
	cltq
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	movsd	%xmm0, (%rax,%rdi,8)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L429:
	.cfi_restore_state
	movl	$1, %r10d
	jmp	.L426
	.p2align 4,,10
	.p2align 3
.L433:
	divsd	%xmm1, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L427
	.cfi_endproc
.LFE374:
	.size	curvature_restriction, .-curvature_restriction
	.p2align 4
	.type	curvature_prolongation, @function
curvature_prolongation:
.LFB375:
	.cfi_startproc
	movq	%rdi, %rax
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movslq	%edx, %rdx
	movsd	.LC2(%rip), %xmm2
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movsd	.LC10(%rip), %xmm5
	pxor	%xmm4, %xmm4
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leal	-2(%rax,%rax), %ecx
	movq	grid(%rip), %rax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	xorl	%ebp, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	24(%rax), %r8
	leal	2(%rcx), %ebx
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movslq	%esi, %rax
	movq	%rdi, -16(%rsp)
	leal	-2(%rdi,%rdi), %edi
	movq	-8(%r8,%rax,8), %rsi
	movq	(%r8,%rax,8), %rax
	leal	2(%rdi), %r14d
	movq	(%rax), %rax
	movq	(%rsi), %rsi
	movq	16(%rax), %rax
	movq	16(%rsi), %r15
	leaq	8(,%rdx,8), %rsi
	movslq	%edi, %rdx
	leaq	(%rax,%rdx,8), %r9
	movslq	%ecx, %rax
	movq	%r15, %r10
	salq	$3, %rax
	movq	%rax, -24(%rsp)
.L446:
	movl	%r14d, %ecx
	leal	(%r14,%rbp), %edx
	movq	-24(%rsp), %r13
	xorl	%r12d, %r12d
	shrl	$31, %ecx
	addq	(%r9,%rbp,8), %r13
	leal	(%rdx,%rcx), %eax
	andl	$1, %eax
	subl	%ecx, %eax
	leal	-1(%rax,%rax), %r8d
	movl	%edx, %eax
	shrl	$31, %eax
	movslq	%r8d, %r8
	addl	%edx, %eax
	salq	$3, %r8
	sarl	%eax
	cltq
	leaq	(%r10,%rax,8), %r15
	movq	%r15, %r11
.L445:
	leal	(%rbx,%r12), %eax
	movl	%ebx, %edx
	movq	%r9, -32(%rsp)
	movapd	%xmm4, %xmm0
	movl	%eax, %ecx
	shrl	$31, %edx
	movl	$2, %r15d
	movapd	%xmm4, %xmm1
	shrl	$31, %ecx
	addl	%eax, %edx
	addl	%ecx, %eax
	sarl	%edx
	andl	$1, %eax
	movslq	%edx, %rdi
	subl	%ecx, %eax
	salq	$3, %rdi
	leal	-1(%rdx,%rax,2), %edx
	movq	%r11, %rax
	movslq	%edx, %rdx
	salq	$3, %rdx
.L436:
	movq	(%rax), %rcx
	movq	(%rcx,%rdi), %r9
	movsd	(%r9,%rsi), %xmm3
	ucomisd	%xmm2, %xmm3
	jp	.L450
	je	.L438
.L450:
	addsd	%xmm3, %xmm1
	addsd	%xmm5, %xmm0
.L438:
	movq	(%rcx,%rdx), %rcx
	movsd	(%rcx,%rsi), %xmm3
	ucomisd	%xmm2, %xmm3
	jp	.L440
	je	.L442
.L440:
	addsd	%xmm3, %xmm1
	addsd	%xmm5, %xmm0
.L442:
	addq	%r8, %rax
	cmpl	$1, %r15d
	je	.L437
	movl	$1, %r15d
	jmp	.L436
	.p2align 4,,10
	.p2align 3
.L437:
	ucomisd	%xmm4, %xmm0
	movq	-32(%rsp), %r9
	jp	.L451
	movapd	%xmm2, %xmm3
	je	.L443
.L451:
	divsd	%xmm0, %xmm1
	movapd	%xmm1, %xmm3
.L443:
	movq	0(%r13,%r12,8), %rax
	movsd	%xmm3, (%rax,%rsi)
	cmpq	$1, %r12
	jne	.L448
	cmpq	$1, %rbp
	jne	.L449
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L448:
	.cfi_restore_state
	movl	$1, %r12d
	jmp	.L445
	.p2align 4,,10
	.p2align 3
.L449:
	movl	$1, %ebp
	jmp	.L446
	.cfi_endproc
.LFE375:
	.size	curvature_prolongation, .-curvature_prolongation
	.p2align 4
	.type	refine_h_x, @function
refine_h_x:
.LFB380:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movslq	%edx, %rdx
	movq	.LC17(%rip), %xmm1
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movsd	.LC2(%rip), %xmm2
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movapd	%xmm1, %xmm5
	movapd	%xmm1, %xmm4
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	$1, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	leal	-2(%rdi,%rdi), %ebx
	leal	-2(%rbx), %r11d
	movq	%rdi, -16(%rsp)
	leal	-2(%rax,%rax), %edi
	movq	grid(%rip), %rax
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movq	24(%rax), %rax
	movslq	%esi, %rsi
	movl	%ebx, -48(%rsp)
	leaq	0(,%rsi,8), %rcx
	movl	%edi, -44(%rsp)
	movq	%rax, -32(%rsp)
	movq	(%rax,%rsi,8), %rax
	movq	%rcx, -24(%rsp)
	movq	(%rax), %r8
	leaq	1(%rdx), %rax
	movq	%rax, -40(%rsp)
	leaq	0(,%rax,8), %r12
	movslq	%ebx, %rax
	leaq	-16(,%rax,8), %r10
	movslq	%edi, %rax
	movl	(%r8), %esi
	movq	16(%r8), %r15
	salq	$3, %rax
	movq	%rax, -56(%rsp)
	leal	2(%rdi), %eax
	movl	%eax, -60(%rsp)
.L473:
	movq	16(%r15,%r10), %rax
	movl	-44(%rsp), %edi
	movq	-56(%rsp), %r9
	movq	%rax, -72(%rsp)
.L472:
	movq	-72(%rsp), %rax
	movq	%r10, %rcx
	movl	$-2, %edx
	movq	(%rax,%r9), %r14
	movl	%r11d, %eax
	addq	%r12, %r14
	movsd	(%r14), %xmm0
.L469:
	cmpl	%eax, %esi
	jg	.L454
	cmpl	%eax, 4(%r8)
	jle	.L454
	movq	(%r15,%rcx), %rbx
	testq	%rbx, %rbx
	je	.L454
	movq	8(%r8), %r13
	addq	%rcx, %r13
	cmpl	%edi, 0(%r13)
	jg	.L454
	cmpl	%edi, 4(%r13)
	jle	.L454
	movq	(%rbx,%r9), %rbx
	testq	%rbx, %rbx
	je	.L454
	testb	$2, (%rbx)
	je	.L552
.L455:
	movl	4(%rbx), %r13d
	testl	%r13d, %r13d
	js	.L454
	movsd	(%rbx,%r12), %xmm3
	comisd	.LC15(%rip), %xmm3
	jbe	.L538
	movsd	.LC16(%rip), %xmm8
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	movsd	.LC18(%rip), %xmm9
	subsd	%xmm8, %xmm6
	movapd	%xmm6, %xmm8
	andpd	%xmm4, %xmm8
	comisd	%xmm8, %xmm9
	jb	.L454
.L458:
	pxor	%xmm9, %xmm9
	comisd	.LC15(%rip), %xmm0
	cvtsi2sdl	%edx, %xmm9
	addsd	%xmm9, %xmm6
	andpd	%xmm7, %xmm6
	jbe	.L541
	movapd	%xmm0, %xmm8
	subsd	.LC16(%rip), %xmm8
.L466:
	andpd	%xmm8, %xmm7
	comisd	%xmm6, %xmm7
	jbe	.L454
	addsd	%xmm9, %xmm3
	movapd	%xmm3, %xmm0
	movsd	%xmm3, (%r14)
	.p2align 4,,10
	.p2align 3
.L454:
	addl	$1, %edx
	addl	$1, %eax
	addq	$8, %rcx
	cmpl	$3, %edx
	jne	.L469
.L553:
	ucomisd	%xmm2, %xmm0
	jp	.L470
	movl	$0, %eax
	cmove	%eax, %ebp
.L470:
	movl	-60(%rsp), %ebx
	addl	$1, %edi
	addq	$8, %r9
	cmpl	%edi, %ebx
	jne	.L472
	movl	-48(%rsp), %eax
	addl	$1, %r11d
	addq	$8, %r10
	cmpl	%r11d, %eax
	jne	.L473
	testb	%bpl, %bpl
	jne	.L453
	sarl	%ebx
	movq	-24(%rsp), %rcx
	addl	$2, %eax
	xorl	%r9d, %r9d
	movl	%ebx, %edi
	movq	-32(%rsp), %rbx
	sarl	%eax
	movq	.LC17(%rip), %xmm3
	movq	-8(%rbx,%rcx), %rdx
	movslq	%eax, %rcx
	movq	-40(%rsp), %rbx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %r10
	movslq	%edi, %rcx
	salq	$3, %rcx
	leaq	(%r10,%rcx), %r8
	movq	(%r8), %rdx
	movsd	(%rdx,%rbx,8), %xmm1
	movq	$-1, %rdx
	movapd	%xmm1, %xmm0
	andpd	%xmm3, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%r9b
.L477:
	movq	(%r8,%rdx,8), %rsi
	movsd	(%rsi,%r12), %xmm0
	ucomisd	%xmm2, %xmm0
	jp	.L515
	je	.L453
.L515:
	xorl	%esi, %esi
	andpd	%xmm3, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%sil
	cmpl	%esi, %r9d
	jne	.L453
	addq	$1, %rdx
	cmpq	$2, %rdx
	jne	.L477
	movsd	.LC15(%rip), %xmm4
	comisd	%xmm4, %xmm1
	jbe	.L543
	movsd	.LC16(%rip), %xmm5
	subsd	%xmm5, %xmm1
.L480:
	movq	8(%r10,%rcx), %rdx
	movq	-40(%rsp), %rbx
	mulsd	.LC20(%rip), %xmm1
	movsd	(%rdx,%rbx,8), %xmm0
	comisd	%xmm4, %xmm0
	jbe	.L544
	movapd	%xmm0, %xmm3
	subsd	%xmm5, %xmm3
.L484:
	movq	-8(%r10,%rcx), %rdx
	movq	-40(%rsp), %rbx
	addsd	%xmm3, %xmm1
	movsd	(%rdx,%rbx,8), %xmm3
	comisd	%xmm4, %xmm3
	jbe	.L546
	movapd	%xmm3, %xmm6
	subsd	%xmm5, %xmm6
.L488:
	addsd	%xmm6, %xmm1
	mulsd	.LC8(%rip), %xmm1
	pxor	%xmm6, %xmm6
	cvtsi2sdl	%r9d, %xmm6
	comisd	%xmm4, %xmm0
	mulsd	%xmm5, %xmm6
	addsd	%xmm6, %xmm1
	jbe	.L548
	subsd	%xmm5, %xmm0
.L492:
	comisd	%xmm4, %xmm3
	jbe	.L549
	subsd	%xmm5, %xmm3
.L496:
	subsd	%xmm3, %xmm0
	leal	-2(%rax,%rax), %eax
	movsd	.LC3(%rip), %xmm3
	movsd	.LC5(%rip), %xmm5
	leal	-2(%rdi,%rdi), %esi
	movslq	%eax, %rdx
	leal	2(%rax), %r8d
	xorl	%ecx, %ecx
	movslq	%esi, %rdi
	leaq	(%r15,%rdx,8), %r9
	addl	$2, %esi
	mulsd	%xmm0, %xmm3
	salq	$3, %rdi
.L501:
	movl	%r8d, %edx
	movq	(%r9,%rcx,8), %r11
	shrl	$31, %edx
	leal	(%rdx,%rcx), %eax
	addq	%rdi, %r11
	andl	$1, %eax
	subl	%edx, %eax
	leal	-1(%rax,%rax), %ebx
	xorl	%eax, %eax
.L500:
	movq	(%r11,%rax,8), %r10
	addq	%r12, %r10
	ucomisd	(%r10), %xmm2
	jp	.L498
	jne	.L498
	movl	%esi, %ebp
	pxor	%xmm0, %xmm0
	pxor	%xmm4, %xmm4
	shrl	$31, %ebp
	cvtsi2sdl	%ebx, %xmm4
	leal	0(%rbp,%rax), %edx
	andl	$1, %edx
	subl	%ebp, %edx
	leal	-1(%rdx,%rdx), %edx
	mulsd	%xmm5, %xmm4
	cvtsi2sdl	%edx, %xmm0
	mulsd	%xmm3, %xmm0
	addsd	%xmm1, %xmm0
	subsd	%xmm4, %xmm0
	movsd	%xmm0, (%r10)
.L498:
	cmpq	$1, %rax
	jne	.L506
	cmpq	$1, %rcx
	je	.L453
	movl	$1, %ecx
	jmp	.L501
	.p2align 4,,10
	.p2align 3
.L453:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L552:
	.cfi_restore_state
	cmpw	$0, 2(%rbx)
	jne	.L455
	addl	$1, %edx
	addl	$1, %eax
	addq	$8, %rcx
	cmpl	$3, %edx
	jne	.L469
	jmp	.L553
	.p2align 4,,10
	.p2align 3
.L543:
	movsd	.LC19(%rip), %xmm0
	movsd	.LC16(%rip), %xmm5
	comisd	%xmm1, %xmm0
	jbe	.L480
	addsd	%xmm5, %xmm1
	jmp	.L480
	.p2align 4,,10
	.p2align 3
.L506:
	movl	$1, %eax
	jmp	.L500
	.p2align 4,,10
	.p2align 3
.L549:
	movsd	.LC19(%rip), %xmm4
	comisd	%xmm3, %xmm4
	jbe	.L496
	addsd	%xmm5, %xmm3
	jmp	.L496
	.p2align 4,,10
	.p2align 3
.L548:
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm0, %xmm6
	jbe	.L492
	addsd	%xmm5, %xmm0
	jmp	.L492
	.p2align 4,,10
	.p2align 3
.L546:
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm3, %xmm6
	movapd	%xmm3, %xmm6
	jbe	.L488
	addsd	%xmm5, %xmm6
	jmp	.L488
	.p2align 4,,10
	.p2align 3
.L544:
	movsd	.LC19(%rip), %xmm3
	comisd	%xmm0, %xmm3
	movapd	%xmm0, %xmm3
	jbe	.L484
	addsd	%xmm5, %xmm3
	jmp	.L484
.L538:
	movsd	.LC19(%rip), %xmm7
	comisd	%xmm3, %xmm7
	jbe	.L539
	movsd	.LC16(%rip), %xmm8
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	movsd	.LC18(%rip), %xmm9
	addsd	%xmm8, %xmm6
	andpd	%xmm5, %xmm6
	comisd	%xmm6, %xmm9
	jb	.L454
.L461:
	movapd	%xmm8, %xmm6
	addsd	%xmm3, %xmm6
	jmp	.L458
.L539:
	movsd	.LC18(%rip), %xmm10
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	andpd	%xmm1, %xmm6
	comisd	%xmm6, %xmm10
	jb	.L454
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm3, %xmm6
	ja	.L554
	movapd	%xmm3, %xmm6
	jmp	.L458
.L541:
	movsd	.LC19(%rip), %xmm11
	movapd	%xmm0, %xmm8
	comisd	%xmm0, %xmm11
	jbe	.L466
	movsd	.LC16(%rip), %xmm8
	addsd	%xmm0, %xmm8
	jmp	.L466
.L554:
	movq	.LC16(%rip), %rbx
	movq	%rbx, %xmm8
	jmp	.L461
	.cfi_endproc
.LFE380:
	.size	refine_h_x, .-refine_h_x
	.p2align 4
	.type	refine_h_y, @function
refine_h_y:
.LFB381:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movslq	%edx, %r15
	movq	grid(%rip), %rcx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	.LC17(%rip), %xmm1
	addq	$1, %r15
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movsd	.LC2(%rip), %xmm2
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movapd	%xmm1, %xmm5
	movapd	%xmm1, %xmm4
	leaq	0(,%r15,8), %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	shrq	$32, %rbx
	leal	-2(%rbx,%rbx), %r11d
	movq	24(%rcx), %rbx
	movl	%esi, -8(%rsp)
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	%rdi, -16(%rsp)
	movq	(%rbx,%rsi,8), %rcx
	leaq	0(,%rsi,8), %rdi
	movq	%rbx, -32(%rsp)
	movl	$1, %ebx
	movq	%rdi, -24(%rsp)
	movq	(%rcx), %r8
	leal	-2(%rax,%rax), %ecx
	leal	2(%rcx), %eax
	movslq	%ecx, %r10
	movq	16(%r8), %rdi
	movl	(%r8), %esi
	movl	%eax, -36(%rsp)
	movslq	%r11d, %rax
	salq	$3, %rax
	salq	$3, %r10
	movq	%rax, -48(%rsp)
	leal	-2(%r11), %eax
	movq	%rdi, -56(%rsp)
	movl	%eax, -40(%rsp)
.L575:
	movq	-56(%rsp), %rax
	movl	-40(%rsp), %edi
	movq	(%rax,%r10), %rbp
	movq	-48(%rsp), %rax
	leaq	0(%rbp,%rax), %r9
.L574:
	movq	(%r9), %r14
	movl	%edi, %edx
	movl	$-2, %eax
	addq	%r12, %r14
	movsd	(%r14), %xmm0
.L571:
	cmpl	%ecx, %esi
	jg	.L556
	cmpl	%ecx, 4(%r8)
	jle	.L556
	testq	%rbp, %rbp
	je	.L556
	movq	8(%r8), %r13
	addq	%r10, %r13
	cmpl	0(%r13), %edx
	jl	.L556
	cmpl	4(%r13), %edx
	jge	.L556
	movslq	%edx, %r13
	movq	0(%rbp,%r13,8), %r13
	testq	%r13, %r13
	je	.L556
	testb	$2, 0(%r13)
	je	.L654
.L557:
	cmpl	$0, 4(%r13)
	js	.L556
	movsd	0(%r13,%r12), %xmm3
	comisd	.LC15(%rip), %xmm3
	jbe	.L640
	movsd	.LC16(%rip), %xmm8
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	movsd	.LC18(%rip), %xmm9
	subsd	%xmm8, %xmm6
	movapd	%xmm6, %xmm8
	andpd	%xmm4, %xmm8
	comisd	%xmm8, %xmm9
	jb	.L556
.L560:
	pxor	%xmm9, %xmm9
	comisd	.LC15(%rip), %xmm0
	cvtsi2sdl	%eax, %xmm9
	addsd	%xmm9, %xmm6
	andpd	%xmm7, %xmm6
	jbe	.L643
	movapd	%xmm0, %xmm8
	subsd	.LC16(%rip), %xmm8
.L568:
	andpd	%xmm8, %xmm7
	comisd	%xmm6, %xmm7
	jbe	.L556
	addsd	%xmm9, %xmm3
	movapd	%xmm3, %xmm0
	movsd	%xmm3, (%r14)
	.p2align 4,,10
	.p2align 3
.L556:
	addl	$1, %eax
	addl	$1, %edx
	cmpl	$3, %eax
	jne	.L571
.L655:
	ucomisd	%xmm2, %xmm0
	jp	.L572
	movl	$0, %eax
	cmove	%eax, %ebx
.L572:
	addl	$1, %edi
	addq	$8, %r9
	cmpl	%edi, %r11d
	jne	.L574
	movl	-36(%rsp), %eax
	addl	$1, %ecx
	addq	$8, %r10
	cmpl	%ecx, %eax
	jne	.L575
	testb	%bl, %bl
	jne	.L555
	sarl	%eax
	movq	-24(%rsp), %rbx
	addl	$2, %r11d
	xorl	%r9d, %r9d
	movslq	%eax, %rdx
	movq	-32(%rsp), %rax
	sarl	%r11d
	movq	.LC17(%rip), %xmm3
	movq	%rdx, %rcx
	salq	$3, %rdx
	movslq	%r11d, %rdi
	movq	-8(%rax,%rbx), %rax
	leaq	0(,%rdi,8), %rbx
	movq	(%rax), %rax
	movq	16(%rax), %r10
	leaq	(%r10,%rdx), %r8
	movq	(%r8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	(%rax,%r15,8), %xmm1
	movq	$-1, %rax
	movapd	%xmm1, %xmm0
	andpd	%xmm3, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%r9b
.L579:
	movq	(%r8,%rax,8), %rsi
	movq	(%rsi,%rbx), %rsi
	movsd	(%rsi,%r12), %xmm0
	ucomisd	%xmm2, %xmm0
	jp	.L617
	je	.L555
.L617:
	xorl	%esi, %esi
	andpd	%xmm3, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%sil
	cmpl	%esi, %r9d
	jne	.L555
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L579
	movsd	.LC15(%rip), %xmm4
	comisd	%xmm4, %xmm1
	jbe	.L645
	movsd	.LC16(%rip), %xmm5
	subsd	%xmm5, %xmm1
.L582:
	movq	8(%r10,%rdx), %rax
	mulsd	.LC20(%rip), %xmm1
	movq	(%rax,%rdi,8), %rax
	movsd	(%rax,%r15,8), %xmm0
	comisd	%xmm4, %xmm0
	jbe	.L646
	movapd	%xmm0, %xmm3
	subsd	%xmm5, %xmm3
.L586:
	movq	-8(%r10,%rdx), %rax
	addsd	%xmm3, %xmm1
	movq	(%rax,%rdi,8), %rax
	movsd	(%rax,%r15,8), %xmm3
	comisd	%xmm4, %xmm3
	jbe	.L648
	movapd	%xmm3, %xmm6
	subsd	%xmm5, %xmm6
.L590:
	addsd	%xmm6, %xmm1
	mulsd	.LC8(%rip), %xmm1
	pxor	%xmm6, %xmm6
	cvtsi2sdl	%r9d, %xmm6
	comisd	%xmm4, %xmm0
	mulsd	%xmm5, %xmm6
	addsd	%xmm6, %xmm1
	jbe	.L650
	subsd	%xmm5, %xmm0
.L594:
	comisd	%xmm4, %xmm3
	jbe	.L651
	subsd	%xmm5, %xmm3
.L598:
	subsd	%xmm3, %xmm0
	leal	-2(%rcx,%rcx), %eax
	movq	-56(%rsp), %rdi
	xorl	%ecx, %ecx
	movsd	.LC3(%rip), %xmm3
	leal	-2(%r11,%r11), %esi
	movslq	%eax, %rdx
	movsd	.LC5(%rip), %xmm5
	leaq	(%rdi,%rdx,8), %r9
	movslq	%esi, %rdi
	leal	2(%rax), %r8d
	addl	$2, %esi
	mulsd	%xmm0, %xmm3
	salq	$3, %rdi
.L603:
	movl	%r8d, %edx
	movq	(%r9,%rcx,8), %r11
	shrl	$31, %edx
	leal	(%rdx,%rcx), %eax
	addq	%rdi, %r11
	andl	$1, %eax
	subl	%edx, %eax
	leal	-1(%rax,%rax), %ebx
	xorl	%eax, %eax
.L602:
	movq	(%r11,%rax,8), %r10
	addq	%r12, %r10
	ucomisd	(%r10), %xmm2
	jp	.L600
	jne	.L600
	movl	%esi, %ebp
	pxor	%xmm0, %xmm0
	pxor	%xmm4, %xmm4
	shrl	$31, %ebp
	cvtsi2sdl	%ebx, %xmm0
	leal	0(%rbp,%rax), %edx
	andl	$1, %edx
	subl	%ebp, %edx
	leal	-1(%rdx,%rdx), %edx
	mulsd	%xmm3, %xmm0
	cvtsi2sdl	%edx, %xmm4
	mulsd	%xmm5, %xmm4
	addsd	%xmm1, %xmm0
	subsd	%xmm4, %xmm0
	movsd	%xmm0, (%r10)
.L600:
	cmpq	$1, %rax
	jne	.L608
	cmpq	$1, %rcx
	je	.L555
	movl	$1, %ecx
	jmp	.L603
	.p2align 4,,10
	.p2align 3
.L555:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L654:
	.cfi_restore_state
	cmpw	$0, 2(%r13)
	jne	.L557
	addl	$1, %eax
	addl	$1, %edx
	cmpl	$3, %eax
	jne	.L571
	jmp	.L655
	.p2align 4,,10
	.p2align 3
.L645:
	movsd	.LC19(%rip), %xmm0
	movsd	.LC16(%rip), %xmm5
	comisd	%xmm1, %xmm0
	jbe	.L582
	addsd	%xmm5, %xmm1
	jmp	.L582
	.p2align 4,,10
	.p2align 3
.L608:
	movl	$1, %eax
	jmp	.L602
	.p2align 4,,10
	.p2align 3
.L651:
	movsd	.LC19(%rip), %xmm4
	comisd	%xmm3, %xmm4
	jbe	.L598
	addsd	%xmm5, %xmm3
	jmp	.L598
	.p2align 4,,10
	.p2align 3
.L650:
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm0, %xmm6
	jbe	.L594
	addsd	%xmm5, %xmm0
	jmp	.L594
	.p2align 4,,10
	.p2align 3
.L648:
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm3, %xmm6
	movapd	%xmm3, %xmm6
	jbe	.L590
	addsd	%xmm5, %xmm6
	jmp	.L590
	.p2align 4,,10
	.p2align 3
.L646:
	movsd	.LC19(%rip), %xmm3
	comisd	%xmm0, %xmm3
	movapd	%xmm0, %xmm3
	jbe	.L586
	addsd	%xmm5, %xmm3
	jmp	.L586
.L640:
	movsd	.LC19(%rip), %xmm7
	comisd	%xmm3, %xmm7
	jbe	.L641
	movsd	.LC16(%rip), %xmm8
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	movsd	.LC18(%rip), %xmm9
	addsd	%xmm8, %xmm6
	andpd	%xmm5, %xmm6
	comisd	%xmm6, %xmm9
	jb	.L556
.L563:
	movapd	%xmm8, %xmm6
	addsd	%xmm3, %xmm6
	jmp	.L560
.L641:
	movsd	.LC18(%rip), %xmm10
	movapd	%xmm3, %xmm6
	movapd	%xmm1, %xmm7
	andpd	%xmm1, %xmm6
	comisd	%xmm6, %xmm10
	jb	.L556
	movsd	.LC19(%rip), %xmm6
	comisd	%xmm3, %xmm6
	ja	.L656
	movapd	%xmm3, %xmm6
	jmp	.L560
.L643:
	movsd	.LC19(%rip), %xmm11
	movapd	%xmm0, %xmm8
	comisd	%xmm0, %xmm11
	jbe	.L568
	movsd	.LC16(%rip), %xmm8
	addsd	%xmm0, %xmm8
	jmp	.L568
.L656:
	movq	.LC16(%rip), %r13
	movq	%r13, %xmm8
	jmp	.L563
	.cfi_endproc
.LFE381:
	.size	refine_h_y, .-refine_h_y
	.p2align 4
	.type	pos_x, @function
pos_x:
.LFB402:
	.cfi_startproc
	movq	%rcx, %rax
	movq	grid(%rip), %rcx
	movl	%esi, %r9d
	movslq	%edi, %r11
	movq	%rdi, %rsi
	movq	%rdi, -16(%rsp)
	movslq	%r9d, %rdi
	movslq	%edx, %rdx
	movq	24(%rcx), %rcx
	shrq	$32, %rsi
	movl	%r9d, -8(%rsp)
	movq	%r11, %r10
	movq	(%rcx,%rdi,8), %rcx
	movslq	%esi, %rdi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r11,8), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movsd	8(%rcx,%rdx,8), %xmm1
	comisd	.LC15(%rip), %xmm1
	jbe	.L672
	subsd	.LC16(%rip), %xmm1
	movsd	.LC10(%rip), %xmm2
	movsd	.LC2(%rip), %xmm0
	movapd	%xmm1, %xmm3
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm2, %xmm3
	ja	.L674
.L661:
	movl	%r9d, %ecx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movsd	L0(%rip), %xmm3
	sall	%cl, %edx
	leal	-2(%r10), %ecx
	movsd	.LC5(%rip), %xmm4
	cvtsi2sdl	%edx, %xmm0
	leal	-2(%rsi), %edx
	divsd	%xmm0, %xmm2
	pxor	%xmm0, %xmm0
	mulsd	%xmm2, %xmm3
	pxor	%xmm2, %xmm2
	cvtsi2sdl	%ecx, %xmm2
	addsd	%xmm0, %xmm2
	mulsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm2
	mulsd	%xmm3, %xmm2
	addsd	X0(%rip), %xmm2
	addsd	%xmm1, %xmm2
	pxor	%xmm1, %xmm1
	subsd	(%r8), %xmm2
	cvtsi2sdl	%edx, %xmm1
	mulsd	(%rax), %xmm2
	addsd	%xmm0, %xmm1
	addsd	%xmm0, %xmm2
	addsd	%xmm4, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm3, %xmm0
	addsd	Y0(%rip), %xmm0
	subsd	8(%r8), %xmm0
	mulsd	8(%rax), %xmm0
	addsd	%xmm2, %xmm0
.L657:
	ret
	.p2align 4,,10
	.p2align 3
.L672:
	movsd	.LC19(%rip), %xmm3
	comisd	%xmm1, %xmm3
	jbe	.L673
	movsd	.LC16(%rip), %xmm4
	movapd	%xmm1, %xmm3
	movsd	.LC10(%rip), %xmm2
	movsd	.LC2(%rip), %xmm0
	addsd	%xmm4, %xmm3
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm2, %xmm3
	ja	.L675
.L664:
	addsd	%xmm4, %xmm1
	jmp	.L661
	.p2align 4,,10
	.p2align 3
.L673:
	movsd	.LC10(%rip), %xmm2
	movapd	%xmm1, %xmm4
	andpd	.LC17(%rip), %xmm4
	movsd	.LC2(%rip), %xmm0
	comisd	%xmm2, %xmm4
	ja	.L657
	comisd	%xmm1, %xmm3
	jbe	.L661
	movsd	.LC16(%rip), %xmm4
	jmp	.L664
	.p2align 4,,10
	.p2align 3
.L674:
	ret
	.p2align 4,,10
	.p2align 3
.L675:
	ret
	.cfi_endproc
.LFE402:
	.size	pos_x, .-pos_x
	.p2align 4
	.type	pos_y, @function
pos_y:
.LFB403:
	.cfi_startproc
	movq	%rcx, %rax
	movq	%rdi, %rcx
	movl	%esi, %r9d
	movslq	%edi, %r11
	shrq	$32, %rcx
	movq	%rdi, -16(%rsp)
	movslq	%r9d, %rdi
	sarq	$32, %rdx
	movq	%rcx, %r10
	movq	grid(%rip), %rcx
	movl	%r9d, -8(%rsp)
	movq	%r11, %rsi
	movq	24(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movslq	%r10d, %rdi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r11,8), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movsd	8(%rcx,%rdx,8), %xmm1
	comisd	.LC15(%rip), %xmm1
	jbe	.L691
	subsd	.LC16(%rip), %xmm1
	movsd	.LC10(%rip), %xmm2
	movsd	.LC2(%rip), %xmm0
	movapd	%xmm1, %xmm3
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm2, %xmm3
	ja	.L693
.L680:
	movl	%r9d, %ecx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movsd	L0(%rip), %xmm3
	sall	%cl, %edx
	leal	-2(%r10), %ecx
	movsd	.LC5(%rip), %xmm4
	cvtsi2sdl	%edx, %xmm0
	leal	-2(%rsi), %edx
	divsd	%xmm0, %xmm2
	pxor	%xmm0, %xmm0
	mulsd	%xmm2, %xmm3
	pxor	%xmm2, %xmm2
	cvtsi2sdl	%ecx, %xmm2
	addsd	%xmm0, %xmm2
	mulsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm2
	mulsd	%xmm3, %xmm2
	addsd	Y0(%rip), %xmm2
	addsd	%xmm1, %xmm2
	pxor	%xmm1, %xmm1
	subsd	8(%r8), %xmm2
	cvtsi2sdl	%edx, %xmm1
	mulsd	8(%rax), %xmm2
	addsd	%xmm0, %xmm1
	addsd	%xmm0, %xmm2
	addsd	%xmm4, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm3, %xmm0
	addsd	X0(%rip), %xmm0
	subsd	(%r8), %xmm0
	mulsd	(%rax), %xmm0
	addsd	%xmm2, %xmm0
.L676:
	ret
	.p2align 4,,10
	.p2align 3
.L691:
	movsd	.LC19(%rip), %xmm3
	comisd	%xmm1, %xmm3
	jbe	.L692
	movsd	.LC16(%rip), %xmm4
	movapd	%xmm1, %xmm3
	movsd	.LC10(%rip), %xmm2
	movsd	.LC2(%rip), %xmm0
	addsd	%xmm4, %xmm3
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm2, %xmm3
	ja	.L694
.L683:
	addsd	%xmm4, %xmm1
	jmp	.L680
	.p2align 4,,10
	.p2align 3
.L692:
	movsd	.LC10(%rip), %xmm2
	movapd	%xmm1, %xmm4
	andpd	.LC17(%rip), %xmm4
	movsd	.LC2(%rip), %xmm0
	comisd	%xmm2, %xmm4
	ja	.L676
	comisd	%xmm1, %xmm3
	jbe	.L680
	movsd	.LC16(%rip), %xmm4
	jmp	.L683
	.p2align 4,,10
	.p2align 3
.L693:
	ret
	.p2align 4,,10
	.p2align 3
.L694:
	ret
	.cfi_endproc
.LFE403:
	.size	pos_y, .-pos_y
	.p2align 4
	.type	_boundary4, @function
_boundary4:
.LFB411:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	pxor	%xmm0, %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	subsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE411:
	.size	_boundary4, .-_boundary4
	.p2align 4
	.type	_boundary4_homogeneous, @function
_boundary4_homogeneous:
.LFB412:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	xorpd	.LC1(%rip), %xmm0
	ret
	.cfi_endproc
.LFE412:
	.size	_boundary4_homogeneous, .-_boundary4_homogeneous
	.p2align 4
	.type	_boundary6, @function
_boundary6:
.LFB415:
	.cfi_startproc
	pxor	%xmm0, %xmm0
	ret
	.cfi_endproc
.LFE415:
	.size	_boundary6, .-_boundary6
	.p2align 4
	.type	init_0_expr0, @function
init_0_expr0:
.LFB418:
	.cfi_startproc
	movq	$0x000000000, (%rsi)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE418:
	.size	init_0_expr0, .-init_0_expr0
	.p2align 4
	.type	output_field_bolla_expr0, @function
output_field_bolla_expr0:
.LFB424:
	.cfi_startproc
	movsd	.LC21(%rip), %xmm0
	xorl	%eax, %eax
	comisd	(%rsi), %xmm0
	setnb	%al
	ret
	.cfi_endproc
.LFE424:
	.size	output_field_bolla_expr0, .-output_field_bolla_expr0
	.p2align 4
	.type	output_field_bolla_expr1, @function
output_field_bolla_expr1:
.LFB425:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE425:
	.size	output_field_bolla_expr1, .-output_field_bolla_expr1
	.p2align 4
	.type	free_display_defaults, @function
free_display_defaults:
.LFB62:
	.cfi_startproc
	movq	display_defaults(%rip), %rdi
	jmp	free
	.cfi_endproc
.LFE62:
	.size	free_display_defaults, .-free_display_defaults
	.p2align 4
	.type	cache_append, @function
cache_append:
.LFB84:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movl	%ecx, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rdi, %rbx
	subq	$24, %rsp
	.cfi_def_cfa_offset 48
	movl	8(%rdi), %eax
	movq	%rsi, (%rsp)
	movl	12(%rdi), %esi
	movl	%edx, 8(%rsp)
	movq	(%rdi), %rdi
	cmpl	%esi, %eax
	jge	.L705
.L703:
	movslq	%eax, %rdx
	movzwl	%bp, %ebp
	addl	$1, %eax
	salq	$4, %rdx
	addq	%rdx, %rdi
	movq	(%rsp), %rdx
	movl	%ebp, 12(%rdi)
	movq	%rdx, (%rdi)
	movl	8(%rsp), %edx
	movl	%edx, 8(%rdi)
	movl	%eax, 8(%rbx)
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L705:
	.cfi_restore_state
	subl	$-128, %esi
	movl	%esi, 12(%rbx)
	movslq	%esi, %rsi
	salq	$4, %rsi
	call	realloc
	movq	%rax, (%rbx)
	movq	%rax, %rdi
	movl	8(%rbx), %eax
	jmp	.L703
	.cfi_endproc
.LFE84:
	.size	cache_append, .-cache_append
	.p2align 4
	.type	cache_append_face, @function
cache_append_face:
.LFB87:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %r8
	movq	%rdi, %rax
	movslq	%edi, %r15
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movzwl	%dx, %ecx
	movq	%r15, %r14
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rax, %r13
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movl	%esi, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edx, %ebx
	movl	%r12d, %edx
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	movq	grid(%rip), %rbp
	movq	%rdi, 32(%rsp)
	movl	%esi, 40(%rsp)
	leaq	48(%rbp), %rdi
	movq	%r8, %rsi
	call	cache_append
	movq	grid(%rip), %rdx
	movslq	%r12d, %r8
	movslq	%r13d, %rax
	leaq	0(,%r15,8), %r10
	leaq	0(,%rax,8), %r9
	movq	24(%rdx), %rcx
	movq	(%rcx,%r8,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r15,8), %rcx
	movq	(%rcx,%rax,8), %rcx
	testb	$8, (%rcx)
	je	.L717
.L707:
	testb	$2, %bl
	je	.L708
	movq	24(%rdx), %rcx
	movq	(%rcx,%r8,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	8(%rcx,%r10), %rcx
	movq	(%rcx,%rax,8), %rcx
	testb	$8, (%rcx)
	je	.L718
.L708:
	andl	$1, %ebx
	je	.L706
	movq	24(%rdx), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15,8), %rax
	movq	8(%rax,%r9), %rax
	testb	$8, (%rax)
	je	.L719
.L706:
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L717:
	.cfi_restore_state
	movl	40(%rsp), %edx
	movq	32(%rsp), %rsi
	xorl	%ecx, %ecx
	leaq	64(%rbp), %rdi
	movq	%rax, 24(%rsp)
	movq	%r8, 16(%rsp)
	movq	%r9, 8(%rsp)
	movq	%r10, (%rsp)
	call	cache_append
	movq	grid(%rip), %rdx
	movq	16(%rsp), %r8
	movq	24(%rsp), %rax
	movq	8(%rsp), %r9
	movq	24(%rdx), %rcx
	movq	(%rsp), %r10
	movq	(%rcx,%r8,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r15,8), %rcx
	movq	(%rcx,%rax,8), %rcx
	orw	$8, (%rcx)
	jmp	.L707
	.p2align 4,,10
	.p2align 3
.L719:
	addl	$1, %r13d
	movl	%r14d, 52(%rsp)
	leaq	64(%rbp), %rdi
	movl	%r12d, %edx
	movl	%r13d, 56(%rsp)
	movq	52(%rsp), %rsi
	xorl	%ecx, %ecx
	movq	%r8, 8(%rsp)
	movq	%r9, (%rsp)
	movl	%r12d, 60(%rsp)
	call	cache_append
	movq	grid(%rip), %rax
	movq	8(%rsp), %r8
	movq	(%rsp), %r9
	movq	24(%rax), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15,8), %rax
	movq	8(%rax,%r9), %rax
	orw	$8, (%rax)
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L718:
	.cfi_restore_state
	leal	1(%r14), %edx
	movl	%r13d, 56(%rsp)
	xorl	%ecx, %ecx
	leaq	64(%rbp), %rdi
	movl	%edx, 52(%rsp)
	movq	52(%rsp), %rsi
	movl	%r12d, %edx
	movq	%rax, 24(%rsp)
	movq	%r8, 16(%rsp)
	movq	%r9, 8(%rsp)
	movq	%r10, (%rsp)
	movl	%r12d, 60(%rsp)
	call	cache_append
	movq	grid(%rip), %rdx
	movq	16(%rsp), %r8
	movq	(%rsp), %r10
	movq	24(%rsp), %rax
	movq	24(%rdx), %rcx
	movq	8(%rsp), %r9
	movq	(%rcx,%r8,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	8(%rcx,%r10), %rcx
	movq	(%rcx,%rax,8), %rax
	orw	$8, (%rax)
	jmp	.L708
	.cfi_endproc
.LFE87:
	.size	cache_append_face, .-cache_append_face
	.p2align 4
	.type	normal_y, @function
normal_y:
.LFB385:
	.cfi_startproc
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	movq	%rdi, %rax
	sarq	$32, %rcx
	movq	grid(%rip), %rdi
	movl	%edx, 40(%rsp)
	movslq	%edx, %rdx
	addq	$1, %rcx
	movsd	.LC2(%rip), %xmm2
	movq	24(%rdi), %rdi
	movq	%rsi, 32(%rsp)
	movq	(%rdi,%rdx,8), %rdx
	movslq	%esi, %rdi
	sarq	$32, %rsi
	leaq	0(,%rdi,8), %r8
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi,8), %rdi
	movq	(%rdi,%rsi,8), %rdi
	movsd	(%rdi,%rcx,8), %xmm1
	ucomisd	%xmm2, %xmm1
	jp	.L737
	movapd	%xmm1, %xmm3
	je	.L721
.L737:
	movq	-8(%rdx,%r8), %r9
	movq	.LC17(%rip), %xmm4
	movapd	%xmm1, %xmm5
	xorl	%edi, %edi
	movq	8(%rdx,%r8), %rdx
	movq	(%r9,%rsi,8), %r9
	andpd	%xmm4, %xmm5
	comisd	.LC15(%rip), %xmm5
	movq	(%rdx,%rsi,8), %rdx
	movsd	(%r9,%rcx,8), %xmm0
	seta	%dil
	movsd	(%rdx,%rcx,8), %xmm3
	ucomisd	%xmm2, %xmm0
	jp	.L738
	jne	.L738
.L723:
	ucomisd	%xmm2, %xmm3
	jp	.L740
	je	.L734
.L740:
	xorl	%edx, %edx
	andpd	%xmm3, %xmm4
	comisd	.LC15(%rip), %xmm4
	seta	%dl
	cmpl	%edx, %edi
	jne	.L735
	movapd	%xmm1, %xmm4
	subsd	%xmm3, %xmm4
.L727:
	comisd	.LC15(%rip), %xmm5
	ja	.L736
	movsd	.LC10(%rip), %xmm1
	movapd	%xmm1, %xmm3
.L729:
	movapd	%xmm4, %xmm0
	pxor	%xmm5, %xmm5
	mulsd	%xmm4, %xmm0
	addsd	%xmm1, %xmm0
	ucomisd	%xmm0, %xmm5
	ja	.L742
	sqrtsd	%xmm0, %xmm0
.L732:
	mulsd	%xmm3, %xmm0
	divsd	%xmm0, %xmm4
	divsd	%xmm0, %xmm1
	movapd	%xmm4, %xmm3
.L721:
	movsd	%xmm3, (%rax)
	movsd	%xmm1, 8(%rax)
	movsd	%xmm2, 16(%rax)
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L738:
	.cfi_restore_state
	movapd	%xmm0, %xmm6
	xorl	%edx, %edx
	andpd	%xmm4, %xmm6
	comisd	.LC15(%rip), %xmm6
	seta	%dl
	cmpl	%edx, %edi
	jne	.L723
	ucomisd	%xmm2, %xmm3
	jp	.L739
	je	.L725
.L739:
	xorl	%edx, %edx
	andpd	%xmm3, %xmm4
	comisd	.LC15(%rip), %xmm4
	seta	%dl
	cmpl	%edx, %edi
	je	.L744
.L725:
	movapd	%xmm0, %xmm4
	subsd	%xmm1, %xmm4
	jmp	.L727
	.p2align 4,,10
	.p2align 3
.L734:
	movapd	%xmm3, %xmm1
	jmp	.L721
	.p2align 4,,10
	.p2align 3
.L735:
	movapd	%xmm2, %xmm3
	movapd	%xmm2, %xmm1
	jmp	.L721
	.p2align 4,,10
	.p2align 3
.L736:
	movsd	.LC23(%rip), %xmm3
	movsd	.LC10(%rip), %xmm1
	jmp	.L729
	.p2align 4,,10
	.p2align 3
.L744:
	subsd	%xmm3, %xmm0
	mulsd	.LC5(%rip), %xmm0
	movapd	%xmm0, %xmm4
	jmp	.L727
.L742:
	movq	%rax, 16(%rsp)
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm3, 8(%rsp)
	movsd	%xmm4, (%rsp)
	call	sqrt
	movsd	24(%rsp), %xmm1
	movsd	8(%rsp), %xmm3
	movq	.LC2(%rip), %rax
	movsd	(%rsp), %xmm4
	movq	%rax, %xmm2
	movq	16(%rsp), %rax
	jmp	.L732
	.cfi_endproc
.LFE385:
	.size	normal_y, .-normal_y
	.p2align 4
	.type	normal_x, @function
normal_x:
.LFB386:
	.cfi_startproc
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	movq	%rdi, %rax
	movslq	%ecx, %rcx
	movq	grid(%rip), %rdi
	movl	%edx, 40(%rsp)
	movslq	%edx, %rdx
	addq	$1, %rcx
	movsd	.LC2(%rip), %xmm3
	movq	24(%rdi), %rdi
	movq	%rsi, 32(%rsp)
	movq	(%rdi,%rdx,8), %rdx
	movslq	%esi, %rdi
	sarq	$32, %rsi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi,8), %rdx
	leaq	0(,%rsi,8), %rdi
	movq	(%rdx,%rsi,8), %rsi
	movsd	(%rsi,%rcx,8), %xmm2
	ucomisd	%xmm3, %xmm2
	jp	.L762
	movapd	%xmm2, %xmm1
	je	.L746
.L762:
	movq	.LC17(%rip), %xmm4
	movq	-8(%rdx,%rdi), %r8
	movapd	%xmm2, %xmm5
	xorl	%esi, %esi
	movq	8(%rdx,%rdi), %rdx
	andpd	%xmm4, %xmm5
	comisd	.LC15(%rip), %xmm5
	movsd	(%r8,%rcx,8), %xmm0
	movsd	(%rdx,%rcx,8), %xmm1
	seta	%sil
	ucomisd	%xmm3, %xmm0
	jp	.L763
	jne	.L763
.L748:
	ucomisd	%xmm3, %xmm1
	jp	.L765
	je	.L759
.L765:
	xorl	%edx, %edx
	andpd	%xmm1, %xmm4
	comisd	.LC15(%rip), %xmm4
	seta	%dl
	cmpl	%edx, %esi
	jne	.L760
	movapd	%xmm2, %xmm4
	subsd	%xmm1, %xmm4
.L752:
	comisd	.LC15(%rip), %xmm5
	ja	.L761
	movsd	.LC10(%rip), %xmm1
	movapd	%xmm1, %xmm2
.L754:
	movapd	%xmm4, %xmm0
	pxor	%xmm5, %xmm5
	mulsd	%xmm4, %xmm0
	addsd	%xmm1, %xmm0
	ucomisd	%xmm0, %xmm5
	ja	.L767
	sqrtsd	%xmm0, %xmm0
.L757:
	mulsd	%xmm2, %xmm0
	divsd	%xmm0, %xmm4
	divsd	%xmm0, %xmm1
	movapd	%xmm4, %xmm2
.L746:
	movsd	%xmm1, (%rax)
	movsd	%xmm2, 8(%rax)
	movsd	%xmm3, 16(%rax)
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L763:
	.cfi_restore_state
	movapd	%xmm0, %xmm6
	xorl	%edx, %edx
	andpd	%xmm4, %xmm6
	comisd	.LC15(%rip), %xmm6
	seta	%dl
	cmpl	%edx, %esi
	jne	.L748
	ucomisd	%xmm3, %xmm1
	jp	.L764
	je	.L750
.L764:
	xorl	%edx, %edx
	andpd	%xmm1, %xmm4
	comisd	.LC15(%rip), %xmm4
	seta	%dl
	cmpl	%edx, %esi
	je	.L769
.L750:
	movapd	%xmm0, %xmm4
	subsd	%xmm2, %xmm4
	jmp	.L752
	.p2align 4,,10
	.p2align 3
.L759:
	movapd	%xmm1, %xmm2
	jmp	.L746
	.p2align 4,,10
	.p2align 3
.L760:
	movapd	%xmm3, %xmm1
	movapd	%xmm3, %xmm2
	jmp	.L746
	.p2align 4,,10
	.p2align 3
.L761:
	movsd	.LC23(%rip), %xmm2
	movsd	.LC10(%rip), %xmm1
	jmp	.L754
	.p2align 4,,10
	.p2align 3
.L769:
	subsd	%xmm1, %xmm0
	mulsd	.LC5(%rip), %xmm0
	movapd	%xmm0, %xmm4
	jmp	.L752
.L767:
	movq	%rax, 16(%rsp)
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm2, 8(%rsp)
	movsd	%xmm4, (%rsp)
	call	sqrt
	movsd	24(%rsp), %xmm1
	movsd	8(%rsp), %xmm2
	movq	.LC2(%rip), %rax
	movsd	(%rsp), %xmm4
	movq	%rax, %xmm3
	movq	16(%rsp), %rax
	jmp	.L757
	.cfi_endproc
.LFE386:
	.size	normal_x, .-normal_x
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align 8
.LC24:
	.string	"%s:%d: Assertion `%s' failed.\n"
	.text
	.p2align 4
	.type	qassert, @function
qassert:
.LFB23:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	%rdx, %r8
	movq	%rdi, %rdx
	movl	%esi, %ecx
	movq	stderr(%rip), %rdi
	movl	$.LC24, %esi
	xorl	%eax, %eax
	call	fprintf
	call	abort
	.cfi_endproc
.LFE23:
	.size	qassert, .-qassert
	.p2align 4
	.type	cache_level_resize, @function
cache_level_resize:
.LFB90:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movq	%rdi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movq	grid(%rip), %rax
	cmpl	%esi, 16(%rax)
	jl	.L773
	movl	%esi, %r12d
	movq	%rdi, %rbp
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L774:
	movq	0(%rbp), %rdi
	addl	$1, %ebx
	addq	$16, %rbp
	call	free
	movq	grid(%rip), %rax
	movl	16(%rax), %eax
	subl	%r12d, %eax
	cmpl	%ebx, %eax
	jge	.L774
.L773:
	movq	%r13, %rdi
	call	free
	movq	grid(%rip), %rax
	movl	$16, %esi
	movl	16(%rax), %edi
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	addl	$1, %edi
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	movslq	%edi, %rdi
	jmp	calloc
	.cfi_endproc
.LFE90:
	.size	cache_level_resize, .-cache_level_resize
	.section	.rodata.str1.1,"aMS",@progbits,1
.LC25:
	.string	".x"
.LC26:
	.string	"%s%s"
.LC27:
	.string	".y"
	.text
	.p2align 4
	.globl	cartesian_init_vector
	.type	cartesian_init_vector, @function
cartesian_init_vector:
.LFB160:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movslq	%edi, %rax
	leaq	(%rax,%rax,4), %rdx
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	leaq	(%rax,%rdx,2), %r13
	pushq	%r12
	.cfi_offset 12, -48
	movq	%rdi, %r12
	salq	$4, %r13
	pushq	%rbx
	sarq	$32, %r12
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	subq	$24, %rsp
	testq	%rsi, %rsi
	je	.L778
	movq	%rsp, %r8
	movl	%edi, -60(%rbp)
	movq	%rsi, %rdi
	movq	%rsi, %r14
	movq	%r8, -56(%rbp)
	call	strlen
	movl	$.LC25, %ecx
	movq	%r14, %rdx
	movl	$.LC26, %esi
	addq	$18, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rsi
	movl	-60(%rbp), %edi
	call	*init_scalar(%rip)
	movq	_attribute(%rip), %rax
	movq	-56(%rbp), %rsp
	movq	%r14, %rdi
	addq	%r13, %rax
	movl	%ebx, 48(%rax)
	movl	%r12d, 52(%rax)
	call	strlen
	movl	$.LC27, %ecx
	movq	%r14, %rdx
	movl	$.LC26, %esi
	addq	$18, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rsi
	movl	%r12d, %edi
	call	*init_scalar(%rip)
	movq	-56(%rbp), %rsp
.L779:
	leaq	(%r12,%r12,4), %rax
	movq	_attribute(%rip), %rdx
	leaq	(%r12,%rax,2), %rax
	salq	$4, %rax
	addq	%rdx, %rax
	movl	%ebx, 48(%rax)
	movl	%r12d, 52(%rax)
	movl	nboundary(%rip), %eax
	testl	%eax, %eax
	jle	.L783
	addq	%r13, %rdx
	movq	8(%rdx), %rdi
	movq	(%rdx), %rsi
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L782:
	movl	$antisymmetry, %ecx
	cmpq	$3, %rdx
	ja	.L781
	movq	default_vector_bc(,%rdx,8), %rcx
.L781:
	movq	%rcx, (%rdi,%rdx,8)
	movq	%rcx, (%rsi,%rdx,8)
	addq	$1, %rdx
	cmpl	%edx, %eax
	jg	.L782
.L783:
	leaq	-40(%rbp), %rsp
	salq	$32, %r12
	movl	%ebx, %eax
	orq	%r12, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L778:
	.cfi_restore_state
	xorl	%esi, %esi
	call	*init_scalar(%rip)
	movq	_attribute(%rip), %rax
	xorl	%esi, %esi
	movl	%r12d, %edi
	addq	%r13, %rax
	movl	%ebx, 48(%rax)
	movl	%r12d, 52(%rax)
	call	*init_scalar(%rip)
	jmp	.L779
	.cfi_endproc
.LFE160:
	.size	cartesian_init_vector, .-cartesian_init_vector
	.p2align 4
	.globl	cartesian_init_face_vector
	.type	cartesian_init_face_vector, @function
cartesian_init_face_vector:
.LFB161:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	call	cartesian_init_vector
	movq	%rax, %rbp
	movl	%eax, %ebx
	cltq
	sarq	$32, %rbp
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	leaq	0(%rbp,%rbp,4), %rdx
	leaq	0(%rbp,%rdx,2), %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movl	$-1, 40(%rax)
	movl	$1, 56(%rax)
	movl	$-1, 44(%rdx)
	movl	$1, 56(%rdx)
	movslq	nboundary(%rip), %rdx
	testl	%edx, %edx
	jle	.L789
	movq	8(%rax), %rdi
	movq	(%rax), %r12
	leaq	0(,%rdx,8), %r13
	leaq	(%rdi,%r13), %rax
	cmpq	%rax, %r12
	jnb	.L793
	leaq	(%r12,%r13), %rax
	cmpq	%rax, %rdi
	jb	.L792
.L793:
	movq	%r13, %rdx
	xorl	%esi, %esi
	call	memset
	movq	%r13, %rdx
	xorl	%esi, %esi
	movq	%r12, %rdi
	call	memset
.L789:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	salq	$32, %rbp
	movl	%ebx, %eax
	orq	%rbp, %rax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
.L792:
	.cfi_restore_state
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L790:
	movq	$0, (%rdi,%rax,8)
	movq	$0, (%r12,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L790
	jmp	.L789
	.cfi_endproc
.LFE161:
	.size	cartesian_init_face_vector, .-cartesian_init_face_vector
	.p2align 4
	.type	multigrid_init_face_vector, @function
multigrid_init_face_vector:
.LFB201:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	cartesian_init_face_vector
	movq	_attribute(%rip), %rdx
	movq	%rax, %rdi
	sarq	$32, %rax
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movq	$no_restriction, 104(%rdx,%rax)
	movslq	%edi, %rax
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movq	$restriction_face, 104(%rdx,%rax)
	movq	%rdi, %rax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE201:
	.size	multigrid_init_face_vector, .-multigrid_init_face_vector
	.p2align 4
	.globl	tree_init_face_vector
	.type	tree_init_face_vector, @function
tree_init_face_vector:
.LFB219:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	cartesian_init_face_vector
	movq	%rax, %rdi
	cltq
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	movq	%rdi, %rdx
	sarq	$32, %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	$no_restriction, 112(%rdx)
	movq	$no_restriction, 104(%rdx)
	movq	$restriction_face, 104(%rax)
	movq	$refine_face, 112(%rax)
	movq	$refine_face_x, 96(%rax)
	movq	%rdi, %rax
	movq	$refine_face_y, 96(%rdx)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE219:
	.size	tree_init_face_vector, .-tree_init_face_vector
	.p2align 4
	.globl	cartesian_init_tensor
	.type	cartesian_init_tensor, @function
cartesian_init_tensor:
.LFB162:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsi, %rax
	sarq	$32, %rax
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	movq	%rdi, %r13
	pushq	%r12
	sarq	$32, %r13
	.cfi_offset 12, -48
	movq	%rdi, %r12
	pushq	%rbx
	.cfi_offset 3, -56
	movq	%rsi, %rbx
	subq	$24, %rsp
	movq	%rax, -56(%rbp)
	testq	%rdx, %rdx
	je	.L801
	movq	%rdx, %rdi
	movq	%rdx, %r14
	movq	%rsp, %r15
	call	strlen
	movl	$.LC25, %ecx
	movq	%r14, %rdx
	movl	$.LC26, %esi
	addq	$18, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rsi
	movq	%r12, %rdi
	call	*init_vector(%rip)
	movq	%r14, %rdi
	movq	%r15, %rsp
	call	strlen
	movl	$.LC27, %ecx
	movq	%r14, %rdx
	movl	$.LC26, %esi
	addq	$18, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rsi
	movq	%rbx, %rdi
	call	*init_vector(%rip)
	movq	%r15, %rsp
.L804:
	movl	nboundary(%rip), %eax
	testl	%eax, %eax
	jle	.L803
	movq	-56(%rbp), %rdi
	leaq	(%rdi,%rdi,4), %rdx
	leaq	(%rdi,%rdx,2), %rcx
	movslq	%r12d, %rdx
	leaq	(%rdx,%rdx,4), %rsi
	salq	$4, %rcx
	addq	_attribute(%rip), %rcx
	leaq	(%rdx,%rsi,2), %rsi
	movslq	%ebx, %rdx
	movq	8(%rcx), %r15
	leaq	(%rdx,%rdx,4), %rdi
	salq	$4, %rsi
	addq	_attribute(%rip), %rsi
	leaq	(%rdx,%rdi,2), %rdx
	movq	8(%rsi), %r14
	movq	(%rcx), %rdi
	xorl	%ecx, %ecx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	(%rsi), %r10
	movq	(%rdx), %r11
	movq	8(%rdx), %r9
	leaq	0(%r13,%r13,4), %rdx
	leaq	0(%r13,%rdx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	8(%rdx), %r8
	movq	(%rdx), %rdx
	jmp	.L806
	.p2align 4,,10
	.p2align 3
.L811:
	movq	default_scalar_bc(,%rcx,8), %rsi
	movq	%rsi, (%r15,%rcx,8)
	movq	%rsi, (%r14,%rcx,8)
	movq	%rsi, (%r11,%rcx,8)
	movq	%rsi, (%r10,%rcx,8)
	movq	default_vector_bc(,%rcx,8), %rsi
.L807:
	movq	%rsi, (%r9,%rcx,8)
	movq	%rsi, (%r8,%rcx,8)
	movq	%rsi, (%rdi,%rcx,8)
	movq	%rsi, (%rdx,%rcx,8)
	addq	$1, %rcx
	cmpl	%ecx, %eax
	jle	.L803
.L806:
	cmpq	$3, %rcx
	jbe	.L811
	movq	$symmetry, (%r15,%rcx,8)
	movl	$antisymmetry, %esi
	movq	$symmetry, (%r14,%rcx,8)
	movq	$symmetry, (%r11,%rcx,8)
	movq	$symmetry, (%r10,%rcx,8)
	jmp	.L807
	.p2align 4,,10
	.p2align 3
.L803:
	movq	-56(%rbp), %rcx
	salq	$32, %r13
	leaq	-40(%rbp), %rsp
	movl	%r12d, %eax
	movl	%ebx, %edx
	orq	%r13, %rax
	popq	%rbx
	popq	%r12
	salq	$32, %rcx
	popq	%r13
	popq	%r14
	orq	%rcx, %rdx
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L801:
	.cfi_restore_state
	xorl	%esi, %esi
	call	*init_vector(%rip)
	xorl	%esi, %esi
	movq	%rbx, %rdi
	call	*init_vector(%rip)
	jmp	.L804
	.cfi_endproc
.LFE162:
	.size	cartesian_init_tensor, .-cartesian_init_tensor
	.p2align 4
	.globl	cartesian_init_scalar
	.type	cartesian_init_scalar, @function
cartesian_init_scalar:
.LFB158:
	.cfi_startproc
	movslq	%edi, %rax
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	leaq	(%rax,%rax,4), %rdx
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movq	%rax, %r14
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	leaq	(%rax,%rdx,2), %rbx
	salq	$4, %rbx
	addq	_attribute(%rip), %rbx
	movq	32(%rbx), %r8
	testq	%rsi, %rsi
	je	.L813
	movq	%r8, %rdi
	movq	%rsi, %rbp
	call	free
	movq	%rbp, %rdi
	call	strdup
	movq	%rax, %r8
.L813:
	movl	64(%rbx), %edx
	xorl	%eax, %eax
	movl	$22, %ecx
	movq	%rbx, %rdi
	movq	(%rbx), %r12
	movq	8(%rbx), %rbp
	rep stosq
	testl	%edx, %edx
	movl	$1, %eax
	movq	%r8, 32(%rbx)
	cmove	%eax, %edx
	movl	nboundary(%rip), %r13d
	movl	%edx, 64(%rbx)
	testq	%r12, %r12
	je	.L829
	movq	%r12, (%rbx)
	testq	%rbp, %rbp
	je	.L830
.L816:
	movq	%rbp, 8(%rbx)
	xorl	%eax, %eax
	testl	%r13d, %r13d
	jle	.L819
	.p2align 4,,10
	.p2align 3
.L817:
	movl	$symmetry, %edx
	cmpq	$3, %rax
	ja	.L818
	movq	default_scalar_bc(,%rax,8), %rdx
.L818:
	movq	%rdx, 0(%rbp,%rax,8)
	movq	%rdx, (%r12,%rax,8)
	addq	$1, %rax
	cmpl	%eax, %r13d
	jg	.L817
.L819:
	movq	$0, 16(%rbx)
	movl	%r14d, %eax
	movq	$0, 40(%rbx)
	movq	$-1, 48(%rbx)
	movl	$0, 56(%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L829:
	.cfi_restore_state
	movslq	%r13d, %rdi
	salq	$3, %rdi
	call	malloc
	movq	%rax, %r12
	movq	%r12, (%rbx)
	testq	%rbp, %rbp
	jne	.L816
	.p2align 4,,10
	.p2align 3
.L830:
	movslq	%r13d, %rdi
	salq	$3, %rdi
	call	malloc
	movq	%rax, %rbp
	jmp	.L816
	.cfi_endproc
.LFE158:
	.size	cartesian_init_scalar, .-cartesian_init_scalar
	.p2align 4
	.type	multigrid_init_scalar, @function
multigrid_init_scalar:
.LFB199:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	cartesian_init_scalar
	movslq	%eax, %rdx
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	$refine_bilinear, 96(%rdx)
	movq	$restriction_average, 104(%rdx)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE199:
	.size	multigrid_init_scalar, .-multigrid_init_scalar
	.section	.rodata.str1.1
.LC28:
	.string	"[%d"
.LC29:
	.string	",%d"
	.text
	.p2align 4
	.type	write_stencil_index, @function
write_stencil_index:
.LFB178:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	movl	(%rdi), %edx
	movl	$.LC28, %esi
	movq	stderr(%rip), %rdi
	xorl	%eax, %eax
	call	fprintf
	movl	4(%rbx), %edx
	movl	$.LC29, %esi
	xorl	%eax, %eax
	movq	stderr(%rip), %rdi
	call	fprintf
	movq	stderr(%rip), %rsi
	movl	$93, %edi
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	fputc
	.cfi_endproc
.LFE178:
	.size	write_stencil_index, .-write_stencil_index
	.section	.rodata.str1.1
.LC30:
	.string	"PATH"
.LC31:
	.string	":"
.LC32:
	.string	"r"
	.text
	.p2align 4
	.type	which, @function
which:
.LFB260:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	movq	%rdi, %r12
	movl	$.LC30, %edi
	pushq	%rbx
	subq	$8, %rsp
	.cfi_offset 3, -56
	call	getenv
	testq	%rax, %rax
	je	.L836
	movq	%rax, %rdi
	movq	%rax, %r13
	call	strlen
	movq	%r13, %rsi
	leaq	1(%rax), %rdx
	addq	$16, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movq	%rsp, %rdi
	call	memcpy
	movl	$.LC31, %esi
	movq	%rsp, %rdi
	call	strtok
	movq	%rax, %r15
	testq	%rax, %rax
	jne	.L839
	jmp	.L836
	.p2align 4,,10
	.p2align 3
.L837:
	movl	$.LC31, %esi
	xorl	%edi, %edi
	call	strtok
	movq	%r13, %rsp
	movq	%rax, %r15
	testq	%rax, %rax
	je	.L836
.L839:
	movq	%r15, %rdi
	movq	%rsp, %r13
	call	strlen
	movq	%r12, %rdi
	movq	%rax, %r14
	call	strlen
	movq	%r14, %rdx
	movq	%r15, %rsi
	movq	%rax, %rbx
	leaq	17(%r14,%rax), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movq	%rsp, %rdi
	call	memcpy
	movb	$47, (%rsp,%r14)
	movq	%r12, %rsi
	leaq	1(%rbx), %rdx
	leaq	1(%rsp,%r14), %rdi
	call	memcpy
	movl	$.LC32, %esi
	movq	%rsp, %rdi
	call	fopen
	testq	%rax, %rax
	je	.L837
	movq	%rax, %rdi
	call	fclose
	movq	%r13, %rsp
	leaq	-40(%rbp), %rsp
	movl	$1, %eax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L836:
	.cfi_restore_state
	leaq	-40(%rbp), %rsp
	xorl	%eax, %eax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE260:
	.size	which, .-which
	.p2align 4
	.type	ppm_fallback, @function
ppm_fallback:
.LFB261:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	.cfi_offset 13, -24
	movq	%rsi, %r13
	pushq	%r12
	.cfi_offset 12, -32
	movq	%rdi, %r12
	pushq	%rbx
	subq	$8, %rsp
	.cfi_offset 3, -40
	call	strlen
	movq	%r12, %rsi
	movq	%rax, %rbx
	addq	$20, %rax
	andq	$-16, %rax
	movq	%rbx, %rdx
	subq	%rax, %rsp
	movq	%rsp, %rdi
	call	memcpy
	movq	%r13, %rsi
	movq	%rsp, %rdi
	movb	$0, 4(%rsp,%rbx)
	movl	$1836085294, (%rsp,%rbx)
	call	fopen
	testq	%rax, %rax
	je	.L851
	leaq	-24(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
.L851:
	.cfi_restore_state
	movq	%r12, %rdi
	call	perror
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE261:
	.size	ppm_fallback, .-ppm_fallback
	.p2align 4
	.type	kappa_y, @function
kappa_y:
.LFB383:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movslq	%esi, %rcx
	movl	$1, %esi
	pxor	%xmm0, %xmm0
	sall	%cl, %esi
	movq	%rdi, %rax
	sarq	$32, %rdx
	cvtsi2sdl	%esi, %xmm0
	sarq	$32, %rax
	subq	$48, %rsp
	.cfi_def_cfa_offset 64
	movsd	.LC10(%rip), %xmm5
	movq	grid(%rip), %rsi
	leaq	0(,%rax,8), %r11
	movl	%ecx, 40(%rsp)
	movq	.LC17(%rip), %xmm1
	movapd	%xmm5, %xmm4
	movq	24(%rsi), %rsi
	movq	%rdi, 32(%rsp)
	movslq	%edi, %rdi
	divsd	%xmm0, %xmm4
	salq	$3, %rdi
	movsd	.LC2(%rip), %xmm2
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r9
	leaq	1(%rdx), %rcx
	leaq	0(,%rcx,8), %r10
	leaq	(%r9,%rdi), %r8
	movq	(%r8), %rdx
	movq	(%rdx,%rax,8), %rdx
	movsd	(%rdx,%rcx,8), %xmm3
	movq	$-1, %rdx
	movapd	%xmm3, %xmm0
	andpd	%xmm1, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%bl
	mulsd	L0(%rip), %xmm4
.L855:
	movq	(%r8,%rdx,8), %rsi
	movq	(%rsi,%r11), %rsi
	movsd	(%rsi,%r10), %xmm0
	ucomisd	%xmm2, %xmm0
	jp	.L857
	je	.L852
.L857:
	andpd	%xmm1, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%sil
	cmpb	%sil, %bl
	jne	.L856
	addq	$1, %rdx
	cmpq	$2, %rdx
	jne	.L855
	movq	8(%r9,%rdi), %rdx
	movsd	.LC33(%rip), %xmm1
	movsd	%xmm4, 24(%rsp)
	movsd	%xmm3, 16(%rsp)
	movq	(%rdx,%rax,8), %rdx
	movsd	(%rdx,%rcx,8), %xmm2
	movq	-8(%r9,%rdi), %rdx
	movq	(%rdx,%rax,8), %rax
	movapd	%xmm2, %xmm0
	movsd	%xmm2, 8(%rsp)
	movsd	(%rax,%rcx,8), %xmm6
	subsd	%xmm6, %xmm0
	mulsd	.LC5(%rip), %xmm0
	movsd	%xmm6, (%rsp)
	mulsd	%xmm0, %xmm0
	addsd	%xmm5, %xmm0
	call	pow
	movsd	8(%rsp), %xmm2
	movsd	(%rsp), %xmm6
	movsd	16(%rsp), %xmm3
	movapd	%xmm0, %xmm5
	movsd	24(%rsp), %xmm4
	addsd	%xmm6, %xmm2
	addsd	%xmm3, %xmm3
	movapd	%xmm2, %xmm0
	subsd	%xmm3, %xmm0
	divsd	%xmm4, %xmm0
	divsd	%xmm5, %xmm0
.L852:
	addq	$48, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L856:
	.cfi_restore_state
	movapd	%xmm2, %xmm0
	jmp	.L852
	.cfi_endproc
.LFE383:
	.size	kappa_y, .-kappa_y
	.p2align 4
	.type	kappa_x, @function
kappa_x:
.LFB384:
	.cfi_startproc
	movslq	%esi, %rcx
	movl	$1, %esi
	pxor	%xmm0, %xmm0
	subq	$56, %rsp
	.cfi_def_cfa_offset 64
	sall	%cl, %esi
	movsd	.LC10(%rip), %xmm5
	movl	%ecx, 40(%rsp)
	movq	%rdi, %rax
	cvtsi2sdl	%esi, %xmm0
	movq	grid(%rip), %rsi
	sarq	$32, %rax
	movq	%rdi, 32(%rsp)
	movapd	%xmm5, %xmm4
	salq	$3, %rax
	movq	.LC17(%rip), %xmm1
	movsd	.LC2(%rip), %xmm2
	movq	24(%rsi), %rsi
	divsd	%xmm0, %xmm4
	movq	(%rsi,%rcx,8), %rcx
	movslq	%edi, %rsi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %r8
	movslq	%edx, %rcx
	addq	$1, %rcx
	leaq	(%r8,%rax), %rdi
	leaq	0(,%rcx,8), %r9
	movq	(%rdi), %rdx
	movsd	(%rdx,%rcx,8), %xmm3
	movq	$-1, %rdx
	movapd	%xmm3, %xmm0
	andpd	%xmm1, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%r10b
	mulsd	L0(%rip), %xmm4
.L863:
	movq	(%rdi,%rdx,8), %rsi
	movsd	(%rsi,%r9), %xmm0
	ucomisd	%xmm2, %xmm0
	jp	.L865
	je	.L860
.L865:
	andpd	%xmm1, %xmm0
	comisd	.LC15(%rip), %xmm0
	seta	%sil
	cmpb	%sil, %r10b
	jne	.L864
	addq	$1, %rdx
	cmpq	$2, %rdx
	jne	.L863
	movq	8(%r8,%rax), %rdx
	movq	-8(%r8,%rax), %rax
	movsd	%xmm4, 24(%rsp)
	movsd	.LC33(%rip), %xmm1
	movsd	%xmm3, 16(%rsp)
	movsd	(%rdx,%rcx,8), %xmm2
	movsd	(%rax,%rcx,8), %xmm6
	movapd	%xmm2, %xmm0
	movsd	%xmm2, 8(%rsp)
	subsd	%xmm6, %xmm0
	mulsd	.LC5(%rip), %xmm0
	movsd	%xmm6, (%rsp)
	mulsd	%xmm0, %xmm0
	addsd	%xmm5, %xmm0
	call	pow
	movsd	8(%rsp), %xmm2
	movsd	(%rsp), %xmm6
	movsd	16(%rsp), %xmm3
	movapd	%xmm0, %xmm1
	movsd	24(%rsp), %xmm4
	addsd	%xmm6, %xmm2
	addsd	%xmm3, %xmm3
	movapd	%xmm2, %xmm0
	subsd	%xmm3, %xmm0
	divsd	%xmm4, %xmm0
	divsd	%xmm1, %xmm0
.L860:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L864:
	.cfi_restore_state
	movapd	%xmm2, %xmm0
	jmp	.L860
	.cfi_endproc
.LFE384:
	.size	kappa_x, .-kappa_x
	.section	.rodata.str1.1
.LC34:
	.string	"c->nm > c->n"
	.section	.rodata.str1.8
	.align 8
.LC35:
	.string	"/root/mnt/basilisk/src/grid/tree.h"
	.text
	.p2align 4
	.type	cache_level_shrink, @function
cache_level_shrink:
.LFB83:
	.cfi_startproc
	movl	8(%rdi), %edx
	testl	%edx, %edx
	leal	127(%rdx), %eax
	cmovns	%edx, %eax
	andl	$-128, %eax
	leal	128(%rax), %esi
	cmpl	%esi, 12(%rdi)
	jle	.L872
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	movl	%esi, 12(%rdi)
	cmpl	%esi, %edx
	jge	.L875
	movq	(%rdi), %rdi
	movslq	%esi, %rsi
	salq	$4, %rsi
	call	realloc
	movq	%rax, (%rbx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L872:
	.cfi_restore 3
	ret
.L875:
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	$.LC34, %edx
	movl	$200, %esi
	movl	$.LC35, %edi
	call	qassert
	.cfi_endproc
.LFE83:
	.size	cache_level_shrink, .-cache_level_shrink
	.p2align 4
	.type	velocity_grid_x_expr0, @function
velocity_grid_x_expr0:
.LFB551:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE551:
	.size	velocity_grid_x_expr0, .-velocity_grid_x_expr0
	.p2align 4
	.type	output_field_bolla_expr2, @function
output_field_bolla_expr2:
.LFB533:
	.cfi_startproc
	movq	$0x000000000, (%rsi)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE533:
	.size	output_field_bolla_expr2, .-output_field_bolla_expr2
	.p2align 4
	.type	_boundary7, @function
_boundary7:
.LFB531:
	.cfi_startproc
	pxor	%xmm0, %xmm0
	ret
	.cfi_endproc
.LFE531:
	.size	_boundary7, .-_boundary7
	.p2align 4
	.type	end_timestep, @function
end_timestep:
.LFB525:
	.cfi_startproc
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE525:
	.size	end_timestep, .-end_timestep
	.p2align 4
	.type	viscous_term_expr0, @function
viscous_term_expr0:
.LFB491:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE491:
	.size	viscous_term_expr0, .-viscous_term_expr0
	.p2align 4
	.type	defaults_4_expr0, @function
defaults_4_expr0:
.LFB471:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE471:
	.size	defaults_4_expr0, .-defaults_4_expr0
	.section	.rodata.str1.1
.LC36:
	.string	"u.x"
.LC37:
	.string	"U"
.LC38:
	.string	"u.y"
.LC39:
	.string	"V"
.LC40:
	.string	"u.z"
.LC41:
	.string	"W"
	.text
	.p2align 4
	.type	replace.constprop.0, @function
replace.constprop.0:
.LFB572:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	testb	%sil, %sil
	je	.L883
	movl	$.LC36, %esi
	call	strcmp
	testl	%eax, %eax
	je	.L894
	movl	$.LC38, %esi
	movq	%rbp, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L895
	movl	$.LC40, %esi
	movq	%rbp, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L896
.L883:
	movq	%rbp, %rdi
	call	strdup
	movzbl	(%rax), %ecx
	testb	%cl, %cl
	je	.L882
	movq	%rax, %rdx
	.p2align 4,,10
	.p2align 3
.L888:
	cmpb	$46, %cl
	jne	.L887
	movb	$95, (%rdx)
.L887:
	movzbl	1(%rdx), %ecx
	addq	$1, %rdx
	testb	%cl, %cl
	jne	.L888
.L882:
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L895:
	.cfi_restore_state
	movl	$.LC39, %edi
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	jmp	strdup
	.p2align 4,,10
	.p2align 3
.L896:
	.cfi_restore_state
	movl	$.LC41, %edi
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	jmp	strdup
	.p2align 4,,10
	.p2align 3
.L894:
	.cfi_restore_state
	movl	$.LC37, %edi
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	strdup
	.cfi_endproc
.LFE572:
	.size	replace.constprop.0, .-replace.constprop.0
	.p2align 4
	.type	parabola_fit_add.isra.0, @function
parabola_fit_add.isra.0:
.LFB573:
	.cfi_startproc
	subsd	(%rdi), %xmm0
	subsd	8(%rdi), %xmm1
	movsd	32(%rdi), %xmm4
	movsd	24(%rdi), %xmm5
	movq	48(%rdi), %rcx
	movapd	%xmm0, %xmm3
	movapd	%xmm1, %xmm6
	mulsd	%xmm4, %xmm3
	movq	(%rcx), %rdx
	mulsd	%xmm5, %xmm6
	mulsd	%xmm5, %xmm0
	mulsd	%xmm4, %xmm1
	subsd	%xmm6, %xmm3
	addsd	%xmm0, %xmm1
	movapd	%xmm3, %xmm0
	movapd	%xmm3, %xmm4
	movapd	%xmm3, %xmm5
	mulsd	%xmm2, %xmm0
	mulsd	%xmm0, %xmm4
	mulsd	%xmm4, %xmm5
	mulsd	%xmm5, %xmm3
	addsd	(%rdx), %xmm3
	movsd	%xmm3, (%rdx)
	movq	8(%rcx), %rdx
	movsd	8(%rdx), %xmm3
	addsd	(%rdx), %xmm5
	addsd	%xmm4, %xmm3
	mulsd	%xmm1, %xmm4
	movsd	%xmm5, (%rdx)
	movsd	%xmm3, 8(%rdx)
	movq	16(%rcx), %rdx
	movsd	8(%rdx), %xmm3
	addsd	%xmm0, %xmm3
	mulsd	%xmm1, %xmm0
	mulsd	%xmm2, %xmm1
	movsd	%xmm3, 8(%rdx)
	movsd	16(%rdx), %xmm3
	addsd	%xmm2, %xmm3
	movsd	%xmm3, 16(%rdx)
	addsd	56(%rdi), %xmm4
	addsd	64(%rdi), %xmm0
	addsd	72(%rdi), %xmm1
	movsd	%xmm4, 56(%rdi)
	movsd	%xmm0, 64(%rdi)
	movsd	%xmm1, 72(%rdi)
	ret
	.cfi_endproc
.LFE573:
	.size	parabola_fit_add.isra.0, .-parabola_fit_add.isra.0
	.p2align 4
	.type	interpolate_linear.isra.0, @function
interpolate_linear.isra.0:
.LFB574:
	.cfi_startproc
	movslq	%esi, %rcx
	movl	$1, %esi
	pxor	%xmm3, %xmm3
	movl	%edx, %r8d
	sall	%cl, %esi
	movsd	.LC10(%rip), %xmm4
	movapd	%xmm0, %xmm2
	movl	%edi, %edx
	cvtsi2sdl	%esi, %xmm3
	leal	-2(%rdx), %eax
	pxor	%xmm5, %xmm5
	shrq	$32, %rdi
	movapd	%xmm4, %xmm0
	movsd	.LC5(%rip), %xmm6
	xorl	%r10d, %r10d
	divsd	%xmm3, %xmm0
	pxor	%xmm3, %xmm3
	cvtsi2sdl	%eax, %xmm3
	movslq	%r8d, %rax
	leal	-2(%rdi), %r8d
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	addq	_attribute(%rip), %rsi
	addsd	%xmm5, %xmm3
	addsd	%xmm6, %xmm3
	mulsd	L0(%rip), %xmm0
	mulsd	%xmm0, %xmm3
	addsd	X0(%rip), %xmm3
	subsd	%xmm3, %xmm2
	pxor	%xmm3, %xmm3
	cvtsi2sdl	40(%rsi), %xmm3
	divsd	%xmm0, %xmm2
	mulsd	%xmm6, %xmm3
	subsd	%xmm3, %xmm2
	pxor	%xmm3, %xmm3
	cvtsi2sdl	%r8d, %xmm3
	movslq	%edi, %r8
	comisd	%xmm5, %xmm2
	addsd	%xmm5, %xmm3
	seta	%r10b
	xorl	%r9d, %r9d
	addsd	%xmm6, %xmm3
	mulsd	%xmm0, %xmm3
	addsd	Y0(%rip), %xmm3
	subsd	%xmm3, %xmm1
	movapd	%xmm4, %xmm3
	divsd	%xmm0, %xmm1
	pxor	%xmm0, %xmm0
	cvtsi2sdl	44(%rsi), %xmm0
	movq	grid(%rip), %rsi
	movq	24(%rsi), %rsi
	mulsd	%xmm6, %xmm0
	movq	(%rsi,%rcx,8), %rcx
	movslq	%edx, %rsi
	leal	-1(%rdx,%r10,2), %edx
	movslq	%edx, %rdx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rcx,%rdx,8), %rcx
	subsd	%xmm0, %xmm1
	movq	.LC17(%rip), %xmm0
	andpd	%xmm0, %xmm2
	comisd	%xmm5, %xmm1
	andpd	%xmm0, %xmm1
	subsd	%xmm2, %xmm3
	subsd	%xmm1, %xmm4
	seta	%r9b
	leal	-1(%rdi,%r9,2), %edx
	movq	(%rsi,%r8,8), %rdi
	movslq	%edx, %rdx
	movsd	8(%rdi,%rax,8), %xmm0
	movq	(%rcx,%r8,8), %rdi
	movq	(%rsi,%rdx,8), %rsi
	movq	(%rcx,%rdx,8), %rdx
	movsd	8(%rdi,%rax,8), %xmm5
	mulsd	%xmm3, %xmm0
	mulsd	8(%rsi,%rax,8), %xmm3
	mulsd	%xmm2, %xmm5
	mulsd	8(%rdx,%rax,8), %xmm2
	addsd	%xmm5, %xmm0
	addsd	%xmm2, %xmm3
	mulsd	%xmm4, %xmm0
	mulsd	%xmm1, %xmm3
	addsd	%xmm3, %xmm0
	ret
	.cfi_endproc
.LFE574:
	.size	interpolate_linear.isra.0, .-interpolate_linear.isra.0
	.section	.rodata.str1.8
	.align 8
.LC42:
	.string	"exec xterm -e 'gdb -p %d' & xterm -e 'gnuplot plot -'"
	.text
	.p2align 4
	.type	gdb.isra.0, @function
gdb.isra.0:
.LFB575:
	.cfi_startproc
	subq	$88, %rsp
	.cfi_def_cfa_offset 96
	movl	last_point+8(%rip), %eax
	testl	%eax, %eax
	js	.L904
	movq	last_point(%rip), %rdi
	movl	last_point+8(%rip), %esi
	call	*debug(%rip)
	movq	stderr(%rip), %rsi
	movl	$10, %edi
	call	fputc
	movq	stderr(%rip), %rdi
	call	fflush
.L904:
	call	getpid
	movq	%rsp, %rdi
	movl	$.LC42, %esi
	movl	%eax, %edx
	xorl	%eax, %eax
	call	sprintf
	movq	%rsp, %rdi
	call	system
	addq	$88, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE575:
	.size	gdb.isra.0, .-gdb.isra.0
	.section	.rodata.str1.8
	.align 8
.LC43:
	.string	"Caught signal %d (Floating Point Exception)\n"
	.text
	.p2align 4
	.type	caught_fpe, @function
caught_fpe:
.LFB129:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	%edi, %edx
	movq	stderr(%rip), %rdi
	xorl	%eax, %eax
	movl	$.LC43, %esi
	call	fprintf
	xorl	%eax, %eax
	call	gdb.isra.0
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE129:
	.size	caught_fpe, .-caught_fpe
	.section	.rodata.str1.8
	.align 8
.LC44:
	.string	"Caught signal %d (Segmentation Fault)\n"
	.text
	.p2align 4
	.type	caught_segfault, @function
caught_segfault:
.LFB130:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	%edi, %edx
	movq	stderr(%rip), %rdi
	xorl	%eax, %eax
	movl	$.LC44, %esi
	call	fprintf
	xorl	%eax, %eax
	call	gdb.isra.0
	movl	$2, %edi
	call	exit
	.cfi_endproc
.LFE130:
	.size	caught_segfault, .-caught_segfault
	.section	.rodata.str1.1
.LC45:
	.string	"Caught signal %d (Aborted)\n"
	.text
	.p2align 4
	.type	caught_abort, @function
caught_abort:
.LFB128:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	%edi, %edx
	movq	stderr(%rip), %rdi
	xorl	%eax, %eax
	movl	$.LC45, %esi
	call	fprintf
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	jmp	gdb.isra.0
	.cfi_endproc
.LFE128:
	.size	caught_abort, .-caught_abort
	.section	.rodata.str1.1
.LC46:
	.string	"%s:%d: error: %s\n"
	.text
	.p2align 4
	.type	event_error.isra.0, @function
event_error.isra.0:
.LFB576:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	%rdx, %r8
	movq	%rdi, %rdx
	movl	%esi, %ecx
	movq	stderr(%rip), %rdi
	movl	$.LC46, %esi
	xorl	%eax, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE576:
	.size	event_error.isra.0, .-event_error.isra.0
	.section	.rodata.str1.8
	.align 8
.LC48:
	.string	"events can only use a single condition"
	.align 8
.LC49:
	.string	"events can only use a single initialisation"
	.align 8
.LC50:
	.string	"events can only use a single increment"
	.text
	.p2align 4
	.type	init_event.part.0, @function
init_event.part.0:
.LFB449:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movq	%rdi, %rbx
	subq	$32, %rsp
	.cfi_def_cfa_offset 80
	movl	4(%rdi), %eax
	movq	16(%rdi), %r13
	testl	%eax, %eax
	jle	.L915
	xorl	%ebp, %ebp
	xorl	%r12d, %r12d
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	jmp	.L926
	.p2align 4,,10
	.p2align 3
.L917:
	movl	%eax, 12(%rsp)
	movq	%rbx, %rdx
	leaq	24(%rsp), %rsi
	leaq	12(%rsp), %rdi
	movsd	%xmm0, 24(%rsp)
	call	*16(%rbx,%rbp,8)
	movl	8(%rsp), %eax
	cmpl	%eax, 12(%rsp)
	je	.L942
.L921:
	testq	%r12, %r12
	jne	.L943
	movq	16(%rbx,%rbp,8), %r12
.L920:
	addq	$1, %rbp
	cmpl	%ebp, 4(%rbx)
	jle	.L944
.L926:
	movq	.LC47(%rip), %rax
	movl	$-123456, 8(%rsp)
	movq	%rbx, %rdx
	leaq	16(%rsp), %rsi
	leaq	8(%rsp), %rdi
	movq	%rax, 16(%rsp)
	call	*16(%rbx,%rbp,8)
	movl	8(%rsp), %eax
	movsd	16(%rsp), %xmm0
	cmpl	$-123456, %eax
	jne	.L917
	ucomisd	.LC47(%rip), %xmm0
	jp	.L917
	jne	.L917
	testq	%r14, %r14
	jne	.L945
	movq	16(%rbx,%rbp,8), %r14
	addq	$1, %rbp
	cmpl	%ebp, 4(%rbx)
	jg	.L926
	.p2align 4,,10
	.p2align 3
.L944:
	movq	%r13, 16(%rbx)
	movq	%r14, 24(%rbx)
	movq	%r12, 32(%rbx)
	movl	$0, 4(%rbx)
.L915:
	movq	.LC23(%rip), %rax
	movl	$-1, 88(%rbx)
	movq	%rax, 80(%rbx)
	testq	%r13, %r13
	je	.L927
	leaq	80(%rbx), %rsi
	leaq	88(%rbx), %rdi
	movq	%rbx, %rdx
	call	*%r13
	cmpl	$1234567890, 88(%rbx)
	je	.L928
	movsd	.LC13(%rip), %xmm0
	ucomisd	80(%rbx), %xmm0
	jp	.L914
	jne	.L914
.L928:
	movq	.LC23(%rip), %rax
	movl	$1234567890, 88(%rbx)
	movq	%rax, 80(%rbx)
.L914:
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L942:
	.cfi_restore_state
	movsd	24(%rsp), %xmm0
	ucomisd	16(%rsp), %xmm0
	jp	.L921
	jne	.L921
	testq	%r13, %r13
	jne	.L946
	movq	16(%rbx,%rbp,8), %r13
	jmp	.L920
	.p2align 4,,10
	.p2align 3
.L927:
	movq	32(%rbx), %rax
	testq	%rax, %rax
	je	.L914
	leaq	80(%rbx), %rsi
	leaq	88(%rbx), %rdi
	movq	%rbx, %rdx
	call	*%rax
	cmpl	$-1, 88(%rbx)
	je	.L932
	movl	$0, 88(%rbx)
.L932:
	movsd	.LC23(%rip), %xmm1
	ucomisd	80(%rbx), %xmm1
	jp	.L936
	je	.L914
.L936:
	movq	$0x000000000, 80(%rbx)
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
.L943:
	.cfi_restore_state
	movl	64(%rbx), %esi
	movq	56(%rbx), %rdi
	movl	$.LC50, %edx
	call	event_error.isra.0
.L946:
	movl	64(%rbx), %esi
	movq	56(%rbx), %rdi
	movl	$.LC49, %edx
	call	event_error.isra.0
.L945:
	movl	64(%rbx), %esi
	movq	56(%rbx), %rdi
	movl	$.LC48, %edx
	call	event_error.isra.0
	.cfi_endproc
.LFE449:
	.size	init_event.part.0, .-init_event.part.0
	.p2align 4
	.type	tracer_advection, @function
tracer_advection:
.LFB519:
	.cfi_startproc
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE519:
	.size	tracer_advection, .-tracer_advection
	.p2align 4
	.type	tracer_diffusion, @function
tracer_diffusion:
.LFB521:
	.cfi_startproc
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE521:
	.size	tracer_diffusion, .-tracer_diffusion
	.p2align 4
	.type	properties, @function
properties:
.LFB523:
	.cfi_startproc
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE523:
	.size	properties, .-properties
	.p2align 4
	.type	output_field_fuori_expr2, @function
output_field_fuori_expr2:
.LFB535:
	.cfi_startproc
	movq	$0x000000000, (%rsi)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE535:
	.size	output_field_fuori_expr2, .-output_field_fuori_expr2
	.p2align 4
	.type	interface_expr2, @function
interface_expr2:
.LFB537:
	.cfi_startproc
	movq	$0x000000000, (%rsi)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE537:
	.size	interface_expr2, .-interface_expr2
	.p2align 4
	.type	snapshot_expr1, @function
snapshot_expr1:
.LFB539:
	.cfi_startproc
	movq	$0x000000000, (%rsi)
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE539:
	.size	snapshot_expr1, .-snapshot_expr1
	.p2align 4
	.type	output_field_fuori_expr0, @function
output_field_fuori_expr0:
.LFB541:
	.cfi_startproc
	movsd	.LC21(%rip), %xmm0
	xorl	%eax, %eax
	comisd	(%rsi), %xmm0
	setnb	%al
	ret
	.cfi_endproc
.LFE541:
	.size	output_field_fuori_expr0, .-output_field_fuori_expr0
	.p2align 4
	.type	interface_expr0, @function
interface_expr0:
.LFB543:
	.cfi_startproc
	movsd	.LC21(%rip), %xmm0
	xorl	%eax, %eax
	comisd	(%rsi), %xmm0
	setnb	%al
	ret
	.cfi_endproc
.LFE543:
	.size	interface_expr0, .-interface_expr0
	.p2align 4
	.type	defaults_0_expr0, @function
defaults_0_expr0:
.LFB459:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE459:
	.size	defaults_0_expr0, .-defaults_0_expr0
	.p2align 4
	.type	default_display_expr0, @function
default_display_expr0:
.LFB461:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE461:
	.size	default_display_expr0, .-default_display_expr0
	.p2align 4
	.type	init_expr0, @function
init_expr0:
.LFB463:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE463:
	.size	init_expr0, .-init_expr0
	.p2align 4
	.type	defaults_1_expr0, @function
defaults_1_expr0:
.LFB465:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE465:
	.size	defaults_1_expr0, .-defaults_1_expr0
	.p2align 4
	.type	defaults_2_expr0, @function
defaults_2_expr0:
.LFB467:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE467:
	.size	defaults_2_expr0, .-defaults_2_expr0
	.p2align 4
	.type	defaults_3_expr0, @function
defaults_3_expr0:
.LFB469:
	.cfi_startproc
	movsd	(%rsi), %xmm0
	xorl	%eax, %eax
	movl	$0, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE469:
	.size	defaults_3_expr0, .-defaults_3_expr0
	.p2align 4
	.type	stability_0_expr0, @function
stability_0_expr0:
.LFB501:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE501:
	.size	stability_0_expr0, .-stability_0_expr0
	.p2align 4
	.type	tracer_diffusion_expr0, @function
tracer_diffusion_expr0:
.LFB485:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE485:
	.size	tracer_diffusion_expr0, .-tracer_diffusion_expr0
	.p2align 4
	.type	acceleration_expr0, @function
acceleration_expr0:
.LFB493:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE493:
	.size	acceleration_expr0, .-acceleration_expr0
	.p2align 4
	.type	projection_expr0, @function
projection_expr0:
.LFB495:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE495:
	.size	projection_expr0, .-projection_expr0
	.p2align 4
	.type	end_timestep_expr0, @function
end_timestep_expr0:
.LFB497:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE497:
	.size	end_timestep_expr0, .-end_timestep_expr0
	.p2align 4
	.type	acceleration_0_expr0, @function
acceleration_0_expr0:
.LFB509:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE509:
	.size	acceleration_0_expr0, .-acceleration_0_expr0
	.p2align 4
	.type	tracer_advection_0_expr0, @function
tracer_advection_0_expr0:
.LFB505:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE505:
	.size	tracer_advection_0_expr0, .-tracer_advection_0_expr0
	.p2align 4
	.type	properties_0_expr0, @function
properties_0_expr0:
.LFB507:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE507:
	.size	properties_0_expr0, .-properties_0_expr0
	.p2align 4
	.type	vof_0_expr0, @function
vof_0_expr0:
.LFB503:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE503:
	.size	vof_0_expr0, .-vof_0_expr0
	.p2align 4
	.type	stability_1_expr0, @function
stability_1_expr0:
.LFB511:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE511:
	.size	stability_1_expr0, .-stability_1_expr0
	.p2align 4
	.type	acceleration_1_expr0, @function
acceleration_1_expr0:
.LFB513:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE513:
	.size	acceleration_1_expr0, .-acceleration_1_expr0
	.p2align 4
	.type	velocity_grid_y_expr0, @function
velocity_grid_y_expr0:
.LFB553:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE553:
	.size	velocity_grid_y_expr0, .-velocity_grid_y_expr0
	.p2align 4
	.type	pressure_grid_expr0, @function
pressure_grid_expr0:
.LFB555:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE555:
	.size	pressure_grid_expr0, .-pressure_grid_expr0
	.p2align 4
	.type	vorticity_grid_expr0, @function
vorticity_grid_expr0:
.LFB557:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE557:
	.size	vorticity_grid_expr0, .-vorticity_grid_expr0
	.p2align 4
	.type	adapt_expr0, @function
adapt_expr0:
.LFB499:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE499:
	.size	adapt_expr0, .-adapt_expr0
	.p2align 4
	.type	output_field_fuori_expr1, @function
output_field_fuori_expr1:
.LFB545:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE545:
	.size	output_field_fuori_expr1, .-output_field_fuori_expr1
	.p2align 4
	.type	interface_expr1, @function
interface_expr1:
.LFB547:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE547:
	.size	interface_expr1, .-interface_expr1
	.p2align 4
	.type	stability_expr0, @function
stability_expr0:
.LFB479:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE479:
	.size	stability_expr0, .-stability_expr0
	.p2align 4
	.type	vof_expr0, @function
vof_expr0:
.LFB481:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE481:
	.size	vof_expr0, .-vof_expr0
	.p2align 4
	.type	tracer_advection_expr0, @function
tracer_advection_expr0:
.LFB483:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE483:
	.size	tracer_advection_expr0, .-tracer_advection_expr0
	.p2align 4
	.type	snapshot_expr0, @function
snapshot_expr0:
.LFB549:
	.cfi_startproc
	movsd	.LC22(%rip), %xmm0
	addsd	(%rsi), %xmm0
	cvttsd2sil	%xmm0, %eax
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE549:
	.size	snapshot_expr0, .-snapshot_expr0
	.p2align 4
	.type	acceleration_2_expr0, @function
acceleration_2_expr0:
.LFB515:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE515:
	.size	acceleration_2_expr0, .-acceleration_2_expr0
	.p2align 4
	.type	logfile_expr0, @function
logfile_expr0:
.LFB517:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE517:
	.size	logfile_expr0, .-logfile_expr0
	.p2align 4
	.type	properties_expr0, @function
properties_expr0:
.LFB487:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE487:
	.size	properties_expr0, .-properties_expr0
	.p2align 4
	.type	advection_term_expr0, @function
advection_term_expr0:
.LFB489:
	.cfi_startproc
	movl	(%rdi), %eax
	movsd	(%rsi), %xmm0
	leal	1(%rax), %edx
	movl	%edx, (%rdi)
	movsd	%xmm0, (%rsi)
	ret
	.cfi_endproc
.LFE489:
	.size	advection_term_expr0, .-advection_term_expr0
	.p2align 4
	.type	tree_init_scalar, @function
tree_init_scalar:
.LFB212:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	cartesian_init_scalar
	movslq	%eax, %rdx
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	movq	$refine_bilinear, 96(%rdx)
	movq	$restriction_average, 104(%rdx)
	movq	$refine_bilinear, 112(%rdx)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE212:
	.size	tree_init_scalar, .-tree_init_scalar
	.p2align 4
	.type	_boundary5, @function
_boundary5:
.LFB527:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	pxor	%xmm0, %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	subsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE527:
	.size	_boundary5, .-_boundary5
	.p2align 4
	.type	_boundary5_homogeneous, @function
_boundary5_homogeneous:
.LFB529:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	xorpd	.LC1(%rip), %xmm0
	ret
	.cfi_endproc
.LFE529:
	.size	_boundary5_homogeneous, .-_boundary5_homogeneous
	.p2align 4
	.type	open_image_cleanup, @function
open_image_cleanup:
.LFB258:
	.cfi_startproc
	movl	open_image_data+16(%rip), %eax
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testl	%eax, %eax
	jle	.L991
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L993:
	movq	open_image_data(%rip), %rax
	leaq	0(,%rbx,8), %r12
	movq	(%rax,%rbx,8), %rdi
	movq	qpopen_pipes(%rip), %rax
	testq	%rax, %rax
	jne	.L992
	jmp	.L997
	.p2align 4,,10
	.p2align 3
.L995:
	addq	$8, %rax
.L992:
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.L997
	cmpq	%rdx, %rdi
	jne	.L995
	movq	$1, (%rax)
	jmp	.L995
	.p2align 4,,10
	.p2align 3
.L997:
	call	pclose
	movq	open_image_data+8(%rip), %rbp
	addq	$1, %rbx
	movq	0(%rbp,%r12), %rdi
	call	free
	cmpl	%ebx, open_image_data+16(%rip)
	jg	.L993
.L994:
	movq	open_image_data(%rip), %rdi
	call	free
	movq	%rbp, %rdi
	call	free
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	$0, open_image_data(%rip)
	movq	$0, open_image_data+8(%rip)
	popq	%r12
	.cfi_def_cfa_offset 8
	movl	$0, open_image_data+16(%rip)
	ret
.L991:
	.cfi_restore_state
	movq	open_image_data+8(%rip), %rbp
	jmp	.L994
	.cfi_endproc
.LFE258:
	.size	open_image_cleanup, .-open_image_cleanup
	.p2align 4
	.type	multigrid_init_vertex_scalar, @function
multigrid_init_vertex_scalar:
.LFB200:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movslq	%edi, %rax
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	leaq	(%rax,%rax,4), %rdx
	movq	%rax, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	leaq	(%rax,%rdx,2), %rbx
	salq	$4, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movslq	nboundary(%rip), %rax
	addq	_attribute(%rip), %rbx
	movq	$-1, 40(%rbx)
	testl	%eax, %eax
	jle	.L1002
	movq	8(%rbx), %rdi
	leaq	0(,%rax,8), %r13
	movq	(%rbx), %rbp
	leaq	(%rdi,%r13), %rdx
	cmpq	%rdx, %rbp
	jnb	.L1006
	leaq	0(%rbp,%r13), %rdx
	cmpq	%rdx, %rdi
	jb	.L1005
.L1006:
	movq	%r13, %rdx
	xorl	%esi, %esi
	call	memset
	movq	%r13, %rdx
	xorl	%esi, %esi
	movq	%rbp, %rdi
	call	memset
.L1002:
	movq	$restriction_vertex, 104(%rbx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movl	%r12d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
.L1005:
	.cfi_restore_state
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L1003:
	movq	$0, (%rdi,%rdx,8)
	movq	$0, 0(%rbp,%rdx,8)
	addq	$1, %rdx
	cmpq	%rdx, %rax
	jne	.L1003
	jmp	.L1002
	.cfi_endproc
.LFE200:
	.size	multigrid_init_vertex_scalar, .-multigrid_init_vertex_scalar
	.p2align 4
	.type	tree_init_vertex_scalar, @function
tree_init_vertex_scalar:
.LFB214:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movslq	%edi, %rax
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	leaq	(%rax,%rax,4), %rdx
	movq	%rax, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	leaq	(%rax,%rdx,2), %rbx
	salq	$4, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movslq	nboundary(%rip), %rax
	addq	_attribute(%rip), %rbx
	movq	$-1, 40(%rbx)
	testl	%eax, %eax
	jle	.L1010
	movq	(%rbx), %rbp
	leaq	0(,%rax,8), %r13
	movq	8(%rbx), %rdi
	leaq	0(%rbp,%r13), %rdx
	cmpq	%rdx, %rdi
	jnb	.L1014
	leaq	(%rdi,%r13), %rdx
	cmpq	%rdx, %rbp
	jb	.L1013
.L1014:
	movq	%r13, %rdx
	xorl	%esi, %esi
	call	memset
	movq	%r13, %rdx
	xorl	%esi, %esi
	movq	%rbp, %rdi
	call	memset
.L1010:
	movq	$restriction_vertex, 104(%rbx)
	movl	%r12d, %eax
	movq	$prolongation_vertex, 96(%rbx)
	movq	$prolongation_vertex, 112(%rbx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
.L1013:
	.cfi_restore_state
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L1011:
	movq	$0, (%rdi,%rdx,8)
	movq	$0, 0(%rbp,%rdx,8)
	addq	$1, %rdx
	cmpq	%rax, %rdx
	jne	.L1011
	jmp	.L1010
	.cfi_endproc
.LFE214:
	.size	tree_init_vertex_scalar, .-tree_init_vertex_scalar
	.section	.rodata.str1.1
.LC51:
	.string	".mp4"
.LC52:
	.string	".ogv"
.LC53:
	.string	".gif"
	.text
	.p2align 4
	.type	is_animation, @function
is_animation:
.LFB257:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	xorl	%r12d, %r12d
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rdi, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	call	strlen
	cmpl	$4, %eax
	jle	.L1017
	cltq
	movl	$.LC51, %esi
	leaq	-4(%rbx,%rax), %r12
	movq	%r12, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L1028
.L1017:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movq	%r12, %rax
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1028:
	.cfi_restore_state
	movl	$.LC52, %esi
	movq	%r12, %rdi
	call	strcmp
	testl	%eax, %eax
	je	.L1017
	movq	%r12, %rdi
	movl	$.LC53, %esi
	call	strcmp
	testl	%eax, %eax
	movl	$0, %eax
	cmovne	%rax, %r12
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	movq	%r12, %rax
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE257:
	.size	is_animation, .-is_animation
	.p2align 4
	.type	parabola_fit_init.isra.0, @function
parabola_fit_init.isra.0:
.LFB578:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pxor	%xmm4, %xmm4
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rdi, %rbx
	subq	$24, %rsp
	.cfi_def_cfa_offset 48
	movsd	%xmm1, 8(%rdi)
	movapd	%xmm2, %xmm1
	mulsd	%xmm2, %xmm1
	movsd	%xmm0, (%rdi)
	movapd	%xmm3, %xmm0
	mulsd	%xmm3, %xmm0
	addsd	%xmm4, %xmm1
	addsd	%xmm1, %xmm0
	ucomisd	%xmm0, %xmm4
	ja	.L1034
	sqrtsd	%xmm0, %xmm0
.L1032:
	divsd	%xmm0, %xmm2
	movl	$24, %edi
	divsd	%xmm0, %xmm3
	movsd	%xmm2, 24(%rbx)
	movsd	%xmm3, 32(%rbx)
	call	malloc
	movl	$72, %edi
	movq	%rax, %rbp
	call	malloc
	pxor	%xmm0, %xmm0
	movq	%rbp, 48(%rbx)
	leaq	24(%rax), %rcx
	leaq	48(%rax), %rdx
	movq	$0, 16(%rax)
	movq	$0, 40(%rax)
	movq	$0, 64(%rax)
	movups	%xmm0, (%rax)
	movups	%xmm0, 24(%rax)
	movups	%xmm0, 48(%rax)
	movq	%rax, 0(%rbp)
	movq	%rcx, 8(%rbp)
	movq	%rdx, 16(%rbp)
	movq	$0x000000000, 56(%rbx)
	movq	$0x000000000, 64(%rbx)
	movq	$0x000000000, 72(%rbx)
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
.L1034:
	.cfi_restore_state
	movsd	%xmm3, 8(%rsp)
	movsd	%xmm2, (%rsp)
	call	sqrt
	movsd	8(%rsp), %xmm3
	movsd	(%rsp), %xmm2
	jmp	.L1032
	.cfi_endproc
.LFE578:
	.size	parabola_fit_init.isra.0, .-parabola_fit_init.isra.0
	.p2align 4
	.type	_boundary3_homogeneous, @function
_boundary3_homogeneous:
.LFB477:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE477:
	.size	_boundary3_homogeneous, .-_boundary3_homogeneous
	.p2align 4
	.type	_boundary1_homogeneous, @function
_boundary1_homogeneous:
.LFB473:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE473:
	.size	_boundary1_homogeneous, .-_boundary1_homogeneous
	.p2align 4
	.type	_boundary2_homogeneous, @function
_boundary2_homogeneous:
.LFB475:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %rsi
	movslq	%edi, %rdx
	movslq	%r8d, %r8
	sarq	$32, %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax,%rdi,8), %rax
	movsd	8(%rax,%r8,8), %xmm0
	ret
	.cfi_endproc
.LFE475:
	.size	_boundary2_homogeneous, .-_boundary2_homogeneous
	.p2align 4
	.type	update_cache_f, @function
update_cache_f:
.LFB88:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$536, %rsp
	.cfi_def_cfa_offset 592
	movq	grid(%rip), %r9
	movl	72(%r9), %eax
	movslq	16(%r9), %rdx
	movq	%r9, %r15
	movq	24(%r9), %r11
	testl	%eax, %eax
	jle	.L1045
	movq	64(%r9), %rsi
	leal	-1(%rax), %r8d
	salq	$4, %r8
	leaq	16(%rsi), %rcx
	addq	%rcx, %r8
	.p2align 4,,10
	.p2align 3
.L1044:
	movslq	8(%rsi), %rax
	cmpl	%edx, %eax
	jg	.L1043
	movq	(%r11,%rax,8), %rax
	movslq	(%rsi), %rdi
	movq	(%rax), %rax
	cmpl	(%rax), %edi
	jl	.L1043
	cmpl	4(%rax), %edi
	jge	.L1043
	movq	16(%rax), %rbx
	leaq	0(,%rdi,8), %r10
	movq	(%rbx,%rdi,8), %rdi
	testq	%rdi, %rdi
	je	.L1043
	addq	8(%rax), %r10
	movslq	4(%rsi), %rsi
	cmpl	(%r10), %esi
	jge	.L1187
	.p2align 4,,10
	.p2align 3
.L1043:
	movq	%rcx, %rsi
	cmpq	%rcx, %r8
	je	.L1045
	addq	$16, %rcx
	jmp	.L1044
	.p2align 4,,10
	.p2align 3
.L1045:
	movl	$0, 72(%r9)
	movl	$0, 56(%r9)
	movl	$0, 40(%r9)
	testl	%edx, %edx
	js	.L1042
	salq	$4, %rdx
	movq	120(%r9), %r8
	movq	112(%r9), %rdi
	movl	$8, %eax
	movq	104(%r9), %rsi
	movq	96(%r9), %rcx
	addq	$24, %rdx
	.p2align 4,,10
	.p2align 3
.L1047:
	movl	$0, (%r8,%rax)
	movl	$0, (%rdi,%rax)
	movl	$0, (%rsi,%rax)
	movl	$0, (%rcx,%rax)
	addq	$16, %rax
	cmpq	%rax, %rdx
	jne	.L1047
.L1042:
	movl	$2, %r12d
	xorl	%r10d, %r10d
	xorl	%r14d, %r14d
	xorl	%r8d, %r8d
	movabsq	$8589934592, %rax
	movq	%r15, 24(%rsp)
	movl	%r12d, %r15d
	movl	$2, %r13d
	movq	%rax, 208(%rsp)
	leaq	32(%r9), %rax
	movq	%rax, 40(%rsp)
	leaq	48(%r9), %rax
	movq	%rax, 32(%rsp)
	leaq	64(%r9), %rax
	movq	$2, 216(%rsp)
	movq	%rax, 48(%rsp)
	.p2align 4,,10
	.p2align 3
.L1046:
	movslq	%r14d, %rbp
	leal	-1(%r8), %ebx
	leaq	0(,%rbp,8), %rax
	movq	%rax, (%rsp)
	movq	(%r11,%rbp,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %edx
	cmpl	%r13d, %edx
	jg	.L1048
	cmpl	%r13d, 4(%rax)
	jle	.L1048
	movq	16(%rax), %rdi
	movslq	%r13d, %r12
	leaq	0(,%r12,8), %rsi
	movq	(%rdi,%r12,8), %rcx
	movq	%rsi, 8(%rsp)
	testq	%rcx, %rcx
	je	.L1048
	addq	8(%rax), %rsi
	cmpl	%r15d, (%rsi)
	jg	.L1048
	cmpl	%r15d, 4(%rsi)
	jle	.L1048
	movslq	%r15d, %rsi
	movq	%rsi, 16(%rsp)
	salq	$3, %rsi
	movq	%rsi, 56(%rsp)
	movq	16(%rsp), %rsi
	movq	(%rcx,%rsi,8), %rsi
	testq	%rsi, %rsi
	je	.L1048
	cmpl	$2, %r10d
	je	.L1049
	jg	.L1050
	testl	%r10d, %r10d
	je	.L1051
	cmpl	$1, %r10d
	jne	.L1048
	movslq	%r8d, %rax
	addl	$1, %r8d
	leal	1(%r14), %ecx
	salq	$4, %rax
	movl	$2, 220(%rsp,%rax)
	movslq	%r8d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 208(%rsp,%rdx)
	leal	-2(%r13,%r13), %ecx
	movl	%ecx, 212(%rsp,%rdx)
	leal	-1(%r15,%r15), %ecx
	movl	%ecx, 216(%rsp,%rdx)
	movl	$0, 220(%rsp,%rdx)
.L1104:
	xorl	%r10d, %r10d
	.p2align 4,,10
	.p2align 3
.L1114:
	salq	$4, %rax
	movl	208(%rsp,%rax), %r14d
	movl	212(%rsp,%rax), %r13d
	movl	216(%rsp,%rax), %r15d
	jmp	.L1046
	.p2align 4,,10
	.p2align 3
.L1051:
	leal	2(%r13), %r10d
	movl	%r10d, 68(%rsp)
	shrl	$31, %r10d
	addl	68(%rsp), %r10d
	sarl	%r10d
	movl	%r10d, 88(%rsp)
	leal	2(%r15), %r10d
	movl	%r10d, 72(%rsp)
	shrl	$31, %r10d
	addl	72(%rsp), %r10d
	sarl	%r10d
	movl	%r10d, 92(%rsp)
	movl	4(%rsi), %r10d
	movl	%r10d, 80(%rsp)
	testl	%r10d, %r10d
	je	.L1188
.L1054:
	movl	80(%rsp), %edx
	testl	%edx, %edx
	jns	.L1189
	testl	%r14d, %r14d
	jle	.L1065
	movq	(%rsp), %rdx
	movslq	88(%rsp), %r10
	movq	-8(%r11,%rdx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	%rdx, 80(%rsp)
	movslq	92(%rsp), %rdx
	movq	%rdx, 96(%rsp)
	movq	80(%rsp), %rdx
	movq	(%rdx,%r10,8), %r10
	movq	96(%rsp), %rdx
	movq	(%r10,%rdx,8), %rdx
	movl	4(%rdx), %r10d
	testl	%r10d, %r10d
	je	.L1190
	testb	$2, (%rsi)
	je	.L1068
	.p2align 4,,10
	.p2align 3
.L1048:
	cmpl	$-1, %ebx
	je	.L1106
	movq	grid(%rip), %r9
.L1105:
	movslq	%ebx, %rax
	movq	24(%r9), %r11
	movl	%ebx, %r8d
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	220(%rsp,%rdx), %r10d
	jmp	.L1114
	.p2align 4,,10
	.p2align 3
.L1050:
	cmpl	$3, %r10d
	jne	.L1048
	movslq	%r8d, %rax
	leal	1(%r14), %edx
	movl	%r8d, %ebx
	salq	$4, %rax
	movl	%edx, 208(%rsp,%rax)
	leal	-1(%r13,%r13), %edx
	movl	%edx, 212(%rsp,%rax)
	leal	-1(%r15,%r15), %edx
	movl	%edx, 216(%rsp,%rax)
	movl	$0, 220(%rsp,%rax)
	jmp	.L1105
	.p2align 4,,10
	.p2align 3
.L1106:
	movq	40(%rsp), %rdi
	movq	24(%rsp), %r15
	call	cache_level_shrink
	movq	32(%rsp), %rdi
	call	cache_level_shrink
	movq	48(%rsp), %rdi
	call	cache_level_shrink
	movq	grid(%rip), %rsi
	movl	16(%rsi), %ecx
	testl	%ecx, %ecx
	js	.L1107
	xorl	%ebp, %ebp
	.p2align 4,,10
	.p2align 3
.L1108:
	movq	96(%r15), %rdi
	movq	%rbp, %rbx
	addq	$1, %rbp
	salq	$4, %rbx
	addq	%rbx, %rdi
	call	cache_level_shrink
	movq	104(%r15), %rdi
	addq	%rbx, %rdi
	call	cache_level_shrink
	movq	112(%r15), %rdi
	addq	%rbx, %rdi
	call	cache_level_shrink
	addq	120(%r15), %rbx
	movq	%rbx, %rdi
	call	cache_level_shrink
	movq	grid(%rip), %rsi
	movl	16(%rsi), %ecx
	cmpl	%ebp, %ecx
	jge	.L1108
	movb	$0, 128(%r15)
	testl	%ecx, %ecx
	js	.L1109
	movslq	%ecx, %rbp
	movl	%ecx, %ebx
	salq	$3, %rbp
.L1113:
	cmpl	%ecx, %ebx
	jle	.L1191
.L1110:
	subl	$1, %ebx
	subq	$8, %rbp
	cmpl	$-1, %ebx
	jne	.L1113
.L1109:
	movslq	40(%r15), %rax
	movl	%ecx, 20(%rsi)
	movq	%rax, (%rsi)
	movq	%rax, 8(%rsi)
	addq	$536, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1191:
	.cfi_restore_state
	cmpb	$0, 128(%rsi)
	jne	.L1192
.L1111:
	movq	112(%rsi), %rax
	leaq	(%rax,%rbp,2), %rdx
	movq	(%rdx), %rax
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L1110
	movq	24(%rsi), %rdi
	subl	$1, %edx
	leaq	8(%rax,%rdx,8), %r8
	movq	(%rdi,%rbp), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %r9
	.p2align 4,,10
	.p2align 3
.L1112:
	movslq	(%rax), %rdx
	movslq	4(%rax), %rdi
	addq	$8, %rax
	movq	(%r9,%rdx,8), %rdx
	movq	(%rdx,%rdi,8), %rdx
	andw	$-17, (%rdx)
	cmpq	%rax, %r8
	jne	.L1112
	jmp	.L1110
	.p2align 4,,10
	.p2align 3
.L1187:
	cmpl	4(%r10), %esi
	jge	.L1043
	movq	(%rdi,%rsi,8), %rax
	testq	%rax, %rax
	je	.L1043
	andw	$-9, (%rax)
	jmp	.L1043
	.p2align 4,,10
	.p2align 3
.L1192:
	call	update_cache_f
	movq	grid(%rip), %rsi
	movl	16(%rsi), %ecx
	jmp	.L1111
	.p2align 4,,10
	.p2align 3
.L1049:
	movslq	%r8d, %rax
	addl	$1, %r8d
	leal	1(%r14), %ecx
	salq	$4, %rax
	movl	$3, 220(%rsp,%rax)
	movslq	%r8d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 208(%rsp,%rdx)
	leal	-1(%r13,%r13), %ecx
	movl	%ecx, 212(%rsp,%rdx)
	leal	-2(%r15,%r15), %ecx
	movl	%ecx, 216(%rsp,%rdx)
	movl	$0, 220(%rsp,%rdx)
	jmp	.L1104
	.p2align 4,,10
	.p2align 3
.L1188:
	testb	$1, (%rsi)
	jne	.L1193
.L1055:
	movq	%rbp, %rcx
	leal	3(%r13), %r10d
	movl	%ebx, 120(%rsp)
	leaq	-16(,%r12,8), %rsi
	salq	$4, %rcx
	movl	%r8d, 124(%rsp)
	movl	%r10d, %r8d
	movl	%r14d, %r10d
	movq	%rcx, 128(%rsp)
	leal	-2(%r13), %ecx
	movl	%ecx, 80(%rsp)
	leal	-2(%r15), %ecx
	movl	%ecx, 96(%rsp)
	leal	3(%r15), %ecx
	movl	96(%rsp), %r14d
	movl	%ecx, 104(%rsp)
	movl	80(%rsp), %ecx
	movl	%r13d, 80(%rsp)
	movl	%r15d, 136(%rsp)
	movq	%rbp, %r15
	movl	104(%rsp), %ebp
	movq	%r12, 112(%rsp)
	movq	%rsi, %r12
.L1064:
	movl	%r14d, %ebx
.L1061:
	cmpl	%edx, %ecx
	jl	.L1058
	cmpl	4(%rax), %ecx
	jge	.L1058
	movq	(%rdi,%r12), %rdx
	testq	%rdx, %rdx
	je	.L1058
	movq	8(%rax), %rsi
	addq	%r12, %rsi
	cmpl	(%rsi), %ebx
	jl	.L1058
	cmpl	4(%rsi), %ebx
	jge	.L1058
	movslq	%ebx, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	%rsi, 96(%rsp)
	testq	%rdx, %rdx
	je	.L1058
	movl	4(%rdx), %r13d
	testl	%r13d, %r13d
	js	.L1194
	.p2align 4,,10
	.p2align 3
.L1058:
	addl	$1, %ebx
	cmpl	%ebx, %ebp
	je	.L1060
	movl	(%rax), %edx
	jmp	.L1061
.L1196:
	movq	112(%rsp), %r12
	movq	16(%rsp), %rsi
	movq	%r15, %rbp
	movl	%r10d, %r14d
	movl	120(%rsp), %ebx
	movl	124(%rsp), %r8d
	movq	(%rdi,%r12,8), %rcx
	movl	80(%rsp), %r13d
	movl	136(%rsp), %r15d
	movq	(%rcx,%rsi,8), %rsi
.L1063:
	testb	$2, (%rsi)
	jne	.L1195
.L1068:
	cmpl	%r14d, 16(%r9)
	jle	.L1048
	movslq	%r8d, %rax
	addl	$1, %r8d
	leal	1(%r14), %ecx
	movq	24(%r9), %r11
	salq	$4, %rax
	movl	$1, 220(%rsp,%rax)
	movslq	%r8d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 208(%rsp,%rdx)
	leal	-2(%r13,%r13), %ecx
	movl	%ecx, 212(%rsp,%rdx)
	leal	-2(%r15,%r15), %ecx
	movl	%ecx, 216(%rsp,%rdx)
	movl	$0, 220(%rsp,%rdx)
	jmp	.L1104
	.p2align 4,,10
	.p2align 3
.L1060:
	addl	$1, %ecx
	addq	$8, %r12
	cmpl	%ecx, %r8d
	je	.L1196
	movl	(%rax), %edx
	jmp	.L1064
	.p2align 4,,10
	.p2align 3
.L1107:
	movb	$0, 128(%r15)
	jmp	.L1109
.L1065:
	testb	$2, (%rsi)
	je	.L1068
.L1118:
	movq	(%rsp), %rsi
	movslq	88(%rsp), %r8
	movq	-8(%r11,%rsi), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rsi
	movslq	92(%rsp), %rdx
	movq	(%rsi,%r8,8), %rsi
	movq	(%rsi,%rdx,8), %rdx
	movl	4(%rdx), %r8d
	testl	%r8d, %r8d
	je	.L1087
	jmp	.L1048
	.p2align 4,,10
	.p2align 3
.L1195:
	movl	4(%rsi), %edx
	testl	%edx, %edx
	je	.L1197
	js	.L1118
.L1087:
	leal	1(%r13), %r10d
	cmpl	%r13d, (%rax)
	jl	.L1088
	jne	.L1198
	movl	4(%rax), %esi
.L1091:
	cmpl	%esi, %r13d
	jge	.L1094
	testq	%rcx, %rcx
	je	.L1094
	movq	8(%rsp), %r8
	addq	8(%rax), %r8
	cmpl	%r15d, (%r8)
	jge	.L1094
	xorl	%eax, %eax
.L1119:
	cmpl	%r15d, 4(%r8)
	jl	.L1092
	movq	56(%rsp), %rsi
	movq	-8(%rcx,%rsi), %rdx
	testq	%rdx, %rdx
	je	.L1092
	movl	4(%rdx), %edi
	testl	%edi, %edi
	jne	.L1092
	testb	$2, (%rdx)
	jne	.L1092
	cmpw	$0, 2(%rdx)
	jne	.L1092
	orl	$2, %eax
	movzwl	%ax, %edx
.L1093:
	movl	%r13d, 184(%rsp)
	movl	%r14d, %esi
	movl	%r15d, 188(%rsp)
	movq	184(%rsp), %rdi
	movl	%r10d, (%rsp)
	movl	%r14d, 192(%rsp)
	call	cache_append_face
	movq	grid(%rip), %r9
	movl	(%rsp), %r10d
.L1094:
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %edx
	cmpl	%r10d, %edx
	jg	.L1095
.L1115:
	cmpl	%r10d, 4(%rax)
	jle	.L1186
	movq	8(%rsp), %rsi
	movq	16(%rax), %rdx
	movq	8(%rdx,%rsi), %rdx
	leaq	8(%rsi), %rcx
	testq	%rdx, %rdx
	je	.L1186
	addq	8(%rax), %rcx
	cmpl	%r15d, (%rcx)
	jg	.L1186
	cmpl	%r15d, 4(%rcx)
	jle	.L1186
	movq	16(%rsp), %rax
	movq	(%rdx,%rax,8), %rax
	testq	%rax, %rax
	je	.L1186
	movl	4(%rax), %esi
	testl	%esi, %esi
	jne	.L1186
	testb	$2, (%rax)
	jne	.L1186
	cmpw	$0, 2(%rax)
	je	.L1103
.L1186:
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %edx
.L1095:
	cmpl	%edx, %r13d
	jl	.L1048
	cmpl	%r13d, 4(%rax)
	jle	.L1048
	movq	16(%rax), %rdx
	movq	(%rdx,%r12,8), %rcx
	testq	%rcx, %rcx
	je	.L1048
	movq	8(%rsp), %rsi
	addq	8(%rax), %rsi
	leal	1(%r15), %edx
	cmpl	(%rsi), %edx
	jl	.L1048
	cmpl	4(%rsi), %edx
	jge	.L1048
	movq	56(%rsp), %rax
	movq	8(%rcx,%rax), %rax
	testq	%rax, %rax
	je	.L1048
	movl	4(%rax), %ecx
	testl	%ecx, %ecx
	jne	.L1048
	testb	$2, (%rax)
	jne	.L1048
	cmpw	$0, 2(%rax)
	jne	.L1048
	movl	%edx, 200(%rsp)
	movl	%r14d, %esi
	movl	$2, %edx
	movl	%r13d, 196(%rsp)
	movq	196(%rsp), %rdi
	movl	%r14d, 204(%rsp)
	call	cache_append_face
	jmp	.L1048
	.p2align 4,,10
	.p2align 3
.L1194:
	movzwl	(%rdx), %esi
	movw	%si, 142(%rsp)
	andl	$16, %esi
	jne	.L1058
	movq	24(%rsp), %r13
	movq	128(%rsp), %rsi
	movl	%ecx, 184(%rsp)
	movl	%ebx, 188(%rsp)
	addq	112(%r13), %rsi
	movl	%r10d, 192(%rsp)
	movl	8(%rsi), %r13d
	movq	%rsi, 152(%rsp)
	movl	%r13d, 104(%rsp)
	movq	%rsi, %r13
	movl	12(%rsi), %esi
	movq	0(%r13), %r13
	movl	%esi, 160(%rsp)
	movl	160(%rsp), %esi
	movq	%r13, 144(%rsp)
	cmpl	%esi, 104(%rsp)
	jge	.L1199
.L1059:
	movq	144(%rsp), %rsi
	movslq	104(%rsp), %r13
	leaq	(%rsi,%r13,8), %r13
	movl	104(%rsp), %esi
	movl	%ecx, 0(%r13)
	movl	%ebx, 4(%r13)
	movq	152(%rsp), %r13
	addl	$1, %esi
	movl	%esi, 8(%r13)
	movzwl	142(%rsp), %esi
	orl	$16, %esi
	movw	%si, (%rdx)
	jmp	.L1058
.L1193:
	movq	24(%rsp), %r10
	movq	%rbp, %rdx
	movl	%r13d, 184(%rsp)
	salq	$4, %rdx
	movl	%r15d, 188(%rsp)
	addq	96(%r10), %rdx
	movl	%r14d, 192(%rsp)
	movq	%rdx, %r10
	movq	%rdx, 104(%rsp)
	movl	8(%rdx), %edx
	movl	%edx, 96(%rsp)
	movq	%r10, %rdx
	movl	12(%r10), %r10d
	movl	%r10d, 120(%rsp)
	movq	(%rdx), %r10
	movq	%r10, 112(%rsp)
	movl	120(%rsp), %r10d
	cmpl	%r10d, 96(%rsp)
	jge	.L1200
.L1056:
	movq	112(%rsp), %r10
	movslq	96(%rsp), %rdx
	leaq	(%r10,%rdx,8), %rdx
	movq	104(%rsp), %r10
	movl	%r13d, (%rdx)
	movl	%r15d, 4(%rdx)
	movl	96(%rsp), %edx
	addl	$1, %edx
	movl	%edx, 8(%r10)
	jmp	.L1054
.L1190:
	movq	24(%rsp), %r10
	movq	%rbp, %rdx
	movl	%r13d, 184(%rsp)
	salq	$4, %rdx
	movl	%r15d, 188(%rsp)
	addq	120(%r10), %rdx
	movl	%r14d, 192(%rsp)
	movl	8(%rdx), %r10d
	movq	%rdx, 96(%rsp)
	movl	%r10d, 80(%rsp)
	movq	%rdx, %r10
	movl	12(%rdx), %edx
	movq	(%r10), %r10
	cmpl	%edx, 80(%rsp)
	jge	.L1201
.L1067:
	movslq	80(%rsp), %rdx
	leaq	(%r10,%rdx,8), %rdx
	movq	96(%rsp), %r10
	movl	%r13d, (%rdx)
	movl	%r15d, 4(%rdx)
	movl	80(%rsp), %edx
	addl	$1, %edx
	movl	%edx, 8(%r10)
	jmp	.L1063
.L1088:
	movl	4(%rax), %esi
	cmpl	%r13d, %esi
	jl	.L1091
	movq	8(%rsp), %r11
	movq	-8(%rdi,%r11), %rdi
	leaq	-8(%r11), %rdx
	testq	%rdi, %rdi
	je	.L1091
	movq	8(%rax), %r8
	addq	%r8, %rdx
	cmpl	%r15d, (%rdx)
	jg	.L1091
	cmpl	%r15d, 4(%rdx)
	jle	.L1091
	movq	16(%rsp), %rdx
	movq	(%rdi,%rdx,8), %rdx
	testq	%rdx, %rdx
	je	.L1091
	movl	4(%rdx), %edi
	testl	%edi, %edi
	jne	.L1091
	testb	$2, (%rdx)
	jne	.L1091
	xorl	%eax, %eax
	cmpw	$0, 2(%rdx)
	sete	%al
	cmpl	%r13d, %esi
	jle	.L1092
	testq	%rcx, %rcx
	je	.L1092
	addq	%r11, %r8
	cmpl	%r15d, (%r8)
	jl	.L1119
.L1092:
	testw	%ax, %ax
	je	.L1094
	movl	$1, %edx
	jmp	.L1093
.L1198:
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	cmpl	%r10d, (%rax)
	jg	.L1048
	jmp	.L1115
.L1200:
	movq	104(%rsp), %rcx
	movl	%r10d, %edx
	movq	112(%rsp), %rdi
	movl	%r8d, 124(%rsp)
	subl	$-128, %edx
	movl	%edx, 12(%rcx)
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rsi
	call	realloc
	movq	104(%rsp), %rcx
	movq	16(%rsp), %rsi
	movq	grid(%rip), %r9
	movl	124(%rsp), %r8d
	movq	%rax, 112(%rsp)
	movq	%rax, (%rcx)
	movl	8(%rcx), %eax
	movq	24(%r9), %r11
	movl	%eax, 96(%rsp)
	movq	(%r11,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	movq	(%rdi,%r12,8), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movl	4(%rsi), %edx
	movl	%edx, 80(%rsp)
	jmp	.L1056
.L1197:
	movl	%r13d, 184(%rsp)
	movq	40(%rsp), %rdi
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	movl	%r15d, 188(%rsp)
	movq	184(%rsp), %rsi
	movl	%r14d, 192(%rsp)
	call	cache_append
	movq	grid(%rip), %r9
	movq	8(%rsp), %rcx
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-8(%rax,%rcx), %rdx
	movq	16(%rsp), %rcx
	movq	(%rdx,%rcx,8), %rcx
	movl	$1, %edx
	movl	4(%rcx), %r10d
	testl	%r10d, %r10d
	js	.L1070
	testb	$2, (%rcx)
	jne	.L1070
	xorl	%edx, %edx
	cmpw	$0, 2(%rcx)
	sete	%dl
.L1070:
	movq	(%rax,%r12,8), %rcx
	movq	56(%rsp), %rsi
	movq	-8(%rcx,%rsi), %rcx
	movl	4(%rcx), %r9d
	testl	%r9d, %r9d
	js	.L1071
	testb	$2, (%rcx)
	jne	.L1071
	cmpw	$0, 2(%rcx)
	je	.L1071
	testw	%dx, %dx
	jne	.L1073
.L1074:
	movq	8(%rsp), %rcx
	movq	8(%rax,%rcx), %rdx
	movq	16(%rsp), %rcx
	movq	(%rdx,%rcx,8), %rdx
	movl	4(%rdx), %ecx
	testl	%ecx, %ecx
	js	.L1075
	testb	$2, (%rdx)
	jne	.L1076
	cmpw	$0, 2(%rdx)
	jne	.L1077
.L1075:
	leal	1(%r13), %eax
	movl	%r15d, 200(%rsp)
	movq	32(%rsp), %rdi
	movl	%r14d, %edx
	movl	%eax, 196(%rsp)
	movq	196(%rsp), %rsi
	movl	$1, %ecx
	movl	%r14d, 204(%rsp)
	call	cache_append
	movq	grid(%rip), %r9
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
.L1077:
	movq	(%rax,%r12,8), %rdx
	movq	56(%rsp), %rcx
	movq	8(%rdx,%rcx), %rcx
	movl	4(%rcx), %esi
	testl	%esi, %esi
	js	.L1078
	testb	$2, (%rcx)
	jne	.L1079
	cmpw	$0, 2(%rcx)
	jne	.L1080
.L1078:
	leal	1(%r15), %eax
	movq	32(%rsp), %rdi
	movl	%r14d, %edx
	movl	$2, %ecx
	movl	%eax, 200(%rsp)
	movl	%r13d, 196(%rsp)
	movq	196(%rsp), %rsi
	movl	%r14d, 204(%rsp)
	call	cache_append
	movq	grid(%rip), %r9
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r12,8), %rdx
.L1080:
	movq	8(%rsp), %r9
	movl	%ebx, %r10d
	movq	%rax, %rcx
	movq	56(%rsp), %rbx
	movl	%r14d, %eax
	movl	72(%rsp), %r14d
	movq	%rbp, %r8
	movl	%r13d, %r11d
	movq	%r9, %rsi
	movl	%r15d, %ebp
	movq	%r12, %r9
	movq	%rsi, %r12
.L1085:
	movq	(%rdx,%rbx), %rdx
	testb	$8, (%rdx)
	je	.L1202
.L1081:
	addl	$1, %ebp
	addq	$8, %rbx
	cmpl	%ebp, %r14d
	jne	.L1082
	addq	$8, %r12
	addl	$1, %r13d
	cmpl	%r13d, 68(%rsp)
	je	.L1083
	movq	(%rcx,%r12), %rdx
	movq	56(%rsp), %rbx
	movl	%r15d, %ebp
	jmp	.L1085
.L1082:
	movq	(%rcx,%r12), %rdx
	jmp	.L1085
.L1202:
	movl	%ebp, 200(%rsp)
	movq	48(%rsp), %rdi
	movl	%eax, %edx
	xorl	%ecx, %ecx
	movl	%r13d, 196(%rsp)
	movq	196(%rsp), %rsi
	movl	%r11d, 92(%rsp)
	movl	%r10d, 88(%rsp)
	movq	%r9, 80(%rsp)
	movq	%r8, 72(%rsp)
	movl	%eax, 204(%rsp)
	movl	%eax, 8(%rsp)
	call	cache_append
	movq	grid(%rip), %rdx
	movq	(%rsp), %rax
	movl	92(%rsp), %r11d
	movl	88(%rsp), %r10d
	movq	24(%rdx), %rdx
	movq	80(%rsp), %r9
	movq	72(%rsp), %r8
	movq	(%rdx,%rax), %rdx
	movl	8(%rsp), %eax
	movq	(%rdx), %rdx
	movq	16(%rdx), %rcx
	movq	(%rcx,%r12), %rdx
	movq	(%rdx,%rbx), %rdx
	orw	$8, (%rdx)
	jmp	.L1081
.L1083:
	movq	(%rcx,%r9,8), %rax
	movq	16(%rsp), %rcx
	movq	%r8, %rbp
	movl	%r10d, %ebx
	movl	%r11d, %r13d
	movq	(%rax,%rcx,8), %rax
	cmpw	$0, 2(%rax)
	je	.L1048
	movq	24(%rsp), %rax
	salq	$4, %rbp
	addq	104(%rax), %rbp
	movl	8(%rbp), %edx
	movl	12(%rbp), %eax
	movq	0(%rbp), %rdi
	cmpl	%eax, %edx
	jge	.L1203
.L1086:
	movslq	%edx, %rax
	addl	$1, %edx
	leaq	(%rdi,%rax,8), %rax
	movl	%r13d, (%rax)
	movl	%r15d, 4(%rax)
	movl	%edx, 8(%rbp)
	jmp	.L1048
.L1071:
	orl	$2, %edx
.L1073:
	movzwl	%dx, %ecx
	movq	184(%rsp), %rsi
	movq	32(%rsp), %rdi
	movl	192(%rsp), %edx
	call	cache_append
	movq	grid(%rip), %r9
	movq	24(%r9), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	jmp	.L1074
.L1201:
	movq	96(%rsp), %rax
	subl	$-128, %edx
	movq	%r10, %rdi
	movl	%r8d, 104(%rsp)
	movl	%edx, 12(%rax)
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rsi
	call	realloc
	movq	16(%rsp), %rsi
	movl	104(%rsp), %r8d
	movq	%rax, %r10
	movq	grid(%rip), %r9
	movq	96(%rsp), %rax
	movq	24(%r9), %r11
	movq	%r10, (%rax)
	movl	8(%rax), %eax
	movl	%eax, 80(%rsp)
	movq	(%r11,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	movq	(%rdi,%r12,8), %rcx
	movq	(%rcx,%rsi,8), %rsi
	jmp	.L1067
.L1076:
	testl	%ecx, %ecx
	je	.L1077
	jmp	.L1075
.L1079:
	testl	%esi, %esi
	je	.L1080
	jmp	.L1078
.L1189:
	movl	(%rax), %edx
	jmp	.L1055
.L1199:
	movq	152(%rsp), %r13
	movl	%esi, %eax
	movq	144(%rsp), %rdi
	movl	%r10d, 172(%rsp)
	subl	$-128, %eax
	movl	%ecx, 168(%rsp)
	movl	%eax, 12(%r13)
	cltq
	leaq	0(,%rax,8), %rsi
	movl	%r8d, 164(%rsp)
	call	realloc
	movq	grid(%rip), %r9
	movq	96(%rsp), %rsi
	movl	8(%r13), %ecx
	movq	%rax, 144(%rsp)
	movq	24(%r9), %r11
	movq	%rax, 0(%r13)
	movq	(%rsp), %rax
	movl	%ecx, 104(%rsp)
	movl	172(%rsp), %r10d
	movl	168(%rsp), %ecx
	movq	(%r11,%rax), %rax
	movl	164(%rsp), %r8d
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	movq	(%rdi,%r12), %rdx
	movq	(%rdx,%rsi,8), %rdx
	movzwl	(%rdx), %esi
	movw	%si, 142(%rsp)
	jmp	.L1059
.L1203:
	subl	$-128, %eax
	movl	%eax, 12(%rbp)
	cltq
	leaq	0(,%rax,8), %rsi
	call	realloc
	movl	8(%rbp), %edx
	movq	%rax, 0(%rbp)
	movq	%rax, %rdi
	jmp	.L1086
.L1103:
	movl	%r10d, 196(%rsp)
	movl	$1, %edx
	movl	%r14d, %esi
	movl	%r15d, 200(%rsp)
	movq	196(%rsp), %rdi
	movl	%r14d, 204(%rsp)
	call	cache_append_face
	movq	grid(%rip), %r9
	jmp	.L1186
	.cfi_endproc
.LFE88:
	.size	update_cache_f, .-update_cache_f
	.p2align 4
	.type	halo_face, @function
halo_face:
.LFB211:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rdi, %r14
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	%rsi, (%rsp)
	testq	%rdi, %rdi
	je	.L1208
	movslq	(%rdi), %rax
	testl	%eax, %eax
	js	.L1208
	movq	_attribute(%rip), %rsi
	movq	%rdi, %rdx
	.p2align 4,,10
	.p2align 3
.L1209:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$2, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L1209
.L1208:
	cmpq	$0, (%rsp)
	je	.L1207
	movq	(%rsp), %rdx
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L1207
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L1212:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$2, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L1212
.L1207:
	movq	grid(%rip), %rbp
	movl	16(%rbp), %eax
	movl	%eax, %r15d
	subl	$1, %r15d
	js	.L1204
	movslq	%r15d, %rbx
	movsd	.LC5(%rip), %xmm1
	salq	$3, %rbx
	jmp	.L1211
	.p2align 4,,10
	.p2align 3
.L1216:
	subl	$1, %r15d
	subq	$8, %rbx
	cmpl	$-1, %r15d
	je	.L1204
.L1214:
	movl	16(%rbp), %eax
.L1211:
	cmpl	%eax, %r15d
	jg	.L1216
	cmpb	$0, 128(%rbp)
	jne	.L1240
.L1215:
	movq	104(%rbp), %rax
	leaq	(%rax,%rbx,2), %rdx
	movq	(%rdx), %rax
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L1216
	leaq	8(%rbx), %rcx
	subl	$1, %edx
	movl	%r15d, 28(%rsp)
	movsd	.LC5(%rip), %xmm2
	movq	%rcx, 16(%rsp)
	leaq	8(%rax,%rdx,8), %rcx
	movq	%rcx, 8(%rsp)
	.p2align 4,,10
	.p2align 3
.L1226:
	movl	(%rax), %esi
	movl	4(%rax), %ecx
	testq	%r14, %r14
	je	.L1222
	movq	24(%rbp), %r11
	movslq	%esi, %r10
	movslq	%ecx, %r8
	leaq	0(,%r10,8), %r9
	movq	(%r11,%rbx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	movq	-8(%rdi,%r9), %rdx
	movq	(%rdx,%r8,8), %rdx
	testb	$2, (%rdx)
	jne	.L1223
	cmpw	$0, 2(%rdx)
	je	.L1223
	movl	4(%rdx), %r13d
	testl	%r13d, %r13d
	jns	.L1241
	.p2align 4,,10
	.p2align 3
.L1223:
	movq	8(%rdi,%r9), %rdx
	movq	(%rdx,%r8,8), %rdi
	testb	$2, (%rdi)
	jne	.L1222
	cmpw	$0, 2(%rdi)
	je	.L1222
	movl	4(%rdi), %r12d
	testl	%r12d, %r12d
	jns	.L1242
	.p2align 4,,10
	.p2align 3
.L1222:
	cmpq	$0, (%rsp)
	je	.L1219
	movq	24(%rbp), %r9
	movslq	%ecx, %r10
	leaq	0(,%r10,8), %r8
	movq	(%r9,%rbx), %rdx
	movq	(%rdx), %rdi
	movslq	%esi, %rdx
	movq	16(%rdi), %rdi
	movq	(%rdi,%rdx,8), %rdi
	movq	-8(%rdi,%r8), %rdx
	testb	$2, (%rdx)
	jne	.L1229
	cmpw	$0, 2(%rdx)
	je	.L1229
	movl	4(%rdx), %r11d
	testl	%r11d, %r11d
	jns	.L1243
	.p2align 4,,10
	.p2align 3
.L1229:
	movq	8(%rdi,%r8), %rdi
	testb	$2, (%rdi)
	jne	.L1219
	cmpw	$0, 2(%rdi)
	je	.L1219
	movl	4(%rdi), %edx
	testl	%edx, %edx
	jns	.L1244
	.p2align 4,,10
	.p2align 3
.L1219:
	addq	$8, %rax
	cmpq	8(%rsp), %rax
	jne	.L1226
	movl	28(%rsp), %r15d
	subq	$8, %rbx
	subl	$1, %r15d
	cmpl	$-1, %r15d
	jne	.L1214
.L1204:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1243:
	.cfi_restore_state
	movq	(%rsp), %rdx
	movslq	(%rdx), %rdx
	testl	%edx, %edx
	js	.L1229
	movq	16(%rsp), %r11
	leal	-2(%rsi,%rsi), %r13d
	leal	-2(%rcx,%rcx), %r12d
	movslq	%r13d, %r13
	movslq	%r12d, %r12
	movq	(%r9,%r11), %r11
	movq	(%r11), %r11
	movq	16(%r11), %r15
	movq	(%r15,%r13,8), %r11
	movq	8(%r15,%r13,8), %r13
	movq	(%r11,%r12,8), %r11
	movq	0(%r13,%r12,8), %r12
	movq	(%rdi,%r10,8), %r13
	movq	(%rsp), %r10
	.p2align 4,,10
	.p2align 3
.L1230:
	addq	$1, %rdx
	addq	$4, %r10
	movsd	(%r11,%rdx,8), %xmm0
	addsd	(%r12,%rdx,8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, 0(%r13,%rdx,8)
	movslq	(%r10), %rdx
	testl	%edx, %edx
	jns	.L1230
	jmp	.L1229
	.p2align 4,,10
	.p2align 3
.L1244:
	movq	(%rsp), %r15
	movslq	(%r15), %rdx
	testl	%edx, %edx
	js	.L1219
	movq	16(%rsp), %r11
	leal	-2(%rsi,%rsi), %esi
	leal	-2(%rcx,%rcx), %ecx
	movslq	%esi, %rsi
	movslq	%ecx, %rcx
	movq	(%r9,%r11), %r8
	addq	$2, %rcx
	movq	(%r8), %r8
	movq	16(%r8), %r9
	movq	(%r9,%rsi,8), %r8
	movq	8(%r9,%rsi,8), %rsi
	movq	(%r8,%rcx,8), %r8
	movq	(%rsi,%rcx,8), %rsi
	movq	%r15, %rcx
	.p2align 4,,10
	.p2align 3
.L1231:
	addq	$1, %rdx
	addq	$4, %rcx
	movsd	(%r8,%rdx,8), %xmm0
	addsd	(%rsi,%rdx,8), %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, (%rdi,%rdx,8)
	movslq	(%rcx), %rdx
	testl	%edx, %edx
	jns	.L1231
	jmp	.L1219
	.p2align 4,,10
	.p2align 3
.L1241:
	movslq	(%r14), %rdx
	testl	%edx, %edx
	js	.L1223
	movq	16(%rsp), %r15
	movq	(%rdi,%r10,8), %r10
	movq	(%r11,%r15), %r12
	movq	(%r12), %r13
	leal	-2(%rsi,%rsi), %r12d
	movslq	%r12d, %r12
	movq	16(%r13), %r13
	movq	0(%r13,%r12,8), %r13
	leal	-2(%rcx,%rcx), %r12d
	movslq	%r12d, %r12
	movq	0(%r13,%r12,8), %r15
	movq	8(%r13,%r12,8), %r13
	movq	(%r10,%r8,8), %r12
	movq	%r14, %r10
	.p2align 4,,10
	.p2align 3
.L1224:
	addq	$1, %rdx
	addq	$4, %r10
	movsd	(%r15,%rdx,8), %xmm0
	addsd	0(%r13,%rdx,8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%r12,%rdx,8)
	movslq	(%r10), %rdx
	testl	%edx, %edx
	jns	.L1224
	jmp	.L1223
	.p2align 4,,10
	.p2align 3
.L1242:
	movslq	(%r14), %rdx
	testl	%edx, %edx
	js	.L1222
	movq	16(%rsp), %r15
	movq	(%r11,%r15), %r8
	movq	(%r8), %r9
	leal	-2(%rsi,%rsi), %r8d
	movslq	%r8d, %r8
	movq	16(%r9), %r9
	movq	16(%r9,%r8,8), %r9
	leal	-2(%rcx,%rcx), %r8d
	movslq	%r8d, %r8
	movq	(%r9,%r8,8), %r10
	movq	8(%r9,%r8,8), %r9
	movq	%r14, %r8
	.p2align 4,,10
	.p2align 3
.L1225:
	addq	$1, %rdx
	addq	$4, %r8
	movsd	(%r10,%rdx,8), %xmm0
	addsd	(%r9,%rdx,8), %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdi,%rdx,8)
	movslq	(%r8), %rdx
	testl	%edx, %edx
	jns	.L1225
	jmp	.L1222
	.p2align 4,,10
	.p2align 3
.L1240:
	call	update_cache_f
	movq	.LC5(%rip), %rax
	movq	grid(%rip), %rbp
	movq	%rax, %xmm1
	jmp	.L1215
	.cfi_endproc
.LFE211:
	.size	halo_face, .-halo_face
	.p2align 4
	.type	relax, @function
relax:
.LFB282:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rsi, %r8
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edx, %ebx
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movslq	16(%rcx), %rdx
	movslq	(%rdi), %rsi
	movslq	(%r8), %r8
	movslq	8(%rcx), %rax
	movslq	12(%rcx), %rdi
	cmpl	$65535, %edx
	jle	.L1300
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rdx,8), %xmm4
	cmpl	$65535, %eax
	jg	.L1257
	testl	%ebx, %ebx
	js	.L1245
	addl	$1, %eax
	movl	%ebx, 32(%rsp)
	leaq	8(,%r8,8), %rcx
	xorpd	.LC1(%rip), %xmm4
	cltq
	movq	%rcx, 16(%rsp)
	movl	%ebx, %r12d
	leaq	8(,%rsi,8), %rbp
	leaq	0(,%rax,8), %r15
	movslq	%ebx, %rax
	leaq	8(,%rdi,8), %r13
	leaq	0(,%rax,8), %r14
	movq	grid(%rip), %rax
	movq	%rax, 8(%rsp)
	jmp	.L1259
	.p2align 4,,10
	.p2align 3
.L1261:
	subl	$1, %r12d
	subq	$8, %r14
	cmpl	$-1, %r12d
	je	.L1245
.L1259:
	movq	8(%rsp), %rax
	cmpl	%r12d, 16(%rax)
	jl	.L1261
	movq	8(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1301
.L1260:
	movq	8(%rsp), %rdi
	movq	96(%rdi), %rax
	leaq	(%rax,%r14,2), %rdx
	movq	(%rdx), %rax
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L1261
	movl	$1, %ebx
	movl	%r12d, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %edx
	sall	%cl, %ebx
	movsd	.LC10(%rip), %xmm5
	movq	%r14, 24(%rsp)
	cvtsi2sdl	%ebx, %xmm0
	leaq	8(%rax,%rdx,8), %rbx
	movq	24(%rdi), %rdx
	addq	%r14, %rdx
	movl	32(%rsp), %r14d
	movq	(%rdx), %r11
	divsd	%xmm0, %xmm5
	.p2align 4,,10
	.p2align 3
.L1264:
	movslq	(%rax), %rcx
	movslq	4(%rax), %rdx
	cmpl	%r12d, %r14d
	je	.L1262
	movq	(%r11), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rsi
	testb	$2, (%rsi)
	je	.L1263
.L1262:
	movq	(%r11), %rsi
	movsd	L0(%rip), %xmm0
	leaq	0(,%rcx,8), %r10
	leaq	0(,%rdx,8), %r8
	movq	16(%rsp), %r9
	movq	16(%rsi), %rdi
	mulsd	%xmm5, %xmm0
	movq	(%rdi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	mulsd	%xmm0, %xmm0
	movsd	(%rcx,%r9), %xmm6
	movq	8(%rdi,%r10), %r9
	movq	-8(%rdi,%r10), %rdi
	movsd	(%rcx,%r15), %xmm2
	movq	(%r9,%rdx,8), %r9
	movq	(%rdi,%rdx,8), %rdx
	movsd	(%r9,%r15), %xmm1
	movsd	(%r9,%rbp), %xmm7
	mulsd	%xmm0, %xmm6
	movsd	(%rdx,%rbp), %xmm3
	mulsd	%xmm4, %xmm0
	movq	8(%rsi,%r8), %rdx
	mulsd	%xmm1, %xmm7
	addsd	%xmm2, %xmm1
	movq	-8(%rsi,%r8), %rsi
	mulsd	%xmm2, %xmm3
	movapd	%xmm1, %xmm2
	movsd	(%rdx,%r13), %xmm1
	addsd	%xmm0, %xmm2
	movsd	(%rsi,%rbp), %xmm0
	addsd	%xmm7, %xmm3
	movsd	(%rdx,%rbp), %xmm7
	mulsd	%xmm1, %xmm7
	subsd	%xmm6, %xmm3
	movsd	(%rcx,%r13), %xmm6
	mulsd	%xmm6, %xmm0
	addsd	%xmm6, %xmm1
	addsd	%xmm2, %xmm1
	addsd	%xmm7, %xmm0
	addsd	%xmm3, %xmm0
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rcx,%rbp)
.L1263:
	addq	$8, %rax
	cmpq	%rax, %rbx
	jne	.L1264
	movq	24(%rsp), %r14
	subl	$1, %r12d
	subq	$8, %r14
	cmpl	$-1, %r12d
	jne	.L1259
.L1245:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1257:
	.cfi_restore_state
	movsd	-524288(%rcx,%rax,8), %xmm2
	movsd	-524288(%rcx,%rdi,8), %xmm3
	testl	%ebx, %ebx
	js	.L1245
	movq	grid(%rip), %rax
	movslq	%ebx, %r13
	leaq	8(,%r8,8), %r14
	xorpd	.LC1(%rip), %xmm4
	movq	%r14, 16(%rsp)
	leaq	8(,%rsi,8), %rbp
	salq	$3, %r13
	movl	%ebx, %r12d
	movq	%rax, %r14
	jmp	.L1273
	.p2align 4,,10
	.p2align 3
.L1275:
	subl	$1, %r12d
	subq	$8, %r13
	cmpl	$-1, %r12d
	je	.L1245
.L1273:
	cmpl	%r12d, 16(%r14)
	jl	.L1275
	cmpb	$0, 128(%r14)
	jne	.L1302
.L1274:
	movq	96(%r14), %rax
	leaq	(%rax,%r13,2), %rdx
	movq	(%rdx), %rax
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L1275
	movl	$1, %edi
	movl	%r12d, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %edx
	sall	%cl, %edi
	leaq	8(%rax,%rdx,8), %r15
	movq	24(%r14), %rdx
	movsd	.LC10(%rip), %xmm5
	cvtsi2sdl	%edi, %xmm0
	movq	%r13, 8(%rsp)
	addq	%r13, %rdx
	movq	16(%rsp), %r13
	movq	(%rdx), %r10
	divsd	%xmm0, %xmm5
	.p2align 4,,10
	.p2align 3
.L1278:
	movslq	(%rax), %rcx
	movslq	4(%rax), %rdx
	cmpl	%r12d, %ebx
	je	.L1276
	movq	(%r10), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rsi
	testb	$2, (%rsi)
	je	.L1277
.L1276:
	movq	(%r10), %rsi
	movsd	L0(%rip), %xmm0
	leaq	0(,%rcx,8), %r9
	leaq	0(,%rdx,8), %r8
	movq	16(%rsi), %rsi
	mulsd	%xmm5, %xmm0
	movq	(%rsi,%rcx,8), %rcx
	movq	8(%rsi,%r9), %r11
	movq	-8(%rsi,%r9), %rsi
	movq	(%rcx,%rdx,8), %rdi
	movq	(%r11,%rdx,8), %r11
	movq	(%rsi,%rdx,8), %rdx
	mulsd	%xmm0, %xmm0
	movsd	(%r11,%rbp), %xmm1
	movsd	(%rdi,%r13), %xmm6
	movsd	(%rdx,%rbp), %xmm7
	movq	8(%rcx,%r8), %rdx
	mulsd	%xmm2, %xmm1
	mulsd	%xmm2, %xmm7
	mulsd	%xmm0, %xmm6
	mulsd	%xmm4, %xmm0
	addsd	%xmm7, %xmm1
	subsd	%xmm6, %xmm1
	movapd	%xmm2, %xmm6
	addsd	%xmm2, %xmm6
	addsd	%xmm0, %xmm6
	movsd	(%rdx,%rbp), %xmm0
	movq	-8(%rcx,%r8), %rdx
	movsd	(%rdx,%rbp), %xmm7
	mulsd	%xmm3, %xmm0
	mulsd	%xmm3, %xmm7
	addsd	%xmm7, %xmm0
	addsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm6, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdi,%rbp)
.L1277:
	addq	$8, %rax
	cmpq	%rax, %r15
	jne	.L1278
	movq	8(%rsp), %r13
	jmp	.L1275
	.p2align 4,,10
	.p2align 3
.L1300:
	cmpl	$65535, %eax
	jle	.L1303
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm2
	movsd	-524288(%rcx,%rdi,8), %xmm3
	testl	%ebx, %ebx
	js	.L1245
	leal	1(%rdx), %eax
	movslq	%ebx, %r13
	movq	grid(%rip), %r14
	movl	%ebx, %r12d
	cltq
	leaq	8(,%r8,8), %r15
	leaq	8(,%rsi,8), %rbp
	salq	$3, %r13
	salq	$3, %rax
	movq	%r15, 32(%rsp)
	movq	%rax, 24(%rsp)
	jmp	.L1266
	.p2align 4,,10
	.p2align 3
.L1268:
	subl	$1, %r12d
	subq	$8, %r13
	cmpl	$-1, %r12d
	je	.L1245
.L1266:
	cmpl	%r12d, 16(%r14)
	jl	.L1268
	cmpb	$0, 128(%r14)
	jne	.L1304
.L1267:
	movq	96(%r14), %rax
	leaq	(%rax,%r13,2), %rdx
	movl	8(%rdx), %esi
	movq	(%rdx), %rax
	testl	%esi, %esi
	jle	.L1268
	movl	$1, %edx
	movl	%r12d, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm5
	sall	%cl, %edx
	movq	%r13, 8(%rsp)
	cvtsi2sdl	%edx, %xmm0
	leal	-1(%rsi), %edx
	movq	%r14, 16(%rsp)
	leaq	8(%rax,%rdx,8), %r15
	movq	24(%r14), %rdx
	movq	24(%rsp), %r14
	addq	%r13, %rdx
	movq	32(%rsp), %r13
	divsd	%xmm0, %xmm5
	movq	(%rdx), %r10
	.p2align 4,,10
	.p2align 3
.L1271:
	movslq	(%rax), %rcx
	movslq	4(%rax), %rdx
	cmpl	%r12d, %ebx
	je	.L1269
	movq	(%r10), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rsi
	testb	$2, (%rsi)
	je	.L1270
.L1269:
	movq	(%r10), %rsi
	movsd	L0(%rip), %xmm0
	leaq	0(,%rcx,8), %r9
	leaq	0(,%rdx,8), %r8
	movq	16(%rsi), %rdi
	mulsd	%xmm5, %xmm0
	movq	(%rdi,%rcx,8), %rsi
	movq	8(%rdi,%r9), %r11
	movq	-8(%rdi,%r9), %rdi
	movq	(%rsi,%rdx,8), %rcx
	movq	(%r11,%rdx,8), %r11
	movq	(%rdi,%rdx,8), %rdx
	mulsd	%xmm0, %xmm0
	movsd	(%r11,%rbp), %xmm1
	movsd	(%rcx,%r13), %xmm4
	movsd	(%rdx,%rbp), %xmm6
	movq	8(%rsi,%r8), %rdx
	mulsd	%xmm2, %xmm1
	mulsd	%xmm2, %xmm6
	mulsd	%xmm0, %xmm4
	mulsd	(%rcx,%r14), %xmm0
	addsd	%xmm6, %xmm1
	subsd	%xmm4, %xmm1
	movapd	%xmm2, %xmm4
	addsd	%xmm2, %xmm4
	subsd	%xmm0, %xmm4
	movsd	(%rdx,%rbp), %xmm0
	movq	-8(%rsi,%r8), %rdx
	movsd	(%rdx,%rbp), %xmm6
	mulsd	%xmm3, %xmm0
	mulsd	%xmm3, %xmm6
	addsd	%xmm6, %xmm0
	addsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	addsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rcx,%rbp)
.L1270:
	addq	$8, %rax
	cmpq	%rax, %r15
	jne	.L1271
	movq	8(%rsp), %r13
	movq	16(%rsp), %r14
	jmp	.L1268
	.p2align 4,,10
	.p2align 3
.L1302:
	movsd	%xmm4, 32(%rsp)
	movsd	%xmm3, 24(%rsp)
	movsd	%xmm2, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r14
	movsd	32(%rsp), %xmm4
	movsd	24(%rsp), %xmm3
	movsd	8(%rsp), %xmm2
	jmp	.L1274
	.p2align 4,,10
	.p2align 3
.L1303:
	testl	%ebx, %ebx
	js	.L1245
	leal	1(%rax), %r13d
	addl	$1, %edx
	movslq	%ebx, %rax
	movl	%ebx, 44(%rsp)
	leaq	8(,%r8,8), %rcx
	movslq	%edx, %rdx
	movslq	%r13d, %r13
	movl	%ebx, %r12d
	leaq	0(,%rax,8), %r15
	movq	grid(%rip), %rax
	movq	%rcx, 16(%rsp)
	leaq	0(,%rdx,8), %rcx
	movq	%rcx, 24(%rsp)
	salq	$3, %r13
	leaq	8(,%rsi,8), %rbp
	leaq	8(,%rdi,8), %r14
	movq	%rax, 8(%rsp)
	jmp	.L1250
	.p2align 4,,10
	.p2align 3
.L1253:
	subl	$1, %r12d
	subq	$8, %r15
	cmpl	$-1, %r12d
	je	.L1245
.L1250:
	movq	8(%rsp), %rax
	cmpl	%r12d, 16(%rax)
	jl	.L1253
	movq	8(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1305
.L1252:
	movq	8(%rsp), %rdi
	movq	96(%rdi), %rax
	leaq	(%rax,%r15,2), %rdx
	movl	8(%rdx), %esi
	movq	(%rdx), %rax
	testl	%esi, %esi
	jle	.L1253
	movl	$1, %edx
	movl	%r12d, %ecx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm4
	sall	%cl, %edx
	movq	%r15, 32(%rsp)
	cvtsi2sdl	%edx, %xmm0
	leal	-1(%rsi), %edx
	leaq	8(%rax,%rdx,8), %rbx
	movq	24(%rdi), %rdx
	addq	%r15, %rdx
	movl	44(%rsp), %r15d
	divsd	%xmm0, %xmm4
	movq	(%rdx), %r11
	.p2align 4,,10
	.p2align 3
.L1256:
	movslq	(%rax), %rcx
	movslq	4(%rax), %rdx
	cmpl	%r12d, %r15d
	je	.L1254
	movq	(%r11), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rsi
	testb	$2, (%rsi)
	je	.L1255
.L1254:
	movq	(%r11), %rsi
	movsd	L0(%rip), %xmm0
	leaq	0(,%rcx,8), %r10
	leaq	0(,%rdx,8), %r8
	movq	16(%rsp), %r9
	mulsd	%xmm4, %xmm0
	movq	16(%rsi), %rdi
	movq	(%rdi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	mulsd	%xmm0, %xmm0
	movsd	(%rcx,%r9), %xmm5
	movq	24(%rsp), %r9
	movsd	(%rcx,%r13), %xmm2
	mulsd	%xmm0, %xmm5
	mulsd	(%rcx,%r9), %xmm0
	movq	8(%rdi,%r10), %r9
	movq	-8(%rdi,%r10), %rdi
	movq	(%r9,%rdx,8), %r9
	movq	(%rdi,%rdx,8), %rdx
	movsd	(%r9,%r13), %xmm1
	movsd	(%r9,%rbp), %xmm6
	movsd	(%rdx,%rbp), %xmm3
	movq	8(%rsi,%r8), %rdx
	mulsd	%xmm1, %xmm6
	movq	-8(%rsi,%r8), %rsi
	mulsd	%xmm2, %xmm3
	addsd	%xmm1, %xmm2
	movsd	(%rdx,%r14), %xmm1
	subsd	%xmm0, %xmm2
	movsd	(%rsi,%rbp), %xmm0
	addsd	%xmm6, %xmm3
	movsd	(%rdx,%rbp), %xmm6
	mulsd	%xmm1, %xmm6
	subsd	%xmm5, %xmm3
	movsd	(%rcx,%r14), %xmm5
	mulsd	%xmm5, %xmm0
	addsd	%xmm5, %xmm1
	addsd	%xmm2, %xmm1
	addsd	%xmm6, %xmm0
	addsd	%xmm3, %xmm0
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rcx,%rbp)
.L1255:
	addq	$8, %rax
	cmpq	%rbx, %rax
	jne	.L1256
	movq	32(%rsp), %r15
	jmp	.L1253
	.p2align 4,,10
	.p2align 3
.L1305:
	call	update_cache_f
	movq	grid(%rip), %rax
	movq	%rax, 8(%rsp)
	jmp	.L1252
	.p2align 4,,10
	.p2align 3
.L1301:
	movsd	%xmm4, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	24(%rsp), %xmm4
	movq	%rax, 8(%rsp)
	jmp	.L1260
	.p2align 4,,10
	.p2align 3
.L1304:
	movsd	%xmm3, 16(%rsp)
	movsd	%xmm2, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r14
	movsd	16(%rsp), %xmm3
	movsd	8(%rsp), %xmm2
	jmp	.L1267
	.cfi_endproc
.LFE282:
	.size	relax, .-relax
	.p2align 4
	.type	relax_viscosity, @function
relax_viscosity:
.LFB286:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edx, %ebx
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	movslq	16(%rcx), %r10
	movslq	8(%rcx), %r8
	movslq	12(%rcx), %r9
	movsd	24(%rcx), %xmm4
	movl	%edx, 12(%rsp)
	movslq	(%rdi), %r11
	movslq	4(%rdi), %rcx
	movslq	(%rsi), %rdx
	movslq	4(%rsi), %rax
	cmpl	$65535, %r10d
	jle	.L1361
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%r10,8), %xmm5
	cmpl	$65535, %r8d
	jg	.L1318
	movl	12(%rsp), %edi
	testl	%edi, %edi
	js	.L1306
	leaq	8(,%rax,8), %rax
	addl	$1, %r8d
	leaq	8(,%rcx,8), %rbp
	movsd	.LC3(%rip), %xmm3
	movq	%rax, 128(%rsp)
	movslq	%edi, %rax
	movslq	%r8d, %r8
	leaq	8(,%r11,8), %r12
	salq	$3, %rax
	leaq	0(,%r8,8), %rbx
	movq	%r12, %r15
	movq	%rax, 136(%rsp)
	movq	grid(%rip), %rax
	movq	%rbx, 112(%rsp)
	leaq	8(,%r9,8), %rbx
	movq	%rbx, 48(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rax, 16(%rsp)
	movq	%rbp, %rax
	movl	%edi, %ebp
	movq	%rbx, 120(%rsp)
	movq	%rax, %rbx
	jmp	.L1320
	.p2align 4,,10
	.p2align 3
.L1322:
	subq	$8, 136(%rsp)
	subl	$1, %ebp
	cmpl	$-1, %ebp
	je	.L1306
.L1320:
	movq	16(%rsp), %rax
	cmpl	%ebp, 16(%rax)
	jl	.L1322
	movq	16(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1362
.L1321:
	movq	16(%rsp), %rsi
	movq	136(%rsp), %rdi
	movq	96(%rsi), %rax
	leaq	(%rax,%rdi,2), %rax
	movq	(%rax), %rdx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1322
	movl	$1, %r11d
	movl	%ebp, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %eax
	sall	%cl, %r11d
	movsd	.LC10(%rip), %xmm6
	leaq	8(%rdx,%rax,8), %rax
	movl	%ebp, 96(%rsp)
	cvtsi2sdl	%r11d, %xmm0
	movq	%rax, 104(%rsp)
	movq	24(%rsi), %rax
	movq	%rdx, %r11
	addq	%rdi, %rax
	movq	(%rax), %rsi
	divsd	%xmm0, %xmm6
	movq	%rsi, 40(%rsp)
	.p2align 4,,10
	.p2align 3
.L1325:
	movslq	(%r11), %rax
	movslq	4(%r11), %r9
	movl	96(%rsp), %esi
	cmpl	%esi, 12(%rsp)
	je	.L1323
	movq	40(%rsp), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rax,8), %rdx
	movq	(%rdx,%r9,8), %rdx
	testb	$2, (%rdx)
	je	.L1324
.L1323:
	movq	40(%rsp), %rsi
	addq	$1, %rax
	movq	48(%rsp), %r13
	leaq	0(,%rax,8), %r12
	movq	112(%rsp), %r10
	movsd	L0(%rip), %xmm7
	movq	(%rsi), %rdx
	mulsd	%xmm6, %xmm7
	movq	16(%rdx), %rsi
	leaq	0(,%r9,8), %rdx
	movq	(%rsi,%rax,8), %r8
	movq	-8(%rsi,%r12), %rdi
	movq	-16(%rsi,%r12), %rsi
	movq	8(%r8,%rdx), %r14
	movq	(%rdi,%r9,8), %rax
	mulsd	%xmm7, %xmm7
	movq	(%rsi,%r9,8), %r12
	movq	(%r8,%r9,8), %rcx
	movq	8(%rdi,%rdx), %r9
	movq	-8(%rdi,%rdx), %rdi
	movq	%r14, 24(%rsp)
	movq	%r12, 56(%rsp)
	leaq	(%r12,%rbx), %r14
	movq	8(%rsi,%rdx), %r12
	leaq	(%rcx,%r10), %rbp
	addq	%r9, %r13
	movq	%r9, 64(%rsp)
	addq	%r15, %r9
	addq	%rax, %r10
	movsd	0(%r13), %xmm9
	movq	-8(%r8,%rdx), %r8
	movq	%r12, 32(%rsp)
	movq	48(%rsp), %r12
	movq	-8(%rsi,%rdx), %rdx
	movq	%r9, 72(%rsp)
	leaq	(%rcx,%rbx), %r9
	movsd	(%r9), %xmm1
	movsd	(%r14), %xmm8
	movq	%rdi, 88(%rsp)
	addq	%r15, %rdi
	addq	%rax, %r12
	movsd	0(%rbp), %xmm0
	movsd	(%r10), %xmm10
	movq	%r14, 80(%rsp)
	movsd	(%r12), %xmm2
	movq	24(%rsp), %r14
	movq	32(%rsp), %rsi
	addsd	%xmm10, %xmm10
	addsd	%xmm0, %xmm0
	movsd	(%r14,%rbx), %xmm11
	movq	72(%rsp), %r14
	movsd	(%rsi,%rbx), %xmm12
	movq	56(%rsp), %rsi
	addsd	%xmm1, %xmm11
	addsd	(%r8,%rbx), %xmm1
	addsd	%xmm8, %xmm12
	addsd	(%rdx,%rbx), %xmm8
	movsd	(%rsi,%r15), %xmm13
	movq	32(%rsp), %rsi
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm8
	subsd	(%rdi), %xmm1
	mulsd	%xmm3, %xmm12
	mulsd	%xmm3, %xmm11
	addsd	(%r14), %xmm11
	mulsd	%xmm10, %xmm13
	subsd	%xmm8, %xmm1
	movapd	%xmm4, %xmm8
	divsd	%xmm5, %xmm8
	subsd	%xmm12, %xmm11
	movsd	(%rcx,%r15), %xmm12
	movq	120(%rsp), %rcx
	mulsd	%xmm0, %xmm12
	addsd	%xmm10, %xmm0
	mulsd	%xmm9, %xmm11
	mulsd	%xmm2, %xmm1
	addsd	%xmm9, %xmm0
	addsd	%xmm13, %xmm12
	addsd	%xmm2, %xmm0
	addsd	%xmm12, %xmm11
	subsd	%xmm1, %xmm11
	movapd	%xmm11, %xmm1
	movsd	(%rax,%rcx), %xmm11
	mulsd	%xmm7, %xmm11
	mulsd	%xmm8, %xmm1
	mulsd	%xmm8, %xmm0
	addsd	%xmm11, %xmm1
	addsd	%xmm7, %xmm0
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax,%r15)
	movsd	(%r14), %xmm2
	movq	24(%rsp), %r14
	movsd	(%rdi), %xmm12
	movsd	(%r8,%r15), %xmm13
	movsd	(%r14,%r15), %xmm0
	movq	88(%rsp), %rdi
	addsd	%xmm12, %xmm13
	movq	80(%rsp), %r14
	movsd	(%r10), %xmm9
	addsd	%xmm2, %xmm0
	addsd	(%rsi,%r15), %xmm2
	movsd	0(%rbp), %xmm10
	movsd	(%rdi,%rbx), %xmm14
	movsd	0(%r13), %xmm1
	mulsd	%xmm3, %xmm13
	movsd	(%r12), %xmm11
	mulsd	%xmm3, %xmm0
	addsd	%xmm1, %xmm1
	addsd	(%r9), %xmm0
	movq	64(%rsp), %r9
	mulsd	%xmm3, %xmm2
	addsd	%xmm11, %xmm11
	subsd	%xmm13, %xmm0
	movsd	(%r9,%rbx), %xmm13
	subsd	(%r14), %xmm2
	mulsd	%xmm11, %xmm14
	addsd	(%rdx,%r15), %xmm12
	movq	128(%rsp), %rdi
	mulsd	%xmm1, %xmm13
	addsd	%xmm11, %xmm1
	mulsd	%xmm10, %xmm0
	mulsd	%xmm3, %xmm12
	addsd	%xmm10, %xmm1
	addsd	%xmm14, %xmm13
	addsd	%xmm9, %xmm1
	subsd	%xmm12, %xmm2
	addsd	%xmm13, %xmm0
	mulsd	%xmm8, %xmm1
	mulsd	%xmm9, %xmm2
	addsd	%xmm7, %xmm1
	subsd	%xmm2, %xmm0
	movsd	(%rax,%rdi), %xmm2
	mulsd	%xmm7, %xmm2
	mulsd	%xmm8, %xmm0
	addsd	%xmm2, %xmm0
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%rbx)
.L1324:
	addq	$8, %r11
	cmpq	%r11, 104(%rsp)
	jne	.L1325
	movl	96(%rsp), %ebp
	jmp	.L1322
	.p2align 4,,10
	.p2align 3
.L1318:
	movsd	-524288(%rsi,%r8,8), %xmm2
	movl	12(%rsp), %edi
	movsd	-524288(%rsi,%r9,8), %xmm3
	testl	%edi, %edi
	js	.L1306
	leaq	8(,%rax,8), %rax
	leaq	8(,%rdx,8), %rbx
	movsd	.LC3(%rip), %xmm1
	movl	%edi, %r13d
	movq	%rax, 80(%rsp)
	movslq	%edi, %rax
	leaq	8(,%r11,8), %r12
	leaq	8(,%rcx,8), %rbp
	salq	$3, %rax
	movq	%rbx, 72(%rsp)
	movq	%rax, 88(%rsp)
	movq	grid(%rip), %rax
	movq	%rax, 16(%rsp)
	jmp	.L1334
	.p2align 4,,10
	.p2align 3
.L1336:
	subl	$1, %r13d
	subq	$8, 88(%rsp)
	cmpl	$-1, %r13d
	je	.L1306
.L1334:
	movq	16(%rsp), %rax
	cmpl	%r13d, 16(%rax)
	jl	.L1336
	movq	16(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1363
.L1335:
	movq	16(%rsp), %rsi
	movq	88(%rsp), %rdi
	movq	96(%rsi), %rax
	leaq	(%rax,%rdi,2), %rax
	movq	(%rax), %rdx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1336
	movl	$1, %ebx
	movl	%r13d, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %eax
	sall	%cl, %ebx
	leaq	8(%rdx,%rax,8), %rax
	movl	%r13d, 56(%rsp)
	movq	%rdx, %r10
	cvtsi2sdl	%ebx, %xmm0
	movsd	.LC10(%rip), %xmm6
	movq	%rax, 64(%rsp)
	movq	24(%rsi), %rax
	addq	%rdi, %rax
	divsd	%xmm0, %xmm6
	movq	(%rax), %r8
	movq	%r8, %r11
	.p2align 4,,10
	.p2align 3
.L1339:
	movslq	(%r10), %rax
	movslq	4(%r10), %rdx
	movl	56(%rsp), %edi
	cmpl	%edi, 12(%rsp)
	je	.L1337
	movq	(%r11), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rax,8), %rcx
	movq	(%rcx,%rdx,8), %rcx
	testb	$2, (%rcx)
	je	.L1338
.L1337:
	movq	(%r11), %rcx
	addq	$1, %rax
	movsd	L0(%rip), %xmm7
	leaq	0(,%rax,8), %rdi
	movq	16(%rcx), %rcx
	mulsd	%xmm6, %xmm7
	movq	-16(%rcx,%rdi), %rsi
	movq	(%rcx,%rax,8), %r8
	leaq	0(,%rdx,8), %rax
	movq	-8(%rcx,%rdi), %rcx
	movq	(%rsi,%rdx,8), %r14
	movq	8(%r8,%rax), %rdi
	movq	8(%rcx,%rax), %rbx
	movq	(%r8,%rdx,8), %r15
	mulsd	%xmm7, %xmm7
	movq	(%rcx,%rdx,8), %rdx
	movq	-8(%r8,%rax), %r8
	movq	%rdi, 32(%rsp)
	leaq	(%r14,%rbp), %rdi
	leaq	(%rbx,%r12), %r13
	movq	%rbx, 24(%rsp)
	movq	8(%rsi,%rax), %rbx
	leaq	(%r15,%rbp), %r9
	movsd	(%rdi), %xmm10
	movsd	(%r9), %xmm8
	movq	%rbx, 40(%rsp)
	movq	-8(%rcx,%rax), %rbx
	movq	40(%rsp), %rcx
	movq	-8(%rsi,%rax), %rax
	movq	32(%rsp), %rsi
	movsd	(%r14,%r12), %xmm12
	movq	%rbx, 48(%rsp)
	addq	%r12, %rbx
	movsd	(%rcx,%rbp), %xmm0
	movsd	(%r15,%r12), %xmm11
	movsd	(%rsi,%rbp), %xmm9
	movq	72(%rsp), %r14
	addsd	%xmm10, %xmm0
	addsd	(%rax,%rbp), %xmm10
	addsd	%xmm8, %xmm9
	addsd	(%r8,%rbp), %xmm8
	mulsd	%xmm1, %xmm0
	mulsd	%xmm1, %xmm9
	addsd	0(%r13), %xmm9
	mulsd	%xmm1, %xmm10
	mulsd	%xmm1, %xmm8
	subsd	(%rbx), %xmm8
	subsd	%xmm0, %xmm9
	movapd	%xmm2, %xmm0
	addsd	%xmm2, %xmm0
	subsd	%xmm10, %xmm8
	movsd	(%rdx,%r14), %xmm10
	mulsd	%xmm3, %xmm9
	mulsd	%xmm0, %xmm12
	mulsd	%xmm0, %xmm11
	addsd	%xmm0, %xmm0
	mulsd	%xmm3, %xmm8
	mulsd	%xmm7, %xmm10
	addsd	%xmm3, %xmm0
	addsd	%xmm12, %xmm11
	addsd	%xmm3, %xmm0
	addsd	%xmm11, %xmm9
	subsd	%xmm8, %xmm9
	movapd	%xmm4, %xmm8
	divsd	%xmm5, %xmm8
	mulsd	%xmm8, %xmm9
	mulsd	%xmm8, %xmm0
	addsd	%xmm10, %xmm9
	addsd	%xmm7, %xmm0
	divsd	%xmm0, %xmm9
	movsd	%xmm9, (%rdx,%r12)
	movsd	(%rbx), %xmm11
	movsd	(%r8,%r12), %xmm0
	movsd	0(%r13), %xmm9
	movsd	(%rsi,%r12), %xmm10
	addsd	%xmm11, %xmm0
	movq	24(%rsp), %rbx
	addsd	(%rax,%r12), %xmm11
	addsd	%xmm9, %xmm10
	addsd	(%rcx,%r12), %xmm9
	movq	80(%rsp), %rax
	movsd	(%rbx,%rbp), %xmm12
	movq	48(%rsp), %rbx
	mulsd	%xmm1, %xmm0
	mulsd	%xmm1, %xmm10
	movsd	(%rbx,%rbp), %xmm13
	addsd	(%r9), %xmm10
	mulsd	%xmm1, %xmm11
	mulsd	%xmm1, %xmm9
	subsd	(%rdi), %xmm9
	subsd	%xmm0, %xmm10
	movapd	%xmm3, %xmm0
	addsd	%xmm3, %xmm0
	subsd	%xmm11, %xmm9
	mulsd	%xmm2, %xmm10
	mulsd	%xmm0, %xmm12
	mulsd	%xmm0, %xmm13
	addsd	%xmm0, %xmm0
	mulsd	%xmm2, %xmm9
	addsd	%xmm2, %xmm0
	addsd	%xmm13, %xmm12
	addsd	%xmm2, %xmm0
	addsd	%xmm12, %xmm10
	mulsd	%xmm8, %xmm0
	subsd	%xmm9, %xmm10
	mulsd	%xmm8, %xmm10
	addsd	%xmm7, %xmm0
	movapd	%xmm10, %xmm9
	movsd	(%rdx,%rax), %xmm10
	mulsd	%xmm7, %xmm10
	addsd	%xmm10, %xmm9
	divsd	%xmm0, %xmm9
	movsd	%xmm9, (%rdx,%rbp)
.L1338:
	addq	$8, %r10
	cmpq	%r10, 64(%rsp)
	jne	.L1339
	movl	56(%rsp), %r13d
	subq	$8, 88(%rsp)
	subl	$1, %r13d
	cmpl	$-1, %r13d
	jne	.L1334
.L1306:
	addq	$168, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1361:
	.cfi_restore_state
	cmpl	$65535, %r8d
	jle	.L1364
	movq	_constant(%rip), %rsi
	movl	12(%rsp), %edi
	movsd	-524288(%rsi,%r8,8), %xmm3
	movsd	-524288(%rsi,%r9,8), %xmm5
	testl	%edi, %edi
	js	.L1306
	leaq	8(,%rax,8), %rax
	leal	1(%r10), %esi
	movsd	.LC3(%rip), %xmm2
	movq	%rax, 88(%rsp)
	movslq	%edi, %rax
	movslq	%esi, %rsi
	leaq	8(,%r11,8), %r13
	salq	$3, %rax
	leaq	0(,%rsi,8), %rbx
	leaq	8(,%rcx,8), %r12
	movq	%r13, %rbp
	movq	%rax, 96(%rsp)
	movq	grid(%rip), %rax
	movq	%rbx, 72(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 80(%rsp)
	movl	%edi, %ebx
	movq	%rax, 16(%rsp)
	jmp	.L1327
	.p2align 4,,10
	.p2align 3
.L1329:
	subl	$1, %ebx
	subq	$8, 96(%rsp)
	cmpl	$-1, %ebx
	je	.L1306
.L1327:
	movq	16(%rsp), %rax
	cmpl	%ebx, 16(%rax)
	jl	.L1329
	movq	16(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1365
.L1328:
	movq	16(%rsp), %rsi
	movq	96(%rsp), %rdi
	movq	96(%rsi), %rax
	leaq	(%rax,%rdi,2), %rax
	movq	(%rax), %rdx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1329
	movl	$1, %r11d
	movl	%ebx, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %eax
	sall	%cl, %r11d
	leaq	8(%rdx,%rax,8), %rax
	movl	%ebx, 56(%rsp)
	movq	%rdx, %r13
	cvtsi2sdl	%r11d, %xmm0
	movq	%rax, 64(%rsp)
	movq	24(%rsi), %rax
	movsd	.LC10(%rip), %xmm13
	addq	%rdi, %rax
	movq	(%rax), %r9
	divsd	%xmm0, %xmm13
	movq	%r9, %r10
	.p2align 4,,10
	.p2align 3
.L1332:
	movslq	0(%r13), %rax
	movslq	4(%r13), %rsi
	movl	56(%rsp), %ebx
	cmpl	%ebx, 12(%rsp)
	je	.L1330
	movq	(%r10), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rax,8), %rdx
	movq	(%rdx,%rsi,8), %rdx
	testb	$2, (%rdx)
	je	.L1331
.L1330:
	movq	(%r10), %rdx
	movq	72(%rsp), %rbx
	leaq	0(,%rax,8), %r9
	movapd	%xmm4, %xmm8
	movsd	L0(%rip), %xmm7
	movq	16(%rdx), %rcx
	mulsd	%xmm13, %xmm7
	movq	8(%rcx,%r9), %r8
	movq	(%rcx,%rax,8), %rdi
	leaq	0(,%rsi,8), %rax
	movq	-8(%rcx,%r9), %rcx
	movq	8(%r8,%rax), %r11
	movq	(%rdi,%rsi,8), %rdx
	movq	(%r8,%rsi,8), %r15
	movq	(%rcx,%rsi,8), %r14
	movq	-8(%r8,%rax), %r8
	movq	8(%rdi,%rax), %rsi
	movq	%r11, 24(%rsp)
	addq	%rdx, %rbx
	movq	8(%rcx,%rax), %r11
	movq	-8(%rdi,%rax), %rdi
	divsd	(%rbx), %xmm8
	movq	%rbx, 40(%rsp)
	movq	-8(%rcx,%rax), %rax
	leaq	(%rsi,%rbp), %rbx
	leaq	(%r15,%r12), %r9
	mulsd	%xmm7, %xmm7
	movq	24(%rsp), %rcx
	movsd	(%r9), %xmm1
	movq	%r11, 32(%rsp)
	leaq	(%rdi,%rbp), %r11
	movq	%rsi, 48(%rsp)
	leaq	(%r14,%r12), %rsi
	movsd	(%r15,%rbp), %xmm11
	movsd	(%rcx,%r12), %xmm9
	movq	32(%rsp), %rcx
	movsd	(%rsi), %xmm10
	movsd	(%r14,%rbp), %xmm12
	movsd	(%rcx,%r12), %xmm0
	addsd	%xmm1, %xmm9
	addsd	(%r8,%r12), %xmm1
	addsd	%xmm10, %xmm0
	mulsd	%xmm2, %xmm9
	addsd	(%rbx), %xmm9
	mulsd	%xmm2, %xmm1
	mulsd	%xmm2, %xmm0
	subsd	(%r11), %xmm1
	addsd	(%rax,%r12), %xmm10
	movq	80(%rsp), %r15
	movq	40(%rsp), %rcx
	mulsd	%xmm2, %xmm10
	subsd	%xmm0, %xmm9
	movapd	%xmm3, %xmm0
	addsd	%xmm3, %xmm0
	subsd	%xmm10, %xmm1
	mulsd	%xmm5, %xmm9
	mulsd	%xmm0, %xmm12
	mulsd	%xmm0, %xmm11
	addsd	%xmm0, %xmm0
	mulsd	%xmm5, %xmm1
	addsd	%xmm5, %xmm0
	addsd	%xmm12, %xmm11
	addsd	%xmm5, %xmm0
	addsd	%xmm11, %xmm9
	mulsd	%xmm8, %xmm0
	subsd	%xmm1, %xmm9
	movapd	%xmm9, %xmm1
	movsd	(%rdx,%r15), %xmm9
	addsd	%xmm7, %xmm0
	mulsd	%xmm8, %xmm1
	movapd	%xmm4, %xmm8
	mulsd	%xmm7, %xmm9
	addsd	%xmm9, %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx,%rbp)
	divsd	(%rcx), %xmm8
	movq	24(%rsp), %rcx
	movsd	(%r11), %xmm10
	movsd	(%r8,%rbp), %xmm0
	movsd	(%rbx), %xmm1
	movsd	(%rcx,%rbp), %xmm9
	movq	32(%rsp), %rcx
	addsd	%xmm10, %xmm0
	addsd	(%rax,%rbp), %xmm10
	movq	48(%rsp), %rbx
	addsd	%xmm1, %xmm9
	addsd	(%rcx,%rbp), %xmm1
	movsd	(%rdi,%r12), %xmm12
	movsd	(%rbx,%r12), %xmm11
	movq	88(%rsp), %rax
	mulsd	%xmm2, %xmm0
	mulsd	%xmm2, %xmm9
	addsd	(%r9), %xmm9
	mulsd	%xmm2, %xmm10
	mulsd	%xmm2, %xmm1
	subsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm9
	movapd	%xmm5, %xmm0
	addsd	%xmm5, %xmm0
	subsd	%xmm10, %xmm1
	mulsd	%xmm3, %xmm9
	mulsd	%xmm0, %xmm11
	mulsd	%xmm0, %xmm12
	addsd	%xmm0, %xmm0
	mulsd	%xmm3, %xmm1
	addsd	%xmm3, %xmm0
	addsd	%xmm12, %xmm11
	addsd	%xmm3, %xmm0
	addsd	%xmm11, %xmm9
	mulsd	%xmm8, %xmm0
	subsd	%xmm1, %xmm9
	movapd	%xmm9, %xmm1
	movsd	(%rdx,%rax), %xmm9
	addsd	%xmm7, %xmm0
	mulsd	%xmm8, %xmm1
	mulsd	%xmm7, %xmm9
	addsd	%xmm9, %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdx,%r12)
.L1331:
	addq	$8, %r13
	cmpq	%r13, 64(%rsp)
	jne	.L1332
	movl	56(%rsp), %ebx
	jmp	.L1329
	.p2align 4,,10
	.p2align 3
.L1363:
	movsd	%xmm4, 48(%rsp)
	movsd	%xmm3, 40(%rsp)
	movsd	%xmm2, 32(%rsp)
	movsd	%xmm5, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	48(%rsp), %xmm4
	movsd	40(%rsp), %xmm3
	movsd	32(%rsp), %xmm2
	movq	%rax, 16(%rsp)
	movq	.LC3(%rip), %rax
	movsd	24(%rsp), %xmm5
	movq	%rax, %xmm1
	jmp	.L1335
	.p2align 4,,10
	.p2align 3
.L1364:
	movl	%ebx, %edi
	testl	%ebx, %ebx
	js	.L1306
	addl	$1, %r10d
	addl	$1, %r8d
	leaq	8(,%rax,8), %rax
	movsd	.LC3(%rip), %xmm2
	movslq	%r10d, %r10
	movslq	%r8d, %r8
	movq	%rax, 144(%rsp)
	movslq	%edi, %rax
	leaq	0(,%r10,8), %rbx
	salq	$3, %rax
	movl	%edi, %r14d
	movq	%rbx, 120(%rsp)
	leaq	0(,%r8,8), %rbx
	leaq	8(,%r11,8), %r12
	movq	%rbx, 128(%rsp)
	leaq	8(,%r9,8), %rbx
	leaq	8(,%rcx,8), %rbp
	movq	%r12, %r15
	movq	%rax, 152(%rsp)
	movq	grid(%rip), %rax
	movq	%rbx, 48(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 136(%rsp)
	movq	%rbp, %rbx
	movq	%rax, 16(%rsp)
	jmp	.L1311
	.p2align 4,,10
	.p2align 3
.L1314:
	subq	$8, 152(%rsp)
	subl	$1, %r14d
	cmpl	$-1, %r14d
	je	.L1306
.L1311:
	movq	16(%rsp), %rax
	cmpl	%r14d, 16(%rax)
	jl	.L1314
	movq	16(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1366
.L1313:
	movq	16(%rsp), %rsi
	movq	152(%rsp), %rdi
	movq	96(%rsi), %rax
	leaq	(%rax,%rdi,2), %rax
	movq	(%rax), %rdx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1314
	movl	$1, %r11d
	movl	%r14d, %ecx
	pxor	%xmm0, %xmm0
	subl	$1, %eax
	sall	%cl, %r11d
	leaq	8(%rdx,%rax,8), %rax
	movl	%r14d, 104(%rsp)
	movsd	.LC10(%rip), %xmm14
	cvtsi2sdl	%r11d, %xmm0
	movq	%rax, 112(%rsp)
	movq	24(%rsi), %rax
	movq	%rdx, %r11
	addq	%rdi, %rax
	movq	(%rax), %rsi
	divsd	%xmm0, %xmm14
	movq	%rsi, 40(%rsp)
	.p2align 4,,10
	.p2align 3
.L1317:
	movslq	(%r11), %rax
	movslq	4(%r11), %r9
	movl	104(%rsp), %esi
	cmpl	%esi, 12(%rsp)
	je	.L1315
	movq	40(%rsp), %rdi
	movq	(%rdi), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rax,8), %rdx
	movq	(%rdx,%r9,8), %rdx
	testb	$2, (%rdx)
	je	.L1316
.L1315:
	movq	40(%rsp), %rdi
	movq	120(%rsp), %rcx
	movapd	%xmm4, %xmm7
	leaq	0(,%rax,8), %r12
	movq	48(%rsp), %r13
	movq	128(%rsp), %r10
	movq	(%rdi), %rdx
	movq	16(%rdx), %rsi
	leaq	0(,%r9,8), %rdx
	movq	8(%rsi,%r12), %r8
	movq	(%rsi,%rax,8), %rdi
	movq	-8(%rsi,%r12), %rsi
	movq	(%rdi,%r9,8), %rax
	movq	8(%r8,%rdx), %r14
	movq	(%rsi,%r9,8), %r12
	addq	%rax, %rcx
	movq	%r14, 24(%rsp)
	movq	%r12, 64(%rsp)
	leaq	(%r12,%rbx), %r14
	movq	8(%rsi,%rdx), %r12
	divsd	(%rcx), %xmm7
	movq	%rcx, 56(%rsp)
	movq	(%r8,%r9,8), %rcx
	movq	8(%rdi,%rdx), %r9
	movq	-8(%rdi,%rdx), %rdi
	movq	%r12, 32(%rsp)
	movq	48(%rsp), %r12
	leaq	(%rcx,%r10), %rbp
	addq	%rax, %r10
	movsd	(%r14), %xmm11
	addq	%r9, %r13
	movq	%r9, 72(%rsp)
	addq	%r15, %r9
	movq	-8(%r8,%rdx), %r8
	movq	%r9, 80(%rsp)
	addq	%rax, %r12
	leaq	(%rcx,%rbx), %r9
	movsd	0(%r13), %xmm8
	movsd	(%r9), %xmm6
	movsd	(%r12), %xmm0
	movq	%r14, 88(%rsp)
	movsd	0(%rbp), %xmm1
	movsd	(%r10), %xmm9
	movq	%rdi, 96(%rsp)
	addq	%r15, %rdi
	movq	-8(%rsi,%rdx), %rdx
	movq	32(%rsp), %rsi
	movq	24(%rsp), %r14
	addsd	%xmm9, %xmm9
	addsd	%xmm1, %xmm1
	movsd	L0(%rip), %xmm5
	movsd	(%rsi,%rbx), %xmm12
	movq	64(%rsp), %rsi
	movsd	(%r14,%rbx), %xmm10
	movq	80(%rsp), %r14
	mulsd	%xmm14, %xmm5
	addsd	%xmm11, %xmm12
	addsd	(%rdx,%rbx), %xmm11
	movsd	(%rsi,%r15), %xmm13
	addsd	%xmm6, %xmm10
	addsd	(%r8,%rbx), %xmm6
	mulsd	%xmm9, %xmm13
	mulsd	%xmm2, %xmm12
	mulsd	%xmm2, %xmm10
	addsd	(%r14), %xmm10
	mulsd	%xmm2, %xmm11
	mulsd	%xmm2, %xmm6
	subsd	(%rdi), %xmm6
	mulsd	%xmm5, %xmm5
	subsd	%xmm12, %xmm10
	movsd	(%rcx,%r15), %xmm12
	movq	136(%rsp), %rcx
	mulsd	%xmm1, %xmm12
	subsd	%xmm11, %xmm6
	addsd	%xmm9, %xmm1
	mulsd	%xmm8, %xmm10
	mulsd	%xmm0, %xmm6
	addsd	%xmm8, %xmm1
	addsd	%xmm13, %xmm12
	addsd	%xmm1, %xmm0
	addsd	%xmm12, %xmm10
	mulsd	%xmm7, %xmm0
	subsd	%xmm6, %xmm10
	movapd	%xmm10, %xmm6
	movsd	(%rax,%rcx), %xmm10
	addsd	%xmm5, %xmm0
	movq	56(%rsp), %rcx
	mulsd	%xmm7, %xmm6
	mulsd	%xmm5, %xmm10
	addsd	%xmm10, %xmm6
	divsd	%xmm0, %xmm6
	movsd	%xmm6, (%rax,%r15)
	movsd	(%r14), %xmm1
	movq	24(%rsp), %r14
	movapd	%xmm4, %xmm6
	movsd	(%rdi), %xmm11
	movsd	(%r8,%r15), %xmm12
	divsd	(%rcx), %xmm6
	movsd	(%r14,%r15), %xmm10
	movq	96(%rsp), %rdi
	addsd	%xmm11, %xmm12
	movsd	0(%rbp), %xmm8
	movsd	(%r10), %xmm7
	addsd	%xmm1, %xmm10
	movsd	0(%r13), %xmm0
	movsd	(%r12), %xmm9
	mulsd	%xmm2, %xmm12
	addsd	%xmm0, %xmm0
	addsd	%xmm9, %xmm9
	mulsd	%xmm2, %xmm10
	addsd	(%r9), %xmm10
	movq	72(%rsp), %r9
	subsd	%xmm12, %xmm10
	movsd	(%r9,%rbx), %xmm12
	movsd	(%rdi,%rbx), %xmm13
	movq	32(%rsp), %rsi
	addsd	(%rdx,%r15), %xmm11
	movq	88(%rsp), %r14
	mulsd	%xmm0, %xmm12
	addsd	%xmm9, %xmm0
	movq	144(%rsp), %rdi
	addsd	(%rsi,%r15), %xmm1
	mulsd	%xmm9, %xmm13
	mulsd	%xmm2, %xmm11
	mulsd	%xmm8, %xmm10
	addsd	%xmm8, %xmm0
	mulsd	%xmm2, %xmm1
	subsd	(%r14), %xmm1
	addsd	%xmm13, %xmm12
	addsd	%xmm7, %xmm0
	subsd	%xmm11, %xmm1
	addsd	%xmm12, %xmm10
	mulsd	%xmm6, %xmm0
	mulsd	%xmm7, %xmm1
	addsd	%xmm5, %xmm0
	subsd	%xmm1, %xmm10
	movapd	%xmm10, %xmm1
	movsd	(%rax,%rdi), %xmm10
	mulsd	%xmm6, %xmm1
	mulsd	%xmm5, %xmm10
	addsd	%xmm10, %xmm1
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax,%rbx)
.L1316:
	addq	$8, %r11
	cmpq	%r11, 112(%rsp)
	jne	.L1317
	movl	104(%rsp), %r14d
	jmp	.L1314
	.p2align 4,,10
	.p2align 3
.L1366:
	movsd	%xmm4, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	24(%rsp), %xmm4
	movq	%rax, 16(%rsp)
	movq	.LC3(%rip), %rax
	movq	%rax, %xmm2
	jmp	.L1313
	.p2align 4,,10
	.p2align 3
.L1362:
	movsd	%xmm4, 32(%rsp)
	movsd	%xmm5, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	32(%rsp), %xmm4
	movsd	24(%rsp), %xmm5
	movq	%rax, 16(%rsp)
	movq	.LC3(%rip), %rax
	movq	%rax, %xmm3
	jmp	.L1321
	.p2align 4,,10
	.p2align 3
.L1365:
	movsd	%xmm4, 40(%rsp)
	movsd	%xmm5, 32(%rsp)
	movsd	%xmm3, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	40(%rsp), %xmm4
	movsd	32(%rsp), %xmm5
	movsd	24(%rsp), %xmm3
	movq	%rax, 16(%rsp)
	movq	.LC3(%rip), %rax
	movq	%rax, %xmm2
	jmp	.L1328
	.cfi_endproc
.LFE286:
	.size	relax_viscosity, .-relax_viscosity
	.p2align 4
	.globl	array_new
	.type	array_new, @function
array_new:
.LFB24:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$24, %edi
	call	malloc
	movq	$0, (%rax)
	movq	$0, 16(%rax)
	movq	$0, 8(%rax)
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE24:
	.size	array_new, .-array_new
	.p2align 4
	.globl	array_free
	.type	array_free, @function
array_free:
.LFB25:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	movq	(%rdi), %rdi
	call	free
	movq	%rbp, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	free
	.cfi_endproc
.LFE25:
	.size	array_free, .-array_free
	.p2align 4
	.globl	array_append
	.type	array_append, @function
array_append:
.LFB26:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rsi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	16(%rdi), %rax
	movq	%rdi, %rbx
	movq	8(%rdi), %rdx
	movq	(%rdi), %rdi
	leaq	(%rax,%rbp), %rcx
	cmpq	%rdx, %rcx
	jnb	.L1374
.L1372:
	movq	%rbp, %rdx
	movq	%r12, %rsi
	addq	%rax, %rdi
	call	memcpy
	addq	%rbp, 16(%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1374:
	.cfi_restore_state
	movl	$4096, %esi
	cmpq	%rsi, %rbp
	cmovnb	%rbp, %rsi
	addq	%rdx, %rsi
	movq	%rsi, 8(%rbx)
	call	realloc
	movq	%rax, (%rbx)
	movq	%rax, %rdi
	movq	16(%rbx), %rax
	jmp	.L1372
	.cfi_endproc
.LFE26:
	.size	array_append, .-array_append
	.p2align 4
	.globl	array_shrink
	.type	array_shrink, @function
array_shrink:
.LFB27:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movq	16(%rdi), %rsi
	movq	(%rdi), %rdi
	call	realloc
	movq	%rbp, %rdi
	movq	%rax, %r12
	call	free
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%r12, %rax
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE27:
	.size	array_shrink, .-array_shrink
	.p2align 4
	.globl	normalize
	.type	normalize, @function
normalize:
.LFB29:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movsd	(%rdi), %xmm2
	movsd	8(%rdi), %xmm1
	pxor	%xmm4, %xmm4
	movapd	%xmm2, %xmm3
	movapd	%xmm1, %xmm0
	mulsd	%xmm2, %xmm3
	mulsd	%xmm1, %xmm0
	addsd	%xmm4, %xmm3
	addsd	%xmm3, %xmm0
	ucomisd	%xmm0, %xmm4
	ja	.L1382
	sqrtsd	%xmm0, %xmm0
.L1380:
	divsd	%xmm0, %xmm2
	divsd	%xmm0, %xmm1
	movsd	%xmm2, (%rdi)
	movsd	%xmm1, 8(%rdi)
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
.L1382:
	.cfi_restore_state
	movq	%rdi, 24(%rsp)
	movsd	%xmm1, 16(%rsp)
	movsd	%xmm2, 8(%rsp)
	call	sqrt
	movq	24(%rsp), %rdi
	movsd	16(%rsp), %xmm1
	movsd	8(%rsp), %xmm2
	jmp	.L1380
	.cfi_endproc
.LFE29:
	.size	normalize, .-normalize
	.p2align 4
	.globl	origin
	.type	origin, @function
origin:
.LFB30:
	.cfi_startproc
	movsd	8(%rsp), %xmm0
	movsd	%xmm0, X0(%rip)
	movsd	16(%rsp), %xmm0
	movsd	%xmm0, Y0(%rip)
	movsd	24(%rsp), %xmm0
	movsd	%xmm0, Z0(%rip)
	ret
	.cfi_endproc
.LFE30:
	.size	origin, .-origin
	.p2align 4
	.globl	size
	.type	size, @function
size:
.LFB31:
	.cfi_startproc
	movsd	%xmm0, L0(%rip)
	ret
	.cfi_endproc
.LFE31:
	.size	size, .-size
	.p2align 4
	.globl	add_boundary
	.type	add_boundary, @function
add_boundary:
.LFB33:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	movq	boundaries(%rip), %rdi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testq	%rdi, %rdi
	je	.L1390
	cmpq	$0, (%rdi)
	leaq	8(%rdi), %rax
	je	.L1390
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L1388:
	addq	$8, %rax
	movl	%edx, %ecx
	addl	$1, %edx
	cmpq	$0, -8(%rax)
	jne	.L1388
	leal	3(%rcx), %esi
	movslq	%esi, %rsi
	salq	$3, %rsi
	leaq	-16(%rsi), %rbp
	leaq	-8(%rsi), %rbx
.L1387:
	call	realloc
	movq	%r12, (%rax,%rbp)
	movq	%rax, boundaries(%rip)
	movq	$0, (%rax,%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1390:
	.cfi_restore_state
	movl	$8, %ebx
	xorl	%ebp, %ebp
	movl	$16, %esi
	jmp	.L1387
	.cfi_endproc
.LFE33:
	.size	add_boundary, .-add_boundary
	.p2align 4
	.globl	free_boundaries
	.type	free_boundaries, @function
free_boundaries:
.LFB34:
	.cfi_startproc
	movq	boundaries(%rip), %r8
	testq	%r8, %r8
	je	.L1407
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	(%r8), %rdi
	leaq	8(%r8), %rbx
	testq	%rdi, %rdi
	jne	.L1398
	jmp	.L1395
	.p2align 4,,10
	.p2align 3
.L1411:
	call	*%rax
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1410
.L1398:
	movq	(%rdi), %rax
	testq	%rax, %rax
	jne	.L1411
	call	free
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	jne	.L1398
	.p2align 4,,10
	.p2align 3
.L1410:
	movq	boundaries(%rip), %r8
.L1395:
	movq	%r8, %rdi
	call	free
	popq	%rbx
	.cfi_def_cfa_offset 8
	movq	$0, boundaries(%rip)
	ret
	.p2align 4,,10
	.p2align 3
.L1407:
	.cfi_restore 3
	ret
	.cfi_endproc
.LFE34:
	.size	free_boundaries, .-free_boundaries
	.p2align 4
	.globl	list_len
	.type	list_len, @function
list_len:
.LFB35:
	.cfi_startproc
	xorl	%eax, %eax
	testq	%rdi, %rdi
	je	.L1415
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	.L1416
	.p2align 4,,10
	.p2align 3
.L1414:
	movl	4(%rdi), %edx
	addq	$4, %rdi
	addl	$1, %eax
	testl	%edx, %edx
	jns	.L1414
	ret
	.p2align 4,,10
	.p2align 3
.L1415:
	ret
	.p2align 4,,10
	.p2align 3
.L1416:
	ret
	.cfi_endproc
.LFE35:
	.size	list_len, .-list_len
	.p2align 4
	.globl	list_append
	.type	list_append, @function
list_append:
.LFB36:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	%esi, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testq	%rdi, %rdi
	je	.L1422
	movl	(%rdi), %r8d
	testl	%r8d, %r8d
	js	.L1422
	movq	%rdi, %rdx
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L1420:
	movl	4(%rdx), %esi
	movl	%eax, %ecx
	addq	$4, %rdx
	addl	$1, %eax
	testl	%esi, %esi
	jns	.L1420
	leal	3(%rcx), %esi
	movslq	%esi, %rsi
	salq	$2, %rsi
	leaq	-8(%rsi), %rbp
	leaq	-4(%rsi), %rbx
.L1419:
	call	realloc
	movl	%r12d, (%rax,%rbp)
	movl	$-1, (%rax,%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1422:
	.cfi_restore_state
	movl	$4, %ebx
	xorl	%ebp, %ebp
	movl	$8, %esi
	jmp	.L1419
	.cfi_endproc
.LFE36:
	.size	list_append, .-list_append
	.section	.rodata.str1.1
.LC54:
	.string	"%s%d%s"
	.text
	.p2align 4
	.type	init_block_scalar, @function
init_block_scalar:
.LFB132:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	.cfi_offset 15, -24
	movq	%rdx, %r15
	pushq	%r14
	pushq	%r13
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	movq	%rsi, %r13
	pushq	%r12
	.cfi_offset 12, -48
	movl	%edi, %r12d
	movq	%rsi, %rdi
	pushq	%rbx
	.cfi_offset 3, -56
	movl	%ecx, %ebx
	subq	$24, %rsp
	movl	%r8d, -52(%rbp)
	call	strlen
	movq	%r15, %rdi
	movq	%rax, %r14
	call	strlen
	leaq	25(%r14,%rax), %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movslq	%r12d, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %r14
	salq	$4, %r14
	testl	%ebx, %ebx
	jne	.L1426
	movq	%r13, %rdx
	movq	%r15, %rcx
	movl	$.LC26, %esi
	movq	%rsp, %rdi
	xorl	%eax, %eax
	call	sprintf
	movl	-52(%rbp), %ecx
	movq	%rsp, %rsi
	movl	%r12d, %edi
	movq	_attribute(%rip), %rax
	movl	%ecx, 64(%rax,%r14)
	call	*init_scalar(%rip)
	movq	baseblock(%rip), %rdi
	movl	%r12d, %esi
	call	list_append
	movq	%rax, baseblock(%rip)
.L1427:
	movq	all(%rip), %rdi
	movl	%r12d, %esi
	call	list_append
	movq	%rax, all(%rip)
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L1426:
	.cfi_restore_state
	movl	%ebx, %ecx
	movq	%rsp, %rdi
	movq	%r15, %r8
	movq	%r13, %rdx
	movl	$.LC54, %esi
	xorl	%eax, %eax
	negl	%ebx
	call	sprintf
	movq	_attribute(%rip), %rax
	movq	%rsp, %rsi
	movl	%r12d, %edi
	movl	%ebx, 64(%rax,%r14)
	call	*init_scalar(%rip)
	jmp	.L1427
	.cfi_endproc
.LFE132:
	.size	init_block_scalar, .-init_block_scalar
	.p2align 4
	.type	list_add_depends, @function
list_add_depends:
.LFB152:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movl	%esi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testq	%rdi, %rdi
	je	.L1430
	movl	(%rdi), %eax
	testl	%eax, %eax
	js	.L1430
	cmpl	%eax, %esi
	je	.L1429
	movq	%rdi, %rax
	jmp	.L1432
	.p2align 4,,10
	.p2align 3
.L1433:
	cmpl	%edx, %ebp
	je	.L1429
.L1432:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1433
.L1430:
	movslq	%ebp, %rax
	movq	_attribute(%rip), %r12
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movq	72(%r12,%rax), %rbx
	testq	%rbx, %rbx
	je	.L1434
	movl	(%rbx), %esi
	testl	%esi, %esi
	js	.L1434
.L1436:
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movl	88(%r12,%rax), %eax
	testl	%eax, %eax
	jne	.L1448
.L1435:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L1436
.L1434:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movl	%ebp, %esi
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	list_append
	.p2align 4,,10
	.p2align 3
.L1448:
	.cfi_restore_state
	call	list_add_depends
	movq	%rax, %rdi
	jmp	.L1435
	.p2align 4,,10
	.p2align 3
.L1429:
	popq	%rbx
	.cfi_def_cfa_offset 24
	movq	%rdi, %rax
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE152:
	.size	list_add_depends, .-list_add_depends
	.p2align 4
	.type	defaults_2, @function
defaults_2:
.LFB356:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movq	interfaces(%rip), %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	testq	%rbp, %rbp
	je	.L1461
	movl	0(%rbp), %ebx
	testl	%ebx, %ebx
	js	.L1461
	movq	_attribute(%rip), %r14
	jmp	.L1453
	.p2align 4,,10
	.p2align 3
.L1454:
	movl	4(%rbp), %ebx
	addq	$4, %rbp
	testl	%ebx, %ebx
	js	.L1461
.L1453:
	movslq	%ebx, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movq	128(%r14,%rax), %r13
	testq	%r13, %r13
	je	.L1454
	movslq	0(%r13), %rax
	testl	%eax, %eax
	js	.L1454
	.p2align 4,,10
	.p2align 3
.L1459:
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %r12
	salq	$4, %r12
	addq	%r14, %r12
	movq	72(%r12), %rdi
	testq	%rdi, %rdi
	je	.L1455
	movl	(%rdi), %eax
	testl	%eax, %eax
	js	.L1455
	cmpl	%ebx, %eax
	je	.L1456
	movq	%rdi, %rdx
	jmp	.L1457
	.p2align 4,,10
	.p2align 3
.L1458:
	cmpl	%ebx, %ecx
	je	.L1456
.L1457:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L1458
.L1455:
	movl	%ebx, %esi
	call	list_append
	movq	%rax, %rdi
.L1456:
	movslq	4(%r13), %rax
	addq	$4, %r13
	movq	%rdi, 72(%r12)
	testl	%eax, %eax
	jns	.L1459
	movl	4(%rbp), %ebx
	addq	$4, %rbp
	testl	%ebx, %ebx
	jns	.L1453
.L1461:
	popq	%rbx
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE356:
	.size	defaults_2, .-defaults_2
	.p2align 4
	.type	dump_list, @function
dump_list:
.LFB268:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movq	%rdi, %rbx
	subq	$24, %rsp
	.cfi_def_cfa_offset 48
	cmpl	$65535, cm(%rip)
	jle	.L1468
.L1470:
	xorl	%eax, %eax
.L1469:
	testq	%rbx, %rbx
	je	.L1467
	movl	(%rbx), %esi
	testl	%esi, %esi
	js	.L1467
	movq	_attribute(%rip), %rbp
	.p2align 4,,10
	.p2align 3
.L1477:
	movslq	%esi, %rdx
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rdx
	salq	$4, %rdx
	addq	%rbp, %rdx
	movl	56(%rdx), %ecx
	testl	%ecx, %ecx
	jne	.L1472
	cmpb	$0, 60(%rdx)
	jne	.L1472
	cmpl	%esi, cm(%rip)
	je	.L1472
	testq	%rax, %rax
	je	.L1473
	movl	(%rax), %edx
	testl	%edx, %edx
	js	.L1473
	cmpl	%esi, %edx
	je	.L1472
	movq	%rax, %rdx
	jmp	.L1475
	.p2align 4,,10
	.p2align 3
.L1476:
	cmpl	%esi, %ecx
	je	.L1472
.L1475:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L1476
.L1473:
	movq	%rax, %rdi
	call	list_append
	.p2align 4,,10
	.p2align 3
.L1472:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L1477
.L1467:
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1468:
	.cfi_restore_state
	movl	cm(%rip), %esi
	movl	%esi, 8(%rsp)
	testl	%esi, %esi
	js	.L1470
	xorl	%edi, %edi
	call	list_append
	jmp	.L1469
	.cfi_endproc
.LFE268:
	.size	dump_list, .-dump_list
	.p2align 4
	.type	multigrid_restriction, @function
multigrid_restriction:
.LFB203:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L1576
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	movl	(%rdi), %r13d
	testl	%r13d, %r13d
	js	.L1486
	movq	$0, (%rsp)
	xorl	%ebp, %ebp
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L1515:
	cmpl	$65535, %r13d
	jg	.L1490
	movslq	%r13d, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %r12
	salq	$4, %r12
	addq	_attribute(%rip), %r12
	movl	64(%r12), %edx
	testl	%edx, %edx
	jle	.L1490
	movq	104(%r12), %rax
	cmpq	$restriction_average, %rax
	je	.L1582
	cmpq	$no_restriction, %rax
	je	.L1490
	testq	%r14, %r14
	je	.L1500
	movl	(%r14), %eax
	testl	%eax, %eax
	js	.L1500
	cmpl	%eax, %r13d
	je	.L1501
	movq	%r14, %rax
	jmp	.L1502
	.p2align 4,,10
	.p2align 3
.L1503:
	cmpl	%edx, %r13d
	je	.L1501
.L1502:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1503
.L1500:
	movq	%r14, %rdi
	movl	%r13d, %esi
	call	list_append
	movq	%rax, %r14
.L1501:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jne	.L1583
	testq	%rbp, %rbp
	je	.L1511
	movl	0(%rbp), %eax
	testl	%eax, %eax
	js	.L1511
	cmpl	%eax, %r13d
	je	.L1490
	movq	%rbp, %rax
	jmp	.L1513
	.p2align 4,,10
	.p2align 3
.L1514:
	cmpl	%edx, %r13d
	je	.L1490
.L1513:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1514
.L1511:
	movl	%r13d, %esi
.L1579:
	movq	%rbp, %rdi
	call	list_append
	movq	%rax, %rbp
	.p2align 4,,10
	.p2align 3
.L1490:
	movl	4(%rbx), %r13d
	addq	$4, %rbx
	testl	%r13d, %r13d
	jns	.L1515
.L1590:
	movq	(%rsp), %rax
	movq	%r14, 16(%rsp)
	orq	%r14, %rax
	je	.L1486
	movq	grid(%rip), %rax
	movl	16(%rax), %edx
	movl	%edx, %r14d
	subl	$1, %r14d
	js	.L1516
	movslq	%r14d, %rcx
	leaq	0(,%rcx,8), %rbx
	movq	%rbx, 24(%rsp)
	cmpl	%edx, %r14d
	jle	.L1584
	.p2align 4,,10
	.p2align 3
.L1517:
	movq	boundaries(%rip), %rbx
	testq	%rbx, %rbx
	je	.L1534
.L1530:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1534
.L1533:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L1530
	addq	$8, %rbx
	movl	%r14d, %edx
	movq	%rbp, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L1533
.L1534:
	subl	$1, %r14d
	subq	$8, 24(%rsp)
	cmpl	$-1, %r14d
	je	.L1516
	movq	grid(%rip), %rax
	movl	16(%rax), %edx
	cmpl	%edx, %r14d
	jg	.L1517
.L1584:
	cmpb	$0, 128(%rax)
	jne	.L1585
.L1518:
	movq	96(%rax), %rdx
	movq	24(%rsp), %rbx
	leaq	(%rdx,%rbx,2), %rdx
	movl	8(%rdx), %ecx
	movq	(%rdx), %r13
	testl	%ecx, %ecx
	jle	.L1517
	leal	1(%r14), %edx
	movq	%rbp, 40(%rsp)
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rsi
	leal	-1(%rcx), %edx
	movq	%rsi, 32(%rsp)
	leaq	8(%r13,%rdx,8), %rsi
	movq	%rsi, 8(%rsp)
	.p2align 4,,10
	.p2align 3
.L1529:
	movq	24(%rax), %rdx
	movl	0(%r13), %ebp
	movslq	4(%r13), %rsi
	movq	(%rdx,%rbx), %rax
	movq	%rsi, %r12
	movq	(%rax), %rax
	movq	16(%rax), %rcx
	movslq	%ebp, %rax
	movq	(%rcx,%rax,8), %rax
	movq	(%rax,%rsi,8), %rax
	testb	$2, (%rax)
	jne	.L1523
	cmpq	$0, (%rsp)
	jne	.L1521
.L1525:
	movq	16(%rsp), %r15
	movl	(%r15), %edx
	testl	%edx, %edx
	js	.L1523
	.p2align 4,,10
	.p2align 3
.L1522:
	movslq	%edx, %rax
	addq	$4, %r15
	movl	%ebp, 52(%rsp)
	movl	%r14d, %esi
	leaq	(%rax,%rax,4), %rcx
	movl	%r12d, 56(%rsp)
	movq	52(%rsp), %rdi
	leaq	(%rax,%rcx,2), %rax
	movl	%r14d, 60(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*104(%rax)
	movl	(%r15), %edx
	testl	%edx, %edx
	jns	.L1522
.L1523:
	addq	$8, %r13
	cmpq	8(%rsp), %r13
	je	.L1586
.L1520:
	movq	grid(%rip), %rax
	jmp	.L1529
.L1516:
	movq	(%rsp), %rdi
	call	free
	movq	16(%rsp), %rdi
	call	free
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%rbp, %rdi
	popq	%rbx
	.cfi_restore 3
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_restore 6
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_restore 12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_restore 13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_restore 14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_restore 15
	.cfi_def_cfa_offset 8
	jmp	free
.L1583:
	.cfi_restore_state
	movl	48(%r12), %esi
	testq	%rbp, %rbp
	je	.L1505
	movl	0(%rbp), %eax
	testl	%eax, %eax
	js	.L1505
	movq	%rbp, %rcx
	movl	%eax, %edx
	jmp	.L1507
	.p2align 4,,10
	.p2align 3
.L1587:
	movl	4(%rcx), %edx
	addq	$4, %rcx
	testl	%edx, %edx
	js	.L1505
.L1507:
	cmpl	%edx, %esi
	jne	.L1587
	movl	52(%r12), %esi
	jmp	.L1536
	.p2align 4,,10
	.p2align 3
.L1521:
	movq	(%rsp), %rax
	movslq	(%rax), %rax
	testl	%eax, %eax
	js	.L1528
	leal	(%rbp,%rbp), %r9d
	leal	(%r12,%r12), %r8d
	sarl	%r9d
	sarl	%r8d
	leal	-2(%rsi,%rsi), %esi
	leal	-2(%rbp,%rbp), %edi
	movslq	%r9d, %r9
	movslq	%r8d, %r8
	movslq	%esi, %r10
	addl	$1, %esi
	movq	(%rcx,%r9,8), %rcx
	movslq	%edi, %rdi
	movslq	%esi, %r9
	salq	$3, %r10
	salq	$3, %r9
	movq	(%rcx,%r8,8), %r15
	movq	32(%rsp), %rcx
	movq	(%rsp), %r8
	movq	(%rdx,%rcx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rdi,8), %r11
	jmp	.L1527
	.p2align 4,,10
	.p2align 3
.L1588:
	mulsd	.LC3(%rip), %xmm0
	addq	$4, %r8
	movsd	%xmm0, (%r15,%rax,8)
	movslq	(%r8), %rax
	testl	%eax, %eax
	js	.L1528
.L1527:
	movl	%ebp, 52(%rsp)
	addq	$1, %rax
	xorl	%ecx, %ecx
	pxor	%xmm0, %xmm0
	movl	%r12d, 56(%rsp)
	leaq	0(,%rax,8), %rsi
	movl	%r14d, 60(%rsp)
.L1526:
	movq	(%r11,%rcx,8), %rdx
	movq	(%rdx,%r10), %rdi
	movq	(%rdx,%r9), %rdx
	addsd	(%rdi,%rsi), %xmm0
	addsd	(%rdx,%rsi), %xmm0
	cmpq	$1, %rcx
	je	.L1588
	movl	$1, %ecx
	jmp	.L1526
	.p2align 4,,10
	.p2align 3
.L1528:
	cmpq	$0, 16(%rsp)
	jne	.L1525
	addq	$8, %r13
	cmpq	8(%rsp), %r13
	jne	.L1520
.L1586:
	movq	40(%rsp), %rbp
	jmp	.L1517
.L1585:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L1518
.L1486:
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L1582:
	.cfi_restore_state
	movq	(%rsp), %rsi
	testq	%rsi, %rsi
	je	.L1492
	movl	(%rsi), %eax
	testl	%eax, %eax
	js	.L1492
	cmpl	%eax, %r13d
	je	.L1493
	movq	%rsi, %rax
	jmp	.L1494
	.p2align 4,,10
	.p2align 3
.L1495:
	cmpl	%edx, %r13d
	je	.L1493
.L1494:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1495
.L1492:
	movq	(%rsp), %rdi
	movl	%r13d, %esi
	call	list_append
	movq	%rax, (%rsp)
.L1493:
	testq	%rbp, %rbp
	je	.L1511
	movl	0(%rbp), %eax
	testl	%eax, %eax
	js	.L1511
	cmpl	%eax, %r13d
	je	.L1490
	movq	%rbp, %rax
	jmp	.L1498
	.p2align 4,,10
	.p2align 3
.L1499:
	cmpl	%edx, %r13d
	je	.L1490
.L1498:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1499
	jmp	.L1511
.L1505:
	movq	%rbp, %rdi
	call	list_append
	movl	52(%r12), %esi
	movq	%rax, %rbp
	testq	%rax, %rax
	je	.L1579
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L1579
.L1536:
	movq	%rbp, %rdx
	jmp	.L1510
	.p2align 4,,10
	.p2align 3
.L1589:
	movl	4(%rdx), %eax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L1579
.L1510:
	cmpl	%esi, %eax
	jne	.L1589
	movl	4(%rbx), %r13d
	addq	$4, %rbx
	testl	%r13d, %r13d
	jns	.L1515
	jmp	.L1590
.L1576:
	.cfi_def_cfa_offset 8
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	ret
	.cfi_endproc
.LFE203:
	.size	multigrid_restriction, .-multigrid_restriction
	.p2align 4
	.globl	list_prepend
	.type	list_prepend, @function
list_prepend:
.LFB37:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movl	%esi, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	testq	%rdi, %rdi
	je	.L1592
	movl	(%rdi), %esi
	testl	%esi, %esi
	js	.L1593
	movq	%rdi, %rdx
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L1594:
	movl	4(%rdx), %ecx
	movslq	%eax, %rbx
	addq	$4, %rdx
	addl	$1, %eax
	testl	%ecx, %ecx
	jns	.L1594
	leal	3(%rbx), %ebp
	movslq	%ebp, %rbp
	salq	$2, %rbp
	movq	%rbp, %rsi
	call	realloc
	leaq	4(,%rbx,4), %rdx
	movq	%rax, %r13
	movq	%rbx, %rax
	negq	%rax
	salq	$2, %rax
	leaq	-12(%rbp,%rax), %rsi
	leaq	-8(%rbp,%rax), %rdi
	subq	$4, %rbp
	addq	%r13, %rsi
	addq	%r13, %rdi
	call	memmove
.L1596:
	movl	%r12d, 0(%r13)
	movq	%r13, %rax
	movl	$-1, 0(%r13,%rbp)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1592:
	.cfi_restore_state
	movl	$8, %edi
	movl	$4, %ebp
	call	malloc
	movq	%rax, %r13
	jmp	.L1596
.L1593:
	movl	$8, %esi
	movl	$4, %ebp
	call	realloc
	movq	%rax, %r13
	jmp	.L1596
	.cfi_endproc
.LFE37:
	.size	list_prepend, .-list_prepend
	.p2align 4
	.globl	list_add
	.type	list_add, @function
list_add:
.LFB38:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L1601
	movl	(%rdi), %eax
	testl	%eax, %eax
	js	.L1601
	movq	%rdi, %rdx
	jmp	.L1603
	.p2align 4,,10
	.p2align 3
.L1608:
	movl	4(%rdx), %eax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L1601
.L1603:
	cmpl	%eax, %esi
	jne	.L1608
	movq	%rdi, %rax
	ret
	.p2align 4,,10
	.p2align 3
.L1601:
	jmp	list_append
	.cfi_endproc
.LFE38:
	.size	list_add, .-list_add
	.p2align 4
	.globl	list_lookup
	.type	list_lookup, @function
list_lookup:
.LFB39:
	.cfi_startproc
	xorl	%r8d, %r8d
	testq	%rdi, %rdi
	je	.L1609
	movl	(%rdi), %eax
	testl	%eax, %eax
	jns	.L1611
	jmp	.L1609
	.p2align 4,,10
	.p2align 3
.L1618:
	movl	4(%rdi), %eax
	addq	$4, %rdi
	testl	%eax, %eax
	js	.L1617
.L1611:
	cmpl	%eax, %esi
	jne	.L1618
	movl	$1, %r8d
.L1609:
	movl	%r8d, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L1617:
	xorl	%r8d, %r8d
	movl	%r8d, %eax
	ret
	.cfi_endproc
.LFE39:
	.size	list_lookup, .-list_lookup
	.p2align 4
	.globl	list_copy
	.type	list_copy, @function
list_copy:
.LFB40:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L1622
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	(%rdi), %esi
	movq	%rdi, %rbx
	xorl	%edi, %edi
	testl	%esi, %esi
	js	.L1619
	.p2align 4,,10
	.p2align 3
.L1621:
	call	list_append
	movl	4(%rbx), %esi
	addq	$4, %rbx
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L1621
.L1619:
	movq	%rdi, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1622:
	.cfi_restore 3
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE40:
	.size	list_copy, .-list_copy
	.p2align 4
	.globl	list_concat
	.type	list_concat, @function
list_concat:
.LFB41:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	testq	%rdi, %rdi
	je	.L1634
	movl	(%rdi), %esi
	movq	%rdi, %rbx
	xorl	%edi, %edi
	testl	%esi, %esi
	js	.L1630
	.p2align 4,,10
	.p2align 3
.L1631:
	call	list_append
	movl	4(%rbx), %esi
	addq	$4, %rbx
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L1631
.L1630:
	testq	%rbp, %rbp
	jne	.L1642
	jmp	.L1629
	.p2align 4,,10
	.p2align 3
.L1633:
	call	list_append
	addq	$4, %rbp
	movq	%rax, %rdi
.L1642:
	movl	0(%rbp), %esi
	testl	%esi, %esi
	jns	.L1633
.L1629:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movq	%rdi, %rax
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1634:
	.cfi_restore_state
	xorl	%edi, %edi
	jmp	.L1630
	.cfi_endproc
.LFE41:
	.size	list_concat, .-list_concat
	.section	.rodata.str1.1
.LC55:
	.string	"{"
.LC56:
	.string	","
.LC57:
	.string	"}\n"
.LC58:
	.string	"{}\n"
	.text
	.p2align 4
	.globl	list_print
	.type	list_print, @function
list_print:
.LFB42:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movq	%rsi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rdi, %rbx
	movl	$.LC58, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	testq	%rbx, %rbx
	je	.L1644
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L1644
	xorl	%r12d, %r12d
	movl	$.LC56, %ebp
	.p2align 4,,10
	.p2align 3
.L1646:
	leaq	(%rax,%rax,4), %rdx
	movl	$.LC26, %esi
	movq	%r13, %rdi
	leaq	(%rax,%rdx,2), %rax
	movl	$.LC55, %edx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	testq	%r12, %r12
	cmovne	%rbp, %rdx
	movq	32(%rax), %rcx
	addq	$1, %r12
	xorl	%eax, %eax
	call	fprintf
	movslq	(%rbx,%r12,4), %rax
	testl	%eax, %eax
	jns	.L1646
	movl	$.LC57, %edi
.L1644:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	movq	%r13, %rsi
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	jmp	fputs
	.cfi_endproc
.LFE42:
	.size	list_print, .-list_print
	.p2align 4
	.globl	vectors_len
	.type	vectors_len, @function
vectors_len:
.LFB43:
	.cfi_startproc
	xorl	%eax, %eax
	testq	%rdi, %rdi
	je	.L1656
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	.L1657
	.p2align 4,,10
	.p2align 3
.L1655:
	movl	8(%rdi), %edx
	addq	$8, %rdi
	addl	$1, %eax
	testl	%edx, %edx
	jns	.L1655
	ret
	.p2align 4,,10
	.p2align 3
.L1656:
	ret
	.p2align 4,,10
	.p2align 3
.L1657:
	ret
	.cfi_endproc
.LFE43:
	.size	vectors_len, .-vectors_len
	.p2align 4
	.globl	vectors_append
	.type	vectors_append, @function
vectors_append:
.LFB44:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rsi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	testq	%rdi, %rdi
	je	.L1663
	movl	(%rdi), %r8d
	testl	%r8d, %r8d
	js	.L1663
	movq	%rdi, %rdx
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L1661:
	movl	8(%rdx), %esi
	movl	%eax, %ecx
	addq	$8, %rdx
	addl	$1, %eax
	testl	%esi, %esi
	jns	.L1661
	leal	3(%rcx), %esi
	movslq	%esi, %rsi
	salq	$3, %rsi
	leaq	-16(%rsi), %rbp
	leaq	-8(%rsi), %rbx
.L1660:
	call	realloc
	movl	$4294967295, %ecx
	movq	%r12, (%rax,%rbp)
	movq	%rcx, (%rax,%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L1663:
	.cfi_restore_state
	movl	$8, %ebx
	xorl	%ebp, %ebp
	movl	$16, %esi
	jmp	.L1660
	.cfi_endproc
.LFE44:
	.size	vectors_append, .-vectors_append
	.p2align 4
	.type	tree_boundary_level, @function
tree_boundary_level:
.LFB220:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$136, %rsp
	.cfi_def_cfa_offset 192
	movq	grid(%rip), %rax
	movq	%rdi, 8(%rsp)
	movl	%esi, 76(%rsp)
	testl	%esi, %esi
	jns	.L1667
	movl	16(%rax), %ecx
	movl	%ecx, 76(%rsp)
.L1667:
	cmpb	$0, 128(%rax)
	jne	.L1895
.L1668:
	movl	20(%rax), %ecx
	movl	$1, %edx
	addl	%ecx, %ecx
	salq	%cl, %rdx
	cmpq	%rdx, 8(%rax)
	je	.L1896
	movq	8(%rsp), %r12
	testq	%r12, %r12
	je	.L1666
	movl	(%r12), %ebp
	testl	%ebp, %ebp
	js	.L1666
	movq	$0, 64(%rsp)
	xorl	%r14d, %r14d
	xorl	%r15d, %r15d
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L1704:
	cmpl	$65535, %ebp
	jg	.L1675
	movslq	%ebp, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rbx
	salq	$4, %rbx
	addq	_attribute(%rip), %rbx
	movq	104(%rbx), %rax
	cmpq	$restriction_average, %rax
	je	.L1897
	cmpq	$no_restriction, %rax
	je	.L1675
	testq	%r15, %r15
	je	.L1685
	movl	(%r15), %eax
	testl	%eax, %eax
	js	.L1685
	cmpl	%ebp, %eax
	je	.L1686
	movq	%r15, %rax
	jmp	.L1687
	.p2align 4,,10
	.p2align 3
.L1688:
	cmpl	%ebp, %edx
	je	.L1686
.L1687:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1688
.L1685:
	movq	%r15, %rdi
	movl	%ebp, %esi
	call	list_append
	movq	%rax, %r15
.L1686:
	movl	56(%rbx), %eax
	testl	%eax, %eax
	je	.L1689
	movl	48(%rbx), %esi
	testq	%r14, %r14
	je	.L1690
	movl	(%r14), %eax
	testl	%eax, %eax
	js	.L1690
	movq	%r14, %rcx
	movl	%eax, %edx
	jmp	.L1692
	.p2align 4,,10
	.p2align 3
.L1898:
	movl	4(%rcx), %edx
	addq	$4, %rcx
	testl	%edx, %edx
	js	.L1690
.L1692:
	cmpl	%edx, %esi
	jne	.L1898
	movl	52(%rbx), %esi
	jmp	.L1785
.L1896:
	movq	boundaries(%rip), %rbx
	testq	%rbx, %rbx
	je	.L1666
	movq	8(%rsp), %rbp
	movl	76(%rsp), %r12d
.L1670:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1666
.L1673:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L1670
	addq	$8, %rbx
	movl	%r12d, %edx
	movq	%rbp, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L1673
.L1666:
	addq	$136, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L1689:
	.cfi_restore_state
	testq	%r14, %r14
	je	.L1696
	movl	(%r14), %eax
	testl	%eax, %eax
	js	.L1696
	cmpl	%ebp, %eax
	je	.L1697
	movq	%r14, %rax
	jmp	.L1698
	.p2align 4,,10
	.p2align 3
.L1699:
	cmpl	%ebp, %edx
	je	.L1697
.L1698:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1699
.L1696:
	movq	%r14, %rdi
	movl	%ebp, %esi
	call	list_append
	movq	%rax, %r14
.L1697:
	cmpq	$restriction_vertex, 104(%rbx)
	je	.L1899
	.p2align 4,,10
	.p2align 3
.L1675:
	movl	4(%r12), %ebp
	addq	$4, %r12
	testl	%ebp, %ebp
	jns	.L1704
.L1909:
	cmpq	$0, 64(%rsp)
	movq	%r13, (%rsp)
	movq	%r15, 40(%rsp)
	je	.L1705
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L1900
.L1706:
	movl	72(%rax), %edx
	testl	%edx, %edx
	jle	.L1705
	movq	64(%rax), %rcx
	movq	24(%rax), %rsi
	leal	-1(%rdx), %eax
	movq	%r14, 80(%rsp)
	salq	$4, %rax
	movsd	.LC2(%rip), %xmm1
	leaq	16(%rcx), %r15
	movq	%rsi, 16(%rsp)
	addq	%r15, %rax
	movq	%rax, 48(%rsp)
	jmp	.L1713
	.p2align 4,,10
	.p2align 3
.L1721:
	addl	$2, %eax
	movl	%eax, %edx
	shrl	$31, %edx
	addl	%edx, %eax
	andl	$1, %eax
	subl	%edx, %eax
	cmpl	$1, %eax
	je	.L1901
.L1716:
	movq	%r15, %rcx
	cmpq	%r15, 48(%rsp)
	je	.L1882
.L1902:
	addq	$16, %r15
.L1713:
	movl	(%rcx), %eax
	movl	4(%rcx), %edx
	movslq	8(%rcx), %rcx
	leaq	0(,%rcx,8), %rsi
	movq	%rsi, 24(%rsp)
	movq	16(%rsp), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movslq	%edx, %rsi
	leaq	0(,%rsi,8), %r10
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	movslq	%eax, %rcx
	leaq	0(,%rcx,8), %r12
	movq	(%rdi,%rcx,8), %r9
	movq	(%r9,%rsi,8), %rcx
	movzwl	(%rcx), %r14d
	andw	$2, %r14w
	jne	.L1707
	cmpw	$0, 2(%rcx)
	je	.L1707
	movl	4(%rcx), %r11d
	testl	%r11d, %r11d
	jns	.L1708
	.p2align 4,,10
	.p2align 3
.L1707:
	movq	-8(%rdi,%r12), %rbx
	movq	(%rbx,%rsi,8), %r11
	movzwl	(%r11), %esi
	movl	%esi, %r8d
	andw	$2, %r8w
	movw	%r8w, 32(%rsp)
	jne	.L1709
	cmpw	$0, 2(%r11)
	je	.L1709
	movl	4(%r11), %r8d
	testl	%r8d, %r8d
	jns	.L1708
	.p2align 4,,10
	.p2align 3
.L1709:
	movq	-8(%r9,%r10), %rbp
	movzwl	0(%rbp), %r8d
	movl	%r8d, %r13d
	andw	$2, %r13w
	movw	%r13w, 56(%rsp)
	jne	.L1710
	cmpw	$0, 2(%rbp)
	je	.L1710
	movl	4(%rbp), %r13d
	testl	%r13d, %r13d
	jns	.L1708
	.p2align 4,,10
	.p2align 3
.L1710:
	movq	-8(%rbx,%r10), %rbx
	testb	$2, (%rbx)
	jne	.L1711
	cmpw	$0, 2(%rbx)
	je	.L1711
	movl	4(%rbx), %ebx
	testl	%ebx, %ebx
	jns	.L1708
	.p2align 4,,10
	.p2align 3
.L1711:
	addl	$2, %edx
	movl	%edx, %ebx
	shrl	$31, %ebx
	addl	%ebx, %edx
	andl	$1, %edx
	subl	%ebx, %edx
	cmpl	$1, %edx
	jne	.L1721
	testw	%r14w, %r14w
	jne	.L1719
	cmpw	$0, 2(%rcx)
	jne	.L1719
	movl	4(%rcx), %r13d
	testl	%r13d, %r13d
	jns	.L1720
	.p2align 4,,10
	.p2align 3
.L1719:
	cmpw	$0, 32(%rsp)
	jne	.L1721
	cmpw	$0, 2(%r11)
	jne	.L1721
	movl	4(%r11), %ebx
	testl	%ebx, %ebx
	js	.L1721
.L1720:
	movq	64(%rsp), %rbx
	movslq	(%rbx), %rdx
	testl	%edx, %edx
	js	.L1721
	leaq	8(%r9,%r10), %r13
	andl	$8, %r8d
	movq	%rbx, %r9
	.p2align 4,,10
	.p2align 3
.L1723:
	addq	$1, %rdx
	movapd	%xmm1, %xmm0
	testw	%r8w, %r8w
	je	.L1722
	movq	0(%r13), %rbx
	testb	$8, (%rbx)
	je	.L1722
	movsd	0(%rbp,%rdx,8), %xmm0
	addsd	(%rbx,%rdx,8), %xmm0
	mulsd	.LC5(%rip), %xmm0
.L1722:
	addq	$4, %r9
	movsd	%xmm0, (%rcx,%rdx,8)
	movslq	(%r9), %rdx
	testl	%edx, %edx
	jns	.L1723
	jmp	.L1721
	.p2align 4,,10
	.p2align 3
.L1708:
	movq	64(%rsp), %rsi
	movslq	(%rsi), %rsi
	testl	%esi, %esi
	js	.L1716
	movq	16(%rsp), %rdi
	movq	24(%rsp), %rbx
	movq	8(%rdi,%rbx), %rdi
	movq	(%rdi), %r8
	leal	-2(%rax,%rax), %edi
	leal	-2(%rdx,%rdx), %eax
	movslq	%edi, %rdi
	cltq
	movq	16(%r8), %r8
	movq	(%r8,%rdi,8), %rdx
	movq	(%rdx,%rax,8), %rdi
	movq	64(%rsp), %rax
	movzwl	(%rdi), %edx
	andl	$8, %edx
	.p2align 4,,10
	.p2align 3
.L1715:
	addq	$1, %rsi
	movapd	%xmm1, %xmm0
	testw	%dx, %dx
	je	.L1714
	movsd	(%rdi,%rsi,8), %xmm0
.L1714:
	addq	$4, %rax
	movsd	%xmm0, (%rcx,%rsi,8)
	movslq	(%rax), %rsi
	testl	%esi, %esi
	jns	.L1715
	movq	%r15, %rcx
	cmpq	%r15, 48(%rsp)
	jne	.L1902
.L1882:
	movq	80(%rsp), %r14
.L1705:
	movq	64(%rsp), %rdi
	call	free
	movq	(%rsp), %rax
	orq	40(%rsp), %rax
	je	.L1903
	movq	boundaries(%rip), %rbx
	movl	76(%rsp), %ebp
	testq	%rbx, %rbx
	je	.L1733
.L1728:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1733
.L1732:
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L1728
	addq	$8, %rbx
	movl	%ebp, %edx
	movq	%r14, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L1732
.L1733:
	movl	76(%rsp), %eax
	leal	-1(%rax), %ebp
	movslq	%ebp, %rax
	salq	$3, %rax
	movq	%rax, 24(%rsp)
	testl	%ebp, %ebp
	js	.L1730
	.p2align 4,,10
	.p2align 3
.L1749:
	movq	grid(%rip), %rax
	cmpl	%ebp, 16(%rax)
	jge	.L1904
.L1735:
	movq	boundaries(%rip), %rbx
	testq	%rbx, %rbx
	je	.L1752
.L1748:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1752
.L1751:
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L1748
	addq	$8, %rbx
	movl	%ebp, %edx
	movq	%r14, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L1751
.L1752:
	subl	$1, %ebp
	subq	$8, 24(%rsp)
	cmpl	$-1, %ebp
	jne	.L1749
.L1730:
	movq	(%rsp), %rdi
	call	free
	movq	40(%rsp), %rdi
	call	free
	movq	%r14, %rdi
	call	free
	movq	8(%rsp), %rax
	movl	(%rax), %esi
.L1734:
	testl	%esi, %esi
	js	.L1666
	movq	8(%rsp), %rbx
	xorl	%ebp, %ebp
	xorl	%r12d, %r12d
	.p2align 4,,10
	.p2align 3
.L1763:
	cmpl	$65535, %esi
	jg	.L1753
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$no_restriction, 112(%rax)
	je	.L1753
	movl	56(%rax), %edx
	testl	%edx, %edx
	je	.L1754
	movq	48(%rax), %r8
	movl	48(%rax), %esi
	movl	52(%rax), %edi
	testq	%rbp, %rbp
	je	.L1755
	movl	0(%rbp), %edx
	movl	4(%rbp), %ecx
	testl	%edx, %edx
	js	.L1755
	movq	%rbp, %rax
	jmp	.L1758
	.p2align 4,,10
	.p2align 3
.L1756:
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	js	.L1755
.L1758:
	cmpl	%edx, %esi
	jne	.L1756
	cmpl	%ecx, %edi
	jne	.L1756
	.p2align 4,,10
	.p2align 3
.L1753:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L1763
	movq	%r12, %rax
	movq	%r12, 24(%rsp)
	orq	%rbp, %rax
	movq	%rbp, 32(%rsp)
	je	.L1666
	movq	boundaries(%rip), %rbx
	movq	8(%rsp), %rbp
	testq	%rbx, %rbx
	je	.L1765
.L1764:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L1765
.L1768:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L1764
	addq	$8, %rbx
	xorl	%edx, %edx
	movq	%rbp, %rsi
	call	*%rax
	movq	-8(%rbx), %rdi
	testq	%rdi, %rdi
	jne	.L1768
.L1765:
	movslq	76(%rsp), %rsi
	movq	88(%rsp), %rbx
	movq	$0, 16(%rsp)
	movq	%rsi, 56(%rsp)
	testl	%esi, %esi
	jle	.L1782
	.p2align 4,,10
	.p2align 3
.L1781:
	movq	16(%rsp), %rax
	movl	%eax, 48(%rsp)
	movq	%rax, %rcx
	movl	%eax, %r14d
	movq	grid(%rip), %rax
	cmpl	%ecx, 16(%rax)
	jge	.L1769
.L1773:
	movl	48(%rsp), %ebp
	movq	boundaries(%rip), %r12
	addl	$1, %ebp
	testq	%r12, %r12
	je	.L1771
.L1770:
	movq	(%r12), %rdi
	addq	$8, %r12
	testq	%rdi, %rdi
	je	.L1771
.L1784:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L1770
	addq	$8, %r12
	movq	8(%rsp), %rsi
	movl	%ebp, %edx
	call	*%rax
	movq	-8(%r12), %rdi
	testq	%rdi, %rdi
	jne	.L1784
.L1771:
	addq	$1, 16(%rsp)
	movq	16(%rsp), %rax
	cmpq	%rax, 56(%rsp)
	jne	.L1781
.L1782:
	movq	24(%rsp), %rdi
	call	free
	movq	32(%rsp), %rdi
	addq	$136, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L1901:
	.cfi_restore_state
	testw	%r14w, %r14w
	jne	.L1724
	cmpw	$0, 2(%rcx)
	jne	.L1724
	movl	4(%rcx), %r9d
	testl	%r9d, %r9d
	jns	.L1725
	.p2align 4,,10
	.p2align 3
.L1724:
	cmpw	$0, 56(%rsp)
	jne	.L1716
	cmpw	$0, 2(%rbp)
	jne	.L1716
	movl	4(%rbp), %r8d
	testl	%r8d, %r8d
	js	.L1716
.L1725:
	movq	64(%rsp), %rdx
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L1716
	movsd	.LC5(%rip), %xmm2
	leaq	8(%rdi,%r12), %rdi
	andl	$8, %esi
	.p2align 4,,10
	.p2align 3
.L1727:
	addq	$1, %rax
	movapd	%xmm1, %xmm0
	testw	%si, %si
	je	.L1726
	movq	(%rdi), %r8
	movq	.LC2(%rip), %rbx
	movq	(%r8,%r10), %r8
	movq	%rbx, %xmm0
	testb	$8, (%r8)
	je	.L1726
	movsd	(%r11,%rax,8), %xmm0
	addsd	(%r8,%rax,8), %xmm0
	mulsd	%xmm2, %xmm0
.L1726:
	addq	$4, %rdx
	movsd	%xmm0, (%rcx,%rax,8)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L1727
	jmp	.L1716
	.p2align 4,,10
	.p2align 3
.L1769:
	cmpb	$0, 128(%rax)
	jne	.L1905
.L1772:
	movq	16(%rsp), %rdx
	salq	$4, %rdx
	addq	104(%rax), %rdx
	movl	8(%rdx), %eax
	movq	(%rdx), %r13
	testl	%eax, %eax
	jle	.L1773
	subl	$1, %eax
	movq	%r13, (%rsp)
	leaq	8(%r13,%rax,8), %rax
	movq	%rax, 40(%rsp)
	.p2align 4,,10
	.p2align 3
.L1780:
	movq	(%rsp), %rax
	cmpq	$0, 24(%rsp)
	movl	(%rax), %ebp
	movl	4(%rax), %r12d
	jne	.L1774
.L1778:
	movq	32(%rsp), %r15
	movl	(%r15), %edx
	movl	4(%r15), %r13d
	testl	%edx, %edx
	js	.L1776
	.p2align 4,,10
	.p2align 3
.L1775:
	movslq	%edx, %rax
	movl	%edx, %edx
	movl	%ebp, 116(%rsp)
	movl	%r14d, %esi
	leaq	(%rax,%rax,4), %rcx
	movl	%r12d, 120(%rsp)
	movq	116(%rsp), %rdi
	addq	$8, %r15
	leaq	(%rax,%rcx,2), %rax
	movl	%r14d, 124(%rsp)
	movabsq	$-4294967296, %rcx
	andq	%rcx, %rbx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	orq	%rdx, %rbx
	movl	%ebx, %edx
	movl	%ebx, %ebx
	call	*96(%rax)
	movslq	%r13d, %rax
	salq	$32, %r13
	movq	116(%rsp), %rdi
	leaq	(%rax,%rax,4), %rdx
	orq	%r13, %rbx
	shrq	$32, %r13
	movl	124(%rsp), %esi
	leaq	(%rax,%rdx,2), %rax
	movq	%r13, %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*96(%rax)
	movl	(%r15), %edx
	movl	4(%r15), %r13d
	testl	%edx, %edx
	jns	.L1775
.L1776:
	addq	$8, (%rsp)
	movq	(%rsp), %rax
	cmpq	40(%rsp), %rax
	jne	.L1780
	jmp	.L1773
	.p2align 4,,10
	.p2align 3
.L1774:
	movq	24(%rsp), %r15
	movl	(%r15), %edx
	testl	%edx, %edx
	js	.L1779
	.p2align 4,,10
	.p2align 3
.L1777:
	movslq	%edx, %rax
	addq	$4, %r15
	movl	%ebp, 116(%rsp)
	movl	%r14d, %esi
	leaq	(%rax,%rax,4), %rcx
	movl	%r12d, 120(%rsp)
	movq	116(%rsp), %rdi
	leaq	(%rax,%rcx,2), %rax
	movl	%r14d, 124(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*96(%rax)
	movl	(%r15), %edx
	testl	%edx, %edx
	jns	.L1777
.L1779:
	cmpq	$0, 32(%rsp)
	jne	.L1778
	addq	$8, (%rsp)
	movq	(%rsp), %rax
	cmpq	40(%rsp), %rax
	jne	.L1780
	jmp	.L1773
	.p2align 4,,10
	.p2align 3
.L1904:
	cmpb	$0, 128(%rax)
	jne	.L1906
.L1736:
	movq	96(%rax), %rdx
	movq	24(%rsp), %rbx
	leaq	(%rdx,%rbx,2), %rdx
	movl	8(%rdx), %ecx
	movq	(%rdx), %r13
	testl	%ecx, %ecx
	jle	.L1735
	leal	1(%rbp), %edx
	movq	%r14, 48(%rsp)
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rsi
	leal	-1(%rcx), %edx
	leaq	8(%r13,%rdx,8), %rcx
	movq	%rsi, 32(%rsp)
	movq	%rcx, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L1747:
	movq	24(%rax), %rdx
	movl	0(%r13), %r12d
	movslq	4(%r13), %rsi
	movq	(%rdx,%rbx), %rax
	movq	%rsi, %r14
	movq	(%rax), %rax
	movq	16(%rax), %rcx
	movslq	%r12d, %rax
	movq	(%rcx,%rax,8), %rax
	movq	(%rax,%rsi,8), %rax
	testb	$2, (%rax)
	jne	.L1741
	cmpq	$0, (%rsp)
	jne	.L1739
.L1743:
	movq	40(%rsp), %r15
	movl	(%r15), %edx
	testl	%edx, %edx
	js	.L1741
	.p2align 4,,10
	.p2align 3
.L1740:
	movslq	%edx, %rax
	addq	$4, %r15
	movl	%r12d, 104(%rsp)
	movl	%ebp, %esi
	leaq	(%rax,%rax,4), %rcx
	movl	%r14d, 108(%rsp)
	movq	104(%rsp), %rdi
	leaq	(%rax,%rcx,2), %rax
	movl	%ebp, 112(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*104(%rax)
	movl	(%r15), %edx
	testl	%edx, %edx
	jns	.L1740
.L1741:
	addq	$8, %r13
	cmpq	%r13, 16(%rsp)
	je	.L1907
.L1738:
	movq	grid(%rip), %rax
	jmp	.L1747
	.p2align 4,,10
	.p2align 3
.L1739:
	movq	(%rsp), %rax
	movslq	(%rax), %rax
	testl	%eax, %eax
	js	.L1746
	leal	(%r12,%r12), %r9d
	leal	(%r14,%r14), %r8d
	sarl	%r9d
	sarl	%r8d
	leal	-2(%rsi,%rsi), %esi
	leal	-2(%r12,%r12), %edi
	movslq	%r9d, %r9
	movslq	%r8d, %r8
	movslq	%esi, %r10
	addl	$1, %esi
	movq	(%rcx,%r9,8), %rcx
	movslq	%edi, %rdi
	movslq	%esi, %r9
	salq	$3, %r10
	salq	$3, %r9
	movq	(%rcx,%r8,8), %r15
	movq	32(%rsp), %rcx
	movq	(%rsp), %r8
	movq	(%rdx,%rcx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rdi,8), %r11
	jmp	.L1745
	.p2align 4,,10
	.p2align 3
.L1908:
	mulsd	.LC3(%rip), %xmm0
	addq	$4, %r8
	movsd	%xmm0, (%r15,%rax,8)
	movslq	(%r8), %rax
	testl	%eax, %eax
	js	.L1746
.L1745:
	movl	%r12d, 104(%rsp)
	addq	$1, %rax
	xorl	%ecx, %ecx
	pxor	%xmm0, %xmm0
	movl	%r14d, 108(%rsp)
	leaq	0(,%rax,8), %rsi
	movl	%ebp, 112(%rsp)
.L1744:
	movq	(%r11,%rcx,8), %rdx
	movq	(%rdx,%r10), %rdi
	movq	(%rdx,%r9), %rdx
	addsd	(%rdi,%rsi), %xmm0
	addsd	(%rdx,%rsi), %xmm0
	cmpq	$1, %rcx
	je	.L1908
	movl	$1, %ecx
	jmp	.L1744
	.p2align 4,,10
	.p2align 3
.L1746:
	cmpq	$0, 40(%rsp)
	jne	.L1743
	addq	$8, %r13
	cmpq	%r13, 16(%rsp)
	jne	.L1738
.L1907:
	movq	48(%rsp), %r14
	jmp	.L1735
.L1754:
	testq	%r12, %r12
	je	.L1759
	movl	(%r12), %eax
	testl	%eax, %eax
	js	.L1759
	cmpl	%esi, %eax
	je	.L1753
	movq	%r12, %rax
	jmp	.L1761
	.p2align 4,,10
	.p2align 3
.L1762:
	cmpl	%esi, %edx
	je	.L1753
.L1761:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1762
.L1759:
	movq	%r12, %rdi
	call	list_append
	movq	%rax, %r12
	jmp	.L1753
.L1755:
	movq	%rbp, %rdi
	movq	%r8, %rsi
	call	vectors_append
	movq	%rax, %rbp
	jmp	.L1753
.L1895:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L1668
.L1897:
	testq	%r13, %r13
	je	.L1677
	movl	0(%r13), %eax
	testl	%eax, %eax
	js	.L1677
	cmpl	%ebp, %eax
	je	.L1678
	movq	%r13, %rax
	jmp	.L1679
	.p2align 4,,10
	.p2align 3
.L1680:
	cmpl	%ebp, %edx
	je	.L1678
.L1679:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1680
.L1677:
	movq	%r13, %rdi
	movl	%ebp, %esi
	call	list_append
	movq	%rax, %r13
.L1678:
	testq	%r14, %r14
	je	.L1681
	movl	(%r14), %eax
	testl	%eax, %eax
	js	.L1681
	cmpl	%ebp, %eax
	je	.L1675
	movq	%r14, %rax
	jmp	.L1683
	.p2align 4,,10
	.p2align 3
.L1684:
	cmpl	%ebp, %edx
	je	.L1675
.L1683:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1684
.L1681:
	movl	%ebp, %esi
	movq	%r14, %rdi
	addq	$4, %r12
	call	list_append
	movl	(%r12), %ebp
	movq	%rax, %r14
	testl	%ebp, %ebp
	jns	.L1704
	jmp	.L1909
	.p2align 4,,10
	.p2align 3
.L1690:
	movq	%r14, %rdi
	call	list_append
	movl	52(%rbx), %esi
	movq	%rax, %r14
	testq	%rax, %rax
	je	.L1693
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L1693
.L1785:
	movq	%r14, %rdx
	jmp	.L1695
	.p2align 4,,10
	.p2align 3
.L1910:
	movl	4(%rdx), %eax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L1693
.L1695:
	cmpl	%eax, %esi
	jne	.L1910
	jmp	.L1675
.L1693:
	movq	%r14, %rdi
	addq	$4, %r12
	call	list_append
	movl	(%r12), %ebp
	movq	%rax, %r14
	testl	%ebp, %ebp
	jns	.L1704
	jmp	.L1909
.L1905:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L1772
.L1906:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L1736
.L1899:
	movq	64(%rsp), %rcx
	testq	%rcx, %rcx
	je	.L1700
	movl	(%rcx), %eax
	testl	%eax, %eax
	js	.L1700
	cmpl	%ebp, %eax
	je	.L1675
	movq	%rcx, %rax
	jmp	.L1702
.L1703:
	cmpl	%ebp, %edx
	je	.L1675
.L1702:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1703
.L1700:
	movq	64(%rsp), %rdi
	movl	%ebp, %esi
	call	list_append
	movq	%rax, 64(%rsp)
	jmp	.L1675
.L1900:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L1706
.L1903:
	movq	8(%rsp), %rax
	movl	(%rax), %esi
	jmp	.L1734
	.cfi_endproc
.LFE220:
	.size	tree_boundary_level, .-tree_boundary_level
	.p2align 4
	.type	masked_boundary_restriction, @function
masked_boundary_restriction:
.LFB110:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movslq	%edx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	testq	%rsi, %rsi
	je	.L1960
	movq	%rsi, %rbx
	movl	(%rsi), %esi
	testl	%esi, %esi
	js	.L1960
	xorl	%r12d, %r12d
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L1923:
	cmpl	$65535, %esi
	jg	.L1913
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$no_restriction, 112(%rax)
	je	.L1913
	cmpl	%esi, 48(%rax)
	jne	.L1914
	movl	56(%rax), %edx
	testl	%edx, %edx
	jne	.L1994
.L1914:
	testq	%r13, %r13
	je	.L1919
	movl	0(%r13), %eax
	testl	%eax, %eax
	js	.L1919
	cmpl	%esi, %eax
	je	.L1913
	movq	%r13, %rax
	jmp	.L1921
	.p2align 4,,10
	.p2align 3
.L1922:
	cmpl	%esi, %edx
	je	.L1913
.L1921:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L1922
.L1919:
	movq	%r13, %rdi
	call	list_append
	movq	%rax, %r13
	.p2align 4,,10
	.p2align 3
.L1913:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L1923
	movq	%r13, 72(%rsp)
	movq	%r12, 80(%rsp)
.L1912:
	movq	grid(%rip), %rax
	movq	%rax, 88(%rsp)
	cmpl	%ebp, 16(%rax)
	jl	.L1926
	movq	88(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L1995
.L1925:
	movq	88(%rsp), %rdi
	movq	%rbp, %rax
	salq	$4, %rax
	addq	120(%rdi), %rax
	movq	(%rax), %rdx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L1926
	subl	$1, %eax
	leaq	0(,%rbp,8), %rdi
	movq	%rdx, 40(%rsp)
	movsd	.LC2(%rip), %xmm4
	leaq	8(%rdx,%rax,8), %rax
	movq	%rdi, 104(%rsp)
	movsd	.LC10(%rip), %xmm5
	movq	%rax, 96(%rsp)
	jmp	.L1939
	.p2align 4,,10
	.p2align 3
.L1930:
	cmpq	$0, 80(%rsp)
	jne	.L1996
.L1929:
	addq	$8, 40(%rsp)
	movq	40(%rsp), %rax
	cmpq	96(%rsp), %rax
	je	.L1926
.L1939:
	movq	40(%rsp), %rax
	movslq	(%rax), %rbx
	movslq	4(%rax), %r11
	leal	2(%rbx), %eax
	movl	%eax, %r12d
	shrl	$31, %r12d
	addl	%eax, %r12d
	leal	2(%r11), %eax
	movl	%eax, %ebp
	sarl	%r12d
	shrl	$31, %ebp
	addl	%eax, %ebp
	sarl	%ebp
	cmpq	$0, 72(%rsp)
	je	.L1930
	movq	72(%rsp), %r15
	movslq	(%r15), %rax
	testl	%eax, %eax
	js	.L1930
	movq	88(%rsp), %rdi
	leal	-2(%rbp,%rbp), %edx
	pxor	%xmm0, %xmm0
	movsd	.LC10(%rip), %xmm7
	leal	1(%rdx), %r8d
	movslq	%edx, %r9
	movsd	.LC2(%rip), %xmm6
	movq	24(%rdi), %rcx
	movq	104(%rsp), %rdi
	movslq	%r8d, %r8
	salq	$3, %r9
	salq	$3, %r8
	movq	(%rcx,%rdi), %rcx
	movslq	%ebx, %rdi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	movslq	%r11d, %rcx
	movq	(%rsi,%rdi,8), %rdi
	movq	(%rdi,%rcx,8), %r14
	leal	-2(%r12,%r12), %ecx
	movq	%r15, %rdi
	movslq	%ecx, %rcx
	leaq	(%rsi,%rcx,8), %r10
	jmp	.L1938
	.p2align 4,,10
	.p2align 3
.L1997:
	ucomisd	%xmm0, %xmm1
	jp	.L1968
	movsd	.LC2(%rip), %xmm3
	je	.L1936
.L1968:
	movapd	%xmm2, %xmm3
	divsd	%xmm1, %xmm3
.L1936:
	movslq	4(%rdi), %rax
	addq	$4, %rdi
	movsd	%xmm3, 0(%r13)
	testl	%eax, %eax
	js	.L1930
.L1938:
	leaq	8(,%rax,8), %rsi
	movapd	%xmm0, %xmm1
	movapd	%xmm0, %xmm2
	xorl	%edx, %edx
	leaq	(%r14,%rsi), %r13
.L1935:
	movq	(%r10,%rdx,8), %rax
	movq	(%rax,%r9), %rcx
	movl	4(%rcx), %r15d
	testl	%r15d, %r15d
	js	.L1931
	movsd	(%rcx,%rsi), %xmm3
	ucomisd	%xmm4, %xmm3
	jp	.L1966
	je	.L1931
.L1966:
	addsd	%xmm3, %xmm2
	addsd	%xmm7, %xmm1
.L1931:
	movq	(%rax,%r8), %rax
	movl	4(%rax), %r15d
	testl	%r15d, %r15d
	js	.L1933
	movsd	(%rax,%rsi), %xmm3
	ucomisd	%xmm6, %xmm3
	jp	.L1967
	je	.L1933
.L1967:
	addsd	%xmm3, %xmm2
	addsd	%xmm7, %xmm1
.L1933:
	cmpq	$1, %rdx
	je	.L1997
	movl	$1, %edx
	jmp	.L1935
	.p2align 4,,10
	.p2align 3
.L1926:
	movq	72(%rsp), %rdi
	call	free
	movq	80(%rsp), %rdi
	addq	$120, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L1996:
	.cfi_restore_state
	movq	80(%rsp), %rdi
	movslq	(%rdi), %r8
	movslq	4(%rdi), %r9
	testl	%r8d, %r8d
	js	.L1929
	movq	88(%rsp), %rsi
	leal	-2(%r12,%r12), %eax
	leaq	0(,%rbx,8), %rcx
	movsd	.LC2(%rip), %xmm6
	leaq	0(,%r11,8), %r12
	leal	-2(%rbp,%rbp), %r14d
	movsd	.LC10(%rip), %xmm7
	pxor	%xmm0, %xmm0
	movq	24(%rsi), %rdx
	movq	104(%rsp), %rsi
	leal	2(%r14), %r10d
	movq	(%rdx,%rsi), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	-8(%rdx,%rcx), %rsi
	movq	8(%rdx,%rcx), %rcx
	movq	(%rdx,%rbx,8), %rbx
	movq	(%rcx,%r11,8), %rcx
	movq	(%rsi,%r11,8), %rsi
	leal	4(%r14), %r11d
	movq	%rbx, 48(%rsp)
	movq	%rcx, 56(%rsp)
	movl	4(%rcx), %ecx
	movl	4(%rsi), %esi
	movl	%ecx, 24(%rsp)
	movq	-8(%rbx,%r12), %rcx
	movq	8(%rbx,%r12), %rbx
	movl	%esi, 20(%rsp)
	movl	4(%rcx), %ecx
	movq	%rbx, 64(%rsp)
	movl	4(%rbx), %ebx
	movl	%ecx, 28(%rsp)
	movslq	%eax, %rcx
	leaq	(%rdx,%rcx,8), %r13
	movslq	%r14d, %rdx
	movl	%ebx, 32(%rsp)
	leaq	0(,%rdx,8), %rbx
	movq	%rbx, 8(%rsp)
	movq	%rdi, %rbx
	leal	2(%rax), %edi
	addl	$4, %eax
	movl	%edi, 36(%rsp)
	movl	%eax, 16(%rsp)
	jmp	.L1958
	.p2align 4,,10
	.p2align 3
.L1940:
	addl	$1, %eax
	cmpl	%eax, %r10d
	jne	.L1943
	addl	$1, %ecx
	addq	$8, %rsi
	cmpl	%ecx, 16(%rsp)
	jne	.L1944
	ucomisd	%xmm0, %xmm1
	jp	.L1970
	movsd	.LC2(%rip), %xmm2
	je	.L1945
.L1970:
	movapd	%xmm3, %xmm2
	divsd	%xmm1, %xmm2
.L1945:
	movl	20(%rsp), %eax
	testl	%eax, %eax
	jns	.L1947
	movq	48(%rsp), %rax
	movq	(%rax,%r12), %rax
	movsd	%xmm2, (%rax,%r8,8)
.L1947:
	movl	24(%rsp), %eax
	testl	%eax, %eax
	jns	.L1948
	movq	56(%rsp), %rax
	movsd	%xmm2, (%rax,%r8,8)
.L1948:
	addq	$1, %r9
	movapd	%xmm0, %xmm1
	movapd	%xmm0, %xmm3
	xorl	%edi, %edi
	leaq	0(,%r9,8), %r8
.L1953:
	movq	8(%rsp), %rcx
	movl	%r10d, %edx
.L1952:
	movl	%edx, %esi
	shrl	$31, %esi
	leal	(%rdx,%rsi), %eax
	andl	$1, %eax
	subl	%esi, %eax
	cmpl	$1, %eax
	jne	.L1998
.L1949:
	addl	$1, %edx
	addq	$8, %rcx
	cmpl	%r11d, %edx
	jne	.L1952
	cmpq	$1, %rdi
	jne	.L1964
	ucomisd	%xmm0, %xmm1
	jp	.L1972
	movsd	.LC2(%rip), %xmm2
	je	.L1954
.L1972:
	divsd	%xmm1, %xmm3
	movapd	%xmm3, %xmm2
.L1954:
	movl	28(%rsp), %edx
	testl	%edx, %edx
	jns	.L1956
	movq	48(%rsp), %rax
	movq	(%rax,%r12), %rax
	movsd	%xmm2, (%rax,%r9,8)
.L1956:
	movl	32(%rsp), %eax
	testl	%eax, %eax
	jns	.L1957
	movq	64(%rsp), %rax
	movsd	%xmm2, (%rax,%r9,8)
.L1957:
	movslq	8(%rbx), %r8
	addq	$8, %rbx
	movslq	4(%rbx), %r9
	testl	%r8d, %r8d
	js	.L1929
.L1958:
	addq	$1, %r8
	movl	36(%rsp), %ecx
	movq	%r13, %rsi
	movapd	%xmm0, %xmm1
	leaq	0(,%r8,8), %r15
	movapd	%xmm0, %xmm3
.L1944:
	movl	%ecx, %eax
	shrl	$31, %eax
	leal	(%rcx,%rax), %edx
	andl	$1, %edx
	subl	%eax, %edx
	movl	%r14d, %eax
	movl	%edx, %ebp
.L1943:
	cmpl	$1, %ebp
	je	.L1940
	movq	8(%rsi), %rdi
	movslq	%eax, %rdx
	movq	(%rdi,%rdx,8), %rdi
	movq	%rdi, (%rsp)
	movq	(%rsi), %rdi
	movq	(%rdi,%rdx,8), %rdx
	movl	4(%rdx), %edi
	testl	%edi, %edi
	js	.L1999
.L1941:
	movq	(%rsp), %rdi
	movsd	(%rdi,%r15), %xmm2
	ucomisd	%xmm6, %xmm2
	jp	.L1969
	je	.L1940
.L1969:
	addsd	%xmm2, %xmm3
	addsd	%xmm7, %xmm1
	jmp	.L1940
	.p2align 4,,10
	.p2align 3
.L1998:
	movq	0(%r13,%rdi,8), %rax
	movq	8(%rax,%rcx), %rsi
	movq	(%rax,%rcx), %rax
	movl	4(%rax), %r15d
	testl	%r15d, %r15d
	js	.L2000
.L1950:
	movsd	(%rsi,%r8), %xmm2
	ucomisd	%xmm4, %xmm2
	jp	.L1971
	je	.L1949
.L1971:
	addsd	%xmm2, %xmm3
	addsd	%xmm5, %xmm1
	jmp	.L1949
	.p2align 4,,10
	.p2align 3
.L1964:
	movl	$1, %edi
	jmp	.L1953
	.p2align 4,,10
	.p2align 3
.L2000:
	movl	4(%rsi), %ebp
	testl	%ebp, %ebp
	jns	.L1950
	jmp	.L1949
	.p2align 4,,10
	.p2align 3
.L1999:
	movq	(%rsp), %rdi
	movl	4(%rdi), %edx
	testl	%edx, %edx
	jns	.L1941
	jmp	.L1940
.L1960:
	movq	$0, 80(%rsp)
	movq	$0, 72(%rsp)
	jmp	.L1912
.L1994:
	movq	48(%rax), %r8
	movl	52(%rax), %edi
	testq	%r12, %r12
	je	.L1915
	movl	(%r12), %edx
	movl	4(%r12), %ecx
	testl	%edx, %edx
	js	.L1915
	movq	%r12, %rax
	jmp	.L1918
	.p2align 4,,10
	.p2align 3
.L1916:
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	js	.L1915
.L1918:
	cmpl	%edx, %esi
	jne	.L1916
	cmpl	%ecx, %edi
	je	.L1913
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	jns	.L1918
.L1915:
	movq	%r12, %rdi
	movq	%r8, %rsi
	call	vectors_append
	movq	%rax, %r12
	jmp	.L1913
.L1995:
	call	update_cache_f
	movq	grid(%rip), %rax
	movq	%rax, 88(%rsp)
	jmp	.L1925
	.cfi_endproc
.LFE110:
	.size	masked_boundary_restriction, .-masked_boundary_restriction
	.p2align 4
	.type	box_boundary_level, @function
box_boundary_level:
.LFB106:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$296, %rsp
	.cfi_def_cfa_offset 352
	movl	%edx, 60(%rsp)
	testq	%rsi, %rsi
	je	.L2102
	movq	%rsi, %rbx
	movl	(%rsi), %esi
	testl	%esi, %esi
	js	.L2102
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
	jmp	.L2018
.L2004:
	testl	%edx, %edx
	js	.L2228
.L2003:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	js	.L2229
.L2018:
	cmpl	$65535, %esi
	jg	.L2003
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$no_restriction, 112(%rax)
	je	.L2003
	movl	48(%rax), %edx
	cmpl	%esi, %edx
	jne	.L2004
	movl	56(%rax), %r14d
	movl	52(%rax), %edi
	movq	48(%rax), %r8
	testl	%r14d, %r14d
	je	.L2005
	testq	%r13, %r13
	je	.L2006
	movl	0(%r13), %edx
	movl	4(%r13), %ecx
	testl	%edx, %edx
	js	.L2006
	movq	%r13, %rax
	jmp	.L2009
	.p2align 4,,10
	.p2align 3
.L2007:
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	js	.L2006
.L2009:
	cmpl	%edx, %esi
	jne	.L2007
	cmpl	%edi, %ecx
	je	.L2003
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	jns	.L2009
.L2006:
	movq	%r8, %rsi
	movq	%r13, %rdi
	addq	$4, %rbx
	call	vectors_append
	movl	(%rbx), %esi
	movq	%rax, %r13
	testl	%esi, %esi
	jns	.L2018
.L2229:
	movq	%rbp, 96(%rsp)
	movq	%r12, 104(%rsp)
	movq	%r13, 80(%rsp)
.L2002:
	movq	grid(%rip), %rax
	movl	60(%rsp), %ebx
	cmpl	%ebx, 16(%rax)
	jl	.L2019
	cmpb	$0, 128(%rax)
	jne	.L2230
.L2020:
	movslq	60(%rsp), %rcx
	movq	%rcx, %rdx
	salq	$4, %rdx
	addq	112(%rax), %rdx
	movq	(%rdx), %rsi
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L2019
	leaq	0(,%rcx,8), %rbx
	subl	$1, %edx
	movq	%rsi, 72(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	8(%rsi,%rdx,8), %rbx
	movq	%rbx, 136(%rsp)
.L2098:
	movq	72(%rsp), %rbx
	movq	24(%rax), %rax
	movl	$16, %r11d
	movl	$1, %r10d
	movq	48(%rsp), %rsi
	movl	(%rbx), %r14d
	movl	4(%rbx), %r15d
	movl	60(%rsp), %ebx
	movq	(%rax,%rsi), %rax
	movl	%r14d, 264(%rsp)
	movl	%ebx, 272(%rsp)
	movslq	%r15d, %rbx
	movq	(%rax), %rsi
	movq	%rbx, 120(%rsp)
	salq	$3, %rbx
	movq	%rbx, 40(%rsp)
	movslq	%r14d, %rbx
	movl	(%rsi), %ecx
	leaq	0(,%rbx,8), %rdi
	leaq	-8(,%rbx,8), %rax
	movl	%r15d, 268(%rsp)
	movq	%rbx, 128(%rsp)
	movq	%rax, %r13
	movq	%rdi, 64(%rsp)
	movq	%rax, 88(%rsp)
	movl	$2, %eax
	movq	%r13, (%rsp)
	movq	%rdi, %r13
.L2036:
	movl	%r10d, %r8d
	movl	%r14d, %edx
	movq	(%rsp), %r9
	negl	%r8d
	subl	%r10d, %edx
	movl	%r8d, %edi
	.p2align 4,,10
	.p2align 3
.L2028:
	cmpl	%ecx, %edx
	jl	.L2021
	cmpl	4(%rsi), %edx
	jge	.L2021
	movq	16(%rsi), %rbp
	movq	0(%rbp,%r9), %rbx
	testq	%rbx, %rbx
	je	.L2021
	movq	8(%rsi), %r12
	addq	%r9, %r12
	cmpl	(%r12), %r15d
	jl	.L2021
	cmpl	4(%r12), %r15d
	jge	.L2021
	movq	40(%rsp), %r12
	movq	(%rbx,%r12), %rbx
	testq	%rbx, %rbx
	je	.L2021
	movl	4(%rbx), %r12d
	testl	%r12d, %r12d
	jns	.L2231
	.p2align 4,,10
	.p2align 3
.L2021:
	addl	%eax, %edi
	addl	%eax, %edx
	addq	%r11, %r9
	cmpl	%r10d, %edi
	jle	.L2028
	movl	%r15d, %edx
	subl	%r10d, %edx
	.p2align 4,,10
	.p2align 3
.L2035:
	cmpl	%ecx, %r14d
	jl	.L2029
	cmpl	4(%rsi), %r14d
	jge	.L2029
	movq	16(%rsi), %rdi
	movq	(%rdi,%r13), %rdi
	testq	%rdi, %rdi
	je	.L2029
	movq	8(%rsi), %r9
	addq	%r13, %r9
	cmpl	(%r9), %edx
	jl	.L2029
	cmpl	4(%r9), %edx
	jge	.L2029
	movslq	%edx, %r9
	movq	(%rdi,%r9,8), %r9
	testq	%r9, %r9
	je	.L2029
	movl	4(%r9), %ebp
	testl	%ebp, %ebp
	jns	.L2232
	.p2align 4,,10
	.p2align 3
.L2029:
	addl	%eax, %r8d
	addl	%eax, %edx
	cmpl	%r10d, %r8d
	jle	.L2035
	subq	$8, (%rsp)
	addl	$2, %eax
	addq	$16, %r11
	cmpl	$2, %r10d
	jne	.L2103
	movq	88(%rsp), %rax
	movl	%r14d, 8(%rsp)
	movl	$1, %edi
	movl	$2, %r8d
	movq	$16, 16(%rsp)
	movq	%rax, 112(%rsp)
.L2047:
	movl	8(%rsp), %edx
	movq	112(%rsp), %r14
	subl	%edi, %edx
	.p2align 4,,10
	.p2align 3
.L2037:
	movl	%r15d, %eax
	subl	%edi, %eax
	.p2align 4,,10
	.p2align 3
.L2045:
	cmpl	%ecx, %edx
	jl	.L2038
	movl	4(%rsi), %r9d
	cmpl	%r9d, %edx
	jge	.L2038
	movq	16(%rsi), %r11
	movq	(%r11,%r14), %r10
	testq	%r10, %r10
	je	.L2038
	movq	8(%rsi), %rbp
	leaq	0(%rbp,%r14), %r12
	movl	(%r12), %ebx
	cmpl	%ebx, %eax
	jl	.L2038
	movl	4(%r12), %r12d
	movl	%r12d, (%rsp)
	cmpl	%r12d, %eax
	jge	.L2038
	movslq	%eax, %r13
	leaq	0(,%r13,8), %r12
	movq	%r12, 32(%rsp)
	movq	(%r10,%r13,8), %r12
	movq	%r12, 24(%rsp)
	testq	%r12, %r12
	je	.L2038
	cmpl	%ebx, %r15d
	setge	%bl
	cmpl	(%rsp), %r15d
	setl	%r12b
	testb	%r12b, %bl
	je	.L2038
	movq	24(%rsp), %r12
	movl	4(%r12), %ebx
	testl	%ebx, %ebx
	jns	.L2233
	.p2align 4,,10
	.p2align 3
.L2038:
	addl	%r8d, %eax
	movl	%eax, %r9d
	subl	%r15d, %r9d
	cmpl	%r9d, %edi
	jge	.L2045
	addl	%r8d, %edx
	addq	16(%rsp), %r14
	movl	%edx, %eax
	subl	8(%rsp), %eax
	cmpl	%eax, %edi
	jge	.L2037
	addq	$16, 16(%rsp)
	addl	$2, %r8d
	subq	$8, 112(%rsp)
	cmpl	$2, %edi
	jne	.L2104
	cmpq	$0, 96(%rsp)
	movl	8(%rsp), %r14d
	jne	.L2048
.L2051:
	cmpq	$0, 104(%rsp)
	jne	.L2234
.L2025:
	cmpq	$0, 80(%rsp)
	jne	.L2235
.L2054:
	addq	$8, 72(%rsp)
	movq	72(%rsp), %rax
	cmpq	%rax, 136(%rsp)
	je	.L2019
	movq	grid(%rip), %rax
	jmp	.L2098
.L2019:
	movq	96(%rsp), %rdi
	call	free
	movq	104(%rsp), %rdi
	call	free
	movq	80(%rsp), %rdi
	addq	$296, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
.L2228:
	.cfi_restore_state
	movq	(%rax), %rax
	cmpq	$0, (%rax)
	je	.L2003
	testq	%rbp, %rbp
	je	.L2014
	movl	0(%rbp), %eax
	testl	%eax, %eax
	js	.L2014
	cmpl	%esi, %eax
	je	.L2003
	movq	%rbp, %rax
	jmp	.L2016
.L2017:
	cmpl	%esi, %edx
	je	.L2003
.L2016:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L2017
.L2014:
	movq	%rbp, %rdi
	call	list_append
	movq	%rax, %rbp
	jmp	.L2003
.L2005:
	testq	%r12, %r12
	je	.L2010
	movl	(%r12), %edx
	movl	4(%r12), %ecx
	testl	%edx, %edx
	js	.L2010
	movq	%r12, %rax
	jmp	.L2013
	.p2align 4,,10
	.p2align 3
.L2011:
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	js	.L2010
.L2013:
	cmpl	%edx, %esi
	jne	.L2011
	cmpl	%edi, %ecx
	je	.L2003
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	jns	.L2013
.L2010:
	movq	%r12, %rdi
	movq	%r8, %rsi
	call	vectors_append
	movq	%rax, %r12
	jmp	.L2003
	.p2align 4,,10
	.p2align 3
.L2233:
	movq	40(%rsp), %rbx
	movq	(%r10,%rbx), %r10
	testq	%r10, %r10
	je	.L2038
	movl	8(%rsp), %r12d
	movl	4(%r10), %ebx
	cmpl	%r9d, %r12d
	setl	%r10b
	cmpl	%ecx, %r12d
	setge	%r9b
	testb	%r9b, %r10b
	je	.L2038
	testl	%ebx, %ebx
	jns	.L2038
	movq	64(%rsp), %r10
	movq	(%r11,%r10), %r9
	testq	%r9, %r9
	je	.L2038
	addq	%r10, %rbp
	cmpl	0(%rbp), %eax
	jl	.L2038
	cmpl	4(%rbp), %eax
	jge	.L2038
	movq	(%r9,%r13,8), %r9
	testq	%r9, %r9
	je	.L2038
	movl	4(%r9), %r9d
	testl	%r9d, %r9d
	jns	.L2038
	movl	60(%rsp), %esi
	movl	%ebx, %ebp
	movl	%r9d, %r10d
	cmpq	$0, 96(%rsp)
	notl	%ebp
	movq	%r14, %rbx
	movl	%edx, 252(%rsp)
	movl	%r12d, %r14d
	movl	%eax, 256(%rsp)
	notl	%r10d
	movl	%esi, 260(%rsp)
	movl	%edx, 264(%rsp)
	movl	%r15d, 268(%rsp)
	movl	%esi, 272(%rsp)
	movl	%r12d, 276(%rsp)
	movl	%eax, 280(%rsp)
	movl	%esi, 284(%rsp)
	movl	%ebp, (%rsp)
	je	.L2042
	movq	96(%rsp), %r13
	movl	0(%r13), %r8d
	testl	%r8d, %r8d
	js	.L2042
	movslq	(%rsp), %rax
	movl	%r10d, %r12d
	salq	$3, %rax
	movq	%rax, 8(%rsp)
	movslq	%r10d, %rax
	salq	$3, %rax
	movq	%rax, 24(%rsp)
.L2043:
	movslq	%r8d, %rbp
	movl	%r8d, 112(%rsp)
	movq	_attribute(%rip), %rdx
	xorl	%r9d, %r9d
	leaq	0(%rbp,%rbp,4), %rax
	movl	272(%rsp), %ecx
	addq	$4, %r13
	movq	252(%rsp), %rdi
	leaq	0(%rbp,%rax,2), %rax
	movl	260(%rsp), %esi
	salq	$4, %rax
	movq	(%rdx,%rax), %r11
	movq	%rax, 200(%rsp)
	movq	8(%rsp), %rax
	movq	264(%rsp), %rdx
	call	*(%r11,%rax)
	movq	_attribute(%rip), %rdx
	movq	24(%rsp), %r11
	xorl	%r9d, %r9d
	movq	200(%rsp), %rax
	movl	112(%rsp), %r8d
	movsd	%xmm0, 16(%rsp)
	movl	260(%rsp), %esi
	movl	284(%rsp), %ecx
	movq	(%rdx,%rax), %rax
	movq	252(%rsp), %rdi
	movq	276(%rsp), %rdx
	call	*(%rax,%r11)
	movq	grid(%rip), %rax
	movq	48(%rsp), %rsi
	addsd	16(%rsp), %xmm0
	movl	0(%r13), %r8d
	movq	24(%rax), %rax
	movq	(%rax,%rsi), %rax
	movq	64(%rsp), %rsi
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi), %rdx
	movq	40(%rsp), %rsi
	movq	(%rax,%rbx), %rax
	movq	(%rdx,%rsi), %rdx
	movq	32(%rsp), %rsi
	movq	(%rax,%rsi), %rax
	subsd	8(%rax,%rbp,8), %xmm0
	movsd	%xmm0, 8(%rdx,%rbp,8)
	testl	%r8d, %r8d
	jns	.L2043
	movl	%r12d, %r10d
.L2042:
	cmpq	$0, 104(%rsp)
	je	.L2025
	movq	104(%rsp), %rsi
	movl	(%rsi), %r13d
	movl	4(%rsi), %r11d
	testl	%r13d, %r13d
	js	.L2025
	movslq	(%rsp), %rax
	movq	152(%rsp), %r12
	movl	%r14d, 24(%rsp)
	movl	%r13d, %ebp
	movl	%r15d, 112(%rsp)
	movq	%rsi, %r14
	movl	%r11d, %r13d
	movq	%rbx, %r15
	salq	$3, %rax
	movq	%rax, (%rsp)
	movslq	%r10d, %rax
	salq	$3, %rax
	movq	%rax, 8(%rsp)
.L2044:
	movslq	%r13d, %rbx
	movl	%ebp, %edx
	movq	(%rsp), %r11
	movslq	%ebp, %rbp
	leaq	(%rbx,%rbx,4), %rax
	xorl	%r9d, %r9d
	salq	$32, %r13
	addq	$8, %r14
	leaq	(%rbx,%rax,2), %rax
	movl	272(%rsp), %ecx
	movabsq	$-4294967296, %rsi
	movq	252(%rsp), %rdi
	salq	$4, %rax
	andq	%rsi, %r12
	movl	260(%rsp), %esi
	movq	%rax, %r10
	movq	_attribute(%rip), %rax
	orq	%rdx, %r12
	movq	264(%rsp), %rdx
	movl	%r12d, %r8d
	movq	%r10, 200(%rsp)
	movq	(%rax,%r10), %rax
	call	*(%rax,%r11)
	leaq	0(%rbp,%rbp,4), %rax
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	leaq	0(%rbp,%rax,2), %rax
	movq	8(%rsp), %r10
	movl	284(%rsp), %ecx
	movsd	%xmm0, 16(%rsp)
	salq	$4, %rax
	movq	276(%rsp), %rdx
	movl	%r12d, %r12d
	movq	252(%rsp), %rdi
	movq	%rax, %r11
	movq	_attribute(%rip), %rax
	movl	260(%rsp), %esi
	orq	%r13, %r12
	movq	%r11, 152(%rsp)
	movq	(%rax,%r11), %rax
	call	*(%rax,%r10)
	movq	grid(%rip), %rax
	movq	48(%rsp), %rsi
	xorl	%r9d, %r9d
	movq	64(%rsp), %rcx
	movq	32(%rsp), %r8
	movq	24(%rax), %rax
	movq	40(%rsp), %rdi
	addsd	16(%rsp), %xmm0
	movq	152(%rsp), %r11
	movq	(%rax,%rsi), %rax
	movl	260(%rsp), %esi
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx), %rdx
	movq	(%rax,%r15), %rax
	movl	272(%rsp), %ecx
	movq	(%rax,%r8), %rax
	movq	(%rdx,%rdi), %rdx
	movq	252(%rsp), %rdi
	subsd	8(%rax,%rbp,8), %xmm0
	movq	_attribute(%rip), %rax
	movq	(%rax,%r11), %rax
	movq	(%rsp), %r11
	movsd	%xmm0, 8(%rdx,%rbp,8)
	movq	%r12, %rbp
	movq	264(%rsp), %rdx
	sarq	$32, %rbp
	movl	%ebp, %r8d
	call	*(%rax,%r11)
	movq	200(%rsp), %r10
	movl	%ebp, %r8d
	movq	_attribute(%rip), %rax
	movl	284(%rsp), %ecx
	movsd	%xmm0, 16(%rsp)
	xorl	%r9d, %r9d
	movq	276(%rsp), %rdx
	movq	(%rax,%r10), %rax
	movq	8(%rsp), %r10
	movq	252(%rsp), %rdi
	movl	260(%rsp), %esi
	call	*(%rax,%r10)
	movq	grid(%rip), %rax
	movq	48(%rsp), %rsi
	movq	64(%rsp), %rcx
	movq	32(%rsp), %r8
	movq	24(%rax), %rax
	movq	40(%rsp), %rdi
	addsd	16(%rsp), %xmm0
	movl	(%r14), %ebp
	movq	(%rax,%rsi), %rax
	movl	4(%r14), %r13d
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx), %rdx
	movq	(%rax,%r15), %rax
	movq	(%rax,%r8), %rax
	movq	(%rdx,%rdi), %rdx
	subsd	8(%rax,%rbx,8), %xmm0
	movsd	%xmm0, 8(%rdx,%rbx,8)
	testl	%ebp, %ebp
	jns	.L2044
	movq	%r12, 152(%rsp)
	movl	24(%rsp), %r14d
	movl	112(%rsp), %r15d
	jmp	.L2025
	.p2align 4,,10
	.p2align 3
.L2103:
	movl	$2, %r10d
	jmp	.L2036
.L2235:
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	leal	-1(%r14), %r10d
	movl	$1, %r11d
	movq	64(%rsp), %r12
	movq	24(%rax), %rax
	leaq	-8(%r12), %rbp
	movq	(%rax,%rbx), %rax
	movq	128(%rsp), %rbx
	movq	(%rax), %rax
	movq	16(%rax), %rdx
	movl	(%rax), %r13d
	movq	%rax, %rdi
	movq	(%rdx,%rbx,8), %rdx
	movq	120(%rsp), %rbx
	movl	%r13d, %esi
	movq	%rbp, %r13
	movl	%r10d, %ebp
	movl	%r15d, %r10d
	movq	(%rdx,%rbx,8), %rdx
	movl	4(%rdx), %edx
	notl	%edx
	movslq	%edx, %rdx
	leaq	0(,%rdx,8), %rbx
	movq	%rbx, 8(%rsp)
	movq	88(%rsp), %rbx
	movq	%rbx, (%rsp)
	movl	%r11d, %ebx
.L2077:
	cmpl	%esi, %ebp
	jl	.L2055
	cmpl	4(%rdi), %ebp
	jge	.L2055
	movq	16(%rdi), %rax
	movq	(%rsp), %rcx
	movq	(%rax,%rcx), %rax
	testq	%rax, %rax
	je	.L2055
	addq	8(%rdi), %rcx
	cmpl	(%rcx), %r10d
	jl	.L2055
	cmpl	4(%rcx), %r10d
	jl	.L2236
.L2055:
	cmpl	$1, %ebx
	je	.L2237
.L2107:
	leal	-1(%r10), %ebx
	movl	%r10d, %r15d
	movq	%rdi, %rax
	movl	%esi, %r13d
	movl	%ebx, (%rsp)
	movl	$1, %ebp
.L2076:
	cmpl	%r13d, %r14d
	jl	.L2078
	cmpl	4(%rax), %r14d
	jge	.L2078
	movq	16(%rax), %rdx
	movq	64(%rsp), %rbx
	movq	(%rdx,%rbx), %rdx
	testq	%rdx, %rdx
	je	.L2078
	addq	8(%rax), %rbx
	movq	%rbx, %rcx
	movl	(%rsp), %ebx
	cmpl	(%rcx), %ebx
	jl	.L2078
	cmpl	4(%rcx), %ebx
	jge	.L2078
	movslq	%ebx, %rcx
	movq	(%rdx,%rcx,8), %rdx
	testq	%rdx, %rdx
	je	.L2078
	movl	4(%rdx), %r12d
	testl	%r12d, %r12d
	jns	.L2238
.L2078:
	cmpl	$1, %ebp
	jne	.L2054
	movq	88(%rsp), %r12
	movl	$16, %r8d
	movl	$1, %edi
.L2090:
	movl	%edi, %edx
	movl	%r14d, %ebx
	leal	(%rdi,%rdi), %esi
	movq	%r12, %rcx
	negl	%edx
	subl	%edi, %ebx
	.p2align 4,,10
	.p2align 3
.L2089:
	cmpl	%r13d, %ebx
	jl	.L2084
	cmpl	4(%rax), %ebx
	jge	.L2084
	movq	16(%rax), %r10
	movq	(%r10,%rcx), %r11
	testq	%r11, %r11
	je	.L2084
	movq	8(%rax), %r9
	leaq	(%r9,%rcx), %rbp
	cmpl	0(%rbp), %r15d
	jl	.L2085
	cmpl	4(%rbp), %r15d
	jge	.L2085
	movq	40(%rsp), %rbp
	movq	(%r11,%rbp), %rbp
	testq	%rbp, %rbp
	je	.L2085
	movl	4(%rbp), %ebp
	testl	%ebp, %ebp
	jns	.L2086
.L2085:
	addq	%rcx, %r9
	cmpl	(%r9), %r15d
	jle	.L2084
	cmpl	4(%r9), %r15d
	jg	.L2084
	movq	40(%rsp), %r9
	movq	-8(%r11,%r9), %r9
	testq	%r9, %r9
	je	.L2084
	movl	4(%r9), %r9d
	testl	%r9d, %r9d
	jns	.L2086
	.p2align 4,,10
	.p2align 3
.L2084:
	addl	%esi, %edx
	addl	%esi, %ebx
	addq	%r8, %rcx
	cmpl	%edi, %edx
	jle	.L2089
	addq	$16, %r8
	subq	$8, %r12
	cmpl	$2, %edi
	jne	.L2239
.L2088:
	movq	80(%rsp), %rbx
	movl	(%rbx), %r8d
	movslq	4(%rbx), %rcx
	testl	%r8d, %r8d
	js	.L2097
	movq	64(%rsp), %rsi
	movq	16(%rax), %rdx
	movq	(%rdx,%rsi), %rdx
	movq	40(%rsp), %rsi
	movq	(%rdx,%rsi), %rsi
	movq	%rbx, %rdx
.L2096:
	movq	$0x000000000, 8(%rsi,%rcx,8)
	movl	8(%rdx), %edi
	addq	$8, %rdx
	movslq	4(%rdx), %rcx
	testl	%edi, %edi
	jns	.L2096
.L2097:
	addl	$2, (%rsp)
	movl	$3, %ebp
	jmp	.L2076
.L2104:
	movl	$2, %edi
	jmp	.L2047
.L2237:
	movl	$1, %eax
.L2067:
	movl	%eax, %edx
	movl	%r10d, %ebx
	leal	(%rax,%rax), %ecx
	negl	%edx
	subl	%eax, %ebx
	jmp	.L2066
.L2243:
	movq	16(%rdi), %r9
	movq	(%r9,%r12), %r8
	testq	%r8, %r8
	je	.L2062
	movq	8(%rdi), %r11
	addq	%r12, %r11
	cmpl	(%r11), %ebx
	jl	.L2062
	cmpl	4(%r11), %ebx
	jge	.L2062
	movslq	%ebx, %r11
	movq	(%r8,%r11,8), %r11
	testq	%r11, %r11
	je	.L2062
	movl	4(%r11), %r11d
	testl	%r11d, %r11d
	jns	.L2240
.L2062:
	cmpl	%esi, %r14d
	jle	.L2060
.L2099:
	movq	(%r9,%r13), %r8
	testq	%r8, %r8
	je	.L2060
	movq	8(%rdi), %r11
	addq	%r13, %r11
	cmpl	(%r11), %ebx
	jl	.L2060
	cmpl	4(%r11), %ebx
	jge	.L2060
	movslq	%ebx, %r11
	movq	(%r8,%r11,8), %r8
	testq	%r8, %r8
	je	.L2060
	movl	4(%r8), %r8d
	testl	%r8d, %r8d
	jns	.L2241
	.p2align 4,,10
	.p2align 3
.L2060:
	addl	%ecx, %edx
	addl	%ecx, %ebx
	cmpl	%eax, %edx
	jg	.L2242
.L2066:
	cmpl	%esi, %r14d
	jl	.L2060
	movl	4(%rdi), %r8d
	cmpl	%r8d, %r14d
	jl	.L2243
	cmpl	%esi, %r14d
	jle	.L2060
	cmpl	%r8d, %r14d
	jne	.L2060
	movq	16(%rdi), %r9
	jmp	.L2099
	.p2align 4,,10
	.p2align 3
.L2242:
	cmpl	$2, %eax
	jne	.L2244
.L2065:
	movq	80(%rsp), %rbx
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L2075
	movq	16(%rdi), %rdx
	movq	40(%rsp), %rcx
	movq	(%rdx,%r12), %rdx
	movq	(%rdx,%rcx), %rcx
	movq	%rbx, %rdx
.L2074:
	movq	$0x000000000, 8(%rcx,%rax,8)
	movslq	8(%rdx), %rax
	addq	$8, %rdx
	testl	%eax, %eax
	jns	.L2074
.L2075:
	addq	$16, (%rsp)
	addl	$2, %ebp
	movl	$3, %ebx
	jmp	.L2077
.L2102:
	movq	$0, 80(%rsp)
	movq	$0, 104(%rsp)
	movq	$0, 96(%rsp)
	jmp	.L2002
.L2244:
	movl	$2, %eax
	jmp	.L2067
.L2048:
	movq	96(%rsp), %rbx
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L2051
	movq	128(%rsp), %rdi
	movq	16(%rsi), %rdx
	movq	(%rdx,%rdi,8), %rdx
	movq	120(%rsp), %rdi
	movq	(%rdx,%rdi,8), %rcx
	movq	%rbx, %rdx
.L2052:
	movsd	undefined(%rip), %xmm0
	addq	$4, %rdx
	movsd	%xmm0, 8(%rcx,%rax,8)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L2052
	cmpq	$0, 104(%rsp)
	je	.L2025
.L2234:
	movq	104(%rsp), %rbx
	movslq	(%rbx), %rax
	movslq	4(%rbx), %rcx
	testl	%eax, %eax
	js	.L2025
	movq	16(%rsi), %rdx
	movq	128(%rsp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	120(%rsp), %rsi
	movq	(%rdx,%rsi,8), %rsi
	movq	%rbx, %rdx
.L2053:
	movsd	undefined(%rip), %xmm0
	addq	$8, %rdx
	movsd	%xmm0, 8(%rsi,%rax,8)
	movslq	(%rdx), %rax
	movsd	%xmm0, 8(%rsi,%rcx,8)
	movslq	4(%rdx), %rcx
	testl	%eax, %eax
	jns	.L2053
	jmp	.L2025
.L2239:
	movl	$2, %edi
	jmp	.L2090
.L2086:
	movl	60(%rsp), %r12d
	testl	%r12d, %r12d
	js	.L2088
	movq	64(%rsp), %rsi
	movslq	%ebx, %rcx
	movq	(%r10,%rcx,8), %rcx
	movq	(%r10,%rsi), %rdx
	movq	40(%rsp), %rsi
	movq	(%rcx,%rsi), %rcx
	movl	4(%rcx), %ebp
	testl	%ebp, %ebp
	js	.L2245
	movq	40(%rsp), %rsi
	movq	(%rdx,%rsi), %rdx
	movl	4(%rdx), %ecx
	notl	%ecx
.L2092:
	movq	80(%rsp), %r12
	movl	(%r12), %r11d
	movl	4(%r12), %edx
	testl	%r11d, %r11d
	js	.L2097
	movslq	%ecx, %rcx
	movl	%ebx, 24(%rsp)
	movq	192(%rsp), %r13
	movl	60(%rsp), %esi
	leaq	0(,%rcx,8), %rbp
	jmp	.L2095
.L2094:
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rax
	movq	16(%rax), %r10
.L2095:
	movq	64(%rsp), %rbx
	movslq	%edx, %rcx
	movl	%r13d, %r13d
	salq	$32, %rdx
	leaq	(%rcx,%rcx,4), %rax
	addq	$8, %r12
	orq	%rdx, %r13
	shrq	$32, %rdx
	movq	(%r10,%rbx), %rdi
	movq	40(%rsp), %rbx
	leaq	(%rcx,%rax,2), %rax
	xorl	%r9d, %r9d
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	%r15d, 244(%rsp)
	movq	%rdx, %r8
	movq	(%rdi,%rbx), %rdi
	movq	(%rax), %rax
	movl	%esi, 248(%rsp)
	movl	%r14d, 216(%rsp)
	leaq	8(%rdi,%rcx,8), %rbx
	movl	24(%rsp), %ecx
	movl	%r15d, 220(%rsp)
	movl	%esi, 224(%rsp)
	movq	216(%rsp), %rdx
	movl	%ecx, 240(%rsp)
	movl	%esi, %ecx
	movq	240(%rsp), %rdi
	movl	%esi, 16(%rsp)
	call	*(%rax,%rbp)
	movl	(%r12), %r9d
	movl	4(%r12), %edx
	movl	16(%rsp), %esi
	movsd	%xmm0, (%rbx)
	testl	%r9d, %r9d
	jns	.L2094
	movq	%r13, 192(%rsp)
.L2227:
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	movl	$3, %ebp
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rax
	movl	(%rax), %r13d
	addl	$2, (%rsp)
	jmp	.L2076
.L2241:
	movl	60(%rsp), %eax
	testl	%eax, %eax
	js	.L2065
	movq	(%r9,%r12), %r8
	movq	(%r8,%r11,8), %rax
	movl	4(%rax), %r15d
	testl	%r15d, %r15d
	jns	.L2068
	movq	40(%rsp), %rcx
	movq	-8(%r9,%r12), %rax
	movq	(%rax,%rcx), %rax
	movl	4(%rax), %ecx
	notl	%ecx
.L2069:
	movq	80(%rsp), %r15
	movl	(%r15), %edx
	movslq	4(%r15), %rax
	testl	%edx, %edx
	js	.L2075
	movslq	%ecx, %rcx
	movl	%ebp, 32(%rsp)
	movq	%r12, %rbp
	movl	%r10d, %r12d
	leaq	0(,%rcx,8), %rsi
	movq	%r13, 112(%rsp)
	movl	%ebx, %r13d
	movq	%rsi, 24(%rsp)
	movl	60(%rsp), %esi
	jmp	.L2072
.L2071:
	movq	grid(%rip), %rcx
	movq	48(%rsp), %rbx
	movq	24(%rcx), %rcx
	movq	(%rcx,%rbx), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rbp), %r8
.L2072:
	movq	40(%rsp), %rbx
	leaq	(%rax,%rax,4), %rcx
	movslq	%edx, %rdi
	movl	%edx, %edx
	leaq	(%rax,%rcx,2), %rax
	movq	24(%rsp), %r11
	addq	$8, %r15
	xorl	%r9d, %r9d
	movq	(%r8,%rbx), %rcx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	%r14d, 228(%rsp)
	movq	(%rax), %rax
	movl	%r13d, 232(%rsp)
	leaq	8(%rcx,%rdi,8), %rbx
	movl	%esi, 236(%rsp)
	movabsq	$-4294967296, %rcx
	andq	144(%rsp), %rcx
	orq	%rdx, %rcx
	movl	%r14d, 216(%rsp)
	movq	%rcx, %rdi
	movq	%rcx, 144(%rsp)
	movl	%esi, %ecx
	movl	%r12d, 220(%rsp)
	movl	%edi, %r8d
	movq	216(%rsp), %rdx
	movl	%esi, 224(%rsp)
	movq	228(%rsp), %rdi
	movl	%esi, 16(%rsp)
	call	*(%rax,%r11)
	movl	(%r15), %edx
	movslq	4(%r15), %rax
	movl	16(%rsp), %esi
	movsd	%xmm0, (%rbx)
	testl	%edx, %edx
	jns	.L2071
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	movl	%r12d, %r10d
	movq	%rbp, %r12
	movl	32(%rsp), %ebp
	addq	$16, (%rsp)
	movq	24(%rax), %rax
	movq	112(%rsp), %r13
	addl	$2, %ebp
	movq	(%rax,%rbx), %rax
	movl	$3, %ebx
	movq	(%rax), %rdi
	movl	(%rdi), %esi
	jmp	.L2077
.L2231:
	movl	60(%rsp), %eax
	movq	120(%rsp), %rbx
	movl	%edx, 276(%rsp)
	movl	%r15d, 280(%rsp)
	movl	%eax, 284(%rsp)
	movq	128(%rsp), %rax
	movq	0(%rbp,%rax,8), %rax
	movq	96(%rsp), %rbp
	movq	(%rax,%rbx,8), %rcx
	movl	4(%rcx), %r12d
	notl	%r12d
	testq	%rbp, %rbp
	je	.L2022
	movl	0(%rbp), %r8d
	testl	%r8d, %r8d
	js	.L2022
	movslq	%r12d, %rax
	leaq	0(,%rax,8), %r13
	jmp	.L2023
.L2246:
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	64(%rsp), %rbx
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	40(%rsp), %rbx
	movq	(%rax,%rbx), %rcx
.L2023:
	movslq	%r8d, %rdx
	addq	$4, %rbp
	movl	%r14d, 264(%rsp)
	movq	276(%rsp), %rdi
	leaq	(%rdx,%rdx,4), %rax
	leaq	8(%rcx,%rdx,8), %rbx
	xorl	%r9d, %r9d
	movl	%r15d, 268(%rsp)
	leaq	(%rdx,%rax,2), %rax
	movl	284(%rsp), %esi
	movq	264(%rsp), %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %r10
	movl	60(%rsp), %eax
	movl	%eax, 272(%rsp)
	movq	%rax, %rcx
	call	*(%r10,%r13)
	movl	0(%rbp), %r8d
	movsd	%xmm0, (%rbx)
	testl	%r8d, %r8d
	jns	.L2246
.L2022:
	movq	104(%rsp), %rax
	testq	%rax, %rax
	je	.L2025
	movl	(%rax), %edx
	movl	4(%rax), %r13d
	testl	%edx, %edx
	js	.L2025
	movslq	%r12d, %r12
	movl	%r15d, %ebp
	movl	%r14d, %r15d
	leaq	0(,%r12,8), %rbx
	movq	%rax, %r12
	movq	%rbx, (%rsp)
.L2027:
	movq	48(%rsp), %rbx
	movq	64(%rsp), %rdi
	movslq	%edx, %rcx
	movl	%edx, %edx
	movq	40(%rsp), %r11
	leaq	(%rcx,%rcx,4), %rax
	movq	(%rsp), %r10
	xorl	%r9d, %r9d
	movq	grid(%rip), %rsi
	leaq	(%rcx,%rax,2), %rax
	addq	$8, %r12
	movl	%r15d, 264(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	%ebp, 268(%rsp)
	movq	24(%rsi), %rsi
	movq	(%rax), %rax
	movq	(%rsi,%rbx), %rsi
	movabsq	$-4294967296, %rbx
	andq	160(%rsp), %rbx
	orq	%rdx, %rbx
	movq	264(%rsp), %rdx
	movq	(%rsi), %rsi
	movl	%ebx, %r8d
	movl	%ebx, %ebx
	movq	16(%rsi), %rsi
	movq	(%rsi,%rdi), %rsi
	movq	276(%rsp), %rdi
	movq	(%rsi,%r11), %rsi
	leaq	8(%rsi,%rcx,8), %r14
	movl	60(%rsp), %ecx
	movl	284(%rsp), %esi
	movl	%ecx, 272(%rsp)
	call	*(%rax,%r10)
	movq	48(%rsp), %rsi
	movslq	%r13d, %rdx
	movq	%r13, %r8
	movq	64(%rsp), %rdi
	leaq	(%rdx,%rdx,4), %rax
	salq	$32, %r8
	xorl	%r9d, %r9d
	movq	40(%rsp), %r11
	leaq	(%rdx,%rax,2), %rax
	movq	(%rsp), %r10
	orq	%r8, %rbx
	movq	grid(%rip), %rcx
	salq	$4, %rax
	shrq	$32, %r8
	addq	_attribute(%rip), %rax
	movq	(%rax), %rax
	movsd	%xmm0, (%r14)
	movq	24(%rcx), %rcx
	movq	%rbx, 160(%rsp)
	movq	(%rcx,%rsi), %rcx
	movl	284(%rsp), %esi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi), %rcx
	movq	276(%rsp), %rdi
	movq	(%rcx,%r11), %rcx
	leaq	8(%rcx,%rdx,8), %r14
	movq	264(%rsp), %rdx
	movl	272(%rsp), %ecx
	call	*(%rax,%r10)
	movl	(%r12), %edx
	movl	4(%r12), %r13d
	movsd	%xmm0, (%r14)
	testl	%edx, %edx
	jns	.L2027
	movl	%r15d, %r14d
	movl	%ebp, %r15d
	jmp	.L2025
.L2245:
	movq	-8(%rdx,%rsi), %rdx
	movl	4(%rdx), %ecx
	notl	%ecx
	jmp	.L2092
.L2236:
	movq	40(%rsp), %rcx
	movq	(%rax,%rcx), %rax
	testq	%rax, %rax
	je	.L2055
	movl	4(%rax), %r15d
	testl	%r15d, %r15d
	js	.L2055
	movq	80(%rsp), %rcx
	movl	60(%rsp), %eax
	movl	%ebp, 276(%rsp)
	movl	%r10d, 280(%rsp)
	movl	(%rcx), %edx
	movl	%eax, 284(%rsp)
	testl	%edx, %edx
	js	.L2059
	leal	-1(%rbx), %eax
	movl	%ebp, 24(%rsp)
	movq	%rcx, %r15
	movl	%r10d, %ebp
	sarl	%eax
	movq	%r13, 32(%rsp)
	movl	%ebx, %r13d
	addl	%r14d, %eax
	cltq
	salq	$3, %rax
	movq	%rax, 16(%rsp)
.L2058:
	movslq	%edx, %rcx
	movq	8(%rsp), %rbx
	leaq	(%rcx,%rcx,4), %rax
	leaq	(%rcx,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax,%rbx), %rax
	testq	%rax, %rax
	je	.L2057
	movq	16(%rdi), %rsi
	movq	16(%rsp), %rbx
	movl	%edx, %edx
	xorl	%r9d, %r9d
	movl	%r14d, 216(%rsp)
	movq	276(%rsp), %rdi
	movq	(%rsi,%rbx), %rsi
	movq	40(%rsp), %rbx
	movl	%ebp, 220(%rsp)
	movq	(%rsi,%rbx), %rsi
	leaq	8(%rsi,%rcx,8), %rbx
	movabsq	$-4294967296, %rcx
	andq	176(%rsp), %rcx
	movq	%rcx, %rsi
	movl	60(%rsp), %ecx
	orq	%rdx, %rsi
	movq	216(%rsp), %rdx
	movq	%rsi, 176(%rsp)
	movl	%esi, %r8d
	movl	284(%rsp), %esi
	movl	%ecx, 224(%rsp)
	call	*%rax
	movq	grid(%rip), %rax
	movsd	%xmm0, (%rbx)
	movq	48(%rsp), %rbx
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rdi
.L2057:
	movl	8(%r15), %edx
	addq	$8, %r15
	testl	%edx, %edx
	jns	.L2058
	movl	%ebp, %r10d
	movl	%r13d, %ebx
	movl	24(%rsp), %ebp
	movq	32(%rsp), %r13
	movl	(%rdi), %esi
.L2059:
	cmpl	$1, %ebx
	je	.L2075
	jmp	.L2107
	.p2align 4,,10
	.p2align 3
.L2230:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L2020
.L2240:
	movl	60(%rsp), %eax
	testl	%eax, %eax
	js	.L2065
.L2068:
	movq	40(%rsp), %rax
	movq	(%r8,%rax), %rax
	movl	4(%rax), %ecx
	notl	%ecx
	jmp	.L2069
.L2232:
	movl	60(%rsp), %eax
	movq	96(%rsp), %rbp
	movl	%r14d, 276(%rsp)
	movl	%edx, 280(%rsp)
	movl	%eax, 284(%rsp)
	movq	120(%rsp), %rax
	movq	(%rdi,%rax,8), %rcx
	movl	4(%rcx), %r12d
	notl	%r12d
	testq	%rbp, %rbp
	je	.L2030
	movl	0(%rbp), %r8d
	testl	%r8d, %r8d
	js	.L2030
	movslq	%r12d, %rax
	leaq	0(,%rax,8), %r13
	jmp	.L2031
.L2247:
	movq	grid(%rip), %rax
	movq	48(%rsp), %rbx
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	64(%rsp), %rbx
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	40(%rsp), %rbx
	movq	(%rax,%rbx), %rcx
.L2031:
	movslq	%r8d, %rdx
	addq	$4, %rbp
	movl	%r14d, 264(%rsp)
	movq	276(%rsp), %rdi
	leaq	(%rdx,%rdx,4), %rax
	leaq	8(%rcx,%rdx,8), %rbx
	xorl	%r9d, %r9d
	movl	%r15d, 268(%rsp)
	leaq	(%rdx,%rax,2), %rax
	movl	284(%rsp), %esi
	movq	264(%rsp), %rdx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %r10
	movl	60(%rsp), %eax
	movl	%eax, 272(%rsp)
	movq	%rax, %rcx
	call	*(%r10,%r13)
	movl	0(%rbp), %r8d
	movsd	%xmm0, (%rbx)
	testl	%r8d, %r8d
	jns	.L2247
.L2030:
	movq	104(%rsp), %r10
	testq	%r10, %r10
	je	.L2025
	movl	(%r10), %r11d
	movl	4(%r10), %edx
	testl	%r11d, %r11d
	js	.L2025
	movslq	%r12d, %r12
	movl	%r11d, %ebx
	movl	%r15d, %r11d
	leaq	0(,%r12,8), %r13
	movq	%r13, %rax
	movq	%r10, %r13
	movl	%r14d, %r10d
	movq	%rax, %r14
.L2034:
	movq	grid(%rip), %rcx
	movslq	%ebx, %rbp
	movslq	%edx, %r12
	movq	%rdx, %r8
	movq	48(%rsp), %rsi
	movq	64(%rsp), %rdi
	salq	$32, %r8
	movl	%ebx, %ebx
	movq	24(%rcx), %rcx
	movq	40(%rsp), %r15
	xorl	%r9d, %r9d
	addq	$8, %r13
	leaq	0(%rbp,%rbp,4), %rax
	movl	168(%rsp), %edx
	movl	%r10d, 264(%rsp)
	movq	(%rcx,%rsi), %rcx
	leaq	0(%rbp,%rax,2), %rax
	movl	%r10d, 16(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	orq	%r8, %rdx
	movl	%r11d, 268(%rsp)
	movq	(%rcx), %rcx
	movq	(%rax), %rax
	movl	%r11d, 8(%rsp)
	shrq	$32, %r8
	movq	%rdx, (%rsp)
	movl	284(%rsp), %esi
	movq	16(%rcx), %rcx
	movq	264(%rsp), %rdx
	movq	(%rcx,%rdi), %rcx
	movq	276(%rsp), %rdi
	movq	(%rcx,%r15), %rcx
	leaq	8(%rcx,%r12,8), %r15
	movl	60(%rsp), %ecx
	movl	%ecx, 272(%rsp)
	call	*(%rax,%r14)
	movq	48(%rsp), %rsi
	leaq	(%r12,%r12,4), %rax
	xorl	%r9d, %r9d
	movq	grid(%rip), %rdx
	movq	64(%rsp), %rdi
	movsd	%xmm0, (%r15)
	leaq	(%r12,%rax,2), %rax
	movq	40(%rsp), %r15
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	24(%rdx), %rdx
	movq	(%rax), %rax
	movl	272(%rsp), %ecx
	movq	(%rdx,%rsi), %rdx
	movabsq	$-4294967296, %rsi
	andq	(%rsp), %rsi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi), %rdx
	movq	276(%rsp), %rdi
	movq	(%rdx,%r15), %rdx
	leaq	8(%rdx,%rbp,8), %rbp
	movq	%rsi, %rdx
	movl	284(%rsp), %esi
	orq	%rbx, %rdx
	movq	%rdx, 168(%rsp)
	movl	%edx, %r8d
	movq	264(%rsp), %rdx
	call	*(%rax,%r14)
	movl	0(%r13), %ebx
	movl	4(%r13), %edx
	movl	8(%rsp), %r11d
	movl	16(%rsp), %r10d
	movsd	%xmm0, 0(%rbp)
	testl	%ebx, %ebx
	jns	.L2034
	movl	%r10d, %r14d
	movl	%r11d, %r15d
	jmp	.L2025
.L2238:
	movl	60(%rsp), %eax
	movq	80(%rsp), %r12
	movl	%r14d, 276(%rsp)
	movl	%ebx, 280(%rsp)
	movl	%eax, 284(%rsp)
	movslq	(%r12), %rax
	movl	4(%r12), %edx
	testl	%eax, %eax
	js	.L2080
	leal	-1(%rbp), %ebx
	sarl	%ebx
	addl	%r15d, %ebx
	movslq	%ebx, %rbx
	salq	$3, %rbx
.L2082:
	leaq	(%rax,%rax,4), %rcx
	movq	8(%rsp), %rsi
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %rax
	movq	(%rax,%rsi), %r10
	testq	%r10, %r10
	je	.L2081
	movq	grid(%rip), %rax
	movslq	%edx, %rcx
	movq	%rdx, %r8
	xorl	%r9d, %r9d
	movq	48(%rsp), %rsi
	salq	$32, %r8
	movl	%r14d, 216(%rsp)
	movq	24(%rax), %rax
	movl	%r15d, 220(%rsp)
	movq	276(%rsp), %rdi
	movq	216(%rsp), %rdx
	movq	(%rax,%rsi), %rax
	movq	64(%rsp), %rsi
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi), %rax
	movl	284(%rsp), %esi
	movq	(%rax,%rbx), %rax
	leaq	8(%rax,%rcx,8), %r13
	movl	184(%rsp), %eax
	orq	%r8, %rax
	shrq	$32, %r8
	movq	%rax, 184(%rsp)
	movl	60(%rsp), %eax
	movl	%eax, 224(%rsp)
	movq	%rax, %rcx
	call	*%r10
	movsd	%xmm0, 0(%r13)
.L2081:
	movslq	8(%r12), %rax
	addq	$8, %r12
	movl	4(%r12), %edx
	testl	%eax, %eax
	jns	.L2082
.L2080:
	cmpl	$1, %ebp
	je	.L2227
	jmp	.L2054
	.cfi_endproc
.LFE106:
	.size	box_boundary_level, .-box_boundary_level
	.p2align 4
	.globl	vectors_add
	.type	vectors_add, @function
vectors_add:
.LFB45:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L2249
	movl	(%rdi), %edx
	movl	4(%rdi), %ecx
	testl	%edx, %edx
	js	.L2249
	movq	%rsi, %rax
	movl	%esi, %r8d
	shrq	$32, %rax
	movq	%rax, %r9
	movq	%rdi, %rax
	jmp	.L2252
	.p2align 4,,10
	.p2align 3
.L2250:
	movl	8(%rax), %edx
	addq	$8, %rax
	movl	4(%rax), %ecx
	testl	%edx, %edx
	js	.L2249
.L2252:
	cmpl	%edx, %r8d
	jne	.L2250
	cmpl	%ecx, %r9d
	jne	.L2250
	movq	%rdi, %rax
	ret
	.p2align 4,,10
	.p2align 3
.L2249:
	jmp	vectors_append
	.cfi_endproc
.LFE45:
	.size	vectors_add, .-vectors_add
	.p2align 4
	.globl	vectors_copy
	.type	vectors_copy, @function
vectors_copy:
.LFB46:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L2261
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movl	(%rdi), %edx
	movq	(%rdi), %rsi
	xorl	%edi, %edi
	testl	%edx, %edx
	js	.L2257
	movabsq	$-4294967296, %rbx
	.p2align 4,,10
	.p2align 3
.L2260:
	andq	%rbx, %rsi
	addq	$8, %rbp
	orq	%rdx, %rsi
	call	vectors_append
	movl	0(%rbp), %edx
	movq	0(%rbp), %rsi
	movq	%rax, %rdi
	testl	%edx, %edx
	jns	.L2260
.L2257:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%rdi, %rax
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2261:
	.cfi_restore 3
	.cfi_restore 6
	xorl	%eax, %eax
	ret
	.cfi_endproc
.LFE46:
	.size	vectors_copy, .-vectors_copy
	.section	.rodata.str1.1
.LC59:
	.string	"s->i >= 0"
	.section	.rodata.str1.8
	.align 8
.LC60:
	.string	"/root/mnt/basilisk/src/common.h"
	.text
	.p2align 4
	.globl	vectors_from_scalars
	.type	vectors_from_scalars, @function
vectors_from_scalars:
.LFB47:
	.cfi_startproc
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	.L2272
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movabsq	$-4294967296, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	xorl	%edi, %edi
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	.p2align 4,,10
	.p2align 3
.L2271:
	movl	0(%rbp), %eax
	movl	4(%rbp), %edx
	andq	%r12, %rbx
	orq	%rax, %rbx
	testl	%edx, %edx
	js	.L2278
	movl	4(%rbp), %eax
	movl	%ebx, %ebx
	addq	$8, %rbp
	salq	$32, %rax
	orq	%rax, %rbx
	movq	%rbx, %rsi
	call	vectors_append
	movq	%rax, %rdi
	movl	0(%rbp), %eax
	testl	%eax, %eax
	jns	.L2271
	popq	%rbx
	.cfi_def_cfa_offset 24
	movq	%rdi, %rax
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
.L2272:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	xorl	%eax, %eax
	ret
.L2278:
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	.cfi_offset 6, -24
	.cfi_offset 12, -16
	movl	$.LC59, %edx
	movl	$1111, %esi
	movl	$.LC60, %edi
	call	qassert
	.cfi_endproc
.LFE47:
	.size	vectors_from_scalars, .-vectors_from_scalars
	.p2align 4
	.globl	tensors_len
	.type	tensors_len, @function
tensors_len:
.LFB48:
	.cfi_startproc
	xorl	%eax, %eax
	testq	%rdi, %rdi
	je	.L2282
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	.L2283
	.p2align 4,,10
	.p2align 3
.L2281:
	movl	16(%rdi), %edx
	addq	$16, %rdi
	addl	$1, %eax
	testl	%edx, %edx
	jns	.L2281
	ret
	.p2align 4,,10
	.p2align 3
.L2282:
	ret
	.p2align 4,,10
	.p2align 3
.L2283:
	ret
	.cfi_endproc
.LFE48:
	.size	tensors_len, .-tensors_len
	.p2align 4
	.globl	tensors_append
	.type	tensors_append, @function
tensors_append:
.LFB49:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdx, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movq	%rsi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	testq	%rdi, %rdi
	je	.L2289
	movl	(%rdi), %r8d
	testl	%r8d, %r8d
	js	.L2289
	movq	%rdi, %rdx
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L2287:
	movl	16(%rdx), %esi
	movl	%eax, %ecx
	addq	$16, %rdx
	addl	$1, %eax
	testl	%esi, %esi
	jns	.L2287
	leal	3(%rcx), %esi
	movslq	%esi, %rsi
	salq	$4, %rsi
	leaq	-32(%rsi), %r13
	leaq	-16(%rsi), %rbx
.L2286:
	call	realloc
	pxor	%xmm0, %xmm0
	leaq	(%rax,%rbx), %rdx
	movq	%rbp, (%rax,%r13)
	movq	%r12, 8(%rax,%r13)
	movups	%xmm0, (%rdx)
	movl	$-1, (%rdx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2289:
	.cfi_restore_state
	movl	$16, %ebx
	xorl	%r13d, %r13d
	movl	$32, %esi
	jmp	.L2286
	.cfi_endproc
.LFE49:
	.size	tensors_append, .-tensors_append
	.section	.rodata.str1.1
.LC61:
	.string	"v->x.i >= 0"
	.text
	.p2align 4
	.globl	tensors_from_vectors
	.type	tensors_from_vectors, @function
tensors_from_vectors:
.LFB50:
	.cfi_startproc
	movl	(%rdi), %ecx
	testl	%ecx, %ecx
	js	.L2296
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	xorl	%edi, %edi
	.p2align 4,,10
	.p2align 3
.L2295:
	movl	12(%rbx), %edx
	movq	(%rbx), %rsi
	testl	%edx, %edx
	js	.L2302
	movq	8(%rbx), %rdx
	addq	$16, %rbx
	call	tensors_append
	movq	%rax, %rdi
	movl	(%rbx), %eax
	testl	%eax, %eax
	jns	.L2295
	movq	%rdi, %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
.L2296:
	.cfi_restore 3
	xorl	%eax, %eax
	ret
.L2302:
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	$.LC61, %edx
	movl	$1142, %esi
	movl	$.LC60, %edi
	call	qassert
	.cfi_endproc
.LFE50:
	.size	tensors_from_vectors, .-tensors_from_vectors
	.p2align 4
	.globl	init_solver
	.type	init_solver, @function
init_solver:
.LFB51:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$112, %edi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	malloc
	movq	datasize(%rip), %r12
	movl	$176, %esi
	movl	$1, (%rax)
	shrq	$3, %r12
	movq	%rax, Events(%rip)
	leal	1(%r12), %ebp
	movq	%r12, %rdi
	call	calloc
	movslq	%ebp, %rbp
	salq	$2, %rbp
	movq	%rax, _attribute(%rip)
	movq	%rbp, %rdi
	call	malloc
	movq	%rbp, %rdi
	movq	%rax, all(%rip)
	movq	%rax, %rbx
	call	malloc
	movq	%rax, baseblock(%rip)
	testl	%r12d, %r12d
	jle	.L2304
	leal	-1(%r12), %esi
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L2305:
	movq	%rdx, %rcx
	movl	%edx, (%rbx,%rdx,4)
	movl	%edx, (%rax,%rdx,4)
	addq	$1, %rdx
	cmpq	%rsi, %rcx
	jne	.L2305
.L2304:
	movl	$-1, -4(%rax,%rbp)
	movl	$-1, -4(%rbx,%rbp)
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE51:
	.size	init_solver, .-init_solver
	.p2align 4
	.globl	timer_start
	.type	timer_start, @function
timer_start:
.LFB52:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	subq	$32, %rsp
	.cfi_def_cfa_offset 48
	call	clock
	leaq	8(%rsp), %rdi
	xorl	%esi, %esi
	movq	%rax, (%rsp)
	call	gettimeofday
	movdqa	(%rsp), %xmm0
	movdqa	16(%rsp), %xmm1
	movq	%r12, %rax
	movups	%xmm0, (%r12)
	movups	%xmm1, 16(%r12)
	addq	$32, %rsp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE52:
	.size	timer_start, .-timer_start
	.p2align 4
	.globl	timer_elapsed
	.type	timer_elapsed, @function
timer_elapsed:
.LFB53:
	.cfi_startproc
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	xorl	%esi, %esi
	movq	%rsp, %rdi
	call	gettimeofday
	movq	8(%rsp), %rax
	pxor	%xmm0, %xmm0
	subq	48(%rsp), %rax
	cvtsi2sdq	%rax, %xmm0
	pxor	%xmm1, %xmm1
	movq	(%rsp), %rax
	subq	40(%rsp), %rax
	cvtsi2sdq	%rax, %xmm1
	divsd	.LC62(%rip), %xmm0
	addq	$24, %rsp
	.cfi_def_cfa_offset 8
	addsd	%xmm1, %xmm0
	ret
	.cfi_endproc
.LFE53:
	.size	timer_elapsed, .-timer_elapsed
	.p2align 4
	.globl	qpopen
	.type	qpopen, @function
qpopen:
.LFB54:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	call	popen
	movq	%rax, %r12
	testq	%rax, %rax
	je	.L2312
	movq	qpopen_pipes(%rip), %rdi
	testq	%rdi, %rdi
	je	.L2316
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L2315:
	movl	%edx, %ecx
	addq	$1, %rdx
	cmpq	$0, -8(%rdi,%rdx,8)
	jne	.L2315
	leal	2(%rcx), %esi
	movslq	%esi, %rsi
	salq	$3, %rsi
	leaq	-16(%rsi), %rbp
	leaq	-8(%rsi), %rbx
.L2314:
	call	realloc
	movq	%r12, (%rax,%rbp)
	movq	%rax, qpopen_pipes(%rip)
	movq	$0, (%rax,%rbx)
.L2312:
	movq	%r12, %rax
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
.L2316:
	.cfi_restore_state
	movl	$8, %ebx
	xorl	%ebp, %ebp
	movl	$16, %esi
	jmp	.L2314
	.cfi_endproc
.LFE54:
	.size	qpopen, .-qpopen
	.p2align 4
	.globl	qpclose
	.type	qpclose, @function
qpclose:
.LFB55:
	.cfi_startproc
	movq	qpopen_pipes(%rip), %rax
	testq	%rax, %rax
	jne	.L2323
	jmp	.L2326
	.p2align 4,,10
	.p2align 3
.L2324:
	addq	$8, %rax
.L2323:
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.L2326
	cmpq	%rdi, %rdx
	jne	.L2324
	movq	$1, (%rax)
	jmp	.L2324
	.p2align 4,,10
	.p2align 3
.L2326:
	jmp	pclose
	.cfi_endproc
.LFE55:
	.size	qpclose, .-qpclose
	.section	.rodata.str1.1
.LC63:
	.string	"%s-%d"
	.text
	.p2align 4
	.globl	lfopen
	.type	lfopen, @function
lfopen:
.LFB57:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rdx
	movq	%rsi, %rbp
	xorl	%ecx, %ecx
	movl	$.LC63, %esi
	xorl	%eax, %eax
	subq	$80, %rsp
	.cfi_def_cfa_offset 96
	movq	%rsp, %rdi
	call	sprintf
	movq	%rbp, %rsi
	movq	%rsp, %rdi
	call	fopen
	addq	$80, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE57:
	.size	lfopen, .-lfopen
	.p2align 4
	.globl	matrix_new
	.type	matrix_new, @function
matrix_new:
.LFB58:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movslq	%edi, %rdi
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdx, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movq	%rdi, %rbp
	salq	$3, %rdi
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movl	%esi, %ebx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	call	malloc
	movl	%ebp, %edi
	imull	%ebx, %edi
	movq	%rax, %r13
	movslq	%edi, %rdi
	imulq	%r12, %rdi
	call	malloc
	testl	%ebp, %ebp
	jle	.L2330
	movslq	%ebx, %rcx
	movl	%ebp, %ebp
	movq	%r13, %rdx
	imulq	%r12, %rcx
	leaq	0(%r13,%rbp,8), %rsi
	.p2align 4,,10
	.p2align 3
.L2332:
	movq	%rax, (%rdx)
	addq	$8, %rdx
	addq	%rcx, %rax
	cmpq	%rsi, %rdx
	jne	.L2332
.L2330:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	movq	%r13, %rax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE58:
	.size	matrix_new, .-matrix_new
	.p2align 4
	.globl	matrix_inverse
	.type	matrix_inverse, @function
matrix_inverse:
.LFB59:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movslq	%esi, %rax
	leaq	15(,%rax,4), %rax
	shrq	$4, %rax
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	salq	$4, %rax
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movl	%esi, -60(%rbp)
	subq	%rax, %rsp
	movsd	%xmm0, -56(%rbp)
	movq	%rsp, %r13
	subq	%rax, %rsp
	movq	%rsp, %r14
	subq	%rax, %rsp
	testl	%esi, %esi
	jle	.L2360
	movl	%esi, %ebx
	movq	%rdi, %r12
	movl	$255, %esi
	movq	%rsp, %rdi
	leaq	0(,%rbx,4), %rdx
	leaq	0(,%rbx,8), %r15
	call	memset
	movsd	-56(%rbp), %xmm6
	xorl	%r11d, %r11d
	xorl	%r10d, %r10d
	movsd	.LC2(%rip), %xmm4
	movq	%rax, %rdi
	xorl	%r8d, %r8d
	pxor	%xmm7, %xmm7
	movq	.LC17(%rip), %xmm3
	movsd	.LC10(%rip), %xmm5
	.p2align 4,,10
	.p2align 3
.L2337:
	xorl	%edx, %edx
	movapd	%xmm7, %xmm1
	jmp	.L2342
	.p2align 4,,10
	.p2align 3
.L2338:
	addq	$1, %rdx
	cmpq	%rbx, %rdx
	je	.L2375
.L2342:
	movl	(%rdi,%rdx,4), %eax
	movl	%edx, %ecx
	testl	%eax, %eax
	je	.L2338
	xorl	%eax, %eax
	jmp	.L2341
	.p2align 4,,10
	.p2align 3
.L2339:
	addq	$1, %rax
	cmpq	%rbx, %rax
	je	.L2338
.L2341:
	cmpl	$-1, (%rdi,%rax,4)
	jne	.L2339
	movq	(%r12,%rdx,8), %rsi
	movsd	(%rsi,%rax,8), %xmm0
	andpd	%xmm3, %xmm0
	comisd	%xmm1, %xmm0
	jb	.L2339
	movapd	%xmm0, %xmm1
	movl	%ecx, %r10d
	movl	%eax, %r8d
	jmp	.L2339
	.p2align 4,,10
	.p2align 3
.L2375:
	movslq	%r8d, %rax
	addl	$1, (%rdi,%rax,4)
	movq	(%r12,%rax,8), %rcx
	leaq	0(,%rax,8), %r9
	cmpl	%r10d, %r8d
	jne	.L2343
.L2346:
	leaq	(%rcx,%r9), %rax
	movl	%r10d, (%r14,%r11,4)
	movsd	(%rax), %xmm0
	movl	%r8d, 0(%r13,%r11,4)
	movapd	%xmm0, %xmm1
	andpd	%xmm3, %xmm1
	comisd	%xmm1, %xmm6
	jnb	.L2376
	minsd	%xmm4, %xmm1
	movsd	%xmm5, (%rax)
	leaq	(%r15,%rcx), %rdx
	movq	%rcx, %rax
	movapd	%xmm1, %xmm4
	movapd	%xmm5, %xmm1
	divsd	%xmm0, %xmm1
	.p2align 4,,10
	.p2align 3
.L2349:
	movsd	(%rax), %xmm0
	addq	$8, %rax
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, -8(%rax)
	cmpq	%rax, %rdx
	jne	.L2349
	xorl	%esi, %esi
	.p2align 4,,10
	.p2align 3
.L2351:
	cmpl	%esi, %r8d
	je	.L2354
	movq	(%r12,%rsi,8), %rdx
	leaq	(%rdx,%r9), %rax
	movsd	(%rax), %xmm2
	movq	$0x000000000, (%rax)
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L2353:
	movsd	(%rcx,%rax,8), %xmm1
	movsd	(%rdx,%rax,8), %xmm0
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx,%rax,8)
	addq	$1, %rax
	cmpq	%rbx, %rax
	jne	.L2353
.L2354:
	addq	$1, %rsi
	cmpq	%rbx, %rsi
	jne	.L2351
	addq	$1, %r11
	cmpq	%r11, %rsi
	jne	.L2337
	movl	-60(%rbp), %eax
	subl	$1, %eax
	movslq	%eax, %r8
	movl	%eax, %eax
	leaq	8(%r12,%rax,8), %r9
	jmp	.L2357
.L2377:
	subq	$1, %r8
	testl	%r8d, %r8d
	js	.L2335
.L2357:
	movslq	(%r14,%r8,4), %rdx
	movslq	0(%r13,%r8,4), %rax
	cmpl	%eax, %edx
	je	.L2377
	leaq	0(,%rdx,8), %rdi
	leaq	0(,%rax,8), %rsi
	movq	%r12, %rdx
	.p2align 4,,10
	.p2align 3
.L2358:
	movq	(%rdx), %rax
	addq	$8, %rdx
	leaq	(%rax,%rdi), %rcx
	addq	%rsi, %rax
	movsd	(%rcx), %xmm0
	movsd	(%rax), %xmm1
	movsd	%xmm1, (%rcx)
	movsd	%xmm0, (%rax)
	cmpq	%rdx, %r9
	jne	.L2358
	subq	$1, %r8
	testl	%r8d, %r8d
	jns	.L2357
.L2335:
	leaq	-40(%rbp), %rsp
	movapd	%xmm4, %xmm0
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L2343:
	.cfi_restore_state
	movslq	%r10d, %rax
	movq	(%r12,%rax,8), %rdx
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L2345:
	movsd	(%rdx,%rax,8), %xmm0
	movsd	(%rcx,%rax,8), %xmm1
	movsd	%xmm1, (%rdx,%rax,8)
	movsd	%xmm0, (%rcx,%rax,8)
	addq	$1, %rax
	cmpq	%rbx, %rax
	jne	.L2345
	jmp	.L2346
.L2376:
	movapd	%xmm7, %xmm4
	jmp	.L2335
.L2360:
	movsd	.LC2(%rip), %xmm4
	jmp	.L2335
	.cfi_endproc
.LFE59:
	.size	matrix_inverse, .-matrix_inverse
	.p2align 4
	.type	parabola_fit_solve.isra.0, @function
parabola_fit_solve.isra.0:
.LFB589:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movl	$3, %esi
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rdi, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movq	48(%rdi), %rbp
	movq	8(%rbp), %r13
	movq	0(%rbp), %r12
	movq	%rbp, %rdi
	movq	16(%rbp), %rax
	movsd	0(%r13), %xmm0
	movsd	%xmm0, 8(%r12)
	movsd	8(%r13), %xmm0
	movsd	%xmm0, (%rax)
	movsd	%xmm0, 16(%r12)
	movsd	8(%rax), %xmm0
	movsd	%xmm0, 16(%r13)
	movsd	.LC64(%rip), %xmm0
	call	matrix_inverse
	ucomisd	.LC0(%rip), %xmm0
	jp	.L2382
	jne	.L2382
	movq	$0x000000000, 88(%rbx)
	movq	$0x000000000, 80(%rbx)
.L2381:
	movq	%r12, %rdi
	call	free
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movq	%rbp, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L2382:
	.cfi_restore_state
	movsd	(%r12), %xmm1
	movsd	8(%r12), %xmm4
	movsd	56(%rbx), %xmm0
	movsd	64(%rbx), %xmm3
	movsd	72(%rbx), %xmm2
	mulsd	%xmm3, %xmm4
	mulsd	%xmm0, %xmm1
	addsd	%xmm4, %xmm1
	movsd	16(%r12), %xmm4
	mulsd	%xmm2, %xmm4
	addsd	%xmm4, %xmm1
	movsd	%xmm1, 80(%rbx)
	mulsd	0(%r13), %xmm0
	mulsd	8(%r13), %xmm3
	mulsd	16(%r13), %xmm2
	addsd	%xmm3, %xmm0
	addsd	%xmm2, %xmm0
	movsd	%xmm0, 88(%rbx)
	jmp	.L2381
	.cfi_endproc
.LFE589:
	.size	parabola_fit_solve.isra.0, .-parabola_fit_solve.isra.0
	.p2align 4
	.globl	matrix_free
	.type	matrix_free, @function
matrix_free:
.LFB60:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	movq	(%rdi), %rdi
	call	free
	movq	%rbp, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	free
	.cfi_endproc
.LFE60:
	.size	matrix_free, .-matrix_free
	.p2align 4
	.globl	free_solver_func_add
	.type	free_solver_func_add, @function
free_solver_func_add:
.LFB61:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movq	free_solver_funcs(%rip), %rbx
	testq	%rbx, %rbx
	je	.L2391
	movq	16(%rbx), %rax
	movq	8(%rbx), %rsi
	movq	(%rbx), %rdi
	leaq	8(%rax), %rdx
	cmpq	%rsi, %rdx
	jnb	.L2392
	movq	%rbp, (%rdi,%rax)
	addq	$8, 16(%rbx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2391:
	.cfi_restore_state
	movl	$24, %edi
	call	malloc
	xorl	%edi, %edi
	movl	$4096, %esi
	movq	$0, (%rax)
	movq	%rax, %rbx
	movq	$0, 16(%rax)
	movq	$0, 8(%rax)
	movq	%rax, free_solver_funcs(%rip)
	movl	$4096, %eax
.L2388:
	movq	%rax, 8(%rbx)
	call	realloc
	movq	%rax, (%rbx)
	movq	%rax, %rdi
	movq	16(%rbx), %rax
	movq	%rbp, (%rdi,%rax)
	addq	$8, 16(%rbx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2392:
	.cfi_restore_state
	addq	$4096, %rsi
	movq	%rsi, %rax
	jmp	.L2388
	.cfi_endproc
.LFE61:
	.size	free_solver_func_add, .-free_solver_func_add
	.p2align 4
	.type	cleanup, @function
cleanup:
.LFB276:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	display_defaults(%rip), %rbp
	testq	%rbp, %rbp
	je	.L2396
.L2394:
	movq	%rbp, %rdi
	call	free
	movl	$2, %edi
	call	malloc
	movl	$64, %edx
	movw	%dx, (%rax)
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	movq	%rax, display_defaults(%rip)
	xorl	%eax, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L2396:
	.cfi_restore_state
	movl	$free_display_defaults, %edi
	call	free_solver_func_add
	jmp	.L2394
	.cfi_endproc
.LFE276:
	.size	cleanup, .-cleanup
	.section	.rodata.str1.1
.LC65:
	.string	"@"
	.text
	.p2align 4
	.globl	display
	.type	display, @function
display:
.LFB63:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	display_defaults(%rip), %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	%rsi, %rbx
	testq	%r12, %r12
	je	.L2403
	testb	%sil, %sil
	jne	.L2400
.L2401:
	movq	%r12, %rdi
	call	strlen
	movq	%rbp, %rdi
	movq	%rax, %rbx
	call	strlen
	movq	%r12, %rdi
	leaq	1(%rbx,%rax), %rsi
	call	realloc
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movq	%rbp, %rsi
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	%rax, %rdi
	popq	%r12
	.cfi_def_cfa_offset 8
	movq	%rax, display_defaults(%rip)
	jmp	strcat
	.p2align 4,,10
	.p2align 3
.L2400:
	.cfi_restore_state
	movq	%r12, %rdi
	call	free
	movq	%rbp, %rdi
	call	strlen
	leaq	2(%rax), %rdi
	movq	%rax, %rbx
	call	malloc
	leaq	1(%rbx), %rdx
	movq	%rbp, %rsi
	movb	$64, (%rax)
	leaq	1(%rax), %rdi
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	movq	%rax, display_defaults(%rip)
	jmp	memcpy
	.p2align 4,,10
	.p2align 3
.L2403:
	.cfi_restore_state
	movl	$free_display_defaults, %edi
	call	free_solver_func_add
	testb	%bl, %bl
	jne	.L2400
	movl	$.LC65, %edi
	call	strdup
	movq	%rax, %r12
	jmp	.L2401
	.cfi_endproc
.LFE63:
	.size	display, .-display
	.section	.rodata.str1.8
	.align 8
.LC66:
	.string	"squares (color = 'u.x', spread = -1);"
	.text
	.p2align 4
	.type	default_display, @function
default_display:
.LFB301:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$.LC66, %edi
	xorl	%esi, %esi
	call	display
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE301:
	.size	default_display, .-default_display
	.section	.rodata.str1.1
.LC67:
	.string	"box();"
	.text
	.p2align 4
	.type	defaults, @function
defaults:
.LFB274:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$.LC67, %edi
	xorl	%esi, %esi
	call	display
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE274:
	.size	defaults, .-defaults
	.section	.rodata.str1.1
.LC68:
	.string	"poolsize % 8 == 0"
	.section	.rodata.str1.8
	.align 8
.LC69:
	.string	"/root/mnt/basilisk/src/grid/mempool.h"
	.section	.rodata.str1.1
.LC70:
	.string	"size >= sizeof(FreeBlock)"
	.text
	.p2align 4
	.globl	mempool_new
	.type	mempool_new, @function
mempool_new:
.LFB67:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	testb	$7, %dil
	jne	.L2412
	movq	%rsi, %rbp
	cmpq	$7, %rsi
	jbe	.L2413
	leaq	8(%rdi), %rbx
	movl	$48, %esi
	movl	$1, %edi
	call	calloc
	movl	$1048576, %edx
	cmpq	%rdx, %rbx
	movq	%rbp, 16(%rax)
	cmovbe	%rbx, %rdx
	movq	%rdx, 24(%rax)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
.L2412:
	.cfi_restore_state
	movl	$.LC68, %edx
	movl	$26, %esi
	movl	$.LC69, %edi
	call	qassert
.L2413:
	movl	$.LC70, %edx
	movl	$27, %esi
	movl	$.LC69, %edi
	call	qassert
	.cfi_endproc
.LFE67:
	.size	mempool_new, .-mempool_new
	.p2align 4
	.type	update_depth, @function
update_depth:
.LFB91:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%edi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$8, %rsp
	.cfi_def_cfa_offset 64
	movq	grid(%rip), %rbx
	movl	16(%rbx), %esi
	movq	24(%rbx), %rax
	addl	%edi, %esi
	leaq	-8(%rax), %rdi
	movl	%esi, 16(%rbx)
	addl	$2, %esi
	movq	%rdi, 24(%rbx)
	movslq	%esi, %rsi
	salq	$3, %rsi
	call	realloc
	addq	$8, %rax
	movq	%rax, 24(%rbx)
	cmpl	$1, %ebp
	je	.L2420
.L2415:
	movq	96(%rbx), %rdi
	movl	%ebp, %esi
	call	cache_level_resize
	movq	104(%rbx), %rdi
	movl	%ebp, %esi
	movq	%rax, 96(%rbx)
	call	cache_level_resize
	movq	112(%rbx), %rdi
	movl	%ebp, %esi
	movq	%rax, 104(%rbx)
	call	cache_level_resize
	movq	120(%rbx), %rdi
	movl	%ebp, %esi
	movq	%rax, 112(%rbx)
	call	cache_level_resize
	movq	%rax, 120(%rbx)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2420:
	.cfi_restore_state
	movq	grid(%rip), %rdx
	movl	$32, %edi
	movslq	16(%rdx), %r15
	leaq	(%rax,%r15,8), %r13
	call	malloc
	movl	%ebp, %edx
	movl	%r15d, %ecx
	sall	%cl, %edx
	movq	%rax, %r12
	addl	$4, %edx
	movl	%edx, 24(%rax)
	xorl	%eax, %eax
	testl	%r15d, %r15d
	jne	.L2421
.L2416:
	movl	$24, %esi
	movl	$1, %edi
	movq	%rax, 8(%r12)
	call	calloc
	movq	$0, 16(%r12)
	movq	%rax, (%r12)
	movq	%r12, 0(%r13)
	jmp	.L2415
	.p2align 4,,10
	.p2align 3
.L2421:
	movslq	%edx, %rdx
	movq	datasize(%rip), %rax
	imulq	%rdx, %rdx
	addq	$8, %rax
	leaq	0(,%rax,4), %rsi
	imulq	%rax, %rdx
	movq	%rdx, %rdi
	call	mempool_new
	jmp	.L2416
	.cfi_endproc
.LFE91:
	.size	update_depth, .-update_depth
	.p2align 4
	.globl	mempool_destroy
	.type	mempool_destroy, @function
mempool_destroy:
.LFB68:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movq	32(%rdi), %rbx
	testq	%rbx, %rbx
	je	.L2423
	.p2align 4,,10
	.p2align 3
.L2424:
	movq	%rbx, %rdi
	movq	(%rbx), %rbx
	call	free
	testq	%rbx, %rbx
	jne	.L2424
.L2423:
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%rbp, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	free
	.cfi_endproc
.LFE68:
	.size	mempool_destroy, .-mempool_destroy
	.p2align 4
	.globl	mempool_alloc
	.type	mempool_alloc, @function
mempool_alloc:
.LFB69:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	(%rdi), %rax
	movq	%rdi, %rbx
	testq	%rax, %rax
	je	.L2431
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.L2432
	movq	%rdx, (%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2431:
	.cfi_restore_state
	movq	24(%rdi), %rdi
	call	malloc
	movq	$0, (%rax)
	movq	%rax, %rdx
	movq	40(%rbx), %rax
	testq	%rax, %rax
	je	.L2434
	movq	%rdx, (%rax)
.L2435:
	leaq	8(%rdx), %rax
	movq	%rdx, 40(%rbx)
	movq	%rax, 8(%rbx)
	movq	$0, 8(%rdx)
.L2432:
	movq	16(%rbx), %rcx
	movq	8(%rbx), %rdx
	movq	24(%rbx), %rsi
	addq	40(%rbx), %rsi
	addq	%rcx, %rdx
	addq	%rdx, %rcx
	movq	%rdx, 8(%rbx)
	cmpq	%rsi, %rcx
	jbe	.L2441
	xorl	%edx, %edx
	movq	%rdx, (%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2441:
	.cfi_restore_state
	movq	$0, (%rdx)
	movq	%rdx, (%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2434:
	.cfi_restore_state
	movq	%rdx, 32(%rbx)
	jmp	.L2435
	.cfi_endproc
.LFE69:
	.size	mempool_alloc, .-mempool_alloc
	.p2align 4
	.type	alloc_children, @function
alloc_children:
.LFB95:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rax, %rcx
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%esi, %r12
	leal	-2(%rcx,%rcx), %r14d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	leal	-2(%rdi,%rdi), %ebx
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	%edi, 40(%rsp)
	movl	%eax, 44(%rsp)
	movq	grid(%rip), %rax
	movq	%rdi, 64(%rsp)
	leaq	1(%r12), %rdi
	leaq	0(,%rdi,8), %rdx
	movl	%esi, 72(%rsp)
	movq	%rdi, (%rsp)
	movq	%rdx, 32(%rsp)
	cmpl	%esi, 16(%rax)
	je	.L2465
	movq	24(%rax), %rax
	movq	(%rsp), %rsi
	movq	(%rax,%rsi,8), %r13
	jg	.L2455
.L2463:
	movslq	%ebx, %rax
	movq	%rax, 48(%rsp)
	movslq	%r14d, %rax
	movq	%rax, 56(%rsp)
.L2444:
	addq	$1, 16(%r13)
	movq	8(%r13), %rbp
	movq	datasize(%rip), %rax
	movq	%rbp, %rdi
	leaq	8(%rax), %r12
	movq	%r12, 16(%rsp)
	call	mempool_alloc
	movq	16(%rbp), %rdx
	xorl	%esi, %esi
	leal	1(%r14), %ebp
	movq	%rax, %rdi
	movq	%rax, %r15
	call	memset
	leal	2(%rbx), %eax
	movl	%eax, 12(%rsp)
	leaq	(%r12,%r12), %rax
	movl	%ebx, %r12d
	movq	%rax, 24(%rsp)
	movl	%r14d, %eax
	movq	%r13, %r14
	movq	%r15, %r13
	movl	%eax, %r15d
.L2445:
	movl	24(%r14), %ecx
	movq	(%r14), %rdi
	movq	%r13, %r8
	movl	%r12d, %esi
	movl	$mem_assign, %r9d
	movl	%r15d, %edx
	call	periodic_function
	movq	16(%rsp), %rax
	movl	24(%r14), %ecx
	movl	%ebp, %edx
	movq	(%r14), %rdi
	movl	%r12d, %esi
	movl	$mem_assign, %r9d
	addl	$1, %r12d
	leaq	0(%r13,%rax), %r8
	call	periodic_function
	addq	24(%rsp), %r13
	cmpl	%r12d, 12(%rsp)
	jne	.L2445
	movslq	40(%rsp), %rdx
	movq	56(%rsp), %rdi
	addl	$1, %ebx
	movslq	%ebp, %rbp
	movq	grid(%rip), %rax
	movslq	%ebx, %rbx
	movq	24(%rax), %rcx
	movq	32(%rsp), %rax
	movq	-8(%rcx,%rax), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rsi
	movslq	44(%rsp), %rax
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rsp), %rsi
	movq	(%rdx,%rax,8), %rax
	movq	(%rcx,%rsi,8), %rdx
	movq	48(%rsp), %rsi
	movq	(%rdx), %rdx
	movl	4(%rax), %eax
	movq	16(%rdx), %rdx
	movq	(%rdx,%rsi,8), %rcx
	movq	(%rdx,%rbx,8), %rdx
	movq	(%rcx,%rdi,8), %rsi
	movq	(%rcx,%rbp,8), %rcx
	movl	%eax, 4(%rsi)
	movl	%eax, 4(%rcx)
	movq	(%rdx,%rdi,8), %rcx
	movq	(%rdx,%rbp,8), %rdx
	movl	%eax, 4(%rcx)
	movl	%eax, 4(%rdx)
.L2442:
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2455:
	.cfi_restore_state
	movq	0(%r13), %rax
	cmpl	%ebx, (%rax)
	jg	.L2463
	cmpl	%ebx, 4(%rax)
	jle	.L2463
	movq	16(%rax), %rcx
	movslq	%ebx, %rsi
	movq	%rsi, 48(%rsp)
	leaq	0(,%rsi,8), %rdx
	movq	(%rcx,%rsi,8), %rcx
	testq	%rcx, %rcx
	je	.L2464
	addq	8(%rax), %rdx
	cmpl	%r14d, (%rdx)
	jg	.L2464
	movslq	%r14d, %rax
	cmpl	%r14d, 4(%rdx)
	movq	%rax, 56(%rsp)
	jle	.L2444
	cmpq	$0, (%rcx,%rax,8)
	jne	.L2442
	jmp	.L2444
	.p2align 4,,10
	.p2align 3
.L2465:
	movl	$1, %edi
	call	update_depth
	movq	grid(%rip), %rax
	movq	(%rsp), %rsi
	movq	24(%rax), %rax
	movq	(%rax,%rsi,8), %r13
	movslq	%ebx, %rax
	movq	%rax, 48(%rsp)
	movslq	%r14d, %rax
	movq	%rax, 56(%rsp)
	jmp	.L2444
	.p2align 4,,10
	.p2align 3
.L2464:
	movslq	%r14d, %rax
	movq	%rax, 56(%rsp)
	jmp	.L2444
	.cfi_endproc
.LFE95:
	.size	alloc_children, .-alloc_children
	.p2align 4
	.globl	mempool_alloc0
	.type	mempool_alloc0, @function
mempool_alloc0:
.LFB70:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	(%rdi), %r8
	movq	%rdi, %rbx
	testq	%r8, %r8
	je	.L2467
	movq	(%r8), %rax
	movq	16(%rdi), %rdx
	testq	%rax, %rax
	je	.L2468
	movq	%rax, (%rbx)
	xorl	%esi, %esi
	movq	%r8, %rdi
	call	memset
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2467:
	.cfi_restore_state
	movq	24(%rdi), %rdi
	call	malloc
	movq	40(%rbx), %rdx
	movq	$0, (%rax)
	testq	%rdx, %rdx
	je	.L2470
	movq	%rax, (%rdx)
.L2471:
	leaq	8(%rax), %r8
	movq	%rax, 40(%rbx)
	movq	16(%rbx), %rdx
	movq	%r8, 8(%rbx)
	movq	$0, 8(%rax)
.L2468:
	movq	8(%rbx), %rax
	movq	24(%rbx), %rcx
	addq	40(%rbx), %rcx
	addq	%rdx, %rax
	leaq	(%rax,%rdx), %rsi
	movq	%rax, 8(%rbx)
	cmpq	%rcx, %rsi
	jbe	.L2477
	xorl	%eax, %eax
	xorl	%esi, %esi
	movq	%r8, %rdi
	movq	%rax, (%rbx)
	call	memset
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2477:
	.cfi_restore_state
	movq	$0, (%rax)
	xorl	%esi, %esi
	movq	%r8, %rdi
	movq	%rax, (%rbx)
	call	memset
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2470:
	.cfi_restore_state
	movq	%rax, 32(%rbx)
	jmp	.L2471
	.cfi_endproc
.LFE70:
	.size	mempool_alloc0, .-mempool_alloc0
	.p2align 4
	.globl	mempool_free
	.type	mempool_free, @function
mempool_free:
.LFB71:
	.cfi_startproc
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	%rsi, (%rdi)
	ret
	.cfi_endproc
.LFE71:
	.size	mempool_free, .-mempool_free
	.p2align 4
	.globl	memrange_alloc
	.type	memrange_alloc, @function
memrange_alloc:
.LFB72:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movq	%rdi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	%edx, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movq	%rsi, %rbx
	movl	(%rdi), %eax
	movl	4(%rdi), %esi
	cmpl	%esi, %eax
	je	.L2504
	cmpl	%edx, %esi
	jg	.L2484
	movq	(%rbx), %r14
	leal	1(%rdx), %r12d
	testq	%r14, %r14
	jne	.L2486
	jmp	.L2485
	.p2align 4,,10
	.p2align 3
.L2505:
	movl	0(%r13), %eax
.L2486:
	movl	8(%rbx), %edi
	movl	%r12d, %esi
	addq	$16, %rbx
	subl	%eax, %esi
	imull	%edi, %esi
	imull	%eax, %edi
	movslq	%esi, %rsi
	movslq	%edi, %rdi
	addq	(%r14), %rdi
	call	realloc
	movl	-8(%rbx), %edi
	xorl	%esi, %esi
	movq	%rax, (%r14)
	movl	0(%r13), %eax
	movq	-16(%rbx), %rdx
	imull	%edi, %eax
	cltq
	subq	%rax, (%rdx)
	movl	4(%r13), %eax
	movl	%ebp, %edx
	movq	-16(%rbx), %rcx
	subl	%eax, %edx
	addl	$1, %edx
	imull	%edi, %edx
	imull	%eax, %edi
	movslq	%edx, %rdx
	movslq	%edi, %rdi
	addq	(%rcx), %rdi
	call	memset
	movq	(%rbx), %r14
	testq	%r14, %r14
	jne	.L2505
.L2485:
	movl	%r12d, 4(%r13)
.L2479:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2484:
	.cfi_restore_state
	cmpl	%edx, %eax
	jle	.L2479
	movq	(%rbx), %r12
	testq	%r12, %r12
	jne	.L2488
	jmp	.L2487
	.p2align 4,,10
	.p2align 3
.L2506:
	movl	4(%r13), %esi
	movl	0(%r13), %eax
.L2488:
	movl	8(%rbx), %edi
	subl	%ebp, %esi
	addq	$16, %rbx
	imull	%edi, %esi
	imull	%eax, %edi
	movslq	%esi, %rsi
	movslq	%edi, %rdi
	addq	(%r12), %rdi
	call	realloc
	movl	0(%r13), %edi
	movq	%rax, (%r12)
	movq	-16(%rbx), %rdx
	movl	-8(%rbx), %eax
	movq	(%rdx), %rsi
	movl	4(%r13), %edx
	subl	%edi, %edx
	subl	%ebp, %edi
	imull	%eax, %edi
	imull	%eax, %edx
	movslq	%edi, %rdi
	addq	%rsi, %rdi
	movslq	%edx, %rdx
	call	memmove
	movl	0(%r13), %edx
	movq	-16(%rbx), %rax
	xorl	%esi, %esi
	subl	%ebp, %edx
	imull	-8(%rbx), %edx
	movq	(%rax), %rdi
	movslq	%edx, %rdx
	call	memset
	movl	-8(%rbx), %eax
	movq	-16(%rbx), %rdx
	imull	%ebp, %eax
	cltq
	subq	%rax, (%rdx)
	movq	(%rbx), %r12
	testq	%r12, %r12
	jne	.L2506
.L2487:
	movl	%ebp, 0(%r13)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2504:
	.cfi_restore_state
	movl	%edx, 0(%r13)
	movq	(%rbx), %r13
	leal	1(%rdx), %eax
	movl	%eax, 4(%rdi)
	testq	%r13, %r13
	je	.L2479
	.p2align 4,,10
	.p2align 3
.L2481:
	movslq	8(%rbx), %rsi
	movl	$1, %edi
	addq	$16, %rbx
	movq	%rsi, %r12
	call	calloc
	imull	%ebp, %r12d
	movq	%rax, 0(%r13)
	movq	-16(%rbx), %rax
	movslq	%r12d, %r12
	subq	%r12, (%rax)
	movq	(%rbx), %r13
	testq	%r13, %r13
	jne	.L2481
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE72:
	.size	memrange_alloc, .-memrange_alloc
	.p2align 4
	.globl	mem_assign
	.type	mem_assign, @function
mem_assign:
.LFB76:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	leaq	16(%rdi), %rax
	pxor	%xmm0, %xmm0
	movq	%r8, %r13
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movslq	%edx, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movslq	%esi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movl	%ebp, %edx
	movq	%rdi, %rbx
	subq	$88, %rsp
	.cfi_def_cfa_offset 128
	movq	%rax, 32(%rsp)
	leaq	32(%rsp), %rsi
	leaq	8(%rdi), %rax
	movups	%xmm0, 40(%rsp)
	movups	%xmm0, 56(%rsp)
	movq	%rax, 48(%rsp)
	movq	$0, 72(%rsp)
	movl	$8, 40(%rsp)
	movl	$8, 56(%rsp)
	call	memrange_alloc
	movq	16(%rbx), %rax
	pxor	%xmm0, %xmm0
	movl	%r12d, %edx
	leaq	0(,%rbp,8), %rdi
	movq	%rsp, %rsi
	movups	%xmm0, 8(%rsp)
	addq	%rdi, %rax
	addq	8(%rbx), %rdi
	movq	$0, 24(%rsp)
	movq	%rax, (%rsp)
	movl	$8, 8(%rsp)
	call	memrange_alloc
	movq	16(%rbx), %rax
	movq	(%rax,%rbp,8), %rax
	movq	%r13, (%rax,%r12,8)
	addq	$88, %rsp
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE76:
	.size	mem_assign, .-mem_assign
	.section	.rodata.str1.1
.LC71:
	.string	"i > r->start && i < r->end"
	.section	.rodata.str1.8
	.align 8
.LC72:
	.string	"/root/mnt/basilisk/src/grid/memindex/range.h"
	.text
	.p2align 4
	.globl	memrange_free
	.type	memrange_free, @function
memrange_free:
.LFB73:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movl	%edx, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movq	%rsi, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movl	4(%rdi), %edx
	movl	(%rdi), %ecx
	leal	-1(%rdx), %esi
	cmpl	%ebp, %ecx
	je	.L2554
	cmpl	%esi, %ebp
	je	.L2555
	cmpl	%edx, %ebp
	jge	.L2529
	cmpl	%ebp, %ecx
	jl	.L2553
	jmp	.L2529
	.p2align 4,,10
	.p2align 3
.L2530:
	movslq	8(%rbx), %rdx
	xorl	%esi, %esi
	addq	$16, %rbx
	movq	%rdx, %rdi
	imull	%ebp, %edi
	movslq	%edi, %rdi
	addq	(%rax), %rdi
	call	memset
.L2553:
	movq	(%rbx), %rax
	testq	%rax, %rax
	jne	.L2530
.L2527:
	xorl	%eax, %eax
.L2509:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2555:
	.cfi_restore_state
	subl	$2, %edx
	movq	(%rbx), %r13
	cmpl	%edx, %ecx
	jg	.L2522
	movl	8(%rbx), %eax
	movq	0(%r13), %r8
	movl	%eax, %esi
	movl	%eax, %r9d
	imull	%edx, %esi
	negl	%r9d
	movslq	%r9d, %r9
	movslq	%esi, %rsi
	addq	%r8, %rsi
	jmp	.L2523
	.p2align 4,,10
	.p2align 3
.L2525:
	leal	-1(%rdx), %edi
	addq	%r9, %rsi
	cmpl	%edi, %ecx
	jg	.L2524
	movl	%edi, %edx
.L2523:
	cmpq	$0, (%rsi)
	je	.L2525
	addl	$1, %edx
.L2524:
	movl	%edx, 4(%r12)
	jmp	.L2528
	.p2align 4,,10
	.p2align 3
.L2556:
	movl	8(%rbx), %eax
	movl	4(%r12), %edx
	movq	0(%r13), %r8
.L2528:
	subl	%ecx, %edx
	addq	$16, %rbx
	imull	%eax, %edx
	imull	%ecx, %eax
	movslq	%edx, %rsi
	movslq	%eax, %rdi
	addq	%r8, %rdi
	call	realloc
	movl	(%r12), %ecx
	movq	%rax, 0(%r13)
	movl	-8(%rbx), %eax
	movq	-16(%rbx), %rdx
	imull	%ecx, %eax
	cltq
	subq	%rax, (%rdx)
	movq	(%rbx), %r13
	testq	%r13, %r13
	jne	.L2556
	jmp	.L2527
	.p2align 4,,10
	.p2align 3
.L2554:
	movq	(%rbx), %rax
	cmpl	%esi, %ebp
	je	.L2557
	leal	1(%rbp), %r13d
	cmpl	%edx, %r13d
	jge	.L2515
	movslq	8(%rbx), %rsi
	movq	(%rax), %rax
	movl	%esi, %ecx
	movq	%rsi, %rdi
	imull	%r13d, %ecx
	movslq	%ecx, %rcx
	addq	%rax, %rcx
	jmp	.L2516
	.p2align 4,,10
	.p2align 3
.L2518:
	addl	$1, %r13d
	addq	%rsi, %rcx
	cmpl	%edx, %r13d
	je	.L2520
.L2516:
	cmpq	$0, (%rcx)
	je	.L2518
	jmp	.L2520
	.p2align 4,,10
	.p2align 3
.L2558:
	movl	8(%rbx), %edi
	movl	4(%r12), %edx
	movq	(%rax), %rax
	movl	(%r12), %ebp
.L2520:
	subl	%r13d, %edx
	movl	%r13d, %esi
	addq	$16, %rbx
	imull	%edi, %edx
	imull	%edi, %esi
	imull	%ebp, %edi
	movslq	%edx, %rdx
	movslq	%esi, %rsi
	movslq	%edi, %rdi
	addq	%rax, %rsi
	addq	%rax, %rdi
	call	memmove
	movl	4(%r12), %esi
	movl	-8(%rbx), %edi
	movq	-16(%rbx), %rbp
	subl	%r13d, %esi
	imull	%edi, %esi
	imull	(%r12), %edi
	movslq	%esi, %rsi
	movslq	%edi, %rdi
	addq	0(%rbp), %rdi
	call	realloc
	movq	%rax, 0(%rbp)
	movl	-8(%rbx), %eax
	movq	-16(%rbx), %rdx
	imull	%r13d, %eax
	cltq
	subq	%rax, (%rdx)
	movq	(%rbx), %rax
	testq	%rax, %rax
	jne	.L2558
.L2519:
	movl	%r13d, (%r12)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2557:
	.cfi_restore_state
	testq	%rax, %rax
	jne	.L2513
	jmp	.L2512
	.p2align 4,,10
	.p2align 3
.L2559:
	movl	(%r12), %ebp
.L2513:
	imull	8(%rbx), %ebp
	addq	$16, %rbx
	movslq	%ebp, %rdi
	addq	(%rax), %rdi
	call	free
	movq	-16(%rbx), %rax
	movq	$0, (%rax)
	movq	(%rbx), %rax
	testq	%rax, %rax
	jne	.L2559
.L2512:
	movq	$0, (%r12)
	movl	$1, %eax
	jmp	.L2509
.L2515:
	testq	%rax, %rax
	je	.L2519
	movq	(%rax), %rax
	movl	8(%rbx), %edi
	jmp	.L2520
	.p2align 4,,10
	.p2align 3
.L2522:
	movl	%ebp, 4(%rdi)
	testq	%r13, %r13
	je	.L2527
	movq	0(%r13), %r8
	movl	8(%rbx), %eax
	movl	%ebp, %edx
	jmp	.L2528
.L2529:
	movl	$.LC71, %edx
	movl	$108, %esi
	movl	$.LC72, %edi
	call	qassert
	.cfi_endproc
.LFE73:
	.size	memrange_free, .-memrange_free
	.p2align 4
	.globl	mem_free
	.type	mem_free, @function
mem_free:
.LFB77:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pxor	%xmm0, %xmm0
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	movslq	%esi, %rdi
	movq	%rdi, %r12
	salq	$3, %rdi
	subq	$88, %rsp
	.cfi_def_cfa_offset 112
	movq	16(%rbp), %rax
	movq	%rsp, %rsi
	movups	%xmm0, 8(%rsp)
	addq	%rdi, %rax
	addq	8(%rbp), %rdi
	movq	$0, 24(%rsp)
	movq	%rax, (%rsp)
	movl	$8, 8(%rsp)
	call	memrange_free
	testb	%al, %al
	jne	.L2566
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2566:
	.cfi_restore_state
	leaq	16(%rbp), %rax
	pxor	%xmm0, %xmm0
	movl	%r12d, %edx
	movq	%rbp, %rdi
	movq	%rax, 32(%rsp)
	leaq	32(%rsp), %rsi
	leaq	8(%rbp), %rax
	movups	%xmm0, 40(%rsp)
	movups	%xmm0, 56(%rsp)
	movq	$0, 72(%rsp)
	movl	$8, 40(%rsp)
	movq	%rax, 48(%rsp)
	movl	$8, 56(%rsp)
	call	memrange_free
	addq	$88, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE77:
	.size	mem_free, .-mem_free
	.p2align 4
	.globl	mem_new
	.type	mem_new, @function
mem_new:
.LFB74:
	.cfi_startproc
	movl	$24, %esi
	movl	$1, %edi
	jmp	calloc
	.cfi_endproc
.LFE74:
	.size	mem_new, .-mem_new
	.p2align 4
	.globl	mem_destroy
	.type	mem_destroy, @function
mem_destroy:
.LFB75:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movl	(%rdi), %ebp
	movq	16(%rdi), %rdx
	cmpl	4(%rdi), %ebp
	jge	.L2569
	movslq	%ebp, %rbx
	salq	$3, %rbx
	.p2align 4,,10
	.p2align 3
.L2571:
	movq	(%rdx,%rbx), %rax
	testq	%rax, %rax
	je	.L2570
	movq	8(%r12), %rdx
	movslq	(%rdx,%rbx), %rdx
	leaq	(%rax,%rdx,8), %rdi
	call	free
	movq	16(%r12), %rdx
.L2570:
	addl	$1, %ebp
	addq	$8, %rbx
	cmpl	%ebp, 4(%r12)
	jg	.L2571
.L2569:
	testq	%rdx, %rdx
	je	.L2573
	movq	8(%r12), %rax
	movslq	(%r12), %rdx
	leaq	(%rax,%rdx,8), %rdi
	call	free
	movq	16(%r12), %rax
	testq	%rax, %rax
	je	.L2573
	movslq	(%r12), %rdx
	leaq	(%rax,%rdx,8), %rdi
	call	free
.L2573:
	popq	%rbx
	.cfi_def_cfa_offset 24
	movq	%r12, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	free
	.cfi_endproc
.LFE75:
	.size	mem_destroy, .-mem_destroy
	.p2align 4
	.type	free_grid.part.0, @function
free_grid.part.0:
.LFB452:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	xorl	%eax, %eax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$8, %rsp
	.cfi_def_cfa_offset 64
	call	free_boundaries
	movq	grid(%rip), %r12
	movq	32(%r12), %rdi
	call	free
	movq	48(%r12), %rdi
	call	free
	movq	64(%r12), %rdi
	call	free
	movq	80(%r12), %rdi
	call	free
	movq	24(%r12), %rdi
	movl	Period(%rip), %esi
	movq	(%rdi), %r15
	leal	(%rsi,%rsi), %ecx
	movq	(%r15), %rdx
	movl	24(%r15), %r8d
	movl	(%rdx), %r13d
	movl	%r8d, %eax
	cmpl	%r13d, %ecx
	cmovge	%ecx, %r13d
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %r13d
	jge	.L2584
	movslq	%r13d, %r14
	salq	$3, %r14
	jmp	.L2588
	.p2align 4,,10
	.p2align 3
.L2585:
	leal	(%rsi,%rsi), %ecx
	movl	%r8d, %eax
	addl	$1, %r13d
	addq	$8, %r14
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%r13d, %eax
	jle	.L2627
.L2588:
	movq	16(%rdx), %rax
	cmpq	$0, (%rax,%r14)
	je	.L2585
	movq	8(%rdx), %rdi
	movl	Period+4(%rip), %r9d
	movl	%r8d, %eax
	addq	%r14, %rdi
	leal	(%r9,%r9), %ecx
	movl	(%rdi), %ebx
	cmpl	%ebx, %ecx
	cmovge	%ecx, %ebx
	subl	%ecx, %eax
	movl	4(%rdi), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebx
	jge	.L2585
	movslq	%ebx, %rbp
	salq	$3, %rbp
	.p2align 4,,10
	.p2align 3
.L2587:
	movq	16(%rdx), %rax
	movq	(%rax,%r14), %rax
	movq	(%rax,%rbp), %rdi
	testq	%rdi, %rdi
	je	.L2586
	call	free
	movq	(%r15), %rdx
	movl	24(%r15), %r8d
	movl	Period+4(%rip), %r9d
.L2586:
	movq	8(%rdx), %rcx
	leal	(%r9,%r9), %esi
	movl	%r8d, %eax
	addl	$1, %ebx
	subl	%esi, %eax
	addq	$8, %rbp
	movl	4(%rcx,%r14), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%ebx, %eax
	jg	.L2587
	movl	Period(%rip), %esi
	jmp	.L2585
	.p2align 4,,10
	.p2align 3
.L2627:
	movq	24(%r12), %rdi
.L2584:
	movq	grid(%rip), %rax
	movl	16(%rax), %r8d
	testl	%r8d, %r8d
	js	.L2589
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L2594:
	movq	(%rdi,%r13,8), %rbp
	movq	8(%rbp), %r14
	testq	%r14, %r14
	je	.L2590
	movq	32(%r14), %rbx
	testq	%rbx, %rbx
	je	.L2592
	.p2align 4,,10
	.p2align 3
.L2591:
	movq	%rbx, %rdi
	movq	(%rbx), %rbx
	call	free
	testq	%rbx, %rbx
	jne	.L2591
.L2592:
	movq	%r14, %rdi
	call	free
.L2590:
	movl	24(%rbp), %esi
	movq	0(%rbp), %rdi
	addq	$1, %r13
	call	mem_destroy
	movq	%rbp, %rdi
	call	free
	movq	grid(%rip), %rax
	movq	24(%r12), %rdi
	cmpl	%r13d, 16(%rax)
	jge	.L2594
.L2589:
	subq	$8, %rdi
	xorl	%ebx, %ebx
	call	free
	movq	grid(%rip), %rax
	movq	96(%r12), %r13
	movl	16(%rax), %esi
	movq	%r13, %rbp
	testl	%esi, %esi
	js	.L2599
	.p2align 4,,10
	.p2align 3
.L2598:
	movq	0(%rbp), %rdi
	addl	$1, %ebx
	addq	$16, %rbp
	call	free
	movq	grid(%rip), %rax
	cmpl	16(%rax), %ebx
	jle	.L2598
.L2599:
	movq	%r13, %rdi
	xorl	%ebx, %ebx
	call	free
	movq	grid(%rip), %rax
	movq	104(%r12), %r13
	movl	16(%rax), %ecx
	movq	%r13, %rbp
	testl	%ecx, %ecx
	js	.L2597
	.p2align 4,,10
	.p2align 3
.L2602:
	movq	0(%rbp), %rdi
	addl	$1, %ebx
	addq	$16, %rbp
	call	free
	movq	grid(%rip), %rax
	cmpl	16(%rax), %ebx
	jle	.L2602
.L2597:
	movq	%r13, %rdi
	xorl	%ebx, %ebx
	call	free
	movq	grid(%rip), %rax
	movq	112(%r12), %r13
	movl	16(%rax), %edx
	movq	%r13, %rbp
	testl	%edx, %edx
	js	.L2601
	.p2align 4,,10
	.p2align 3
.L2605:
	movq	0(%rbp), %rdi
	addl	$1, %ebx
	addq	$16, %rbp
	call	free
	movq	grid(%rip), %rax
	cmpl	16(%rax), %ebx
	jle	.L2605
.L2601:
	movq	%r13, %rdi
	xorl	%ebx, %ebx
	call	free
	movq	grid(%rip), %rax
	movq	120(%r12), %r13
	movl	16(%rax), %eax
	movq	%r13, %rbp
	testl	%eax, %eax
	js	.L2604
	.p2align 4,,10
	.p2align 3
.L2606:
	movq	0(%rbp), %rdi
	addl	$1, %ebx
	addq	$16, %rbp
	call	free
	movq	grid(%rip), %rax
	cmpl	16(%rax), %ebx
	jle	.L2606
.L2604:
	movq	%r13, %rdi
	call	free
	movq	%r12, %rdi
	call	free
	movq	$0, grid(%rip)
	addq	$8, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE452:
	.size	free_grid.part.0, .-free_grid.part.0
	.p2align 4
	.globl	cache_shrink
	.type	cache_shrink, @function
cache_shrink:
.LFB85:
	.cfi_startproc
	movl	8(%rdi), %edx
	testl	%edx, %edx
	leal	127(%rdx), %eax
	cmovns	%edx, %eax
	andl	$-128, %eax
	leal	128(%rax), %esi
	cmpl	%esi, 12(%rdi)
	jle	.L2632
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movq	%rdi, %rbx
	movl	%esi, 12(%rdi)
	cmpl	%esi, %edx
	jge	.L2635
	movq	(%rdi), %rdi
	movslq	%esi, %rsi
	salq	$4, %rsi
	call	realloc
	movq	%rax, (%rbx)
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2632:
	.cfi_restore 3
	ret
.L2635:
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	$.LC34, %edx
	movl	$200, %esi
	movl	$.LC35, %edi
	call	qassert
	.cfi_endproc
.LFE85:
	.size	cache_shrink, .-cache_shrink
	.p2align 4
	.globl	reset
	.type	reset, @function
reset:
.LFB89:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	16(%rax), %rdx
	testl	%edx, %edx
	js	.L2662
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rdi, %r14
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	_attribute(%rip), %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	Period(%rip), %ebx
	movq	24(%rax), %rax
	addl	%ebx, %ebx
	movl	%ebx, -12(%rsp)
	movl	Period+4(%rip), %ebx
	addl	%ebx, %ebx
	movl	%ebx, -16(%rsp)
	leaq	8(%rax), %rbx
	movq	%rbx, -24(%rsp)
	leaq	(%rbx,%rdx,8), %rbx
	movq	%rbx, -8(%rsp)
.L2639:
	movq	(%rax), %rax
	movl	-12(%rsp), %ebx
	movq	(%rax), %r15
	movl	24(%rax), %esi
	movl	(%r15), %edx
	movl	4(%r15), %ecx
	movl	%esi, %eax
	cmpl	%edx, %ebx
	cmovge	%ebx, %edx
	subl	%ebx, %eax
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %edx
	jge	.L2643
	subl	$1, %eax
	movslq	%edx, %rcx
	movl	%esi, %edi
	subl	-16(%rsp), %edi
	subl	%edx, %eax
	movq	%r15, -32(%rsp)
	movq	16(%r15), %r13
	leaq	0(,%rcx,8), %r9
	leaq	1(%rcx,%rax), %r12
	movl	%edi, %r15d
	salq	$3, %r12
	jmp	.L2642
	.p2align 4,,10
	.p2align 3
.L2644:
	addq	$8, %r9
	cmpq	%r12, %r9
	je	.L2643
.L2642:
	movq	0(%r13,%r9), %rdx
	testq	%rdx, %rdx
	je	.L2644
	movq	-32(%rsp), %rbx
	movq	8(%rbx), %rax
	movl	-16(%rsp), %ebx
	addq	%r9, %rax
	movl	(%rax), %ecx
	movl	4(%rax), %eax
	cmpl	%ecx, %ebx
	cmovge	%ebx, %ecx
	cmpl	%eax, %r15d
	cmovle	%r15d, %eax
	cmpl	%eax, %ecx
	jge	.L2644
	testq	%r14, %r14
	movslq	%ecx, %rdi
	setne	%bl
	subl	$1, %eax
	leaq	(%rdx,%rdi,8), %rsi
	subl	%ecx, %eax
	addq	%rdi, %rax
	leaq	8(%rdx,%rax,8), %r10
	.p2align 4,,10
	.p2align 3
.L2647:
	movq	(%rsi), %rdi
	testq	%rdi, %rdi
	je	.L2648
	testb	%bl, %bl
	je	.L2648
	movl	(%r14), %eax
	testl	%eax, %eax
	js	.L2648
	movq	%r14, %rcx
	leaq	8(%rdi), %r8
	jmp	.L2650
	.p2align 4,,10
	.p2align 3
.L2651:
	movl	4(%rcx), %eax
	addq	$4, %rcx
	testl	%eax, %eax
	js	.L2648
.L2650:
	cmpl	$65535, %eax
	jg	.L2651
	movslq	%eax, %rdx
	leaq	(%rdx,%rdx,4), %rax
	leaq	(%rdx,%rax,2), %rax
	salq	$4, %rax
	movl	64(%rbp,%rax), %r11d
	testl	%r11d, %r11d
	jle	.L2651
	subl	$1, %r11d
	leaq	(%rdi,%rdx,8), %rax
	addq	%rdx, %r11
	leaq	(%r8,%r11,8), %rdx
	.p2align 4,,10
	.p2align 3
.L2652:
	movsd	%xmm0, 8(%rax)
	addq	$8, %rax
	cmpq	%rdx, %rax
	jne	.L2652
	movl	4(%rcx), %eax
	addq	$4, %rcx
	testl	%eax, %eax
	jns	.L2650
	.p2align 4,,10
	.p2align 3
.L2648:
	addq	$8, %rsi
	cmpq	%rsi, %r10
	jne	.L2647
	addq	$8, %r9
	cmpq	%r12, %r9
	jne	.L2642
.L2643:
	movq	-24(%rsp), %rbx
	movq	-8(%rsp), %rdi
	movq	%rbx, %rax
	cmpq	%rdi, %rbx
	je	.L2636
	addq	$8, %rbx
	movq	%rbx, -24(%rsp)
	jmp	.L2639
.L2636:
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L2662:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	ret
	.cfi_endproc
.LFE89:
	.size	reset, .-reset
	.p2align 4
	.globl	increment_neighbors
	.type	increment_neighbors, @function
increment_neighbors:
.LFB97:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movq	%rdi, %r8
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%esi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%edi, %ebp
	leaq	0(,%r12,8), %rsi
	movq	%r12, %r13
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rax, %rbx
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	movq	grid(%rip), %rax
	movq	%rdi, 48(%rsp)
	movb	$1, 128(%rax)
	movq	24(%rax), %rax
	movq	%rsi, 24(%rsp)
	movslq	%ebx, %rsi
	movq	(%rax,%r12,8), %rax
	movl	%r12d, 56(%rsp)
	movq	%rsi, 40(%rsp)
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	movslq	%r8d, %rax
	movq	%rax, 32(%rsp)
	movq	(%rdi,%rax,8), %rax
	movq	(%rax,%rsi,8), %rdx
	movzwl	2(%rdx), %eax
	leal	1(%rax), %ecx
	movw	%cx, 2(%rdx)
	testw	%ax, %ax
	je	.L2673
.L2666:
	movq	32(%rsp), %rax
	leal	-1(%rbp), %r12d
	leaq	-8(,%rax,8), %r15
	leal	2(%rbp), %eax
	movl	%eax, 16(%rsp)
	movq	40(%rsp), %rax
	leal	2(%rbx), %ebp
	leaq	-8(,%rax,8), %rax
	movq	%rax, 8(%rsp)
	leal	-1(%rbx), %eax
	movl	%eax, 20(%rsp)
	movl	%ebp, %eax
	movl	%r12d, %ebp
	movq	%r15, %r12
	movl	%eax, %r15d
.L2669:
	movl	20(%rsp), %ebx
	movq	8(%rsp), %r14
.L2668:
	movq	(%rdi,%r12), %rax
	movq	(%rax,%r14), %rdx
	movzwl	2(%rdx), %eax
	leal	1(%rax), %ecx
	movw	%cx, 2(%rdx)
	testw	%ax, %ax
	je	.L2674
.L2667:
	addl	$1, %ebx
	addq	$8, %r14
	cmpl	%ebx, %r15d
	jne	.L2668
	addq	$8, %r12
	addl	$1, %ebp
	cmpl	%ebp, 16(%rsp)
	jne	.L2669
	movq	32(%rsp), %rax
	movq	40(%rsp), %rcx
	movq	(%rdi,%rax,8), %rax
	movq	(%rax,%rcx,8), %rax
	subw	$1, 2(%rax)
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2674:
	.cfi_restore_state
	movl	%ebp, 48(%rsp)
	movl	%r13d, %esi
	movl	%ebx, 52(%rsp)
	movq	48(%rsp), %rdi
	movl	%r13d, 56(%rsp)
	call	alloc_children
	movq	grid(%rip), %rax
	movq	24(%rsp), %rsi
	movq	24(%rax), %rax
	movq	(%rax,%rsi), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	jmp	.L2667
	.p2align 4,,10
	.p2align 3
.L2673:
	movq	%r8, %rdi
	movl	%r12d, %esi
	call	alloc_children
	movq	grid(%rip), %rax
	movq	24(%rax), %rax
	movq	(%rax,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rdi
	jmp	.L2666
	.cfi_endproc
.LFE97:
	.size	increment_neighbors, .-increment_neighbors
	.section	.rodata.str1.1
.LC73:
	.string	"mem_data (L->m,i,j)"
	.section	.rodata.str1.8
	.align 8
.LC74:
	.string	"point.level + 1 == grid->depth"
	.text
	.p2align 4
	.globl	decrement_neighbors
	.type	decrement_neighbors, @function
decrement_neighbors:
.LFB98:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rcx
	movslq	%esi, %rdx
	movl	%edi, %r8d
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rcx
	movq	%rdx, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rcx, %r11
	addl	$1, %eax
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	leal	-1(%r11), %r10d
	leal	2(%r11), %r15d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	leal	2(%r8), %ebx
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movq	grid(%rip), %rcx
	movq	%rdi, 80(%rsp)
	leaq	0(,%rdx,8), %rdi
	movb	$1, 128(%rcx)
	movq	24(%rcx), %rcx
	leaq	8(%rdi), %rsi
	movl	%edx, 88(%rsp)
	movq	(%rcx,%rdx,8), %rdx
	movq	%rdi, 16(%rsp)
	leal	-1(%r8), %edi
	movl	%edi, 28(%rsp)
	movl	%edi, %ebp
	movslq	%r8d, %rdi
	movq	(%rdx), %rdx
	movl	%ebx, 4(%rsp)
	leaq	-8(,%rdi,8), %r12
	movq	%rdi, 8(%rsp)
	movl	%eax, 56(%rsp)
	movl	%r11d, 24(%rsp)
	movq	%rsi, 32(%rsp)
	movq	16(%rdx), %rsi
.L2686:
	leal	(%rbp,%rbp), %r13d
	movl	%r10d, %ebx
	leal	-2(%r13), %r11d
	movslq	%r11d, %rax
	leaq	0(,%rax,8), %r14
	movl	%r13d, %eax
.L2685:
	cmpl	%ebp, (%rdx)
	jg	.L2676
	cmpl	%ebp, 4(%rdx)
	jle	.L2676
	movq	(%rsi,%r12), %rdi
	testq	%rdi, %rdi
	je	.L2676
	movq	8(%rdx), %r8
	addq	%r12, %r8
	cmpl	(%r8), %ebx
	jl	.L2676
	cmpl	4(%r8), %ebx
	jge	.L2676
	movslq	%ebx, %r8
	movq	(%rdi,%r8,8), %r8
	testq	%r8, %r8
	je	.L2676
	subw	$1, 2(%r8)
	je	.L2706
	.p2align 4,,10
	.p2align 3
.L2676:
	addl	$1, %ebx
	cmpl	%r15d, %ebx
	jne	.L2685
	addl	$1, %ebp
	addq	$8, %r12
	cmpl	%ebp, 4(%rsp)
	jne	.L2686
	movq	8(%rsp), %rbx
	movslq	24(%rsp), %rax
	movq	(%rsi,%rbx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	cmpw	$0, 2(%rax)
	je	.L2675
	movq	16(%rsp), %rsi
	movl	4(%rax), %edi
	leal	(%r10,%r10), %eax
	movslq	%eax, %r8
	addl	$1, %eax
	movq	8(%rcx,%rsi), %rdx
	cltq
	salq	$3, %r8
	xorl	%esi, %esi
	salq	$3, %rax
	movq	(%rdx), %rcx
	movl	28(%rsp), %edx
	movq	16(%rcx), %rcx
	addl	%edx, %edx
	movslq	%edx, %rdx
	leaq	(%rcx,%rdx,8), %r9
.L2688:
	movq	(%r9,%rsi,8), %rdx
	xorl	%r10d, %r10d
	xorl	%r11d, %r11d
	movq	(%rdx,%r8), %rcx
	movq	(%rdx,%rax), %rdx
	movw	%r10w, (%rcx)
	movl	%edi, 4(%rcx)
	movw	%r11w, (%rdx)
	movl	%edi, 4(%rdx)
	cmpq	$1, %rsi
	je	.L2675
	movl	$1, %esi
	jmp	.L2688
	.p2align 4,,10
	.p2align 3
.L2675:
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L2706:
	.cfi_restore_state
	movq	32(%rsp), %rsi
	movq	(%rcx,%rsi), %r13
	leal	(%rbx,%rbx), %ecx
	leal	-2(%rcx), %esi
	movq	0(%r13), %rdi
	movl	%esi, %r9d
	movslq	%esi, %rsi
	movq	16(%rdi), %rdx
	movq	(%rdx,%r14), %rdx
	movq	(%rdx,%rsi,8), %rdx
	testq	%rdx, %rdx
	je	.L2707
	movq	8(%r13), %rsi
	movl	%r11d, 60(%rsp)
	subl	$1, %ecx
	movl	%r10d, 76(%rsp)
	movq	(%rsi), %r8
	movl	%ebx, 40(%rsp)
	movq	%r13, %rbx
	movl	%ecx, %r13d
	movq	%r14, 48(%rsp)
	movl	%r9d, %r14d
	movq	%r8, (%rdx)
	movq	%rdx, (%rsi)
	movq	%r12, 64(%rsp)
	movl	%r11d, %r12d
	movl	%ebp, 72(%rsp)
	movl	%eax, %ebp
.L2679:
	movl	24(%rbx), %ecx
	movl	%r12d, %esi
	movl	$mem_free, %r9d
	xorl	%r8d, %r8d
	movl	%r14d, %edx
	call	periodic_function
	movl	24(%rbx), %ecx
	movq	(%rbx), %rdi
	movl	%r12d, %esi
	movl	$mem_free, %r9d
	xorl	%r8d, %r8d
	movl	%r13d, %edx
	addl	$1, %r12d
	call	periodic_function
	cmpl	%r12d, %ebp
	je	.L2678
	movq	(%rbx), %rdi
	jmp	.L2679
.L2678:
	movq	%rbx, %r13
	movl	%ebp, %eax
	movl	40(%rsp), %ebx
	movq	48(%rsp), %r14
	subq	$1, 16(%r13)
	movl	60(%rsp), %r11d
	movq	64(%rsp), %r12
	movl	72(%rsp), %ebp
	movl	76(%rsp), %r10d
	je	.L2708
.L2680:
	movq	grid(%rip), %rdx
	movq	16(%rsp), %rsi
	movq	24(%rdx), %rcx
	movq	(%rcx,%rsi), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rsi
	jmp	.L2676
.L2708:
	movq	8(%r13), %rcx
	movq	%rcx, 40(%rsp)
	testq	%rcx, %rcx
	je	.L2681
	movq	32(%rcx), %rdx
	testq	%rdx, %rdx
	je	.L2683
	movl	%r11d, 60(%rsp)
	movl	%eax, 64(%rsp)
	movl	%r10d, 72(%rsp)
	movl	%ebx, 48(%rsp)
	movq	%rdx, %rbx
	.p2align 4,,10
	.p2align 3
.L2682:
	movq	%rbx, %rdi
	movq	(%rbx), %rbx
	call	free
	testq	%rbx, %rbx
	jne	.L2682
	movl	48(%rsp), %ebx
	movl	60(%rsp), %r11d
	movl	64(%rsp), %eax
	movl	72(%rsp), %r10d
.L2683:
	movq	40(%rsp), %rdi
	movl	%r10d, 64(%rsp)
	movl	%eax, 60(%rsp)
	movl	%r11d, 48(%rsp)
	call	free
	movl	48(%rsp), %r11d
	movl	60(%rsp), %eax
	movl	64(%rsp), %r10d
.L2681:
	movl	24(%r13), %esi
	movq	0(%r13), %rdi
	movl	%r10d, 60(%rsp)
	movl	%eax, 48(%rsp)
	movl	%r11d, 40(%rsp)
	call	mem_destroy
	movq	%r13, %rdi
	call	free
	movq	grid(%rip), %rdx
	movl	56(%rsp), %eax
	movl	40(%rsp), %r11d
	movl	60(%rsp), %r10d
	cmpl	16(%rdx), %eax
	movl	48(%rsp), %eax
	jne	.L2709
	movl	$-1, %edi
	movl	%r10d, 60(%rsp)
	movl	%eax, 48(%rsp)
	movl	%r11d, 40(%rsp)
	call	update_depth
	movl	60(%rsp), %r10d
	movl	48(%rsp), %eax
	movl	40(%rsp), %r11d
	jmp	.L2680
.L2707:
	movl	$.LC73, %edx
	movl	$1005, %esi
	movl	$.LC35, %edi
	call	qassert
.L2709:
	movl	$.LC74, %edx
	movl	$1012, %esi
	movl	$.LC35, %edi
	call	qassert
	.cfi_endproc
.LFE98:
	.size	decrement_neighbors, .-decrement_neighbors
	.p2align 4
	.globl	realloc_scalar
	.type	realloc_scalar, @function
realloc_scalar:
.LFB99:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movslq	%edi, %rdx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	movq	datasize(%rip), %rax
	movl	Period(%rip), %edi
	movq	grid(%rip), %rsi
	leaq	8(%rax), %rcx
	addq	%rdx, %rax
	movq	%rax, datasize(%rip)
	movq	24(%rsi), %rax
	leaq	(%rdx,%rcx), %r15
	movq	%rsi, 96(%rsp)
	movq	(%rax), %r13
	movq	%rcx, 40(%rsp)
	leal	(%rdi,%rdi), %ecx
	movq	%r15, 32(%rsp)
	movq	0(%r13), %rdx
	movl	24(%r13), %esi
	movl	(%rdx), %ebp
	movl	%esi, %eax
	cmpl	%ebp, %ecx
	cmovge	%ecx, %ebp
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebp
	jge	.L2729
	movslq	%ebp, %r12
	salq	$3, %r12
	jmp	.L2715
	.p2align 4,,10
	.p2align 3
.L2712:
	leal	(%rdi,%rdi), %ecx
	movl	%esi, %eax
	addl	$1, %ebp
	addq	$8, %r12
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebp
	jge	.L2749
.L2715:
	movq	16(%rdx), %rax
	cmpq	$0, (%rax,%r12)
	je	.L2712
	movq	8(%rdx), %r9
	movl	Period+4(%rip), %r8d
	movl	%esi, %eax
	addq	%r12, %r9
	leal	(%r8,%r8), %ecx
	movl	(%r9), %ebx
	cmpl	%ebx, %ecx
	cmovge	%ecx, %ebx
	subl	%ecx, %eax
	movl	4(%r9), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebx
	jge	.L2712
	movslq	%ebx, %r14
	salq	$3, %r14
	.p2align 4,,10
	.p2align 3
.L2714:
	movq	16(%rdx), %rax
	movq	(%rax,%r12), %rax
	movq	(%rax,%r14), %rdi
	testq	%rdi, %rdi
	je	.L2713
	movq	%r15, %rsi
	call	realloc
	movl	24(%r13), %ecx
	movq	0(%r13), %rdi
	movl	%ebx, %edx
	movq	%rax, %r8
	movl	%ebp, %esi
	movl	$mem_assign, %r9d
	call	periodic_function
	movq	0(%r13), %rdx
	movl	24(%r13), %esi
	movl	Period+4(%rip), %r8d
.L2713:
	movq	8(%rdx), %rcx
	leal	(%r8,%r8), %edi
	movl	%esi, %eax
	addl	$1, %ebx
	subl	%edi, %eax
	addq	$8, %r14
	movl	4(%rcx,%r12), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebx
	jl	.L2714
	movl	Period(%rip), %edi
	jmp	.L2712
.L2749:
	movq	grid(%rip), %rax
.L2711:
	movl	16(%rax), %eax
	testl	%eax, %eax
	jle	.L2710
	movq	32(%rsp), %rax
	movl	$1, 76(%rsp)
	movq	$8, 88(%rsp)
	leaq	0(,%rax,4), %rdx
	addq	%rax, %rax
	movq	%rdx, 104(%rsp)
	movq	%rax, 64(%rsp)
	.p2align 4,,10
	.p2align 3
.L2727:
	movzbl	76(%rsp), %ecx
	movq	96(%rsp), %rax
	movl	$1, %edi
	movq	88(%rsp), %rdx
	movq	104(%rsp), %rsi
	sall	%cl, %edi
	movq	24(%rax), %rax
	addl	$4, %edi
	movq	(%rax,%rdx), %r14
	movslq	%edi, %rdi
	imulq	%rdi, %rdi
	imulq	32(%rsp), %rdi
	movq	8(%r14), %rax
	movq	%rax, 80(%rsp)
	call	mempool_new
	movq	(%r14), %rdx
	movl	Period(%rip), %r8d
	movq	%rax, 8(%r14)
	movl	24(%r14), %esi
	movl	(%rdx), %eax
	leal	(%r8,%r8), %ecx
	cmpl	%eax, %ecx
	movl	%eax, %edi
	movl	%esi, %eax
	cmovge	%ecx, %edi
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	cmpl	%ecx, %eax
	movl	%edi, 72(%rsp)
	cmovg	%ecx, %eax
	movslq	%edi, %rcx
	salq	$3, %rcx
	movq	%rcx, 16(%rsp)
	cmpl	%eax, %edi
	jl	.L2725
	jmp	.L2726
	.p2align 4,,10
	.p2align 3
.L2720:
	leal	(%r8,%r8), %ecx
	movl	%esi, %eax
	addq	$16, 16(%rsp)
	movl	56(%rsp), %edi
	subl	%ecx, %eax
	movl	4(%rdx), %ecx
	movl	%edi, 72(%rsp)
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %edi
	jge	.L2726
.L2725:
	movl	72(%rsp), %edi
	movq	16(%rdx), %rax
	addl	$2, %edi
	movl	%edi, 56(%rsp)
	movq	16(%rsp), %rdi
	cmpq	$0, (%rax,%rdi)
	je	.L2720
	movq	8(%rdx), %r9
	movl	%esi, %eax
	addq	%rdi, %r9
	movl	Period+4(%rip), %edi
	movl	(%r9), %ebp
	leal	(%rdi,%rdi), %ecx
	cmpl	%ebp, %ecx
	cmovge	%ecx, %ebp
	subl	%ecx, %eax
	movl	4(%r9), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebp
	jge	.L2720
	movslq	%ebp, %rax
	leaq	0(,%rax,8), %r13
	movq	%r13, %r10
	jmp	.L2724
	.p2align 4,,10
	.p2align 3
.L2721:
	movq	8(%rdx), %rcx
	movq	16(%rsp), %rbx
	leal	(%rdi,%rdi), %r8d
	movl	%esi, %eax
	subl	%r8d, %eax
	addq	$16, %r10
	movl	12(%rsp), %ebp
	movl	4(%rcx,%rbx), %ecx
	cmpl	%ecx, %eax
	cmovg	%ecx, %eax
	cmpl	%eax, %ebp
	jge	.L2750
.L2724:
	movq	16(%rsp), %rbx
	movq	16(%rdx), %rax
	movq	(%rax,%rbx), %rax
	leal	2(%rbp), %ebx
	movl	%ebx, 12(%rsp)
	cmpq	$0, (%rax,%r10)
	je	.L2721
	movq	8(%r14), %rdi
	movq	%r10, 48(%rsp)
	call	mempool_alloc
	movq	16(%rsp), %r11
	movl	72(%rsp), %r15d
	movl	%ebp, 60(%rsp)
	movq	%rax, 24(%rsp)
	movq	%r14, %rbp
	movq	%r11, %r14
.L2722:
	movq	48(%rsp), %r12
	movl	60(%rsp), %ebx
	movq	24(%rsp), %r13
	movq	%r12, %rax
	movq	%r14, %r12
	movq	%rax, %r14
.L2723:
	movq	0(%rbp), %rax
	movq	40(%rsp), %rdx
	movq	%r13, %rdi
	movq	16(%rax), %rax
	movq	(%rax,%r12), %rax
	movq	(%rax,%r14), %rsi
	addq	$8, %r14
	call	memcpy
	movl	24(%rbp), %ecx
	movq	0(%rbp), %rdi
	movq	%r13, %r8
	movl	%ebx, %edx
	movl	$mem_assign, %r9d
	movl	%r15d, %esi
	addl	$1, %ebx
	call	periodic_function
	addq	32(%rsp), %r13
	cmpl	%ebx, 12(%rsp)
	jne	.L2723
	movq	%r12, %r14
	movq	64(%rsp), %rdx
	addl	$1, %r15d
	addq	%rdx, 24(%rsp)
	addq	$8, %r14
	cmpl	%r15d, 56(%rsp)
	jne	.L2722
	movq	48(%rsp), %r10
	movl	Period+4(%rip), %edi
	movq	%rbp, %r14
	movq	0(%rbp), %rdx
	movl	24(%rbp), %esi
	jmp	.L2721
	.p2align 4,,10
	.p2align 3
.L2750:
	movl	Period(%rip), %r8d
	jmp	.L2720
	.p2align 4,,10
	.p2align 3
.L2726:
	movq	80(%rsp), %rax
	movq	32(%rax), %rbx
	testq	%rbx, %rbx
	je	.L2719
	.p2align 4,,10
	.p2align 3
.L2718:
	movq	%rbx, %rdi
	movq	(%rbx), %rbx
	call	free
	testq	%rbx, %rbx
	jne	.L2718
.L2719:
	movq	80(%rsp), %rdi
	call	free
	movq	grid(%rip), %rax
	addl	$1, 76(%rsp)
	addq	$8, 88(%rsp)
	movl	76(%rsp), %esi
	cmpl	%esi, 16(%rax)
	jge	.L2727
.L2710:
	addq	$120, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L2729:
	.cfi_restore_state
	movq	96(%rsp), %rax
	jmp	.L2711
	.cfi_endproc
.LFE99:
	.size	realloc_scalar, .-realloc_scalar
	.p2align 4
	.globl	free_grid
	.type	free_grid, @function
free_grid:
.LFB112:
	.cfi_startproc
	cmpq	$0, grid(%rip)
	je	.L2751
	jmp	free_grid.part.0
	.p2align 4,,10
	.p2align 3
.L2751:
	ret
	.cfi_endproc
.LFE112:
	.size	free_grid, .-free_grid
	.section	.rodata.str1.1
.LC76:
	.string	"w"
.LC77:
	.string	"check_two_one_loc"
.LC78:
	.string	"# %d %d\n%g %g\n%g %g\n"
.LC79:
	.string	"false"
	.text
	.p2align 4
	.globl	check_two_one
	.type	check_two_one, @function
check_two_one:
.LFB114:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	xorl	%r10d, %r10d
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	$1, %r9d
	movabsq	$8589934592, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	$2, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	$2, %ebx
	subq	$360, %rsp
	.cfi_def_cfa_offset 416
	movq	grid(%rip), %r8
	movq	%rax, 32(%rsp)
	movq	$2, 40(%rsp)
	movq	24(%r8), %rdi
	.p2align 4,,10
	.p2align 3
.L2771:
	movslq	%ecx, %rax
	leal	-1(%rsi), %edx
	leaq	0(,%rax,8), %r11
	movq	(%rdi,%rax,8), %rax
	movq	(%rax), %rax
	cmpl	%ebx, (%rax)
	jg	.L2754
	cmpl	%ebx, 4(%rax)
	jle	.L2754
	movq	16(%rax), %r14
	movslq	%ebx, %r13
	leaq	0(,%r13,8), %r12
	movq	(%r14,%r13,8), %r13
	testq	%r13, %r13
	je	.L2754
	addq	8(%rax), %r12
	cmpl	%ebp, (%r12)
	jg	.L2754
	cmpl	%ebp, 4(%r12)
	jle	.L2754
	movslq	%ebp, %rax
	movq	0(%r13,%rax,8), %rax
	testq	%rax, %rax
	je	.L2754
	cmpl	$2, %r10d
	je	.L2755
	jg	.L2756
	testl	%r10d, %r10d
	je	.L2757
	cmpl	$1, %r10d
	jne	.L2754
	movslq	%esi, %rax
	addl	$1, %esi
	addl	$1, %ecx
	salq	$4, %rax
	movl	$2, 44(%rsp,%rax)
	movslq	%esi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 32(%rsp,%rdx)
	leal	-2(%rbx,%rbx), %ecx
	movl	%ecx, 36(%rsp,%rdx)
	leal	-1(%rbp,%rbp), %ecx
	movl	%ecx, 40(%rsp,%rdx)
	movl	$0, 44(%rsp,%rdx)
.L2768:
	xorl	%r10d, %r10d
	.p2align 4,,10
	.p2align 3
.L2772:
	salq	$4, %rax
	movl	32(%rsp,%rax), %ecx
	movl	36(%rsp,%rax), %ebx
	movl	40(%rsp,%rax), %ebp
	jmp	.L2771
	.p2align 4,,10
	.p2align 3
.L2760:
	cmpl	%ecx, 16(%r8)
	jg	.L2797
	.p2align 4,,10
	.p2align 3
.L2754:
	cmpl	$-1, %edx
	je	.L2753
.L2769:
	movslq	%edx, %rax
	movl	%edx, %esi
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	44(%rsp,%rcx), %r10d
	jmp	.L2772
	.p2align 4,,10
	.p2align 3
.L2756:
	cmpl	$3, %r10d
	jne	.L2754
	movslq	%esi, %rax
	leal	-1(%rbx,%rbx), %edx
	addl	$1, %ecx
	salq	$4, %rax
	movl	%edx, 36(%rsp,%rax)
	leal	-1(%rbp,%rbp), %edx
	movl	%edx, 40(%rsp,%rax)
	movl	%esi, %edx
	movl	%ecx, 32(%rsp,%rax)
	movl	$0, 44(%rsp,%rax)
	jmp	.L2769
	.p2align 4,,10
	.p2align 3
.L2753:
	addq	$360, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2755:
	.cfi_restore_state
	movslq	%esi, %rax
	addl	$1, %esi
	addl	$1, %ecx
	salq	$4, %rax
	movl	$3, 44(%rsp,%rax)
	movslq	%esi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 32(%rsp,%rdx)
	leal	-1(%rbx,%rbx), %ecx
	movl	%ecx, 36(%rsp,%rdx)
	leal	-2(%rbp,%rbp), %ecx
	movl	%ecx, 40(%rsp,%rdx)
	movl	$0, 44(%rsp,%rdx)
	jmp	.L2768
	.p2align 4,,10
	.p2align 3
.L2757:
	movzwl	(%rax), %r10d
	testb	$2, %r10b
	je	.L2760
	andl	$1, %r10d
	je	.L2754
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L2754
	testl	%ecx, %ecx
	jle	.L2754
	movl	%r9d, %r15d
	pxor	%xmm1, %xmm1
	leal	2(%rbx), %eax
	movl	$-1, %r12d
	sall	%cl, %r15d
	movsd	.LC10(%rip), %xmm0
	movl	%eax, %esi
	leal	2(%rbp), %r10d
	cvtsi2sdl	%r15d, %xmm1
	shrl	$31, %esi
	addl	%eax, %esi
	movl	%r10d, %eax
	shrl	$31, %eax
	sarl	%esi
	addl	%r10d, %eax
	movslq	%esi, %rcx
	subl	$2, %esi
	divsd	%xmm1, %xmm0
	sarl	%eax
	leaq	-8(,%rcx,8), %rcx
	leal	-2(%rax), %r10d
.L2761:
	leal	(%rsi,%r12), %r13d
	pxor	%xmm2, %xmm2
	cvtsi2sdl	%r13d, %xmm2
	addsd	.LC5(%rip), %xmm2
	movl	$-1, %r13d
	mulsd	%xmm0, %xmm2
	addsd	%xmm2, %xmm2
	subsd	.LC5(%rip), %xmm2
.L2767:
	comisd	.LC75(%rip), %xmm2
	jbe	.L2762
	movsd	.LC5(%rip), %xmm5
	comisd	%xmm2, %xmm5
	jbe	.L2762
	leal	(%r10,%r13), %r15d
	pxor	%xmm3, %xmm3
	leal	0(%r13,%rax), %r14d
	cvtsi2sdl	%r15d, %xmm3
	addsd	%xmm5, %xmm3
	mulsd	%xmm0, %xmm3
	addsd	%xmm3, %xmm3
	subsd	%xmm5, %xmm3
	comisd	.LC75(%rip), %xmm3
	jbe	.L2762
	comisd	%xmm3, %xmm5
	jbe	.L2762
	movq	-8(%rdi,%r11), %r15
	movslq	%r14d, %r14
	movq	(%r15), %r15
	movq	16(%r15), %r15
	movq	(%r15,%rcx), %r15
	movq	(%r15,%r14,8), %r14
	testb	$1, (%r14)
	jne	.L2762
	movl	$.LC76, %esi
	movl	$.LC77, %edi
	subl	$2, %ebp
	movsd	%xmm3, 24(%rsp)
	movsd	%xmm2, 16(%rsp)
	movsd	%xmm0, 8(%rsp)
	call	fopen
	pxor	%xmm1, %xmm1
	pxor	%xmm4, %xmm4
	movl	%r12d, %edx
	movq	%rax, %r14
	leal	-2(%rbx), %eax
	movsd	8(%rsp), %xmm0
	movl	%r13d, %ecx
	cvtsi2sdl	%eax, %xmm4
	movsd	24(%rsp), %xmm3
	movl	$.LC78, %esi
	addsd	.LC5(%rip), %xmm4
	cvtsi2sdl	%ebp, %xmm1
	addsd	.LC5(%rip), %xmm1
	movsd	16(%rsp), %xmm2
	movq	%r14, %rdi
	movl	$4, %eax
	mulsd	%xmm0, %xmm1
	mulsd	%xmm4, %xmm0
	subsd	.LC5(%rip), %xmm1
	subsd	.LC5(%rip), %xmm0
	call	fprintf
	movq	%r14, %rdi
	call	fclose
	movl	$.LC79, %edx
	movl	$1623, %esi
	movl	$.LC35, %edi
	call	qassert
	.p2align 4,,10
	.p2align 3
.L2797:
	movslq	%esi, %rax
	addl	$1, %esi
	addl	$1, %ecx
	salq	$4, %rax
	movl	$1, 44(%rsp,%rax)
	movslq	%esi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 32(%rsp,%rdx)
	leal	-2(%rbx,%rbx), %ecx
	movl	%ecx, 36(%rsp,%rdx)
	leal	-2(%rbp,%rbp), %ecx
	movl	%ecx, 40(%rsp,%rdx)
	movl	$0, 44(%rsp,%rdx)
	jmp	.L2768
	.p2align 4,,10
	.p2align 3
.L2762:
	addl	$1, %r13d
	cmpl	$2, %r13d
	jne	.L2767
	addl	$1, %r12d
	addq	$8, %rcx
	cmpl	$2, %r12d
	jne	.L2761
	jmp	.L2754
	.cfi_endproc
.LFE114:
	.size	check_two_one, .-check_two_one
	.p2align 4
	.globl	locate
	.type	locate, @function
locate:
.LFB115:
	.cfi_startproc
	movq	grid(%rip), %r8
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movl	16(%r8), %ecx
	testl	%ecx, %ecx
	js	.L2803
	movsd	16(%rsp), %xmm4
	movsd	24(%rsp), %xmm3
	movslq	%ecx, %rdx
	movl	$1, %r9d
	subsd	X0(%rip), %xmm4
	subsd	Y0(%rip), %xmm3
	salq	$3, %rdx
	movsd	L0(%rip), %xmm0
	movsd	.LC80(%rip), %xmm2
	divsd	%xmm0, %xmm4
	divsd	%xmm0, %xmm3
	.p2align 4,,10
	.p2align 3
.L2801:
	movl	%r9d, %eax
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm1
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm0
	leal	3(%rax), %esi
	mulsd	%xmm0, %xmm1
	mulsd	%xmm3, %xmm0
	addsd	%xmm2, %xmm1
	addsd	%xmm2, %xmm0
	cvttsd2sil	%xmm1, %edi
	cvttsd2sil	%xmm0, %r10d
	movl	%edi, %eax
	orl	%r10d, %eax
	notl	%eax
	shrl	$31, %eax
	cmpl	%esi, %edi
	setle	%r11b
	testb	%al, %r11b
	je	.L2803
	cmpl	%esi, %r10d
	jg	.L2803
	movq	24(%r8), %rax
	movq	(%rax,%rdx), %rax
	movq	(%rax), %rax
	cmpl	(%rax), %edi
	jl	.L2800
	cmpl	4(%rax), %edi
	jge	.L2800
	movq	16(%rax), %rbx
	movslq	%edi, %r11
	leaq	0(,%r11,8), %rsi
	movq	(%rbx,%r11,8), %r11
	testq	%r11, %r11
	je	.L2800
	addq	8(%rax), %rsi
	cmpl	(%rsi), %r10d
	jl	.L2800
	cmpl	4(%rsi), %r10d
	jge	.L2800
	movslq	%r10d, %rax
	movq	(%r11,%rax,8), %rax
	testq	%rax, %rax
	je	.L2800
	movl	4(%rax), %esi
	testl	%esi, %esi
	jne	.L2800
	testb	$2, (%rax)
	jne	.L2799
	.p2align 4,,10
	.p2align 3
.L2800:
	subl	$1, %ecx
	subq	$8, %rdx
	cmpl	$-1, %ecx
	jne	.L2801
	xorl	%edi, %edi
	xorl	%r10d, %r10d
	jmp	.L2799
	.p2align 4,,10
	.p2align 3
.L2803:
	xorl	%edi, %edi
	xorl	%r10d, %r10d
	movl	$-1, %ecx
.L2799:
	movl	%edi, -12(%rsp)
	movl	%ecx, %edx
	movl	%r10d, -8(%rsp)
	movq	-12(%rsp), %rax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE115:
	.size	locate, .-locate
	.p2align 4
	.globl	tree_is_full
	.type	tree_is_full, @function
tree_is_full:
.LFB116:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L2821
.L2819:
	movl	20(%rax), %esi
	movl	$1, %edx
	leal	(%rsi,%rsi), %ecx
	salq	%cl, %rdx
	cmpq	8(%rax), %rdx
	sete	%al
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2821:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L2819
	.cfi_endproc
.LFE116:
	.size	tree_is_full, .-tree_is_full
	.section	.rodata.str1.1
.LC81:
	.string	"Events"
	.section	.rodata.str1.8
	.align 8
.LC82:
	.string	"/root/mnt/basilisk/src/grid/events.h"
	.section	.rodata.str1.1
.LC83:
	.string	"!event.last"
.LC84:
	.string	"parent < 0"
	.text
	.p2align 4
	.globl	event_register
	.type	event_register, @function
event_register:
.LFB120:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	movq	Events(%rip), %r12
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	testq	%r12, %r12
	je	.L2845
	movl	48(%rsp), %ecx
	testl	%ecx, %ecx
	jne	.L2824
	movl	(%r12), %ebp
	testl	%ebp, %ebp
	jne	.L2846
	movq	120(%rsp), %r14
	movq	%r12, %rbx
	movq	$-1, %r13
	jmp	.L2828
	.p2align 4,,10
	.p2align 3
.L2840:
	movl	%eax, %ebp
.L2828:
	movq	72(%rbx), %rsi
	movq	%r14, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L2827
	cmpl	$-1, %r13d
	jne	.L2847
	movslq	%ebp, %r13
.L2827:
	movl	112(%rbx), %edx
	addq	$112, %rbx
	leal	1(%rbp), %eax
	testl	%edx, %edx
	je	.L2840
	cmpl	$-1, %r13d
	je	.L2848
	movl	$112, %esi
	movl	$1, %edi
	call	calloc
	leaq	0(,%r13,8), %rdx
	movdqu	48(%rsp), %xmm0
	subq	%r13, %rdx
	salq	$4, %rdx
	addq	%rdx, %r12
	movdqu	(%r12), %xmm1
	movups	%xmm1, (%rax)
	movdqu	16(%r12), %xmm2
	movdqu	64(%rsp), %xmm1
	movups	%xmm2, 16(%rax)
	movdqu	32(%r12), %xmm3
	movdqu	80(%rsp), %xmm2
	movups	%xmm3, 32(%rax)
	movdqu	48(%r12), %xmm4
	movdqu	96(%rsp), %xmm3
	movups	%xmm4, 48(%rax)
	movdqu	64(%r12), %xmm5
	movdqu	112(%rsp), %xmm4
	movups	%xmm5, 64(%rax)
	movdqu	80(%r12), %xmm6
	movdqu	128(%rsp), %xmm5
	movups	%xmm6, 80(%rax)
	movdqu	96(%r12), %xmm7
	movdqu	144(%rsp), %xmm6
	movups	%xmm7, 96(%rax)
	movups	%xmm2, 32(%r12)
	movups	%xmm6, 96(%r12)
	movq	%rax, 104(%r12)
	movq	40(%r12), %rax
	movups	%xmm0, (%r12)
	movups	%xmm1, 16(%r12)
	movups	%xmm3, 48(%r12)
	movups	%xmm4, 64(%r12)
	movups	%xmm5, 80(%r12)
	testq	%rax, %rax
	je	.L2849
	movl	$-1, 88(%r12)
	movq	.LC23(%rip), %rcx
	movl	(%rax), %eax
	movq	%rcx, 80(%r12)
	movl	%eax, 88(%r12)
.L2838:
	movl	$1, 92(%r12)
	movq	$0, 24(%r12)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2848:
	.cfi_restore_state
	addl	$3, %ebp
	movslq	%ebp, %rbp
	leaq	0(,%rbp,8), %rsi
	subq	%rbp, %rsi
	salq	$4, %rsi
	leaq	-224(%rsi), %rbx
	leaq	-112(%rsi), %rbp
.L2826:
	movq	%r12, %rdi
	call	realloc
	movdqu	48(%rsp), %xmm7
	movdqu	64(%rsp), %xmm0
	leaq	(%rax,%rbx), %rdi
	movdqu	96(%rsp), %xmm1
	movdqu	112(%rsp), %xmm2
	movq	%rax, Events(%rip)
	movdqu	128(%rsp), %xmm3
	movups	%xmm7, (%rdi)
	movdqu	80(%rsp), %xmm7
	movdqu	144(%rsp), %xmm4
	movups	%xmm0, 16(%rdi)
	movups	%xmm7, 32(%rdi)
	movups	%xmm4, 96(%rdi)
	movups	%xmm1, 48(%rdi)
	movq	$0, 104(%rdi)
	movups	%xmm2, 64(%rdi)
	movups	%xmm3, 80(%rdi)
	movl	$1, (%rax,%rbp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.L2850
	movl	$-1, 88(%rdi)
	movq	.LC23(%rip), %rcx
	movl	(%rax), %eax
	movq	%rcx, 80(%rdi)
	movl	%eax, 88(%rdi)
.L2837:
	movl	$1, 92(%rdi)
	movq	$0, 24(%rdi)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
.L2849:
	.cfi_restore_state
	movq	48(%r12), %rax
	testq	%rax, %rax
	je	.L2851
	movl	$-1, 88(%r12)
	movq	.LC23(%rip), %rcx
	movq	%rcx, 80(%r12)
	movsd	(%rax), %xmm0
	movsd	%xmm0, 80(%r12)
	jmp	.L2838
.L2850:
	movq	48(%rdi), %rax
	testq	%rax, %rax
	je	.L2844
	movq	.LC23(%rip), %rcx
	movl	$-1, 88(%rdi)
	movq	%rcx, 80(%rdi)
	movsd	(%rax), %xmm0
	movsd	%xmm0, 80(%rdi)
	jmp	.L2837
.L2851:
	movq	%r12, %rdi
.L2844:
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	init_event.part.0
.L2846:
	.cfi_restore_state
	movl	$112, %ebp
	xorl	%ebx, %ebx
	movl	$224, %esi
	jmp	.L2826
.L2847:
	movl	$.LC84, %edx
	movl	$92, %esi
	movl	$.LC82, %edi
	call	qassert
.L2824:
	movl	$.LC83, %edx
	movl	$88, %esi
	movl	$.LC82, %edi
	call	qassert
.L2845:
	movl	$.LC81, %edx
	movl	$87, %esi
	movl	$.LC82, %edi
	call	qassert
	.cfi_endproc
.LFE120:
	.size	event_register, .-event_register
	.p2align 4
	.globl	events
	.type	events, @function
events:
.LFB124:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edi, %ebx
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	Events(%rip), %r14
	movl	%edi, 12(%rsp)
	movl	(%r14), %r13d
	movl	%r13d, %eax
	orl	iter(%rip), %eax
	jne	.L2853
	movsd	.LC23(%rip), %xmm0
	jmp	.L2858
	.p2align 4,,10
	.p2align 3
.L2854:
	movl	$-1, 88(%r14)
	movl	(%rax), %eax
	movsd	%xmm0, 80(%r14)
	movl	%eax, 88(%r14)
.L2899:
	movl	$1, 92(%r14)
	movq	$0, 24(%r14)
.L2857:
	movl	112(%r14), %ecx
	addq	$112, %r14
	testl	%ecx, %ecx
	jne	.L2933
.L2858:
	movq	40(%r14), %rax
	testq	%rax, %rax
	jne	.L2854
	movq	48(%r14), %rax
	testq	%rax, %rax
	je	.L2934
	movq	.LC23(%rip), %rdx
	movl	$-1, 88(%r14)
	movq	%rdx, 80(%r14)
	movsd	(%rax), %xmm1
	movsd	%xmm1, 80(%r14)
	jmp	.L2899
	.p2align 4,,10
	.p2align 3
.L2933:
	movq	Events(%rip), %r14
	movl	(%r14), %r13d
.L2853:
	movq	.LC2(%rip), %rax
	movl	$1234567890, inext(%rip)
	movq	%rax, tnext(%rip)
	testl	%r13d, %r13d
	jne	.L2859
	movq	%r14, %rax
	.p2align 4,,10
	.p2align 3
.L2863:
	cmpl	$1234567890, 88(%rax)
	je	.L2860
	cmpq	$0, 24(%rax)
	je	.L2935
.L2905:
	movl	$1, %r12d
.L2861:
	movl	$0, 8(%rsp)
	movl	iter(%rip), %edi
	movsd	t(%rip), %xmm1
	jmp	.L2896
	.p2align 4,,10
	.p2align 3
.L2868:
	movl	88(%r14), %eax
	movl	iter(%rip), %edi
.L2867:
	cmpl	%eax, %edi
	je	.L2870
	movsd	t(%rip), %xmm1
	movsd	80(%r14), %xmm0
	movsd	.LC85(%rip), %xmm3
	movapd	%xmm1, %xmm2
	subsd	%xmm0, %xmm2
	andpd	.LC17(%rip), %xmm2
	comisd	%xmm2, %xmm3
	jnb	.L2870
.L2871:
	cmpl	$1234567890, %eax
	je	.L2869
	cmpq	$0, 24(%r14)
	je	.L2886
.L2890:
	movl	$1, 8(%rsp)
.L2869:
	comisd	%xmm1, %xmm0
	jbe	.L2892
	movsd	tnext(%rip), %xmm2
	comisd	%xmm0, %xmm2
	jbe	.L2892
	movsd	%xmm0, tnext(%rip)
.L2892:
	cmpl	%edi, %eax
	jle	.L2895
	cmpl	%eax, inext(%rip)
	jle	.L2895
	movl	%eax, inext(%rip)
.L2895:
	movl	112(%r14), %eax
	addq	$112, %r14
	testl	%eax, %eax
	jne	.L2936
.L2896:
	movl	88(%r14), %eax
	cmpl	%edi, %eax
	jge	.L2864
	comisd	80(%r14), %xmm1
	ja	.L2865
.L2864:
	movq	24(%r14), %rcx
	movl	%edi, 20(%rsp)
	movsd	%xmm1, 24(%rsp)
	testq	%rcx, %rcx
	je	.L2867
	movq	%r14, %rdx
	leaq	24(%rsp), %rsi
	leaq	20(%rsp), %rdi
	call	*%rcx
	testl	%eax, %eax
	jne	.L2868
	movsd	t(%rip), %xmm1
	movl	iter(%rip), %edi
.L2865:
	movq	.LC23(%rip), %rax
	movq	.LC23(%rip), %rdx
	movl	$-1, 88(%r14)
	movq	%rax, 80(%r14)
	movq	%rdx, %xmm0
	movl	$-1, %eax
	jmp	.L2869
	.p2align 4,,10
	.p2align 3
.L2935:
	cmpq	$0, 16(%rax)
	je	.L2862
	cmpq	$0, 32(%rax)
	je	.L2905
.L2862:
	cmpq	$0, 40(%rax)
	jne	.L2905
	cmpq	$0, 48(%rax)
	jne	.L2905
	.p2align 4,,10
	.p2align 3
.L2860:
	movl	112(%rax), %edx
	addq	$112, %rax
	testl	%edx, %edx
	je	.L2863
	xorl	%r12d, %r12d
	jmp	.L2861
	.p2align 4,,10
	.p2align 3
.L2870:
	testb	%bl, %bl
	je	.L2873
	movq	%r14, %r15
	xorl	%ebp, %ebp
	jmp	.L2876
	.p2align 4,,10
	.p2align 3
.L2938:
	testq	%r15, %r15
	je	.L2937
.L2900:
	movl	iter(%rip), %edi
.L2876:
	movq	%r15, %rsi
	movsd	t(%rip), %xmm0
	call	*8(%r15)
	movq	104(%r15), %r15
	testl	%eax, %eax
	je	.L2938
	testq	%r15, %r15
	je	.L2901
	movl	%ebx, %ebp
	jmp	.L2900
	.p2align 4,,10
	.p2align 3
.L2937:
	testb	%bpl, %bpl
	jne	.L2901
.L2873:
	movq	40(%r14), %rcx
	testq	%rcx, %rcx
	je	.L2878
	movslq	92(%r14), %rax
	leal	1(%rax), %esi
	movl	%esi, 92(%r14)
	movl	(%rcx,%rax,4), %eax
	testl	%eax, %eax
	js	.L2887
	movl	%eax, 88(%r14)
.L2878:
	movq	48(%r14), %rcx
	testq	%rcx, %rcx
	je	.L2880
	movslq	92(%r14), %rax
	pxor	%xmm1, %xmm1
	movsd	(%rcx,%rax,8), %xmm0
	leal	1(%rax), %esi
	movl	%esi, 92(%r14)
	comisd	%xmm0, %xmm1
	movsd	%xmm0, 80(%r14)
	ja	.L2887
	movl	88(%r14), %eax
	movsd	t(%rip), %xmm1
	movl	iter(%rip), %edi
	jmp	.L2871
	.p2align 4,,10
	.p2align 3
.L2887:
	movsd	.LC23(%rip), %xmm0
	movl	$-1, 88(%r14)
	movl	$-1, %eax
	movl	iter(%rip), %edi
	movsd	%xmm0, 80(%r14)
	movsd	t(%rip), %xmm1
	jmp	.L2869
	.p2align 4,,10
	.p2align 3
.L2880:
	movq	32(%r14), %rax
	testq	%rax, %rax
	je	.L2882
	movl	88(%r14), %ebp
	leaq	80(%r14), %rsi
	leaq	88(%r14), %rdi
	movq	%r14, %rdx
	call	*%rax
	cmpl	$-1, %ebp
	je	.L2883
	movl	iter(%rip), %edi
	leal	1(%rdi), %eax
.L2884:
	movsd	80(%r14), %xmm0
	movl	%eax, 20(%rsp)
	movq	24(%r14), %rax
	movsd	%xmm0, 24(%rsp)
	testq	%rax, %rax
	je	.L2939
	movq	%r14, %rdx
	leaq	24(%rsp), %rsi
	leaq	20(%rsp), %rdi
	call	*%rax
	testl	%eax, %eax
	je	.L2887
	movl	88(%r14), %eax
	movsd	80(%r14), %xmm0
	movsd	t(%rip), %xmm1
	movl	iter(%rip), %edi
	jmp	.L2871
.L2939:
	movl	88(%r14), %eax
	movsd	t(%rip), %xmm1
	cmpl	$1234567890, %eax
	je	.L2869
	.p2align 4,,10
	.p2align 3
.L2886:
	cmpq	$0, 16(%r14)
	je	.L2891
	cmpq	$0, 32(%r14)
	je	.L2890
.L2891:
	cmpq	$0, 40(%r14)
	jne	.L2890
	cmpq	$0, 48(%r14)
	jne	.L2890
	jmp	.L2869
	.p2align 4,,10
	.p2align 3
.L2901:
	movq	.LC23(%rip), %rax
	movl	$-1, 88(%r14)
	movl	$1, %edi
	movq	%rax, 80(%r14)
	call	end_event_do
.L2852:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movl	%r13d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2936:
	.cfi_restore_state
	movl	8(%rsp), %r13d
	xorl	$1, %r12d
	orl	%r12d, %r13d
	je	.L2859
	movsd	.LC2(%rip), %xmm4
	ucomisd	tnext(%rip), %xmm4
	jp	.L2897
	jne	.L2897
	cmpl	$1234567890, inext(%rip)
	je	.L2859
	movl	iter(%rip), %edi
.L2897:
	addl	$1, %edi
	movl	%edi, inext(%rip)
	jmp	.L2852
	.p2align 4,,10
	.p2align 3
.L2934:
	movq	%r14, %rdi
	call	init_event.part.0
	movq	.LC23(%rip), %rax
	movq	%rax, %xmm0
	jmp	.L2857
	.p2align 4,,10
	.p2align 3
.L2859:
	movzbl	12(%rsp), %edi
	xorl	%r13d, %r13d
	call	end_event_do
	jmp	.L2852
	.p2align 4,,10
	.p2align 3
.L2882:
	cmpq	$0, 16(%r14)
	movsd	t(%rip), %xmm1
	movl	iter(%rip), %edi
	je	.L2940
	cmpq	$0, 24(%r14)
	je	.L2889
	movl	88(%r14), %eax
	movsd	80(%r14), %xmm0
	cmpl	$1234567890, %eax
	jne	.L2890
	jmp	.L2869
	.p2align 4,,10
	.p2align 3
.L2883:
	movl	iter(%rip), %edi
	movl	88(%r14), %ecx
	leal	1(%rdi), %eax
	cmpl	$-1, %ecx
	je	.L2884
	addl	%eax, %ecx
	movl	%ecx, 88(%r14)
	jmp	.L2884
.L2940:
	movl	88(%r14), %eax
	movsd	80(%r14), %xmm0
	jmp	.L2871
.L2889:
	movsd	.LC23(%rip), %xmm0
	movl	$-1, 88(%r14)
	movl	$-1, %eax
	movsd	%xmm0, 80(%r14)
	jmp	.L2869
	.cfi_endproc
.LFE124:
	.size	events, .-events
	.p2align 4
	.globl	event
	.type	event, @function
event:
.LFB125:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	Events(%rip), %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movl	0(%rbp), %edx
	testl	%edx, %edx
	jne	.L2941
	movq	%rdi, %r12
	jmp	.L2945
	.p2align 4,,10
	.p2align 3
.L2943:
	movl	112(%rbp), %eax
	addq	$112, %rbp
	testl	%eax, %eax
	jne	.L2941
.L2945:
	movq	72(%rbp), %rdi
	movq	%r12, %rsi
	call	strcmp
	testl	%eax, %eax
	jne	.L2943
	movq	%rbp, %rbx
	.p2align 4,,10
	.p2align 3
.L2944:
	movq	%rbx, %rsi
	pxor	%xmm0, %xmm0
	xorl	%edi, %edi
	call	*8(%rbx)
	movq	104(%rbx), %rbx
	testq	%rbx, %rbx
	jne	.L2944
	movl	112(%rbp), %eax
	addq	$112, %rbp
	testl	%eax, %eax
	je	.L2945
.L2941:
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE125:
	.size	event, .-event
	.section	.rodata.str1.1
.LC86:
	.string	"properties"
	.text
	.p2align 4
	.type	adapt, @function
adapt:
.LFB330:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	$.LC86, %edi
	call	event
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE330:
	.size	adapt, .-adapt
	.section	.rodata.str1.1
.LC87:
	.string	"n < INT_MAX"
	.text
	.p2align 4
	.globl	dtnext
	.type	dtnext, @function
dtnext:
.LFB126:
	.cfi_startproc
	movapd	%xmm0, %xmm1
	movsd	tnext(%rip), %xmm0
	ucomisd	.LC2(%rip), %xmm0
	movsd	t(%rip), %xmm2
	jp	.L2962
	jne	.L2962
.L2952:
	addsd	%xmm1, %xmm2
	movapd	%xmm1, %xmm0
	movsd	%xmm2, tnext(%rip)
.L2951:
	ret
	.p2align 4,,10
	.p2align 3
.L2962:
	comisd	%xmm2, %xmm0
	jbe	.L2952
	subsd	%xmm2, %xmm0
	movapd	%xmm0, %xmm3
	divsd	%xmm1, %xmm3
	cvttsd2siq	%xmm3, %rax
	cmpl	$2147483646, %eax
	ja	.L2970
	testl	%eax, %eax
	je	.L2951
	pxor	%xmm4, %xmm4
	movapd	%xmm0, %xmm3
	cvtsi2sdl	%eax, %xmm4
	divsd	%xmm4, %xmm3
	movsd	.LC85(%rip), %xmm4
	addsd	%xmm1, %xmm4
	comisd	%xmm4, %xmm3
	jbe	.L2966
	addl	$1, %eax
	pxor	%xmm1, %xmm1
	cvtsi2sdl	%eax, %xmm1
	divsd	%xmm1, %xmm0
.L2959:
	addsd	%xmm0, %xmm2
	movsd	%xmm2, tnext(%rip)
	ret
	.p2align 4,,10
	.p2align 3
.L2966:
	minsd	%xmm1, %xmm3
	movapd	%xmm3, %xmm0
	jmp	.L2959
.L2970:
	pushq	%rax
	.cfi_def_cfa_offset 16
	movl	$.LC87, %edx
	movl	$245, %esi
	movl	$.LC82, %edi
	call	qassert
	.cfi_endproc
.LFE126:
	.size	dtnext, .-dtnext
	.p2align 4
	.globl	catch_fpe
	.type	catch_fpe, @function
catch_fpe:
.LFB131:
	.cfi_startproc
	subq	$168, %rsp
	.cfi_def_cfa_offset 176
	leaq	8(%rsp), %rdi
	movq	$caught_fpe, (%rsp)
	call	sigemptyset
	movq	%rsp, %rsi
	xorl	%edx, %edx
	movl	$8, %edi
	movl	$0, 136(%rsp)
	movl	$-1, last_point+8(%rip)
	call	sigaction
	movq	%rsp, %rsi
	xorl	%edx, %edx
	movl	$11, %edi
	movq	$caught_segfault, (%rsp)
	call	sigaction
	movq	%rsp, %rsi
	xorl	%edx, %edx
	movl	$6, %edi
	movq	$caught_abort, (%rsp)
	movl	$-2147483648, 136(%rsp)
	call	sigaction
	addq	$168, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE131:
	.size	catch_fpe, .-catch_fpe
	.section	.rodata.str1.1
.LC88:
	.string	"nvar + block <= _NVARMAX"
	.section	.rodata.str1.8
	.align 8
.LC89:
	.string	"/root/mnt/basilisk/src/grid/cartesian-common.h"
	.text
	.p2align 4
	.globl	new_block_scalar
	.type	new_block_scalar, @function
new_block_scalar:
.LFB133:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movl	%edx, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rsi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	subq	$8, %rsp
	.cfi_def_cfa_offset 64
	movq	datasize(%rip), %r12
	shrq	$3, %r12
	testl	%r12d, %r12d
	jle	.L2974
	movq	_attribute(%rip), %r8
	movl	%r12d, %edi
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L2975:
	movslq	%r14d, %rax
	movl	%r14d, %esi
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	xorl	%edx, %edx
	salq	$4, %rax
	addq	%r8, %rax
	jmp	.L2984
	.p2align 4,,10
	.p2align 3
.L3000:
	movl	%ecx, %esi
.L2984:
	cmpl	%edx, %r13d
	jle	.L2977
	cmpb	$0, 61(%rax)
	leal	1(%rsi), %ecx
	je	.L2999
	addl	$1, %edx
	addq	$176, %rax
	cmpl	%ecx, %edi
	jg	.L3000
	cmpl	%edx, %r13d
	jle	.L3001
.L2979:
	leal	1(%rcx), %r14d
	cmpl	%edi, %r14d
	jl	.L2975
	leal	0(%r13,%r12), %eax
	cmpl	$65536, %eax
	jg	.L2989
	cltq
	movq	%r8, %rdi
	movslq	%r13d, %r15
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rsi
	salq	$4, %rsi
	call	realloc
	movslq	%r12d, %rcx
	leaq	(%r15,%r15,4), %rdx
	leaq	(%rcx,%rcx,4), %rsi
	leaq	(%r15,%rdx,2), %rdx
	movq	%rax, _attribute(%rip)
	leaq	(%rcx,%rsi,2), %rcx
	salq	$4, %rdx
	xorl	%esi, %esi
	salq	$4, %rcx
	leaq	(%rax,%rcx), %rdi
	call	memset
.L2988:
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L2987:
	leal	(%r14,%r12), %edi
	movl	%r14d, %ecx
	movl	%r13d, %r8d
	movq	%rbp, %rdx
	movq	%rbx, %rsi
	addl	$1, %r14d
	call	init_block_scalar
	cmpl	%r14d, %r13d
	jg	.L2987
.L2986:
	leal	0(,%r15,8), %edi
	movl	%r12d, %r14d
	call	realloc_scalar
.L2996:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movl	%r14d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L2977:
	.cfi_restore_state
	xorl	%r12d, %r12d
	testl	%r13d, %r13d
	jle	.L2996
.L2993:
	leal	(%r12,%r14), %edi
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movq	%rbp, %rdx
	movq	%rbx, %rsi
	addl	$1, %r12d
	call	init_block_scalar
	cmpl	%r12d, %r13d
	jg	.L2993
	jmp	.L2996
	.p2align 4,,10
	.p2align 3
.L2999:
	movl	%esi, %ecx
	jmp	.L2979
.L2974:
	leal	(%rdx,%r12), %eax
	cmpl	$65536, %eax
	jg	.L2989
	cltq
	movq	_attribute(%rip), %rdi
	movslq	%r13d, %r15
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rsi
	salq	$4, %rsi
	call	realloc
	movslq	%r12d, %rcx
	leaq	(%r15,%r15,4), %rdx
	leaq	(%rcx,%rcx,4), %rsi
	leaq	(%r15,%rdx,2), %rdx
	movq	%rax, _attribute(%rip)
	leaq	(%rcx,%rsi,2), %rcx
	salq	$4, %rdx
	xorl	%esi, %esi
	salq	$4, %rcx
	leaq	(%rax,%rcx), %rdi
	call	memset
	testl	%r13d, %r13d
	jle	.L2986
	jmp	.L2988
	.p2align 4,,10
	.p2align 3
.L2989:
	movl	$.LC88, %edx
	movl	$91, %esi
	movl	$.LC89, %edi
	call	qassert
.L3001:
	xorl	%r12d, %r12d
	jmp	.L2993
	.cfi_endproc
.LFE133:
	.size	new_block_scalar, .-new_block_scalar
	.section	.rodata.str1.1
.LC90:
	.string	""
	.text
	.p2align 4
	.globl	new_scalar
	.type	new_scalar, @function
new_scalar:
.LFB134:
	.cfi_startproc
	movl	$1, %edx
	movl	$.LC90, %esi
	jmp	new_block_scalar
	.cfi_endproc
.LFE134:
	.size	new_scalar, .-new_scalar
	.p2align 4
	.globl	new_vertex_scalar
	.type	new_vertex_scalar, @function
new_vertex_scalar:
.LFB135:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movl	$.LC90, %esi
	movl	$1, %edx
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movq	init_vertex_scalar(%rip), %rbx
	call	new_block_scalar
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%rbp, %rsi
	movl	%eax, %edi
	movq	%rbx, %rax
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	*%rax
	.cfi_endproc
.LFE135:
	.size	new_vertex_scalar, .-new_vertex_scalar
	.p2align 4
	.globl	new_vector
	.type	new_vector, @function
new_vector:
.LFB137:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$1, %edx
	movl	$.LC25, %esi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	call	new_block_scalar
	movq	%rbp, %rdi
	movl	$1, %edx
	movl	$.LC27, %esi
	movl	%eax, %r12d
	call	new_block_scalar
	xorl	%esi, %esi
	salq	$32, %rax
	orq	%rax, %r12
	movq	%r12, %rdi
	call	*init_vector(%rip)
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%r12, %rax
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE137:
	.size	new_vector, .-new_vector
	.p2align 4
	.globl	new_face_vector
	.type	new_face_vector, @function
new_face_vector:
.LFB138:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$1, %edx
	movl	$.LC25, %esi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	call	new_block_scalar
	movq	%rbp, %rdi
	movl	$1, %edx
	movl	$.LC27, %esi
	movl	%eax, %r12d
	call	new_block_scalar
	xorl	%esi, %esi
	salq	$32, %rax
	orq	%rax, %r12
	movq	%r12, %rdi
	call	*init_face_vector(%rip)
	addq	$8, %rsp
	.cfi_def_cfa_offset 24
	movq	%r12, %rax
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE138:
	.size	new_face_vector, .-new_face_vector
	.section	.rodata.str1.1
.LC91:
	.string	"mu"
.LC92:
	.string	"draw_vof (c = 'f');"
	.text
	.p2align 4
	.type	defaults_3, @function
defaults_3:
.LFB365:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movq	alphav(%rip), %rax
	pxor	%xmm0, %xmm0
	ucomisd	mu1(%rip), %xmm0
	movq	%rax, alpha(%rip)
	movl	rhov(%rip), %eax
	movl	%eax, rho(%rip)
	jp	.L3010
	jne	.L3010
	ucomisd	mu2(%rip), %xmm0
	jp	.L3010
	jne	.L3010
.L3012:
	movl	$.LC92, %edi
	xorl	%esi, %esi
	call	display
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3010:
	.cfi_restore_state
	movl	$.LC91, %edi
	call	new_face_vector
	movq	%rax, mu(%rip)
	jmp	.L3012
	.cfi_endproc
.LFE365:
	.size	defaults_3, .-defaults_3
	.p2align 4
	.globl	new_block_vector
	.type	new_block_vector, @function
new_block_vector:
.LFB139:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%esi, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	%esi, %r14d
	movl	$.LC25, %esi
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	call	new_block_scalar
	movl	%r14d, %edx
	movl	$.LC27, %esi
	movq	%rbp, %rdi
	movl	%eax, %ebx
	call	new_block_scalar
	salq	$32, %rax
	orq	%rax, %rbx
	movq	%rbx, %rdx
	movq	%rbx, 16(%rsp)
	sarq	$32, %rdx
	movq	%rdx, 24(%rsp)
	testl	%r14d, %r14d
	jle	.L3017
	movslq	%ebx, %rdi
	movl	%edx, %r12d
	movl	%ebx, %r15d
	leaq	(%rdi,%rdi,4), %rax
	movq	%rdi, 32(%rsp)
	leaq	(%rdi,%rax,2), %rcx
	movl	%ebx, %eax
	addl	%r14d, %eax
	salq	$4, %rcx
	movl	%eax, 12(%rsp)
	movslq	%edx, %rax
	subq	%rdi, %rdx
	movq	%rcx, %r13
	movq	%rax, 40(%rsp)
	movq	%rdx, %rax
	leaq	(%rdx,%rdx,4), %rdx
	leaq	(%rax,%rdx,2), %rbp
	salq	$4, %rbp
	.p2align 4,,10
	.p2align 3
.L3018:
	movl	%r12d, %eax
	movl	%r15d, %edi
	xorl	%esi, %esi
	subl	%ebx, %eax
	addl	%r15d, %eax
	movl	%eax, %eax
	salq	$32, %rax
	orq	%rax, %rdi
	call	*init_vector(%rip)
	movq	_attribute(%rip), %rax
	movl	%ebx, %esi
	subl	%r15d, %esi
	addl	$1, %r15d
	leaq	(%rax,%r13), %rdi
	movl	%esi, 64(%rax,%r13)
	addq	$176, %r13
	movl	%esi, 64(%rbp,%rdi)
	cmpl	12(%rsp), %r15d
	jne	.L3018
.L3019:
	movq	32(%rsp), %rcx
	movq	40(%rsp), %rbx
	leaq	(%rcx,%rcx,4), %rdx
	leaq	(%rcx,%rdx,2), %rdx
	salq	$4, %rdx
	movl	%r14d, 64(%rax,%rdx)
	leaq	(%rbx,%rbx,4), %rdx
	leaq	(%rbx,%rdx,2), %rdx
	salq	$4, %rdx
	movl	%r14d, 64(%rax,%rdx)
	movq	24(%rsp), %rdx
	movl	16(%rsp), %eax
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	salq	$32, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	orq	%rdx, %rax
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3017:
	.cfi_restore_state
	movslq	16(%rsp), %rbx
	movq	_attribute(%rip), %rax
	movq	%rbx, 32(%rsp)
	movslq	24(%rsp), %rbx
	movq	%rbx, 40(%rsp)
	jmp	.L3019
	.cfi_endproc
.LFE139:
	.size	new_block_vector, .-new_block_vector
	.p2align 4
	.globl	new_block_face_vector
	.type	new_block_face_vector, @function
new_block_face_vector:
.LFB140:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%esi, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	%esi, %r14d
	movl	$.LC25, %esi
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	call	new_block_scalar
	movl	%r14d, %edx
	movl	$.LC27, %esi
	movq	%rbp, %rdi
	movl	%eax, %ebx
	call	new_block_scalar
	salq	$32, %rax
	orq	%rax, %rbx
	movq	%rbx, %rdx
	movq	%rbx, 16(%rsp)
	sarq	$32, %rdx
	movq	%rdx, 24(%rsp)
	testl	%r14d, %r14d
	jle	.L3023
	movslq	%ebx, %rdi
	movl	%edx, %r12d
	movl	%ebx, %r15d
	leaq	(%rdi,%rdi,4), %rax
	movq	%rdi, 32(%rsp)
	leaq	(%rdi,%rax,2), %rcx
	movl	%ebx, %eax
	addl	%r14d, %eax
	salq	$4, %rcx
	movl	%eax, 12(%rsp)
	movslq	%edx, %rax
	subq	%rdi, %rdx
	movq	%rcx, %r13
	movq	%rax, 40(%rsp)
	movq	%rdx, %rax
	leaq	(%rdx,%rdx,4), %rdx
	leaq	(%rax,%rdx,2), %rbp
	salq	$4, %rbp
	.p2align 4,,10
	.p2align 3
.L3024:
	movl	%r12d, %eax
	movl	%r15d, %edi
	xorl	%esi, %esi
	subl	%ebx, %eax
	addl	%r15d, %eax
	movl	%eax, %eax
	salq	$32, %rax
	orq	%rax, %rdi
	call	*init_face_vector(%rip)
	movq	_attribute(%rip), %rax
	movl	%ebx, %esi
	subl	%r15d, %esi
	addl	$1, %r15d
	leaq	(%rax,%r13), %rdi
	movl	%esi, 64(%rax,%r13)
	addq	$176, %r13
	movl	%esi, 64(%rbp,%rdi)
	cmpl	12(%rsp), %r15d
	jne	.L3024
.L3025:
	movq	32(%rsp), %rcx
	movq	40(%rsp), %rbx
	leaq	(%rcx,%rcx,4), %rdx
	leaq	(%rcx,%rdx,2), %rdx
	salq	$4, %rdx
	movl	%r14d, 64(%rax,%rdx)
	leaq	(%rbx,%rbx,4), %rdx
	leaq	(%rbx,%rdx,2), %rdx
	salq	$4, %rdx
	movl	%r14d, 64(%rax,%rdx)
	movq	24(%rsp), %rdx
	movl	16(%rsp), %eax
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	salq	$32, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	orq	%rdx, %rax
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3023:
	.cfi_restore_state
	movslq	16(%rsp), %rbx
	movq	_attribute(%rip), %rax
	movq	%rbx, 32(%rsp)
	movslq	24(%rsp), %rbx
	movq	%rbx, 40(%rsp)
	jmp	.L3025
	.cfi_endproc
.LFE140:
	.size	new_block_face_vector, .-new_block_face_vector
	.section	.rodata.str1.1
.LC93:
	.string	"%s.x"
.LC94:
	.string	"%s.y"
	.text
	.p2align 4
	.globl	new_tensor
	.type	new_tensor, @function
new_tensor:
.LFB141:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	pushq	%r12
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	movq	%rdi, %r12
	call	strlen
	movq	%r12, %rdx
	movl	$.LC93, %esi
	addq	$18, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rdi
	call	new_vector
	movq	%r12, %rdx
	movl	$.LC94, %esi
	movq	%rsp, %rdi
	movq	%rax, %r13
	xorl	%eax, %eax
	call	sprintf
	movq	%rsp, %rdi
	call	new_vector
	movq	%r13, %rdi
	xorl	%edx, %edx
	movq	%rax, %r12
	movq	%rax, %rsi
	call	*init_tensor(%rip)
	leaq	-16(%rbp), %rsp
	movq	%r13, %rax
	movq	%r12, %rdx
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE141:
	.size	new_tensor, .-new_tensor
	.section	.rodata.str1.1
.LC95:
	.string	"%s.x.x"
.LC96:
	.string	"%s.y.y"
.LC97:
	.string	"%s.x.y"
	.text
	.p2align 4
	.globl	new_symmetric_tensor
	.type	new_symmetric_tensor, @function
new_symmetric_tensor:
.LFB142:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	pushq	%r12
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	movq	%rdi, %r12
	pushq	%rbx
	subq	$8, %rsp
	.cfi_offset 3, -40
	call	strlen
	movq	%r12, %rdx
	movl	$.LC95, %esi
	addq	$20, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	xorl	%eax, %eax
	movq	%rsp, %rdi
	call	sprintf
	movq	%rsp, %rdi
	movl	$1, %edx
	movl	$.LC90, %esi
	call	new_block_scalar
	movq	%r12, %rdx
	movq	%rsp, %rdi
	movl	$.LC96, %esi
	movl	%eax, %r13d
	xorl	%eax, %eax
	call	sprintf
	movq	%rsp, %rdi
	movl	$1, %edx
	movl	$.LC90, %esi
	call	new_block_scalar
	movq	%r12, %rdx
	movq	%rsp, %rdi
	movl	$.LC97, %esi
	movq	%rax, %rbx
	xorl	%eax, %eax
	call	sprintf
	movq	%rsp, %rdi
	movl	$1, %edx
	movl	$.LC90, %esi
	call	new_block_scalar
	salq	$32, %rbx
	xorl	%edx, %edx
	salq	$32, %rax
	orq	%rax, %r13
	shrq	$32, %rax
	orq	%rax, %rbx
	movq	%r13, %rdi
	movq	%rbx, %rsi
	call	*init_tensor(%rip)
	leaq	-24(%rbp), %rsp
	movq	%r13, %rax
	movq	%rbx, %rdx
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE142:
	.size	new_symmetric_tensor, .-new_symmetric_tensor
	.p2align 4
	.globl	init_const_scalar
	.type	init_const_scalar, @function
init_const_scalar:
.LFB143:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	movslq	%edi, %rbx
	leal	-65535(%rbx), %esi
	subq	$16, %rsp
	.cfi_def_cfa_offset 32
	cmpl	nconst(%rip), %esi
	movq	_constant(%rip), %rdi
	jg	.L3035
	movsd	%xmm0, -524288(%rdi,%rbx,8)
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3035:
	.cfi_restore_state
	movl	%esi, nconst(%rip)
	movslq	%esi, %rsi
	salq	$3, %rsi
	movsd	%xmm0, 8(%rsp)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, %rdi
	movq	%rax, _constant(%rip)
	movsd	%xmm0, -524288(%rdi,%rbx,8)
	addq	$16, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE143:
	.size	init_const_scalar, .-init_const_scalar
	.p2align 4
	.globl	new_const_scalar
	.type	new_const_scalar, @function
new_const_scalar:
.LFB144:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	leal	65536(%rsi), %r12d
	addl	$1, %esi
	subq	$16, %rsp
	.cfi_def_cfa_offset 32
	cmpl	nconst(%rip), %esi
	movq	_constant(%rip), %rdi
	jg	.L3039
.L3037:
	movslq	%r12d, %rax
	movsd	%xmm0, -524288(%rdi,%rax,8)
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movl	%r12d, %eax
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3039:
	.cfi_restore_state
	movl	%esi, nconst(%rip)
	movslq	%esi, %rsi
	salq	$3, %rsi
	movsd	%xmm0, 8(%rsp)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, _constant(%rip)
	movq	%rax, %rdi
	jmp	.L3037
	.cfi_endproc
.LFE144:
	.size	new_const_scalar, .-new_const_scalar
	.p2align 4
	.globl	init_const_vector
	.type	init_const_vector, @function
init_const_vector:
.LFB145:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	leal	-65535(%rdi), %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdx, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movq	%rdi, %rbx
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	movl	nconst(%rip), %eax
	movsd	(%rdx), %xmm0
	movq	_constant(%rip), %rdi
	cmpl	%eax, %r12d
	jg	.L3044
.L3041:
	movslq	%ebx, %rdx
	sarq	$32, %rbx
	movsd	%xmm0, -524288(%rdi,%rdx,8)
	leal	-65535(%rbx), %esi
	movsd	8(%rbp), %xmm0
	cmpl	%esi, %eax
	jl	.L3045
.L3042:
	movsd	%xmm0, -524288(%rdi,%rbx,8)
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3044:
	.cfi_restore_state
	movslq	%r12d, %rsi
	movsd	%xmm0, 8(%rsp)
	salq	$3, %rsi
	movl	%r12d, nconst(%rip)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, _constant(%rip)
	movq	%rax, %rdi
	movl	%r12d, %eax
	jmp	.L3041
	.p2align 4,,10
	.p2align 3
.L3045:
	movl	%esi, nconst(%rip)
	movslq	%esi, %rsi
	salq	$3, %rsi
	movsd	%xmm0, 8(%rsp)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, _constant(%rip)
	movq	%rax, %rdi
	jmp	.L3042
	.cfi_endproc
.LFE145:
	.size	init_const_vector, .-init_const_vector
	.p2align 4
	.globl	new_const_vector
	.type	new_const_vector, @function
new_const_vector:
.LFB146:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	leal	65537(%rsi), %r14d
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movq	%rdx, %r13
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	leal	1(%rsi), %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	leal	65536(%rsi), %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movl	%esi, %ebx
	subq	$16, %rsp
	.cfi_def_cfa_offset 64
	movl	nconst(%rip), %eax
	movsd	(%rdx), %xmm0
	movq	_constant(%rip), %rdi
	cmpl	%eax, %r12d
	jg	.L3050
.L3047:
	movslq	%ebp, %r12
	addl	$2, %ebx
	salq	$3, %r12
	movsd	%xmm0, -524288(%rdi,%r12)
	movsd	8(%r13), %xmm0
	cmpl	%ebx, %eax
	jl	.L3051
.L3048:
	movsd	%xmm0, -524280(%rdi,%r12)
	movq	%r14, %rdx
	movl	%ebp, %eax
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	salq	$32, %rdx
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	orq	%rdx, %rax
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3050:
	.cfi_restore_state
	movslq	%r12d, %rsi
	movsd	%xmm0, 8(%rsp)
	salq	$3, %rsi
	movl	%r12d, nconst(%rip)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, _constant(%rip)
	movq	%rax, %rdi
	movl	%r12d, %eax
	jmp	.L3047
	.p2align 4,,10
	.p2align 3
.L3051:
	leaq	-524272(%r12), %rsi
	movsd	%xmm0, 8(%rsp)
	movl	%ebx, nconst(%rip)
	call	realloc
	movsd	8(%rsp), %xmm0
	movq	%rax, _constant(%rip)
	movq	%rax, %rdi
	jmp	.L3048
	.cfi_endproc
.LFE146:
	.size	new_const_vector, .-new_const_vector
	.section	.rodata.str1.8
	.align 8
.LC98:
	.string	"b.block > 0 && a.block == b.block"
	.text
	.p2align 4
	.globl	scalar_clone
	.type	scalar_clone, @function
scalar_clone:
.LFB147:
	.cfi_startproc
	movslq	%edi, %rdi
	movslq	%esi, %rsi
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	leaq	(%rdi,%rdi,4), %rax
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	leaq	(%rdi,%rax,2), %rbx
	leaq	(%rsi,%rsi,4), %rax
	leaq	(%rsi,%rax,2), %rax
	salq	$4, %rbx
	addq	_attribute(%rip), %rbx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rbx), %r14
	movq	%rax, %rbp
	movl	64(%rax), %eax
	movq	(%rbx), %r12
	movq	8(%rbx), %r13
	testl	%eax, %eax
	jle	.L3053
	cmpl	64(%rbx), %eax
	jne	.L3053
	movq	72(%rbx), %rdi
	call	free
	movdqu	0(%rbp), %xmm0
	movslq	nboundary(%rip), %rcx
	movups	%xmm0, (%rbx)
	movdqu	16(%rbp), %xmm1
	movups	%xmm1, 16(%rbx)
	movdqu	32(%rbp), %xmm2
	movups	%xmm2, 32(%rbx)
	movdqu	48(%rbp), %xmm3
	movups	%xmm3, 48(%rbx)
	movdqu	64(%rbp), %xmm4
	movups	%xmm4, 64(%rbx)
	movdqu	80(%rbp), %xmm5
	movups	%xmm5, 80(%rbx)
	movdqu	96(%rbp), %xmm6
	movups	%xmm6, 96(%rbx)
	movdqu	112(%rbp), %xmm7
	movups	%xmm7, 112(%rbx)
	movdqu	128(%rbp), %xmm0
	movups	%xmm0, 128(%rbx)
	movdqu	144(%rbp), %xmm1
	movups	%xmm1, 144(%rbx)
	movdqu	160(%rbp), %xmm2
	movq	%r14, 32(%rbx)
	movq	%r12, (%rbx)
	movq	%r13, 8(%rbx)
	movups	%xmm2, 160(%rbx)
	testl	%ecx, %ecx
	jle	.L3055
	movq	0(%rbp), %rdi
	movq	8(%rbp), %rsi
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L3056:
	movq	(%rdi,%rax,8), %rdx
	movq	%rdx, (%r12,%rax,8)
	movq	(%rsi,%rax,8), %rdx
	movq	%rdx, 0(%r13,%rax,8)
	addq	$1, %rax
	cmpq	%rcx, %rax
	jne	.L3056
.L3055:
	movq	72(%rbp), %rbp
	testq	%rbp, %rbp
	je	.L3059
	movl	0(%rbp), %esi
	xorl	%edi, %edi
	testl	%esi, %esi
	js	.L3057
	.p2align 4,,10
	.p2align 3
.L3058:
	call	list_append
	movl	4(%rbp), %esi
	addq	$4, %rbp
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L3058
.L3057:
	movq	%rdi, 72(%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3059:
	.cfi_restore_state
	xorl	%edi, %edi
	movq	%rdi, 72(%rbx)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
.L3053:
	.cfi_restore_state
	movl	$.LC98, %edx
	movl	$250, %esi
	movl	$.LC89, %edi
	call	qassert
	.cfi_endproc
.LFE147:
	.size	scalar_clone, .-scalar_clone
	.section	.rodata.str1.1
.LC99:
	.string	"c"
	.text
	.p2align 4
	.globl	list_clone
	.type	list_clone, @function
list_clone:
.LFB148:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	movq	%rdi, %r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movq	datasize(%rip), %rax
	shrq	$3, %rax
	movslq	%eax, %rdx
	leaq	15(,%rdx,4), %rdx
	andq	$-16, %rdx
	subq	%rdx, %rsp
	movq	%rsp, %rbx
	testl	%eax, %eax
	jle	.L3065
	subl	$1, %eax
	movl	$255, %esi
	movq	%rbx, %rdi
	leaq	4(,%rax,4), %rdx
	call	memset
.L3065:
	testq	%r13, %r13
	je	.L3066
	movl	0(%r13), %r8d
	testl	%r8d, %r8d
	js	.L3066
	xorl	%r12d, %r12d
	.p2align 4,,10
	.p2align 3
.L3069:
	movslq	%r8d, %r15
	movl	%r8d, -52(%rbp)
	leaq	(%r15,%r15,4), %rax
	leaq	(%r15,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	64(%rax), %edx
	cmpl	$1, %edx
	jg	.L3085
	movl	$1, %edx
.L3085:
	movl	$.LC90, %esi
	movl	$.LC99, %edi
	addq	$4, %r13
	call	new_block_scalar
	movl	-52(%rbp), %esi
	movl	%eax, %r14d
	movl	%eax, %edi
	call	scalar_clone
	movq	%r12, %rdi
	movl	%r14d, %esi
	movl	%r14d, (%rbx,%r15,4)
	call	list_append
	movl	0(%r13), %r8d
	movq	%rax, %r12
	testl	%r8d, %r8d
	jns	.L3069
	testq	%rax, %rax
	je	.L3066
	movslq	(%rax), %rax
	testl	%eax, %eax
	js	.L3064
	movq	_attribute(%rip), %rsi
	movq	%r12, %rcx
	.p2align 4,,10
	.p2align 3
.L3074:
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movslq	48(%rax), %rdx
	testl	%edx, %edx
	js	.L3072
	movl	(%rbx,%rdx,4), %edx
	testl	%edx, %edx
	js	.L3072
	movl	%edx, 48(%rax)
.L3072:
	movslq	52(%rax), %rdx
	testl	%edx, %edx
	js	.L3073
	movl	(%rbx,%rdx,4), %edx
	testl	%edx, %edx
	js	.L3073
	movl	%edx, 52(%rax)
.L3073:
	movslq	4(%rcx), %rax
	addq	$4, %rcx
	testl	%eax, %eax
	jns	.L3074
.L3064:
	leaq	-40(%rbp), %rsp
	movq	%r12, %rax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L3066:
	.cfi_restore_state
	xorl	%r12d, %r12d
	jmp	.L3064
	.cfi_endproc
.LFE148:
	.size	list_clone, .-list_clone
	.p2align 4
	.globl	delete
	.type	delete, @function
delete:
.LFB149:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	movq	all(%rip), %rax
	movq	%rdi, 8(%rsp)
	testq	%rax, %rax
	je	.L3086
	testq	%rdi, %rdi
	je	.L3086
	movl	(%rdi), %r13d
	movq	%rdi, (%rsp)
	testl	%r13d, %r13d
	js	.L3131
	.p2align 4,,10
	.p2align 3
.L3090:
	movslq	%r13d, %rax
	xorl	%r15d, %r15d
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %r12
	movq	_attribute(%rip), %rax
	salq	$4, %r12
	addq	%r12, %rax
	movq	%r12, %rbp
	movl	64(%rax), %r11d
	testl	%r11d, %r11d
	jle	.L3095
	.p2align 4,,10
	.p2align 3
.L3093:
	movq	24(%rax), %rax
	leal	(%r15,%r13), %edi
	testq	%rax, %rax
	je	.L3092
	call	*%rax
.L3092:
	movq	_attribute(%rip), %r14
	addl	$1, %r15d
	leaq	(%r14,%rbp), %rbx
	addq	$176, %rbp
	movq	32(%rbx), %rdi
	call	free
	movq	$0, 32(%rbx)
	movq	(%rbx), %rdi
	call	free
	movq	$0, (%rbx)
	movq	8(%rbx), %rdi
	call	free
	movq	$0, 8(%rbx)
	movq	72(%rbx), %rdi
	call	free
	leaq	(%r14,%r12), %rax
	movb	$1, 61(%rbx)
	movq	$0, 72(%rbx)
	cmpl	%r15d, 64(%rax)
	jg	.L3093
.L3095:
	addq	$4, (%rsp)
	movq	(%rsp), %rax
	movl	(%rax), %r13d
	testl	%r13d, %r13d
	jns	.L3090
	movq	all(%rip), %r8
	cmpq	%r8, 8(%rsp)
	je	.L3109
	movq	8(%rsp), %rax
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	js	.L3086
	movq	_attribute(%rip), %rdi
	jmp	.L3108
	.p2align 4,,10
	.p2align 3
.L3097:
	addq	$4, 8(%rsp)
	movq	8(%rsp), %rax
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	js	.L3086
.L3108:
	movslq	%ecx, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movl	64(%rdi,%rax), %esi
	testl	%esi, %esi
	jle	.L3097
	movl	(%r8), %edx
	movq	%r8, %rax
	testl	%edx, %edx
	jns	.L3098
	jmp	.L3099
	.p2align 4,,10
	.p2align 3
.L3100:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	js	.L3099
.L3098:
	cmpl	%ecx, %edx
	jne	.L3100
	movslq	%esi, %rdx
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rsi
	movl	(%rsi), %r10d
	testl	%r10d, %r10d
	js	.L3101
	.p2align 4,,10
	.p2align 3
.L3102:
	movl	(%rsi), %r9d
	addq	$4, %rax
	addq	$4, %rsi
	movl	%r9d, -4(%rax)
	movl	(%rax,%rdx), %r9d
	testl	%r9d, %r9d
	jns	.L3102
.L3101:
	movl	$-1, (%rax)
.L3099:
	movq	baseblock(%rip), %rax
	movl	(%rax), %edx
	testl	%edx, %edx
	jns	.L3103
	jmp	.L3097
	.p2align 4,,10
	.p2align 3
.L3105:
	addq	$4, %rax
	testl	%edx, %edx
	js	.L3097
.L3103:
	movl	%edx, %esi
	movl	4(%rax), %edx
	cmpl	%ecx, %esi
	jne	.L3105
	testl	%edx, %edx
	js	.L3106
	.p2align 4,,10
	.p2align 3
.L3107:
	movl	4(%rax), %edx
	addq	$4, %rax
	movl	%edx, -4(%rax)
	movl	4(%rax), %edx
	testl	%edx, %edx
	jns	.L3107
.L3106:
	movl	$-1, (%rax)
	jmp	.L3097
.L3131:
	cmpq	8(%rsp), %rax
	jne	.L3086
.L3109:
	movq	8(%rsp), %rax
	movl	$-1, (%rax)
	movq	baseblock(%rip), %rax
	movl	$-1, (%rax)
.L3086:
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE149:
	.size	delete, .-delete
	.section	.rodata.str1.1
.LC100:
	.string	"_val_higher_dimension == 0."
	.text
	.p2align 4
	.globl	free_solver
	.type	free_solver, @function
free_solver:
.LFB150:
	.cfi_startproc
	pxor	%xmm0, %xmm0
	ucomisd	_val_higher_dimension(%rip), %xmm0
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	jp	.L3149
	jne	.L3149
	movq	free_solver_funcs(%rip), %rbp
	testq	%rbp, %rbp
	je	.L3135
	movq	16(%rbp), %rax
	movq	0(%rbp), %r12
	shrq	$3, %rax
	je	.L3136
	xorl	%ebx, %ebx
	.p2align 4,,10
	.p2align 3
.L3137:
	call	*(%r12,%rbx,8)
	movq	free_solver_funcs(%rip), %rbp
	addq	$1, %rbx
	movq	16(%rbp), %rax
	shrq	$3, %rax
	cmpq	%rbx, %rax
	ja	.L3137
	movq	0(%rbp), %r12
.L3136:
	movq	%r12, %rdi
	call	free
	movq	%rbp, %rdi
	call	free
.L3135:
	movq	all(%rip), %rdi
	call	delete
	movq	all(%rip), %rdi
	call	free
	movq	baseblock(%rip), %rdi
	movq	$0, all(%rip)
	call	free
	movq	Events(%rip), %r12
	movq	$0, baseblock(%rip)
	movl	(%r12), %edx
	movq	%r12, %rbp
	testl	%edx, %edx
	jne	.L3142
	.p2align 4,,10
	.p2align 3
.L3138:
	movq	104(%rbp), %rbx
	testq	%rbx, %rbx
	je	.L3143
	.p2align 4,,10
	.p2align 3
.L3141:
	movq	%rbx, %rdi
	movq	104(%rbx), %rbx
	call	free
	testq	%rbx, %rbx
	jne	.L3141
.L3143:
	movl	112(%rbp), %eax
	addq	$112, %rbp
	testl	%eax, %eax
	je	.L3138
.L3142:
	movq	%r12, %rdi
	call	free
	movq	_attribute(%rip), %rdi
	movq	$0, Events(%rip)
	call	free
	movq	_constant(%rip), %rdi
	movq	$0, _attribute(%rip)
	call	free
	cmpq	$0, grid(%rip)
	movq	$0, _constant(%rip)
	je	.L3139
	call	free_grid.part.0
.L3139:
	movq	qpopen_pipes(%rip), %rbp
	testq	%rbp, %rbp
	jne	.L3144
	jmp	.L3145
	.p2align 4,,10
	.p2align 3
.L3147:
	cmpq	$1, %rdi
	je	.L3146
	call	pclose
.L3146:
	addq	$8, %rbp
.L3144:
	movq	0(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L3147
	movq	qpopen_pipes(%rip), %rbp
.L3145:
	movq	%rbp, %rdi
	call	free
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	movq	$0, qpopen_pipes(%rip)
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
.L3149:
	.cfi_restore_state
	movl	$.LC100, %edx
	movl	$329, %esi
	movl	$.LC89, %edi
	call	qassert
	.cfi_endproc
.LFE150:
	.size	free_solver, .-free_solver
	.p2align 4
	.globl	boundary_flux
	.type	boundary_flux, @function
boundary_flux:
.LFB151:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	testq	%rdi, %rdi
	je	.L3171
	movl	(%rdi), %edx
	movq	(%rdi), %rbx
	movq	%rdi, %r12
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	testl	%edx, %edx
	js	.L3168
	movabsq	$-4294967296, %rbp
	.p2align 4,,10
	.p2align 3
.L3170:
	andq	%rbp, %rbx
	movq	%r14, %rdi
	addq	$8, %r12
	orq	%rdx, %rbx
	movl	%ebx, %esi
	shrq	$32, %rbx
	call	list_append
	movq	%rbx, %rsi
	movq	%r13, %rdi
	movq	%rax, %r14
	call	list_append
	movl	(%r12), %edx
	movq	(%r12), %rbx
	movq	%rax, %r13
	testl	%edx, %edx
	jns	.L3170
.L3168:
	movq	%r14, %rdi
	movq	%r13, %rsi
	call	*boundary_face(%rip)
	movq	%r14, %rdi
	call	free
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movq	%r13, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L3171:
	.cfi_restore_state
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	jmp	.L3168
	.cfi_endproc
.LFE151:
	.size	boundary_flux, .-boundary_flux
	.p2align 4
	.globl	boundary_internal
	.type	boundary_internal, @function
boundary_internal:
.LFB153:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L3217
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	movl	(%rdi), %ebp
	testl	%ebp, %ebp
	js	.L3175
	xorl	%r15d, %r15d
	xorl	%r8d, %r8d
	xorl	%edx, %edx
	xorl	%r13d, %r13d
	jmp	.L3197
	.p2align 4,,10
	.p2align 3
.L3179:
	movl	4(%rbx), %ebp
	addq	$4, %rbx
	testl	%ebp, %ebp
	js	.L3220
.L3197:
	cmpl	$65535, %ebp
	jg	.L3179
	movslq	%ebp, %rax
	movq	_attribute(%rip), %r14
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %r12
	salq	$4, %r12
	addq	%r14, %r12
	movl	64(%r12), %r10d
	testl	%r10d, %r10d
	jle	.L3179
	movl	88(%r12), %edi
	testl	%edi, %edi
	jne	.L3185
	movq	72(%r12), %rcx
	testq	%rcx, %rcx
	je	.L3179
	movslq	(%rcx), %rax
	testl	%eax, %eax
	jns	.L3186
	jmp	.L3179
	.p2align 4,,10
	.p2align 3
.L3221:
	movslq	4(%rcx), %rax
	addq	$4, %rcx
	testl	%eax, %eax
	js	.L3179
.L3186:
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	movl	88(%r14,%rax), %esi
	testl	%esi, %esi
	je	.L3221
.L3185:
	movl	56(%r12), %r9d
	testl	%r9d, %r9d
	setne	%cl
	cmpl	$2, %edi
	setne	%al
	andb	%al, %cl
	jne	.L3222
.L3182:
	movl	cm(%rip), %esi
	cmpl	$65535, %esi
	jg	.L3196
	movslq	%esi, %rax
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	88(%r14,%rax), %eax
	testl	%eax, %eax
	jne	.L3223
.L3196:
	cmpl	$2, 56(%r12)
	je	.L3179
.L3225:
	movl	%ebp, %esi
	movq	%r13, %rdi
	addq	$4, %rbx
	movb	%dl, 15(%rsp)
	movq	%r8, (%rsp)
	call	list_add_depends
	movl	(%rbx), %ebp
	movzbl	15(%rsp), %edx
	movq	(%rsp), %r8
	movq	%rax, %r13
	testl	%ebp, %ebp
	jns	.L3197
	.p2align 4,,10
	.p2align 3
.L3220:
	testb	%dl, %dl
	je	.L3198
	movq	%r8, %rdi
	movq	%r8, (%rsp)
	movq	%r15, %rsi
	call	*boundary_face(%rip)
	movq	(%rsp), %rdi
	call	free
	movq	%r15, %rdi
	call	free
.L3198:
	testq	%r13, %r13
	je	.L3175
	movl	$-1, %esi
	movq	%r13, %rdi
	call	*boundary_level(%rip)
	movslq	0(%r13), %rax
	testl	%eax, %eax
	js	.L3199
	movq	_attribute(%rip), %rsi
	movq	%r13, %rdx
	.p2align 4,,10
	.p2align 3
.L3200:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$0, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3200
.L3199:
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r13, %rdi
	popq	%rbx
	.cfi_restore 3
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_restore 6
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_restore 12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_restore 13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_restore 14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_restore 15
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L3222:
	.cfi_restore_state
	cmpl	%ebp, 48(%r12)
	je	.L3224
.L3187:
	cmpl	%ebp, 52(%r12)
	jne	.L3182
	testq	%r15, %r15
	je	.L3192
	movl	(%r15), %eax
	testl	%eax, %eax
	js	.L3192
	cmpl	%ebp, %eax
	je	.L3193
	movq	%r15, %rax
	jmp	.L3194
	.p2align 4,,10
	.p2align 3
.L3195:
	cmpl	%ebp, %edx
	je	.L3193
.L3194:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L3195
.L3192:
	movq	%r15, %rdi
	movl	%ebp, %esi
	movb	%cl, 15(%rsp)
	movq	%r8, (%rsp)
	call	list_append
	movzbl	15(%rsp), %ecx
	movq	(%rsp), %r8
	movq	%rax, %r15
.L3193:
	movl	%ecx, %edx
	jmp	.L3182
	.p2align 4,,10
	.p2align 3
.L3175:
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3223:
	.cfi_restore_state
	movq	%r13, %rdi
	movb	%dl, 15(%rsp)
	movq	%r8, (%rsp)
	call	list_add_depends
	cmpl	$2, 56(%r12)
	movzbl	15(%rsp), %edx
	movq	(%rsp), %r8
	movq	%rax, %r13
	je	.L3179
	jmp	.L3225
	.p2align 4,,10
	.p2align 3
.L3217:
	.cfi_def_cfa_offset 8
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	ret
.L3224:
	.cfi_def_cfa_offset 80
	.cfi_offset 3, -56
	.cfi_offset 6, -48
	.cfi_offset 12, -40
	.cfi_offset 13, -32
	.cfi_offset 14, -24
	.cfi_offset 15, -16
	testq	%r8, %r8
	je	.L3188
	movl	(%r8), %eax
	testl	%eax, %eax
	js	.L3188
	cmpl	%ebp, %eax
	je	.L3189
	movq	%r8, %rax
	jmp	.L3190
	.p2align 4,,10
	.p2align 3
.L3191:
	cmpl	%ebp, %edx
	je	.L3189
.L3190:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L3191
.L3188:
	movq	%r8, %rdi
	movl	%ebp, %esi
	movb	%cl, (%rsp)
	call	list_append
	movzbl	(%rsp), %ecx
	movq	%rax, %r8
.L3189:
	movl	%ecx, %edx
	jmp	.L3187
	.cfi_endproc
.LFE153:
	.size	boundary_internal, .-boundary_internal
	.section	.rodata.str1.8
	.align 8
.LC101:
	.string	"%s:%d: warning: vertex scalar '%s' should be assigned with a foreach_vertex() loop\n"
	.align 8
.LC102:
	.string	"%s:%d: warning: face vector '%s' should be assigned with a foreach_face() loop\n"
	.align 8
.LC103:
	.string	"%s:%d: warning: scalar '%s' should be assigned with a foreach_face(x|y|z) loop\n"
	.text
	.p2align 4
	.globl	end_stencil
	.type	end_stencil, @function
end_stencil:
.LFB66:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	baseblock(%rip), %r14
	testq	%r14, %r14
	je	.L3226
	movl	(%r14), %ebp
	testl	%ebp, %ebp
	js	.L3226
	movq	$0, 8(%rsp)
	movq	%rdi, %r12
	xorl	%r15d, %r15d
	movq	$0, 16(%rsp)
	movb	$0, 35(%rsp)
	movq	$0, (%rsp)
	.p2align 4,,10
	.p2align 3
.L3265:
	movslq	%ebp, %rax
	movq	_attribute(%rip), %rdx
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %r13
	salq	$4, %r13
	leaq	(%rdx,%r13), %rbx
	movzbl	80(%rbx), %ecx
	movzbl	81(%rbx), %r8d
	testb	%cl, %cl
	jne	.L3319
.L3230:
	testb	%r8b, %r8b
	je	.L3243
	cmpb	$0, 20(%r12)
	jne	.L3246
	movl	12(%r12), %r8d
	testl	%r8d, %r8d
	je	.L3246
.L3274:
	cmpl	$-1, 40(%rbx)
	je	.L3320
	.p2align 4,,10
	.p2align 3
.L3246:
	movl	56(%rbx), %edi
	movl	16(%r12), %eax
	testl	%edi, %edi
	je	.L3247
.L3273:
	movl	16(%r12), %esi
	testl	%esi, %esi
	jne	.L3248
	movl	12(%r12), %ecx
	testl	%ecx, %ecx
	jne	.L3321
	.p2align 4,,10
	.p2align 3
.L3248:
	movq	%r15, %rdi
	movl	%ebp, %esi
	call	list_append
	movq	baseblock(%rip), %rbx
	movq	%rax, %r15
	testq	%rbx, %rbx
	jne	.L3322
.L3243:
	movl	4(%r14), %ebp
	addq	$4, %r14
	testl	%ebp, %ebp
	jns	.L3265
	cmpb	$0, 35(%rsp)
	je	.L3266
	movq	16(%rsp), %r14
	movq	8(%rsp), %rbx
	movq	%r14, %rdi
	movq	%rbx, %rsi
	call	*boundary_face(%rip)
	movq	%r14, %rdi
	call	free
	movq	%rbx, %rdi
	call	free
.L3266:
	movq	(%rsp), %rbx
	testq	%rbx, %rbx
	je	.L3267
	movl	8(%r12), %edx
	movq	(%r12), %rsi
	movq	%rbx, %rdi
	call	boundary_internal
	movq	%rbx, %rdi
	call	free
.L3267:
	testq	%r15, %r15
	je	.L3226
	movslq	(%r15), %rax
	movq	_attribute(%rip), %rsi
	movq	%r15, %rdx
	testl	%eax, %eax
	js	.L3270
	.p2align 4,,10
	.p2align 3
.L3269:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$1, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3269
.L3270:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r15, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
	.p2align 4,,10
	.p2align 3
.L3319:
	.cfi_restore_state
	movl	88(%rbx), %edi
	testl	%edi, %edi
	jne	.L3236
	movq	72(%rbx), %rsi
	testq	%rsi, %rsi
	je	.L3230
	movslq	(%rsi), %rax
	testl	%eax, %eax
	jns	.L3237
	jmp	.L3230
	.p2align 4,,10
	.p2align 3
.L3323:
	movslq	4(%rsi), %rax
	addq	$4, %rsi
	testl	%eax, %eax
	js	.L3230
.L3237:
	leaq	(%rax,%rax,4), %r9
	leaq	(%rax,%r9,2), %rax
	salq	$4, %rax
	movl	88(%rdx,%rax), %r9d
	testl	%r9d, %r9d
	je	.L3323
.L3236:
	movl	56(%rbx), %r10d
	movl	84(%rbx), %eax
	testl	%r10d, %r10d
	je	.L3324
	testl	%eax, %eax
	jg	.L3325
	testb	%r8b, %r8b
	jne	.L3239
	movslq	48(%rbx), %r13
	testl	%r13d, %r13d
	js	.L3275
	cmpl	%ebp, %r13d
	jne	.L3240
	movq	(%rbx), %rax
	cmpq	$0, 8(%rax)
	je	.L3326
.L3241:
	movq	(%rsp), %rdi
	movl	%ebp, %esi
	movb	%cl, 36(%rsp)
	movslq	%ebp, %r13
	movq	%rdx, 24(%rsp)
	call	list_append
	movq	24(%rsp), %rdx
	movzbl	36(%rsp), %ecx
	movq	%rax, (%rsp)
.L3240:
	cmpl	%ebp, 52(%rbx)
	jne	.L3243
	leaq	0(%r13,%r13,4), %rax
	leaq	0(%r13,%rax,2), %rax
	salq	$4, %rax
	movq	(%rdx,%rax), %rax
	cmpq	$0, 24(%rax)
	je	.L3327
.L3244:
	movq	(%rsp), %rdi
	movl	%ebp, %esi
	call	list_append
	movq	%rax, (%rsp)
	jmp	.L3243
	.p2align 4,,10
	.p2align 3
.L3247:
	testl	%eax, %eax
	je	.L3249
	movslq	48(%rbx), %rcx
	testl	%ecx, %ecx
	js	.L3328
	movq	32(%rbx), %r13
	testq	%r13, %r13
	jne	.L3329
.L3252:
	leaq	(%rcx,%rcx,4), %rax
	movq	48(%rbx), %rdi
	leaq	(%rcx,%rax,2), %rcx
	movslq	52(%rbx), %rax
	salq	$4, %rcx
	leaq	(%rax,%rax,4), %rsi
	movzwl	80(%rdx,%rcx), %r8d
	movq	%rcx, 40(%rsp)
	leaq	(%rax,%rsi,2), %rbx
	movq	%r13, %rsi
	salq	$4, %rbx
	movl	%r8d, 36(%rsp)
	movzwl	80(%rdx,%rbx), %edx
	movl	%edx, 24(%rsp)
	call	*init_face_vector(%rip)
	movq	_attribute(%rip), %rax
	movl	24(%rsp), %edx
	movq	%r13, %rdi
	movl	36(%rsp), %r8d
	movq	40(%rsp), %rcx
	movw	%r8w, 80(%rax,%rcx)
	movw	%dx, 80(%rax,%rbx)
	call	free
	jmp	.L3248
	.p2align 4,,10
	.p2align 3
.L3322:
	movl	(%rbx), %esi
	testl	%esi, %esi
	js	.L3243
	movq	_attribute(%rip), %r13
	movq	%rax, %rdi
	.p2align 4,,10
	.p2align 3
.L3264:
	movslq	%esi, %rdx
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rdx
	salq	$4, %rdx
	movq	72(%r13,%rdx), %rdx
	testq	%rdx, %rdx
	jne	.L3318
	jmp	.L3259
	.p2align 4,,10
	.p2align 3
.L3263:
	cmpl	%ebp, %ecx
	je	.L3261
	addq	$4, %rdx
.L3318:
	movl	(%rdx), %ecx
	testl	%ecx, %ecx
	jns	.L3263
.L3259:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L3264
.L3330:
	movq	%rdi, %r15
	jmp	.L3243
	.p2align 4,,10
	.p2align 3
.L3261:
	call	list_append
	movl	4(%rbx), %esi
	addq	$4, %rbx
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L3264
	jmp	.L3330
	.p2align 4,,10
	.p2align 3
.L3249:
	cmpb	$0, 20(%r12)
	je	.L3248
	cmpl	$-1, 40(%rbx)
	je	.L3331
.L3256:
	movq	32(%rbx), %rbx
	testq	%rbx, %rbx
	je	.L3257
	movq	%rbx, %rdi
	call	strdup
	movq	%rax, %rbx
.L3257:
	movl	%ebp, %edi
	movq	%rbx, %rsi
	call	*init_vertex_scalar(%rip)
	movq	_attribute(%rip), %rax
	movq	%rbx, %rdi
	movq	$-1, 48(%rax,%r13)
	call	free
	jmp	.L3248
.L3324:
	testl	%eax, %eax
	jle	.L3230
	movq	(%rsp), %rdi
	movl	%ebp, %esi
	movb	%r8b, 36(%rsp)
	movq	%rdx, 24(%rsp)
	call	list_append
	movzbl	36(%rsp), %r8d
	movq	24(%rsp), %rdx
	movq	%rax, (%rsp)
	jmp	.L3230
.L3328:
	cmpl	$1, %eax
	je	.L3332
	cmpl	$2, %eax
	jne	.L3333
	movq	(%rbx), %rax
	movl	$2, 56(%rbx)
	movl	%ebp, 52(%rbx)
	movq	$0, 16(%rax)
	movq	$0, 24(%rax)
	jmp	.L3248
.L3320:
	cmpl	$-1, 44(%rbx)
	jne	.L3246
	movq	32(%rbx), %r8
	movq	(%r12), %rdx
	movl	$.LC101, %esi
	xorl	%eax, %eax
	movl	8(%r12), %ecx
	movq	stderr(%rip), %rdi
	call	fprintf
	movq	_attribute(%rip), %rdx
	leaq	(%rdx,%r13), %rbx
	jmp	.L3246
.L3321:
	movl	8(%r12), %ecx
	movq	32(%rbx), %r8
	movl	$.LC102, %esi
	xorl	%eax, %eax
	movq	(%r12), %rdx
	movq	stderr(%rip), %rdi
	call	fprintf
	jmp	.L3248
.L3226:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L3239:
	.cfi_restore_state
	cmpb	$0, 20(%r12)
	jne	.L3273
	movl	12(%r12), %eax
	testl	%eax, %eax
	jne	.L3274
	jmp	.L3273
.L3332:
	movq	(%rbx), %rax
	movl	$2, 56(%rbx)
	movl	%ebp, 48(%rbx)
	movq	$0, (%rax)
	movq	$0, 8(%rax)
	jmp	.L3248
.L3325:
	movq	(%rsp), %rdi
	movl	%ebp, %esi
	movb	%r8b, 36(%rsp)
	movq	%rdx, 24(%rsp)
	call	list_append
	movq	24(%rsp), %rdx
	movzbl	36(%rsp), %r8d
	movq	%rax, (%rsp)
	jmp	.L3230
.L3333:
	movl	12(%r12), %edx
	testl	%edx, %edx
	je	.L3248
	movl	8(%r12), %ecx
	movq	32(%rbx), %r8
	movl	$.LC103, %esi
	xorl	%eax, %eax
	movq	(%r12), %rdx
	movq	stderr(%rip), %rdi
	call	fprintf
	jmp	.L3248
.L3329:
	movq	%r13, %rdi
	movq	%rdx, 24(%rsp)
	call	strdup
	movq	%rax, %rdi
	movq	%rax, %r13
	call	strlen
	movq	24(%rsp), %rdx
	leaq	-1(%r13,%rax), %rax
	cmpq	%rax, %r13
	jne	.L3253
	jmp	.L3317
	.p2align 4,,10
	.p2align 3
.L3254:
	subq	$1, %rax
	cmpq	%rax, %r13
	je	.L3317
.L3253:
	cmpb	$46, (%rax)
	jne	.L3254
	cmpq	%rax, %r13
	je	.L3317
	movb	$0, (%rax)
.L3317:
	movslq	48(%rbx), %rcx
	jmp	.L3252
.L3331:
	cmpl	$-1, 44(%rbx)
	jne	.L3256
	jmp	.L3248
.L3275:
	movslq	%ebp, %r13
	jmp	.L3240
.L3327:
	cmpq	$0, 16(%rax)
	jne	.L3244
	cmpl	$2, 88(%rbx)
	movb	%cl, 24(%rsp)
	je	.L3243
	movq	8(%rsp), %rdi
	movl	%ebp, %esi
	call	list_append
	movzbl	24(%rsp), %ecx
	movq	%rax, 8(%rsp)
	movb	%cl, 35(%rsp)
	jmp	.L3243
.L3326:
	cmpq	$0, (%rax)
	jne	.L3241
	cmpl	$2, %edi
	je	.L3240
	movq	16(%rsp), %rdi
	movl	%ebp, %esi
	movb	%cl, 35(%rsp)
	movq	%rdx, 24(%rsp)
	call	list_append
	movzbl	35(%rsp), %ecx
	movq	24(%rsp), %rdx
	movq	%rax, 16(%rsp)
	jmp	.L3240
	.cfi_endproc
.LFE66:
	.size	end_stencil, .-end_stencil
	.section	.rodata.str1.8
	.align 8
.LC104:
	.string	"/root/mnt/basilisk/src/grid/tree-common.h"
	.text
	.p2align 4
	.type	tree_restriction, @function
tree_restriction:
.LFB225:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movl	$799, %edx
	movl	$.LC104, %esi
	movq	%rdi, %rbp
	call	boundary_internal
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3338
.L3335:
	movl	20(%rax), %esi
	movl	$1, %edx
	leal	(%rsi,%rsi), %ecx
	salq	%cl, %rdx
	cmpq	%rdx, 8(%rax)
	je	.L3339
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3338:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L3335
	.p2align 4,,10
	.p2align 3
.L3339:
	movq	%rbp, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	multigrid_restriction
	.cfi_endproc
.LFE225:
	.size	tree_restriction, .-tree_restriction
	.section	.rodata.str1.8
	.align 8
.LC105:
	.string	"%g %g\n%g %g\n%g %g\n%g %g\n%g %g\n\n"
	.text
	.p2align 4
	.globl	output_cells
	.type	output_cells, @function
output_cells:
.LFB163:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	subq	$32, %rsp
	.cfi_def_cfa_offset 64
	movq	grid(%rip), %rdx
	movq	64(%rsp), %r12
	movsd	80(%rsp), %xmm7
	movsd	72(%rsp), %xmm12
	movsd	96(%rsp), %xmm9
	testq	%r12, %r12
	cmove	stdout(%rip), %r12
	cmpb	$0, 128(%rdx)
	movsd	%xmm7, 24(%rsp)
	jne	.L3352
.L3342:
	movl	40(%rdx), %ecx
	testl	%ecx, %ecx
	jle	.L3347
	movsd	.LC10(%rip), %xmm11
	xorl	%ebx, %ebx
	pxor	%xmm8, %xmm8
	movsd	.LC5(%rip), %xmm10
	movl	$1, %ebp
	.p2align 4,,10
	.p2align 3
.L3343:
	movq	%rbx, %rax
	pxor	%xmm0, %xmm0
	movapd	%xmm11, %xmm5
	movl	%ebp, %esi
	salq	$4, %rax
	pxor	%xmm4, %xmm4
	pxor	%xmm3, %xmm3
	addq	32(%rdx), %rax
	movl	8(%rax), %ecx
	movl	(%rax), %edi
	movl	4(%rax), %eax
	sall	%cl, %esi
	leal	-2(%rdi), %ecx
	cvtsi2sdl	%esi, %xmm0
	subl	$2, %eax
	cvtsi2sdl	%ecx, %xmm4
	comisd	%xmm8, %xmm9
	cvtsi2sdl	%eax, %xmm3
	divsd	%xmm0, %xmm5
	addsd	%xmm8, %xmm4
	addsd	%xmm8, %xmm3
	addsd	%xmm10, %xmm4
	addsd	%xmm10, %xmm3
	mulsd	L0(%rip), %xmm5
	mulsd	%xmm5, %xmm4
	mulsd	%xmm5, %xmm3
	addsd	X0(%rip), %xmm4
	addsd	Y0(%rip), %xmm3
	jbe	.L3344
	movapd	%xmm12, %xmm0
	addsd	%xmm9, %xmm0
	comisd	%xmm0, %xmm4
	ja	.L3346
	movapd	%xmm12, %xmm0
	subsd	%xmm9, %xmm0
	comisd	%xmm4, %xmm0
	ja	.L3346
	movsd	24(%rsp), %xmm6
	movapd	%xmm6, %xmm0
	addsd	%xmm9, %xmm0
	comisd	%xmm0, %xmm3
	ja	.L3346
	subsd	%xmm9, %xmm6
	comisd	%xmm3, %xmm6
	ja	.L3346
	.p2align 4,,10
	.p2align 3
.L3344:
	mulsd	%xmm10, %xmm5
	movapd	%xmm3, %xmm1
	movapd	%xmm4, %xmm2
	movq	%r12, %rdi
	movsd	%xmm9, 16(%rsp)
	movl	$.LC105, %esi
	subq	$16, %rsp
	.cfi_def_cfa_offset 80
	movl	$8, %eax
	movsd	%xmm12, 24(%rsp)
	subsd	%xmm5, %xmm1
	subsd	%xmm5, %xmm2
	addsd	%xmm5, %xmm4
	addsd	%xmm5, %xmm3
	movapd	%xmm1, %xmm7
	movapd	%xmm2, %xmm0
	movsd	%xmm1, 8(%rsp)
	movapd	%xmm4, %xmm6
	movapd	%xmm3, %xmm5
	movsd	%xmm2, (%rsp)
	call	fprintf
	popq	%rax
	.cfi_def_cfa_offset 72
	popq	%rdx
	.cfi_def_cfa_offset 64
	pxor	%xmm8, %xmm8
	movq	.LC10(%rip), %rax
	movq	grid(%rip), %rdx
	movsd	16(%rsp), %xmm9
	movsd	8(%rsp), %xmm12
	movq	%rax, %xmm11
	movq	.LC5(%rip), %rax
	movq	%rax, %xmm10
.L3346:
	addq	$1, %rbx
	cmpl	%ebx, 40(%rdx)
	jg	.L3343
.L3347:
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	movq	%r12, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fflush
	.p2align 4,,10
	.p2align 3
.L3352:
	.cfi_restore_state
	movsd	%xmm9, 16(%rsp)
	movsd	%xmm12, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rdx
	movsd	16(%rsp), %xmm9
	movsd	8(%rsp), %xmm12
	jmp	.L3342
	.cfi_endproc
.LFE163:
	.size	output_cells, .-output_cells
	.section	.rodata.str1.1
.LC106:
	.string	"x y %s "
.LC107:
	.string	"%g %g "
.LC108:
	.string	"%g "
.LC109:
	.string	"n/a "
.LC110:
	.string	"debug.plot"
	.section	.rodata.str1.8
	.align 8
.LC111:
	.string	"set term x11\nset size ratio -1\nset key outside\n"
	.align 8
.LC112:
	.string	"Last point stencils can be displayed using (in gnuplot)\n"
	.section	.rodata.str1.1
.LC113:
	.string	"%s = %d\n"
	.section	.rodata.str1.8
	.align 8
.LC114:
	.string	"  load 'debug.plot'\n  v=%s\n  plot '%s' w l lc 0, '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 1 title columnhead(3+3*v)"
	.section	.rodata.str1.1
.LC115:
	.string	"plot"
	.text
	.p2align 4
	.globl	cartesian_debug
	.type	cartesian_debug, @function
cartesian_debug:
.LFB166:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	pxor	%xmm1, %xmm1
	xorl	%edx, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rdi, %rbp
	movq	%rax, %rdi
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%esi, %rbx
	movl	$.LC76, %esi
	movl	%ebx, %ecx
	subq	$312, %rsp
	.cfi_def_cfa_offset 368
	movsd	.LC10(%rip), %xmm0
	movsd	L0(%rip), %xmm6
	movl	%eax, 40(%rsp)
	movl	$1, %eax
	movsd	Y0(%rip), %xmm7
	sall	%cl, %eax
	movq	%rbp, 80(%rsp)
	subl	$2, %ebp
	cvtsi2sdl	%eax, %xmm1
	leal	-2(%rdi), %eax
	movq	%rdx, 152(%rsp)
	movl	%eax, 76(%rsp)
	leaq	144(%rsp), %rdi
	movl	%ebx, 88(%rsp)
	divsd	%xmm1, %xmm0
	pxor	%xmm1, %xmm1
	mulsd	%xmm0, %xmm6
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%ebp, %xmm0
	addsd	%xmm1, %xmm0
	addsd	.LC5(%rip), %xmm0
	movsd	%xmm6, 8(%rsp)
	mulsd	%xmm6, %xmm0
	addsd	X0(%rip), %xmm0
	movsd	%xmm0, 56(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	movabsq	$495740282211, %rax
	movq	%rax, 144(%rsp)
	addsd	%xmm1, %xmm0
	addsd	.LC5(%rip), %xmm0
	mulsd	%xmm6, %xmm0
	addsd	%xmm0, %xmm7
	pxor	%xmm0, %xmm0
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm0, 176(%rsp)
	movsd	%xmm7, 64(%rsp)
	movaps	%xmm0, 192(%rsp)
	movaps	%xmm0, 208(%rsp)
	call	fopen
	movsd	8(%rsp), %xmm1
	movsd	56(%rsp), %xmm0
	movq	$0x000000000, 120(%rsp)
	mulsd	.LC14(%rip), %xmm1
	movq	%rax, 96(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 376
	movq	%rax, %r12
	movsd	72(%rsp), %xmm7
	movsd	%xmm0, 112(%rsp)
	movsd	%xmm7, 120(%rsp)
	movsd	%xmm1, 136(%rsp)
	pushq	136(%rsp)
	.cfi_def_cfa_offset 384
	pushq	136(%rsp)
	.cfi_def_cfa_offset 392
	pushq	136(%rsp)
	.cfi_def_cfa_offset 400
	pushq	136(%rsp)
	.cfi_def_cfa_offset 408
	pushq	%rax
	.cfi_def_cfa_offset 416
	call	output_cells
	addq	$48, %rsp
	.cfi_def_cfa_offset 368
	movq	%r12, %rdi
	call	fclose
	pxor	%xmm0, %xmm0
	xorl	%edx, %edx
	movl	$.LC76, %esi
	leaq	224(%rsp), %rdi
	movq	%rdx, 232(%rsp)
	movabsq	$30515173259572339, %rax
	movq	%rax, 224(%rsp)
	movaps	%xmm0, 240(%rsp)
	movaps	%xmm0, 256(%rsp)
	movaps	%xmm0, 272(%rsp)
	movaps	%xmm0, 288(%rsp)
	call	fopen
	movq	all(%rip), %r12
	movq	%rax, %r15
	testq	%r12, %r12
	je	.L3356
	movslq	(%r12), %rax
	testl	%eax, %eax
	js	.L3356
	.p2align 4,,10
	.p2align 3
.L3357:
	leaq	(%rax,%rax,4), %rdx
	movl	$.LC106, %esi
	movq	%r15, %rdi
	addq	$4, %r12
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	call	fprintf
	movslq	(%r12), %rax
	testl	%eax, %eax
	jns	.L3357
.L3356:
	movq	%r15, %rsi
	movl	$10, %edi
	leaq	0(,%rbx,8), %r13
	call	fputc
	movl	40(%rsp), %eax
	movl	$-2, 44(%rsp)
	addl	$3, %eax
	movl	%eax, 72(%rsp)
.L3355:
	movslq	%ebp, %r14
	movl	76(%rsp), %r12d
	leaq	0(,%r14,8), %rax
	movq	%rax, 32(%rsp)
.L3359:
	movq	all(%rip), %rbx
	movl	%r12d, %eax
	subl	40(%rsp), %eax
	testq	%rbx, %rbx
	jne	.L3358
.L3361:
	movq	%r15, %rsi
	movl	$10, %edi
	addl	$1, %r12d
	call	fputc
	cmpl	72(%rsp), %r12d
	jne	.L3359
	addl	$1, 44(%rsp)
	movl	44(%rsp), %eax
	addl	$1, %ebp
	cmpl	$3, %eax
	jne	.L3355
	movq	%r15, %rdi
	call	fclose
	movl	$.LC76, %esi
	movl	$.LC110, %edi
	call	fopen
	movl	$47, %edx
	movl	$1, %esi
	movl	$.LC111, %edi
	movq	%rax, %rcx
	movq	%rax, %r12
	call	fwrite
	movq	all(%rip), %rbx
	testq	%rbx, %rbx
	je	.L3369
	movl	(%rbx), %r13d
	testl	%r13d, %r13d
	js	.L3369
	.p2align 4,,10
	.p2align 3
.L3371:
	movslq	%r13d, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdi
	call	strdup
	movzbl	(%rax), %edx
	movq	%rax, %rbp
	testb	%dl, %dl
	je	.L3373
	.p2align 4,,10
	.p2align 3
.L3370:
	cmpb	$46, %dl
	jne	.L3372
	movb	$95, (%rax)
.L3372:
	movzbl	1(%rax), %edx
	addq	$1, %rax
	testb	%dl, %dl
	jne	.L3370
.L3373:
	movl	%r13d, %ecx
	movq	%rbp, %rdx
	movl	$.LC113, %esi
	movq	%r12, %rdi
	xorl	%eax, %eax
	addq	$4, %rbx
	call	fprintf
	movq	%rbp, %rdi
	call	free
	movl	(%rbx), %r13d
	testl	%r13d, %r13d
	jns	.L3371
.L3369:
	movq	%r12, %rdi
	call	fclose
	movl	$56, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	movl	$.LC112, %edi
	call	fwrite
	movq	_attribute(%rip), %rax
	movq	stderr(%rip), %r12
	movq	32(%rax), %rdi
	call	strdup
	movzbl	(%rax), %edx
	movq	%rax, %rbp
	testb	%dl, %dl
	je	.L3368
	.p2align 4,,10
	.p2align 3
.L3367:
	cmpb	$46, %dl
	jne	.L3376
	movb	$95, (%rax)
.L3376:
	movzbl	1(%rax), %edx
	addq	$1, %rax
	testb	%dl, %dl
	jne	.L3367
.L3368:
	movq	%rbp, %rdx
	leaq	224(%rsp), %r8
	movq	%r12, %rdi
	xorl	%eax, %eax
	leaq	144(%rsp), %rcx
	movl	$.LC114, %esi
	call	fprintf
	movq	%rbp, %rdi
	call	free
	movq	stderr(%rip), %rdi
	call	fflush
	movl	$.LC76, %esi
	movl	$.LC115, %edi
	call	fopen
	movq	%rax, %r12
	movq	_attribute(%rip), %rax
	movq	32(%rax), %rdi
	call	strdup
	movzbl	(%rax), %edx
	movq	%rax, %rbp
	testb	%dl, %dl
	je	.L3375
	.p2align 4,,10
	.p2align 3
.L3374:
	cmpb	$46, %dl
	jne	.L3377
	movb	$95, (%rax)
.L3377:
	movzbl	1(%rax), %edx
	addq	$1, %rax
	testb	%dl, %dl
	jne	.L3374
.L3375:
	leaq	224(%rsp), %r8
	movq	%rbp, %rdx
	movq	%r12, %rdi
	xorl	%eax, %eax
	leaq	144(%rsp), %rcx
	movl	$.LC114, %esi
	call	fprintf
	movq	%rbp, %rdi
	call	free
	movq	%r12, %rdi
	call	fclose
	addq	$312, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3358:
	.cfi_restore_state
	movl	(%rbx), %edx
	testl	%edx, %edx
	js	.L3361
	pxor	%xmm0, %xmm0
	movsd	8(%rsp), %xmm5
	cvtsi2sdl	%eax, %xmm0
	movslq	%r12d, %rax
	salq	$3, %rax
	movq	%rax, 48(%rsp)
	mulsd	%xmm5, %xmm0
	addsd	64(%rsp), %xmm0
	movsd	%xmm0, 16(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	44(%rsp), %xmm0
	mulsd	%xmm5, %xmm0
	addsd	56(%rsp), %xmm0
	movsd	%xmm0, 24(%rsp)
	jmp	.L3364
	.p2align 4,,10
	.p2align 3
.L3400:
	movq	16(%rax), %rcx
	movq	32(%rsp), %rsi
	movq	(%rcx,%rsi), %rcx
	testq	%rcx, %rcx
	je	.L3362
	addq	8(%rax), %rsi
	cmpl	(%rsi), %r12d
	jl	.L3362
	cmpl	4(%rsi), %r12d
	jge	.L3362
	movq	48(%rsp), %rax
	movq	(%rcx,%rax), %rax
	testq	%rax, %rax
	je	.L3362
	movsd	8(%rax,%r14,8), %xmm0
	movl	$.LC108, %esi
	movq	%r15, %rdi
	movl	$1, %eax
	call	fprintf
	.p2align 4,,10
	.p2align 3
.L3363:
	movl	4(%rbx), %edx
	addq	$4, %rbx
	testl	%edx, %edx
	js	.L3361
.L3364:
	movslq	%edx, %r14
	pxor	%xmm1, %xmm1
	pxor	%xmm0, %xmm0
	movl	$.LC107, %esi
	leaq	(%r14,%r14,4), %rax
	movsd	8(%rsp), %xmm2
	movq	%r15, %rdi
	leaq	(%r14,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cvtsi2sdl	44(%rax), %xmm1
	cvtsi2sdl	40(%rax), %xmm0
	movl	$2, %eax
	mulsd	%xmm2, %xmm1
	mulsd	%xmm2, %xmm0
	mulsd	.LC5(%rip), %xmm1
	mulsd	.LC5(%rip), %xmm0
	addsd	16(%rsp), %xmm1
	addsd	24(%rsp), %xmm0
	call	fprintf
	movq	grid(%rip), %rax
	movq	24(%rax), %rax
	movq	(%rax,%r13), %rax
	movq	(%rax), %rax
	cmpl	(%rax), %ebp
	jl	.L3362
	cmpl	4(%rax), %ebp
	jl	.L3400
.L3362:
	movq	%r15, %rcx
	movl	$4, %edx
	movl	$1, %esi
	movl	$.LC109, %edi
	call	fwrite
	jmp	.L3363
	.cfi_endproc
.LFE166:
	.size	cartesian_debug, .-cartesian_debug
	.section	.rodata.str1.1
.LC116:
	.string	"a"
.LC117:
	.string	"%g %g %g "
	.section	.rodata.str1.8
	.align 8
.LC118:
	.string	", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 3 t ''"
	.align 8
.LC119:
	.string	", '%s' u 1+3*v:2+3*v:3+3*v w labels tc lt 2 t ''"
	.text
	.p2align 4
	.globl	multigrid_debug
	.type	multigrid_debug, @function
multigrid_debug:
.LFB202:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movl	%esi, %ecx
	pxor	%xmm1, %xmm1
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movl	%esi, %r15d
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rax, %r14
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edi, %ebx
	subq	$248, %rsp
	.cfi_def_cfa_offset 304
	movsd	.LC10(%rip), %xmm0
	movsd	L0(%rip), %xmm2
	movl	%eax, 40(%rsp)
	movl	$1, %eax
	movsd	Y0(%rip), %xmm7
	sall	%cl, %eax
	movl	%edi, 88(%rsp)
	cvtsi2sdl	%eax, %xmm1
	leal	-2(%rdi), %eax
	movq	%rdi, 144(%rsp)
	movl	%esi, 152(%rsp)
	divsd	%xmm1, %xmm0
	pxor	%xmm1, %xmm1
	mulsd	%xmm0, %xmm2
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	leal	-2(%r14), %eax
	addsd	%xmm1, %xmm0
	addsd	.LC5(%rip), %xmm0
	movsd	%xmm2, 8(%rsp)
	mulsd	%xmm2, %xmm0
	addsd	X0(%rip), %xmm0
	movsd	%xmm0, 64(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	addsd	%xmm1, %xmm0
	addsd	.LC5(%rip), %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm0, %xmm7
	movsd	%xmm7, 72(%rsp)
	call	cartesian_debug
	movl	$.LC116, %esi
	movl	$.LC115, %edi
	call	fopen
	movq	%rax, 80(%rsp)
	movslq	%r15d, %rax
	leaq	0(,%rax,8), %rbp
	movq	%rax, 56(%rsp)
	movq	%rbp, 104(%rsp)
	testl	%r15d, %r15d
	jg	.L3433
.L3402:
	movq	grid(%rip), %rax
	movq	56(%rsp), %rdi
	movslq	88(%rsp), %rdx
	movq	24(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rcx
	movslq	40(%rsp), %rax
	movq	(%rcx,%rdx,8), %rdx
	movq	(%rdx,%rax,8), %rax
	cmpw	$0, 2(%rax)
	jne	.L3434
.L3410:
	movq	stderr(%rip), %rdi
	call	fflush
	movq	80(%rsp), %rdi
	addq	$248, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose
.L3433:
	.cfi_restore_state
	addl	$2, %ebx
	pxor	%xmm0, %xmm0
	movl	$.LC76, %esi
	movl	%ebx, %edx
	movaps	%xmm0, 176(%rsp)
	shrl	$31, %edx
	movaps	%xmm0, 192(%rsp)
	leal	(%rbx,%rdx), %eax
	movaps	%xmm0, 208(%rsp)
	andl	$1, %eax
	movaps	%xmm0, 224(%rsp)
	subl	%edx, %eax
	leal	2(%r14), %edx
	movl	%edx, %ecx
	leal	-1(%rax,%rax), %r13d
	shrl	$31, %ecx
	movl	%r13d, 112(%rsp)
	leal	(%rdx,%rcx), %eax
	andl	$1, %eax
	subl	%ecx, %eax
	leal	-1(%rax,%rax), %r12d
	movl	%ecx, %eax
	addl	%edx, %eax
	xorl	%edx, %edx
	movl	%r12d, 48(%rsp)
	sarl	%eax
	movq	%rdx, 168(%rsp)
	movl	%eax, 136(%rsp)
	movabsq	$111546514632547, %rax
	movq	%rax, 160(%rsp)
	leaq	160(%rsp), %rax
	movq	%rax, %rdi
	movq	%rax, 96(%rsp)
	call	fopen
	pxor	%xmm0, %xmm0
	movsd	8(%rsp), %xmm2
	movsd	64(%rsp), %xmm6
	cvtsi2sdl	%r13d, %xmm0
	movq	%rax, %r14
	movl	%ebx, %eax
	movsd	72(%rsp), %xmm7
	shrl	$31, %eax
	movl	$0, 36(%rsp)
	addl	%ebx, %eax
	movl	$2, 92(%rsp)
	sarl	%eax
	movl	%r15d, 140(%rsp)
	mulsd	%xmm2, %xmm0
	movl	%eax, 116(%rsp)
	mulsd	.LC5(%rip), %xmm0
	subsd	%xmm0, %xmm6
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%r12d, %xmm0
	leaq	-8(%rbp), %r12
	movsd	%xmm6, 120(%rsp)
	mulsd	%xmm2, %xmm0
	mulsd	.LC5(%rip), %xmm0
	subsd	%xmm0, %xmm7
	movsd	%xmm7, 128(%rsp)
.L3403:
	movl	36(%rsp), %ebx
	movq	all(%rip), %r15
	movl	$2, 32(%rsp)
	xorl	%r13d, %r13d
	addl	116(%rsp), %ebx
	movslq	%ebx, %rbx
	salq	$3, %rbx
	testq	%r15, %r15
	jne	.L3404
.L3407:
	movq	%r14, %rsi
	movl	$10, %edi
	call	fputc
	addl	48(%rsp), %r13d
	cmpl	$1, 32(%rsp)
	je	.L3435
	movq	all(%rip), %r15
	movl	$1, 32(%rsp)
	testq	%r15, %r15
	je	.L3407
.L3404:
	movslq	(%r15), %rax
	testl	%eax, %eax
	js	.L3407
	pxor	%xmm0, %xmm0
	movsd	8(%rsp), %xmm6
	movl	136(%rsp), %edi
	cvtsi2sdl	%r13d, %xmm0
	leal	(%rdi,%r13), %ebp
	movslq	%ebp, %rbp
	salq	$3, %rbp
	mulsd	%xmm6, %xmm0
	addsd	%xmm0, %xmm0
	addsd	128(%rsp), %xmm0
	movsd	%xmm0, 16(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	36(%rsp), %xmm0
	mulsd	%xmm6, %xmm0
	addsd	%xmm0, %xmm0
	addsd	120(%rsp), %xmm0
	movsd	%xmm0, 24(%rsp)
	.p2align 4,,10
	.p2align 3
.L3408:
	leaq	(%rax,%rax,4), %rdx
	pxor	%xmm1, %xmm1
	pxor	%xmm0, %xmm0
	movq	%r14, %rdi
	movq	grid(%rip), %rcx
	leaq	(%rax,%rdx,2), %rdx
	movsd	8(%rsp), %xmm6
	movl	$.LC117, %esi
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	addq	$4, %r15
	movq	24(%rcx), %rcx
	cvtsi2sdl	44(%rdx), %xmm1
	cvtsi2sdl	40(%rdx), %xmm0
	movq	(%rcx,%r12), %rcx
	movq	(%rcx), %rcx
	mulsd	%xmm6, %xmm1
	mulsd	%xmm6, %xmm0
	addsd	16(%rsp), %xmm1
	movq	16(%rcx), %rcx
	addsd	24(%rsp), %xmm0
	movq	(%rcx,%rbx), %rcx
	movq	(%rcx,%rbp), %rcx
	movsd	8(%rcx,%rax,8), %xmm2
	movl	$3, %eax
	call	fprintf
	movslq	(%r15), %rax
	testl	%eax, %eax
	jns	.L3408
	jmp	.L3407
	.p2align 4,,10
	.p2align 3
.L3435:
	movl	112(%rsp), %ebx
	addl	%ebx, 36(%rsp)
	cmpl	$1, 92(%rsp)
	je	.L3409
	movl	$1, 92(%rsp)
	jmp	.L3403
.L3409:
	movq	96(%rsp), %rbx
	movq	stderr(%rip), %rdi
	movl	$.LC118, %esi
	xorl	%eax, %eax
	movl	140(%rsp), %r15d
	movq	%rbx, %rdx
	call	fprintf
	movq	80(%rsp), %rdi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	movl	$.LC118, %esi
	call	fprintf
	movq	%r14, %rdi
	call	fclose
	jmp	.L3402
.L3434:
	leaq	160(%rsp), %rax
	pxor	%xmm0, %xmm0
	movl	$.LC76, %esi
	movq	$1701734758, 160(%rsp)
	movq	%rax, %rdi
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 192(%rsp)
	movaps	%xmm0, 208(%rsp)
	movaps	%xmm0, 224(%rsp)
	movq	$0, 168(%rsp)
	movq	%rax, 96(%rsp)
	call	fopen
	movsd	.LC3(%rip), %xmm0
	mulsd	8(%rsp), %xmm0
	movl	$-2, 36(%rsp)
	movsd	64(%rsp), %xmm6
	movq	%rax, %r14
	movq	104(%rsp), %rax
	addq	$8, %rax
	movq	%rax, 56(%rsp)
	movl	88(%rsp), %eax
	subsd	%xmm0, %xmm6
	leal	-4(%rax,%rax), %ebp
	movl	40(%rsp), %eax
	movsd	%xmm6, 64(%rsp)
	movsd	72(%rsp), %xmm6
	leal	-4(%rax,%rax), %eax
	movl	%eax, 92(%rsp)
	subsd	%xmm0, %xmm6
	movsd	%xmm6, 72(%rsp)
	.p2align 4,,10
	.p2align 3
.L3411:
	movslq	%ebp, %rax
	movl	$-2, %r12d
	salq	$3, %rax
	movq	%rax, 40(%rsp)
	movl	92(%rsp), %eax
	movl	%eax, 32(%rsp)
	jmp	.L3413
	.p2align 4,,10
	.p2align 3
.L3415:
	movq	%r14, %rsi
	movl	$10, %edi
	addl	$1, %r12d
	call	fputc
	addl	$1, 32(%rsp)
	cmpl	$4, %r12d
	je	.L3436
.L3413:
	movq	all(%rip), %rbx
	testq	%rbx, %rbx
	je	.L3415
	movl	(%rbx), %edx
	testl	%edx, %edx
	js	.L3415
	pxor	%xmm0, %xmm0
	movsd	8(%rsp), %xmm7
	movslq	32(%rsp), %rax
	movl	%r12d, 88(%rsp)
	cvtsi2sdl	%r12d, %xmm0
	movq	56(%rsp), %r13
	salq	$3, %rax
	movq	%rax, 48(%rsp)
	mulsd	%xmm7, %xmm0
	mulsd	.LC5(%rip), %xmm0
	addsd	72(%rsp), %xmm0
	movsd	%xmm0, 16(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	36(%rsp), %xmm0
	mulsd	%xmm7, %xmm0
	mulsd	.LC5(%rip), %xmm0
	addsd	64(%rsp), %xmm0
	movsd	%xmm0, 24(%rsp)
	jmp	.L3418
	.p2align 4,,10
	.p2align 3
.L3438:
	cmpl	4(%rax), %ebp
	jge	.L3416
	movq	16(%rax), %rcx
	movq	40(%rsp), %rsi
	movq	(%rcx,%rsi), %rcx
	testq	%rcx, %rcx
	je	.L3416
	addq	8(%rax), %rsi
	movl	32(%rsp), %edi
	cmpl	(%rsi), %edi
	jl	.L3416
	cmpl	4(%rsi), %edi
	jge	.L3416
	movq	48(%rsp), %rax
	movq	(%rcx,%rax), %rax
	testq	%rax, %rax
	je	.L3416
	movsd	8(%rax,%r12,8), %xmm0
	movl	$.LC108, %esi
	movq	%r14, %rdi
	addq	$4, %rbx
	movl	$1, %eax
	call	fprintf
	movl	(%rbx), %edx
	testl	%edx, %edx
	js	.L3437
	.p2align 4,,10
	.p2align 3
.L3418:
	movslq	%edx, %r12
	pxor	%xmm1, %xmm1
	pxor	%xmm0, %xmm0
	movl	$.LC107, %esi
	leaq	(%r12,%r12,4), %rax
	movsd	8(%rsp), %xmm3
	movq	%r14, %rdi
	leaq	(%r12,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cvtsi2sdl	44(%rax), %xmm1
	cvtsi2sdl	40(%rax), %xmm0
	movl	$2, %eax
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm0
	mulsd	.LC3(%rip), %xmm1
	mulsd	.LC3(%rip), %xmm0
	addsd	16(%rsp), %xmm1
	addsd	24(%rsp), %xmm0
	call	fprintf
	movq	grid(%rip), %rax
	cmpl	%r15d, 16(%rax)
	jle	.L3416
	movq	24(%rax), %rax
	movq	(%rax,%r13), %rax
	movq	(%rax), %rax
	cmpl	(%rax), %ebp
	jge	.L3438
.L3416:
	movl	$4, %edx
	movq	%r14, %rcx
	movl	$1, %esi
	movl	$.LC109, %edi
	call	fwrite
	movl	4(%rbx), %edx
	addq	$4, %rbx
	testl	%edx, %edx
	jns	.L3418
.L3437:
	movl	88(%rsp), %r12d
	jmp	.L3415
	.p2align 4,,10
	.p2align 3
.L3436:
	addl	$1, 36(%rsp)
	movl	36(%rsp), %eax
	addl	$1, %ebp
	cmpl	$4, %eax
	jne	.L3411
	movq	96(%rsp), %rbx
	movq	stderr(%rip), %rdi
	movl	$.LC119, %esi
	xorl	%eax, %eax
	movq	%rbx, %rdx
	call	fprintf
	movq	80(%rsp), %rdi
	movq	%rbx, %rdx
	xorl	%eax, %eax
	movl	$.LC119, %esi
	call	fprintf
	movq	%r14, %rdi
	call	fclose
	jmp	.L3410
	.cfi_endproc
.LFE202:
	.size	multigrid_debug, .-multigrid_debug
	.p2align 4
	.globl	cartesian_methods
	.type	cartesian_methods, @function
cartesian_methods:
.LFB167:
	.cfi_startproc
	movq	$cartesian_init_scalar, init_scalar(%rip)
	movq	$cartesian_init_vertex_scalar, init_vertex_scalar(%rip)
	movq	$cartesian_init_vector, init_vector(%rip)
	movq	$cartesian_init_tensor, init_tensor(%rip)
	movq	$cartesian_init_face_vector, init_face_vector(%rip)
	movq	$cartesian_boundary_level, boundary_level(%rip)
	movq	$cartesian_boundary_face, boundary_face(%rip)
	movq	$cartesian_debug, debug(%rip)
	ret
	.cfi_endproc
.LFE167:
	.size	cartesian_methods, .-cartesian_methods
	.p2align 4
	.globl	init_symmetric_tensor
	.type	init_symmetric_tensor, @function
init_symmetric_tensor:
.LFB168:
	.cfi_startproc
	jmp	*init_tensor(%rip)
	.cfi_endproc
.LFE168:
	.size	init_symmetric_tensor, .-init_symmetric_tensor
	.p2align 4
	.globl	interpolate
	.type	interpolate, @function
interpolate:
.LFB170:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$809, %edx
	movl	$.LC89, %esi
	subq	$80, %rsp
	.cfi_def_cfa_offset 96
	movl	96(%rsp), %r12d
	leaq	28(%rsp), %rdi
	movl	$-1, 32(%rsp)
	movl	%r12d, 28(%rsp)
	call	boundary_internal
	movsd	112(%rsp), %xmm1
	movsd	120(%rsp), %xmm0
	subq	$8, %rsp
	.cfi_def_cfa_offset 104
	movsd	112(%rsp), %xmm5
	movsd	%xmm0, 72(%rsp)
	movsd	%xmm5, 56(%rsp)
	movsd	%xmm1, 64(%rsp)
	movsd	%xmm1, 16(%rsp)
	pushq	72(%rsp)
	.cfi_def_cfa_offset 112
	pushq	72(%rsp)
	.cfi_def_cfa_offset 120
	pushq	72(%rsp)
	.cfi_def_cfa_offset 128
	call	locate
	movsd	.LC2(%rip), %xmm0
	addq	$32, %rsp
	.cfi_def_cfa_offset 96
	testl	%edx, %edx
	js	.L3441
	movsd	8(%rsp), %xmm1
	movl	%edx, %esi
	movq	%rax, %rdi
	movapd	%xmm5, %xmm0
	movl	%r12d, %edx
	call	interpolate_linear.isra.0
.L3441:
	addq	$80, %rsp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE170:
	.size	interpolate, .-interpolate
	.section	.rodata.str1.8
	.align 8
.LC120:
	.string	"rising_output_9_2/pressure_grid-%2.1f.txt"
	.section	.rodata.str1.1
.LC121:
	.string	" %g "
.LC123:
	.string	" \n "
	.text
	.p2align 4
	.type	pressure_grid, @function
pressure_grid:
.LFB444:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movl	$.LC120, %esi
	movl	$1, %eax
	xorl	%r14d, %r14d
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movl	$100, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	sprintf
	movl	$.LC76, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movq	%rax, %rbp
	.p2align 4,,10
	.p2align 3
.L3446:
	movl	$25, %ebx
	pxor	%xmm1, %xmm1
	.p2align 4,,10
	.p2align 3
.L3447:
	movl	p(%rip), %eax
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 8(%rsp)
	movaps	%xmm0, 16(%rsp)
	movaps	%xmm0, 32(%rsp)
	movl	%eax, 16(%rsp)
	movsd	%xmm1, 32(%rsp)
	movq	%r14, 24(%rsp)
	pushq	40(%rsp)
	.cfi_def_cfa_offset 184
	pushq	40(%rsp)
	.cfi_def_cfa_offset 192
	pushq	40(%rsp)
	.cfi_def_cfa_offset 200
	pushq	40(%rsp)
	.cfi_def_cfa_offset 208
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$.LC121, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	8(%rsp), %xmm1
	addsd	.LC122(%rip), %xmm1
	subl	$1, %ebx
	jne	.L3447
	movq	%rbp, %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC123, %edi
	call	fwrite
	movsd	.LC122(%rip), %xmm3
	movq	%r14, %xmm4
	addsd	%xmm4, %xmm3
	movq	%xmm3, %r14
	subl	$1, %r12d
	jne	.L3446
	movq	%rbp, %rdi
	call	fclose
	addq	$136, %rsp
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE444:
	.size	pressure_grid, .-pressure_grid
	.section	.rodata.str1.8
	.align 8
.LC124:
	.string	"rising_output_9_2/velocity_grid_y-%2.1f.txt"
	.text
	.p2align 4
	.type	velocity_grid_y, @function
velocity_grid_y:
.LFB442:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movl	$.LC124, %esi
	movl	$1, %eax
	xorl	%r14d, %r14d
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movl	$100, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	sprintf
	movl	$.LC76, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movq	%rax, %rbp
	.p2align 4,,10
	.p2align 3
.L3454:
	movl	$25, %ebx
	pxor	%xmm1, %xmm1
	.p2align 4,,10
	.p2align 3
.L3455:
	movl	u+4(%rip), %eax
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 8(%rsp)
	movaps	%xmm0, 16(%rsp)
	movaps	%xmm0, 32(%rsp)
	movl	%eax, 16(%rsp)
	movsd	%xmm1, 32(%rsp)
	movq	%r14, 24(%rsp)
	pushq	40(%rsp)
	.cfi_def_cfa_offset 184
	pushq	40(%rsp)
	.cfi_def_cfa_offset 192
	pushq	40(%rsp)
	.cfi_def_cfa_offset 200
	pushq	40(%rsp)
	.cfi_def_cfa_offset 208
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$.LC121, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	8(%rsp), %xmm1
	addsd	.LC122(%rip), %xmm1
	subl	$1, %ebx
	jne	.L3455
	movq	%rbp, %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC123, %edi
	call	fwrite
	movsd	.LC122(%rip), %xmm3
	movq	%r14, %xmm4
	addsd	%xmm4, %xmm3
	movq	%xmm3, %r14
	subl	$1, %r12d
	jne	.L3454
	movq	%rbp, %rdi
	call	fclose
	addq	$136, %rsp
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE442:
	.size	velocity_grid_y, .-velocity_grid_y
	.section	.rodata.str1.8
	.align 8
.LC125:
	.string	"rising_output_9_2/velocity_grid_x-%2.1f.txt"
	.text
	.p2align 4
	.type	velocity_grid_x, @function
velocity_grid_x:
.LFB440:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movl	$.LC125, %esi
	movl	$1, %eax
	xorl	%r14d, %r14d
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movl	$100, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	sprintf
	movl	$.LC76, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movq	%rax, %rbp
	.p2align 4,,10
	.p2align 3
.L3462:
	movl	$25, %ebx
	pxor	%xmm1, %xmm1
	.p2align 4,,10
	.p2align 3
.L3463:
	movl	u(%rip), %eax
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 8(%rsp)
	movaps	%xmm0, 16(%rsp)
	movaps	%xmm0, 32(%rsp)
	movl	%eax, 16(%rsp)
	movsd	%xmm1, 32(%rsp)
	movq	%r14, 24(%rsp)
	pushq	40(%rsp)
	.cfi_def_cfa_offset 184
	pushq	40(%rsp)
	.cfi_def_cfa_offset 192
	pushq	40(%rsp)
	.cfi_def_cfa_offset 200
	pushq	40(%rsp)
	.cfi_def_cfa_offset 208
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$.LC121, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	8(%rsp), %xmm1
	addsd	.LC122(%rip), %xmm1
	subl	$1, %ebx
	jne	.L3463
	movq	%rbp, %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC123, %edi
	call	fwrite
	movsd	.LC122(%rip), %xmm3
	movq	%r14, %xmm4
	addsd	%xmm4, %xmm3
	movq	%xmm3, %r14
	subl	$1, %r12d
	jne	.L3462
	movq	%rbp, %rdi
	call	fclose
	addq	$136, %rsp
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE440:
	.size	velocity_grid_x, .-velocity_grid_x
	.p2align 4
	.globl	interpolate_array
	.type	interpolate_array, @function
interpolate_array:
.LFB171:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rsi, %r15
	movl	$.LC89, %esi
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movl	%edx, %r13d
	movl	$819, %edx
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%r8d, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rcx, %rbx
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movq	%rdi, 32(%rsp)
	call	boundary_internal
	testl	%r13d, %r13d
	jle	.L3469
	leal	-1(%r13), %eax
	movsd	.LC2(%rip), %xmm7
	xorl	%r14d, %r14d
	movq	%r15, %r13
	leaq	(%rax,%rax,2), %rax
	leaq	24(%r15,%rax,8), %rax
	movq	%rax, 40(%rsp)
	jmp	.L3477
	.p2align 4,,10
	.p2align 3
.L3489:
	movq	32(%rsp), %rcx
	testq	%rcx, %rcx
	jne	.L3488
.L3472:
	addq	$24, %r13
	cmpq	40(%rsp), %r13
	je	.L3469
.L3477:
	movsd	0(%r13), %xmm0
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	movsd	%xmm0, 72(%rsp)
	movsd	8(%r13), %xmm0
	movsd	%xmm0, 80(%rsp)
	movsd	16(%r13), %xmm0
	movsd	%xmm0, 88(%rsp)
	pushq	88(%rsp)
	.cfi_def_cfa_offset 176
	pushq	88(%rsp)
	.cfi_def_cfa_offset 184
	pushq	88(%rsp)
	.cfi_def_cfa_offset 192
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	movq	%rax, %rcx
	movq	%rdx, %r11
	movl	%eax, %r12d
	movl	%edx, %r10d
	shrq	$32, %rcx
	movq	%rax, 52(%rsp)
	movl	%ecx, 4(%rsp)
	movq	%rcx, %rdi
	movl	%edx, 60(%rsp)
	testl	%edx, %edx
	jns	.L3489
	movq	32(%rsp), %rdi
	testq	%rdi, %rdi
	je	.L3472
	movl	(%rdi), %esi
	testl	%esi, %esi
	js	.L3472
	movslq	%r14d, %rsi
	leal	1(%r14), %eax
	negq	%rsi
	cltq
	leaq	(%rdi,%rsi,4), %rdx
	.p2align 4,,10
	.p2align 3
.L3476:
	movl	%eax, %r14d
	movsd	%xmm7, -8(%rbx,%rax,8)
	addq	$1, %rax
	movl	-4(%rdx,%rax,4), %ecx
	testl	%ecx, %ecx
	jns	.L3476
	addq	$24, %r13
	cmpq	40(%rsp), %r13
	jne	.L3477
.L3469:
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3488:
	.cfi_restore_state
	movslq	(%rcx), %rdx
	testl	%edx, %edx
	js	.L3472
	movslq	%r11d, %r11
	movslq	%r12d, %r15
	movslq	%r14d, %rsi
	leaq	0(,%r11,8), %rax
	negq	%rsi
	movq	%rax, 8(%rsp)
	leaq	0(,%r15,8), %rax
	leaq	(%rcx,%rsi,4), %r11
	movq	%rax, 16(%rsp)
	movslq	%edi, %rax
	salq	$3, %rax
	movq	%rax, 24(%rsp)
	leal	1(%r14), %eax
	movl	%ebp, %r14d
	movq	%r11, %rbp
	movslq	%eax, %r15
	movl	%r12d, %eax
	movl	%r10d, %r11d
	movq	%rbx, %r12
	movl	%eax, %ebx
	jmp	.L3475
	.p2align 4,,10
	.p2align 3
.L3491:
	movq	grid(%rip), %rsi
	movq	8(%rsp), %rax
	movq	24(%rsi), %rsi
	movq	(%rsi,%rax), %rsi
	movq	16(%rsp), %rax
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rax), %rsi
	movq	24(%rsp), %rax
	movq	(%rsi,%rax), %rsi
	movsd	8(%rsi,%rdx,8), %xmm0
.L3474:
	movl	%r15d, %esi
	movsd	%xmm0, -8(%r12,%r15,8)
	addq	$1, %r15
	movslq	-4(%rbp,%r15,4), %rdx
	testl	%edx, %edx
	js	.L3490
.L3475:
	testb	%r14b, %r14b
	je	.L3491
	movl	4(%rsp), %eax
	movl	%ebx, 52(%rsp)
	movl	%r11d, %esi
	movsd	0(%r13), %xmm0
	movsd	8(%r13), %xmm1
	movl	%r11d, 60(%rsp)
	movl	%eax, 56(%rsp)
	movq	52(%rsp), %rdi
	call	interpolate_linear.isra.0
	jmp	.L3474
	.p2align 4,,10
	.p2align 3
.L3490:
	movl	%r14d, %ebp
	movq	%r12, %rbx
	movl	%esi, %r14d
	jmp	.L3472
	.cfi_endproc
.LFE171:
	.size	interpolate_array, .-interpolate_array
	.p2align 4
	.globl	new_bid
	.type	new_bid, @function
new_bid:
.LFB172:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	movl	nboundary(%rip), %r12d
	movq	all(%rip), %r13
	leal	1(%r12), %esi
	movl	%esi, nboundary(%rip)
	testq	%r13, %r13
	je	.L3492
	movslq	0(%r13), %rax
	testl	%eax, %eax
	js	.L3492
	movq	_attribute(%rip), %rbp
	jmp	.L3496
	.p2align 4,,10
	.p2align 3
.L3507:
	movl	nboundary(%rip), %esi
.L3496:
	leaq	(%rax,%rax,4), %rdx
	movslq	%esi, %rsi
	addq	$4, %r13
	leaq	(%rax,%rdx,2), %rbx
	salq	$3, %rsi
	salq	$4, %rbx
	addq	%rbp, %rbx
	movq	(%rbx), %rdi
	call	realloc
	movslq	nboundary(%rip), %rsi
	movq	8(%rbx), %rdi
	movq	%rax, (%rbx)
	salq	$3, %rsi
	call	realloc
	movq	%rax, 8(%rbx)
	movslq	0(%r13), %rax
	testl	%eax, %eax
	jns	.L3507
	movq	all(%rip), %rcx
	testq	%rcx, %rcx
	je	.L3492
	movl	(%rcx), %edx
	testl	%edx, %edx
	js	.L3492
	movslq	%r12d, %rdi
	movq	_attribute(%rip), %r8
	movl	$antisymmetry, %r10d
	xorl	%r9d, %r9d
	salq	$3, %rdi
	jmp	.L3500
	.p2align 4,,10
	.p2align 3
.L3497:
	cmpl	%edx, %esi
	jne	.L3498
	movslq	52(%rax), %rdx
	leaq	(%rdx,%rdx,4), %rsi
	leaq	(%rdx,%rsi,2), %rdx
	salq	$4, %rdx
	addq	%r8, %rdx
	movq	8(%rdx), %rsi
	movq	(%rdx), %rdx
	movq	$symmetry, (%rsi,%rdi)
	movq	8(%rax), %rsi
	movq	$symmetry, (%rdx,%rdi)
	movq	(%rax), %rdx
	movl	56(%rax), %eax
	addq	%rdi, %rsi
	addq	%rdi, %rdx
	testl	%eax, %eax
	movq	%r9, %rax
	cmove	%r10, %rax
	movq	%rax, (%rsi)
	movq	%rax, (%rdx)
.L3498:
	movl	4(%rcx), %edx
	addq	$4, %rcx
	testl	%edx, %edx
	js	.L3492
.L3500:
	movslq	%edx, %rax
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	addq	%r8, %rax
	movl	48(%rax), %esi
	testl	%esi, %esi
	jns	.L3497
	movq	8(%rax), %rdx
	addq	$4, %rcx
	movq	(%rax), %rax
	movq	$symmetry, (%rdx,%rdi)
	movl	(%rcx), %edx
	movq	$symmetry, (%rax,%rdi)
	testl	%edx, %edx
	jns	.L3500
.L3492:
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE172:
	.size	new_bid, .-new_bid
	.section	.rodata.str1.1
.LC126:
	.string	"dir <= bottom"
	.text
	.p2align 4
	.globl	periodic
	.type	periodic, @function
periodic:
.LFB175:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	cmpl	$3, %edi
	jg	.L3511
	movl	%edi, %r11d
	shrl	$31, %r11d
	addl	%edi, %r11d
	movl	%r11d, %ebx
	andl	$-2, %r11d
	movl	%r11d, %edi
	sarl	%ebx
	call	periodic_boundary
	movslq	%ebx, %rbx
	leal	1(%r11), %edi
	call	periodic_boundary
	movl	$1, Period(,%rbx,4)
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
.L3511:
	.cfi_restore_state
	movl	$.LC126, %edx
	movl	$898, %esi
	movl	$.LC89, %edi
	call	qassert
	.cfi_endproc
.LFE175:
	.size	periodic, .-periodic
	.p2align 4
	.globl	getvalue
	.type	getvalue, @function
getvalue:
.LFB176:
	.cfi_startproc
	movq	%rdi, %rax
	movslq	%esi, %rsi
	addl	%edi, %ecx
	movslq	%edx, %rdx
	shrq	$32, %rax
	movslq	%ecx, %rcx
	movq	%rax, %r9
	movq	grid(%rip), %rax
	addl	%r9d, %r8d
	movq	24(%rax), %rax
	movslq	%r8d, %r8
	movq	(%rax,%rsi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax,%r8,8), %rax
	movsd	8(%rax,%rdx,8), %xmm0
	ret
	.cfi_endproc
.LFE176:
	.size	getvalue, .-getvalue
	.p2align 4
	.globl	default_stencil
	.type	default_stencil, @function
default_stencil:
.LFB177:
	.cfi_startproc
	testq	%rdx, %rdx
	je	.L3513
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3513
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3515:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movb	$1, 80(%rax)
	movl	$2, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3515
.L3513:
	ret
	.cfi_endproc
.LFE177:
	.size	default_stencil, .-default_stencil
	.section	.rodata.str1.8
	.align 8
.LC127:
	.string	"%s:%d: error: stencil overflow: %s"
	.text
	.p2align 4
	.globl	stencil_val
	.type	stencil_val, @function
stencil_val:
.LFB179:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	%rdi, (%rsp)
	movl	64(%rsp), %eax
	movl	%esi, 8(%rsp)
	cmpl	$65535, %edx
	ja	.L3520
	addl	(%rsp), %ecx
	addl	4(%rsp), %r8d
	movl	%r9d, 28(%rsp)
	movl	%ecx, 20(%rsp)
	movl	%r8d, 24(%rsp)
	testb	%al, %al
	je	.L3543
	testl	%ecx, %ecx
	sete	%dil
.L3537:
	movslq	%edx, %rax
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	testl	%r8d, %r8d
	jne	.L3527
	testb	%dil, %dil
	je	.L3527
	cmpb	$0, 81(%rax)
	jne	.L3520
	movb	$1, 80(%rax)
.L3520:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3543:
	.cfi_restore_state
	leal	2(%rcx), %eax
	cmpl	$4, %eax
	ja	.L3523
	testl	%ecx, %ecx
	leal	2(%r8), %eax
	sete	%dil
	cmpl	$4, %eax
	jbe	.L3537
.L3523:
	movslq	%edx, %rax
	movl	56(%rsp), %ecx
	movq	48(%rsp), %rdx
	movl	$.LC127, %esi
	imulq	$176, %rax, %rax
	addq	_attribute(%rip), %rax
	movq	stderr(%rip), %rdi
	movq	32(%rax), %r8
	xorl	%eax, %eax
	call	fprintf
	leaq	20(%rsp), %rdi
	call	write_stencil_index
	movq	stderr(%rip), %rsi
	movl	$10, %edi
	call	fputc
	movq	stderr(%rip), %rdi
	call	fflush
	call	abort
	.p2align 4,,10
	.p2align 3
.L3527:
	movl	56(%rax), %esi
	movb	$1, 80(%rax)
	testl	%esi, %esi
	je	.L3530
	cmpl	%edx, 48(%rax)
	je	.L3534
	movl	%ecx, %esi
	negl	%esi
	cmovns	%esi, %ecx
	cmpl	%ecx, 84(%rax)
	jge	.L3534
	movl	%ecx, 84(%rax)
.L3534:
	cmpl	%edx, 52(%rax)
	je	.L3520
	movl	84(%rax), %ecx
.L3536:
	movl	%r8d, %edx
	negl	%edx
	cmovs	%r8d, %edx
	cmpl	%ecx, %edx
	jle	.L3520
	movl	%edx, 84(%rax)
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3530:
	.cfi_restore_state
	movl	%ecx, %edx
	negl	%edx
	cmovs	%ecx, %edx
	movl	84(%rax), %ecx
	cmpl	%edx, %ecx
	jge	.L3536
	movl	%edx, 84(%rax)
	movl	%edx, %ecx
	jmp	.L3536
	.cfi_endproc
.LFE179:
	.size	stencil_val, .-stencil_val
	.section	.rodata.str1.8
	.align 8
.LC128:
	.string	"/root/mnt/basilisk/src/myc2d.h"
	.text
	.p2align 4
	.type	_stencil_mycs, @function
_stencil_mycs:
.LFB338:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	xorl	%r9d, %r9d
	movl	$1, %r8d
	movl	$-1, %ecx
	movl	%edx, %r12d
	subq	$24, %rsp
	.cfi_def_cfa_offset 40
	movq	%rdi, 8(%rsp)
	movl	%esi, 16(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 48
	pushq	$13
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$1, %r8d
	pushq	$13
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$1, %ecx
	pushq	$13
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$-1, %ecx
	pushq	$14
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$-1, %r8d
	pushq	$14
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$1, %ecx
	pushq	$14
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$1, %ecx
	pushq	$15
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$1, %ecx
	pushq	$15
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$1, %ecx
	pushq	$15
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$-1, %ecx
	pushq	$16
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$-1, %ecx
	pushq	$16
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$-1, %ecx
	pushq	$16
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$-1, %ecx
	pushq	$34
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$-1, %ecx
	pushq	$34
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$-1, %ecx
	pushq	$34
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$1, %ecx
	pushq	$35
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	%r12d, %edx
	movl	$1, %ecx
	pushq	$35
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$1, %ecx
	pushq	$35
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$-1, %ecx
	pushq	$37
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	xorl	%ecx, %ecx
	pushq	$37
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$-1, %r8d
	movl	$1, %ecx
	pushq	$37
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$-1, %ecx
	pushq	$38
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	xorl	%ecx, %ecx
	pushq	$38
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 40
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 48
	movl	$1, %r8d
	movl	$1, %ecx
	pushq	$38
	.cfi_def_cfa_offset 56
	pushq	$.LC128
	.cfi_def_cfa_offset 64
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$48, %rsp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE338:
	.size	_stencil_mycs, .-_stencil_mycs
	.section	.rodata.str1.8
	.align 8
.LC129:
	.string	"/root/mnt/basilisk/src/curvature.h"
	.text
	.p2align 4
	.type	_stencil_interfacial, @function
_stencil_interfacial:
.LFB400:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	%rdi, %rax
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	shrq	$32, %rax
	xorl	%ecx, %ecx
	movl	%edi, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	movq	%rax, %r14
	movl	$-1, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	%esi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	movl	%edx, %ebx
	subq	$24, %rsp
	.cfi_def_cfa_offset 72
	pushq	$0
	.cfi_def_cfa_offset 80
	pushq	$502
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
.L3547:
	movl	%r13d, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 72
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	movl	%r14d, 12(%rsp)
	xorl	%r8d, %r8d
	movl	%ebx, %edx
	movl	%ebp, %esi
	movl	%ebp, 16(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 80
	pushq	$505
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	movq	32(%rsp), %rdi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	addl	$2, %r12d
	pushq	$505
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
	cmpl	$3, %r12d
	jne	.L3547
	subq	$8, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 80
	movl	%ebx, %edx
	movl	$-1, %r12d
	pushq	$508
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
.L3548:
	movl	%r13d, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 72
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	movl	%r14d, 12(%rsp)
	xorl	%r8d, %r8d
	movl	%ebx, %edx
	movl	%ebp, %esi
	movl	%ebp, 16(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 80
	pushq	$511
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	movq	32(%rsp), %rdi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	addl	$2, %r12d
	pushq	$511
	.cfi_def_cfa_offset 88
	pushq	$.LC129
	.cfi_def_cfa_offset 96
	movq	32(%rsp), %rdi
	movl	40(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
	cmpl	$3, %r12d
	jne	.L3548
	addq	$16, %rsp
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE400:
	.size	_stencil_interfacial, .-_stencil_interfacial
	.section	.rodata.str1.8
	.align 8
.LC131:
	.string	"/root/mnt/basilisk/src/tension.h"
	.text
	.p2align 4
	.type	stability_1, @function
stability_1:
.LFB408:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3556
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3556
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3557:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3557
.L3556:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	fm(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 128
	pushq	$45
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	orl	$1, _loop.20+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$45
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	orl	$2, _loop.20+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$46
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$47
	.cfi_def_cfa_offset 136
	pushq	$.LC131
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	movl	$_loop.20, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.20+12(%rip)
	cmpl	$65535, %eax
	jle	.L3554
	movq	_constant(%rip), %rcx
	movq	grid(%rip), %r8
	movslq	alpha(%rip), %rdx
	movsd	-524288(%rcx,%rax,8), %xmm6
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm7
	movzbl	128(%r8), %eax
	cmpl	$65535, %edx
	jg	.L3577
	testb	%al, %al
	jne	.L3720
.L3578:
	movl	56(%r8), %edx
	testl	%edx, %edx
	jle	.L3579
	movslq	alpha(%rip), %rax
	leal	-1(%rdx), %r9d
	movsd	.LC2(%rip), %xmm2
	movl	$1, %r10d
	salq	$4, %r9
	movsd	.LC130(%rip), %xmm4
	movsd	L0(%rip), %xmm9
	pxor	%xmm8, %xmm8
	leaq	8(,%rax,8), %rbx
	movslq	alpha+4(%rip), %rax
	movsd	.LC10(%rip), %xmm1
	movapd	%xmm2, %xmm5
	leaq	8(,%rax,8), %r11
	movq	48(%r8), %rax
	leaq	16(%rax), %rdx
	addq	%rdx, %r9
	jmp	.L3594
	.p2align 4,,10
	.p2align 3
.L3721:
	addq	$16, %rdx
.L3594:
	movslq	8(%rax), %rcx
	movl	%r10d, %ebp
	pxor	%xmm3, %xmm3
	movapd	%xmm1, %xmm0
	movslq	(%rax), %rdi
	movslq	4(%rax), %rsi
	sall	%cl, %ebp
	movl	12(%rax), %eax
	cvtsi2sdl	%ebp, %xmm3
	divsd	%xmm3, %xmm0
	mulsd	%xmm9, %xmm0
	testb	$1, %al
	je	.L3580
	comisd	%xmm8, %xmm6
	jbe	.L3580
	movq	24(%r8), %r12
	movslq	%ecx, %rbp
	movq	(%r12,%rbp,8), %rbp
	movslq	%edi, %r12
	movq	0(%rbp), %rbp
	movq	16(%rbp), %r13
	movslq	%esi, %rbp
	movq	0(%r13,%r12,8), %r12
	movq	(%r12,%rbp,8), %rbp
	movsd	0(%rbp,%rbx), %xmm3
	divsd	%xmm6, %xmm3
	movapd	%xmm3, %xmm14
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm14
	movapd	%xmm3, %xmm5
	movapd	%xmm0, %xmm3
	minsd	%xmm2, %xmm3
	movapd	%xmm14, %xmm4
	movapd	%xmm3, %xmm2
.L3580:
	testb	$2, %al
	je	.L3587
	comisd	%xmm8, %xmm7
	jbe	.L3587
	movq	24(%r8), %rax
	minsd	%xmm2, %xmm0
	movq	(%rax,%rcx,8), %rax
	movapd	%xmm0, %xmm2
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r11), %xmm3
	divsd	%xmm7, %xmm3
	movapd	%xmm3, %xmm15
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm15
	movapd	%xmm3, %xmm5
	movapd	%xmm15, %xmm4
.L3587:
	movq	%rdx, %rax
	cmpq	%rdx, %r9
	jne	.L3721
	.p2align 4,,10
	.p2align 3
.L3719:
	movapd	%xmm1, %xmm3
	divsd	%xmm5, %xmm3
	divsd	%xmm4, %xmm1
	addsd	%xmm1, %xmm3
	mulsd	.LC5(%rip), %xmm3
.L3561:
	movq	interfaces(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3628
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3628
	pxor	%xmm4, %xmm4
	movq	_attribute(%rip), %rsi
	movapd	%xmm4, %xmm1
	.p2align 4,,10
	.p2align 3
.L3630:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addsd	168(%rsi,%rax), %xmm1
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3630
	ucomisd	%xmm4, %xmm1
	jp	.L3668
	je	.L3628
.L3668:
	mulsd	.LC132(%rip), %xmm1
	movapd	%xmm2, %xmm0
	mulsd	%xmm2, %xmm0
	mulsd	%xmm2, %xmm0
	mulsd	%xmm3, %xmm0
	divsd	%xmm1, %xmm0
	ucomisd	%xmm0, %xmm4
	ja	.L3717
	sqrtsd	%xmm0, %xmm0
.L3634:
	movsd	dtmax(%rip), %xmm1
	comisd	%xmm0, %xmm1
	jbe	.L3628
	movsd	%xmm0, dtmax(%rip)
.L3628:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3554:
	.cfi_restore_state
	movq	grid(%rip), %r8
	movslq	alpha(%rip), %rax
	movzbl	128(%r8), %edx
	cmpl	$65535, %eax
	jg	.L3558
	testb	%dl, %dl
	jne	.L3722
.L3559:
	movl	56(%r8), %eax
	testl	%eax, %eax
	jle	.L3579
	movslq	fm(%rip), %rdx
	leal	-1(%rax), %r11d
	movsd	.LC2(%rip), %xmm2
	movl	$1, %ebx
	salq	$4, %r11
	movsd	L0(%rip), %xmm7
	movsd	.LC130(%rip), %xmm4
	pxor	%xmm8, %xmm8
	leaq	8(,%rdx,8), %r12
	movslq	alpha(%rip), %rdx
	movsd	.LC10(%rip), %xmm1
	movapd	%xmm2, %xmm5
	leaq	8(,%rdx,8), %r14
	movslq	fm+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbp
	movslq	alpha+4(%rip), %rdx
	leaq	8(,%rdx,8), %r13
	movq	48(%r8), %rdx
	leaq	16(%rdx), %rax
	addq	%rax, %r11
	jmp	.L3576
	.p2align 4,,10
	.p2align 3
.L3723:
	addq	$16, %rax
.L3576:
	movslq	8(%rdx), %rcx
	movl	%ebx, %r9d
	pxor	%xmm3, %xmm3
	movapd	%xmm1, %xmm0
	movslq	(%rdx), %rdi
	movslq	4(%rdx), %rsi
	sall	%cl, %r9d
	movl	12(%rdx), %edx
	cvtsi2sdl	%r9d, %xmm3
	divsd	%xmm3, %xmm0
	mulsd	%xmm7, %xmm0
	testb	$1, %dl
	je	.L3562
	movq	24(%r8), %r10
	movslq	%ecx, %r9
	movq	(%r10,%r9,8), %r9
	movslq	%edi, %r10
	movq	(%r9), %r9
	movq	16(%r9), %r15
	movslq	%esi, %r9
	movq	(%r15,%r10,8), %r10
	movq	(%r10,%r9,8), %r9
	movsd	(%r9,%r12), %xmm6
	comisd	%xmm8, %xmm6
	jbe	.L3562
	movsd	(%r9,%r14), %xmm3
	divsd	%xmm6, %xmm3
	movapd	%xmm3, %xmm6
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm6
	movapd	%xmm3, %xmm5
	movapd	%xmm6, %xmm4
	movapd	%xmm0, %xmm6
	minsd	%xmm2, %xmm6
	movapd	%xmm6, %xmm2
.L3562:
	andl	$2, %edx
	je	.L3569
	movq	24(%r8), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx,%rsi,8), %rdx
	movsd	(%rdx,%rbp), %xmm6
	comisd	%xmm8, %xmm6
	jbe	.L3569
	movsd	(%rdx,%r13), %xmm3
	minsd	%xmm2, %xmm0
	divsd	%xmm6, %xmm3
	movapd	%xmm0, %xmm2
	movapd	%xmm3, %xmm6
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm6
	movapd	%xmm3, %xmm5
	movapd	%xmm6, %xmm4
.L3569:
	movq	%rax, %rdx
	cmpq	%rax, %r11
	jne	.L3723
	jmp	.L3719
	.p2align 4,,10
	.p2align 3
.L3558:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm9
	movslq	alpha+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm10
	testb	%dl, %dl
	jne	.L3724
.L3595:
	movl	56(%r8), %edx
	testl	%edx, %edx
	jle	.L3579
	movslq	fm(%rip), %rax
	leal	-1(%rdx), %edi
	movsd	.LC2(%rip), %xmm2
	movl	$1, %r9d
	salq	$4, %rdi
	movsd	L0(%rip), %xmm7
	pxor	%xmm6, %xmm6
	movsd	.LC130(%rip), %xmm4
	leaq	8(,%rax,8), %r11
	movslq	fm+4(%rip), %rax
	movsd	.LC10(%rip), %xmm1
	movapd	%xmm2, %xmm5
	leaq	8(,%rax,8), %r10
	movq	48(%r8), %rax
	leaq	16(%rax), %rdx
	addq	%rdx, %rdi
	jmp	.L3610
	.p2align 4,,10
	.p2align 3
.L3725:
	addq	$16, %rdx
.L3610:
	movslq	8(%rax), %rcx
	movl	%r9d, %ebp
	pxor	%xmm3, %xmm3
	movapd	%xmm1, %xmm0
	movslq	(%rax), %rbx
	movslq	4(%rax), %rsi
	sall	%cl, %ebp
	movl	12(%rax), %eax
	cvtsi2sdl	%ebp, %xmm3
	divsd	%xmm3, %xmm0
	mulsd	%xmm7, %xmm0
	testb	$1, %al
	je	.L3596
	movq	24(%r8), %r12
	movslq	%ecx, %rbp
	movq	(%r12,%rbp,8), %rbp
	movslq	%ebx, %r12
	movq	0(%rbp), %rbp
	movq	16(%rbp), %r13
	movslq	%esi, %rbp
	movq	0(%r13,%r12,8), %r12
	movq	(%r12,%rbp,8), %rbp
	movsd	0(%rbp,%r11), %xmm3
	comisd	%xmm6, %xmm3
	jbe	.L3596
	movapd	%xmm9, %xmm8
	divsd	%xmm3, %xmm8
	movapd	%xmm8, %xmm3
	minsd	%xmm5, %xmm8
	maxsd	%xmm4, %xmm3
	movapd	%xmm8, %xmm5
	movapd	%xmm3, %xmm4
	movapd	%xmm0, %xmm3
	minsd	%xmm2, %xmm3
	movapd	%xmm3, %xmm2
.L3596:
	testb	$2, %al
	je	.L3603
	movq	24(%r8), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbx,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r10), %xmm3
	comisd	%xmm6, %xmm3
	jbe	.L3603
	movapd	%xmm10, %xmm8
	minsd	%xmm2, %xmm0
	divsd	%xmm3, %xmm8
	movapd	%xmm0, %xmm2
	movapd	%xmm8, %xmm3
	minsd	%xmm5, %xmm8
	maxsd	%xmm4, %xmm3
	movapd	%xmm8, %xmm5
	movapd	%xmm3, %xmm4
.L3603:
	movq	%rdx, %rax
	cmpq	%rdx, %rdi
	jne	.L3725
	jmp	.L3719
	.p2align 4,,10
	.p2align 3
.L3577:
	movsd	-524288(%rcx,%rdx,8), %xmm10
	movslq	alpha+4(%rip), %rdx
	movsd	-524288(%rcx,%rdx,8), %xmm11
	testb	%al, %al
	jne	.L3726
.L3611:
	movl	56(%r8), %edx
	testl	%edx, %edx
	jle	.L3579
	movq	48(%r8), %rcx
	subl	$1, %edx
	movsd	.LC2(%rip), %xmm2
	movl	$1, %esi
	salq	$4, %rdx
	movsd	.LC130(%rip), %xmm4
	movsd	L0(%rip), %xmm9
	pxor	%xmm8, %xmm8
	movsd	.LC10(%rip), %xmm1
	leaq	8(%rcx), %rax
	leaq	24(%rcx,%rdx), %rdi
	movapd	%xmm2, %xmm5
	.p2align 4,,10
	.p2align 3
.L3626:
	movl	(%rax), %ecx
	movl	%esi, %ebx
	pxor	%xmm3, %xmm3
	movapd	%xmm1, %xmm0
	movl	4(%rax), %edx
	sall	%cl, %ebx
	cvtsi2sdl	%ebx, %xmm3
	divsd	%xmm3, %xmm0
	mulsd	%xmm9, %xmm0
	testb	$1, %dl
	je	.L3612
	comisd	%xmm8, %xmm6
	jbe	.L3612
	movapd	%xmm10, %xmm3
	divsd	%xmm6, %xmm3
	movapd	%xmm3, %xmm12
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm12
	movapd	%xmm3, %xmm5
	movapd	%xmm0, %xmm3
	minsd	%xmm2, %xmm3
	movapd	%xmm12, %xmm4
	movapd	%xmm3, %xmm2
.L3612:
	andl	$2, %edx
	je	.L3619
	comisd	%xmm8, %xmm7
	jbe	.L3619
	movapd	%xmm11, %xmm3
	minsd	%xmm2, %xmm0
	divsd	%xmm7, %xmm3
	movapd	%xmm0, %xmm2
	movapd	%xmm3, %xmm13
	minsd	%xmm5, %xmm3
	maxsd	%xmm4, %xmm13
	movapd	%xmm3, %xmm5
	movapd	%xmm13, %xmm4
.L3619:
	addq	$16, %rax
	cmpq	%rax, %rdi
	jne	.L3626
	jmp	.L3719
	.p2align 4,,10
	.p2align 3
.L3722:
	call	update_cache_f
	movq	grid(%rip), %r8
	jmp	.L3559
	.p2align 4,,10
	.p2align 3
.L3726:
	movsd	%xmm7, 24(%rsp)
	movsd	%xmm6, 16(%rsp)
	movsd	%xmm11, 8(%rsp)
	movsd	%xmm10, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r8
	movsd	24(%rsp), %xmm7
	movsd	16(%rsp), %xmm6
	movsd	8(%rsp), %xmm11
	movsd	(%rsp), %xmm10
	jmp	.L3611
	.p2align 4,,10
	.p2align 3
.L3579:
	movsd	.LC2(%rip), %xmm2
	pxor	%xmm3, %xmm3
	jmp	.L3561
.L3720:
	movsd	%xmm7, 8(%rsp)
	movsd	%xmm6, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm7
	movsd	(%rsp), %xmm6
	movq	grid(%rip), %r8
	jmp	.L3578
	.p2align 4,,10
	.p2align 3
.L3724:
	movsd	%xmm10, 8(%rsp)
	movsd	%xmm9, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r8
	movsd	8(%rsp), %xmm10
	movsd	(%rsp), %xmm9
	jmp	.L3595
.L3717:
	call	sqrt
	jmp	.L3634
	.cfi_endproc
.LFE408:
	.size	stability_1, .-stability_1
	.section	.rodata.str1.1
.LC133:
	.string	"rising.c"
.LC134:
	.string	"%g %g %g %g %g %g %g"
.LC135:
	.string	"\r\n"
	.text
	.p2align 4
	.type	logfile, @function
logfile:
.LFB423:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movq	%xmm0, %r14
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movl	%edi, %ebx
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	movdqa	.LC136(%rip), %xmm0
	movq	baseblock(%rip), %rdx
	movaps	%xmm0, 48(%rsp)
	movdqa	.LC137(%rip), %xmm0
	movaps	%xmm0, 64(%rsp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 112(%rsp)
	testq	%rdx, %rdx
	je	.L3731
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3731
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3732:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3732
.L3731:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	movl	cm(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$172
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$172
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$174
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.5, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.5+12(%rip)
	cmpl	$65535, %eax
	jg	.L3748
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3749
.L3733:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3738
	movq	32(%rax), %rbp
	subl	$1, %edx
	pxor	%xmm4, %xmm4
	movq	24(%rax), %r10
	movslq	f(%rip), %rcx
	salq	$4, %rdx
	movsd	L0(%rip), %xmm10
	movapd	%xmm4, %xmm1
	leaq	16(%rbp), %rax
	movapd	%xmm4, %xmm3
	movsd	X0(%rip), %xmm9
	movsd	.LC10(%rip), %xmm8
	leaq	8(,%rcx,8), %r9
	addq	%rax, %rdx
	movapd	%xmm4, %xmm2
	movl	$1, %esi
	movslq	cm(%rip), %rcx
	movsd	.LC5(%rip), %xmm5
	leaq	8(,%rcx,8), %r8
	movslq	u(%rip), %rcx
	leaq	8(,%rcx,8), %rdi
	jmp	.L3736
	.p2align 4,,10
	.p2align 3
.L3750:
	addq	$16, %rax
.L3736:
	movslq	8(%rbp), %rcx
	movl	%esi, %r12d
	pxor	%xmm0, %xmm0
	movapd	%xmm8, %xmm7
	movl	0(%rbp), %r11d
	movslq	4(%rbp), %rbp
	sall	%cl, %r12d
	movq	(%r10,%rcx,8), %rcx
	cvtsi2sdl	%r12d, %xmm0
	movslq	%r11d, %r12
	subl	$2, %r11d
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	divsd	%xmm0, %xmm7
	movapd	%xmm8, %xmm0
	movq	(%rcx,%r12,8), %rcx
	movq	(%rcx,%rbp,8), %rcx
	movq	%rax, %rbp
	subsd	(%rcx,%r9), %xmm0
	mulsd	%xmm10, %xmm7
	movapd	%xmm7, %xmm6
	mulsd	%xmm7, %xmm6
	mulsd	(%rcx,%r8), %xmm6
	mulsd	%xmm0, %xmm6
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%r11d, %xmm0
	addsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm1
	addsd	%xmm5, %xmm0
	mulsd	%xmm7, %xmm0
	addsd	%xmm9, %xmm0
	mulsd	%xmm6, %xmm0
	addsd	%xmm0, %xmm2
	movsd	(%rcx,%rdi), %xmm0
	mulsd	%xmm6, %xmm0
	addsd	%xmm0, %xmm3
	cmpq	%rax, %rdx
	jne	.L3750
.L3735:
	movsd	%xmm1, 24(%rsp)
	movl	$.LC76, %esi
	movsd	%xmm3, 16(%rsp)
	movsd	%xmm2, 8(%rsp)
	testl	%ebx, %ebx
	je	.L3747
	movl	$.LC116, %esi
.L3747:
	leaq	48(%rsp), %rdi
	call	fopen
	movsd	24(%rsp), %xmm1
	movsd	16(%rsp), %xmm3
	movq	%r14, %xmm0
	movsd	8(%rsp), %xmm2
	movq	%rax, %rdi
	movl	$.LC134, %esi
	movsd	perf+24(%rip), %xmm6
	divsd	%xmm1, %xmm3
	movsd	perf+16(%rip), %xmm5
	movsd	dt(%rip), %xmm4
	movq	%rax, fp1.4(%rip)
	movl	$7, %eax
	divsd	%xmm1, %xmm2
	call	fprintf
	movl	$2, %edx
	movl	$1, %esi
	movq	fp1.4(%rip), %rcx
	movl	$.LC135, %edi
	call	fwrite
	movq	fp1.4(%rip), %rdi
	call	fclose
	addq	$136, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3748:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm6
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3751
.L3737:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3738
	movq	32(%rax), %r11
	leal	-1(%rdx), %esi
	pxor	%xmm4, %xmm4
	movq	24(%rax), %r10
	movslq	f(%rip), %rcx
	salq	$4, %rsi
	movapd	%xmm4, %xmm1
	movsd	L0(%rip), %xmm9
	leaq	16(%r11), %rdx
	movapd	%xmm4, %xmm3
	movapd	%xmm4, %xmm2
	movsd	X0(%rip), %xmm7
	leaq	8(,%rcx,8), %r9
	movslq	u(%rip), %rcx
	addq	%rdx, %rsi
	movl	$1, %edi
	movsd	.LC10(%rip), %xmm8
	movsd	.LC5(%rip), %xmm5
	leaq	8(,%rcx,8), %r8
	jmp	.L3739
	.p2align 4,,10
	.p2align 3
.L3752:
	addq	$16, %rdx
.L3739:
	movslq	8(%r11), %rcx
	movl	%edi, %ebp
	pxor	%xmm0, %xmm0
	movapd	%xmm8, %xmm11
	movl	(%r11), %eax
	movslq	4(%r11), %r11
	movapd	%xmm8, %xmm10
	sall	%cl, %ebp
	movq	(%r10,%rcx,8), %rcx
	cvtsi2sdl	%ebp, %xmm0
	movslq	%eax, %rbp
	subl	$2, %eax
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	divsd	%xmm0, %xmm11
	movq	(%rcx,%rbp,8), %rcx
	movq	(%rcx,%r11,8), %rcx
	movq	%rdx, %r11
	subsd	(%rcx,%r9), %xmm10
	mulsd	%xmm9, %xmm11
	movapd	%xmm11, %xmm0
	mulsd	%xmm11, %xmm0
	mulsd	%xmm6, %xmm0
	mulsd	%xmm0, %xmm10
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	addsd	%xmm4, %xmm0
	addsd	%xmm10, %xmm1
	addsd	%xmm5, %xmm0
	mulsd	%xmm11, %xmm0
	addsd	%xmm7, %xmm0
	mulsd	%xmm10, %xmm0
	addsd	%xmm0, %xmm2
	movsd	(%rcx,%r8), %xmm0
	mulsd	%xmm10, %xmm0
	addsd	%xmm0, %xmm3
	cmpq	%rdx, %rsi
	jne	.L3752
	jmp	.L3735
	.p2align 4,,10
	.p2align 3
.L3749:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L3733
	.p2align 4,,10
	.p2align 3
.L3751:
	movsd	%xmm6, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm6
	jmp	.L3737
	.p2align 4,,10
	.p2align 3
.L3738:
	pxor	%xmm1, %xmm1
	movapd	%xmm1, %xmm3
	movapd	%xmm1, %xmm2
	jmp	.L3735
	.cfi_endproc
.LFE423:
	.size	logfile, .-logfile
	.section	.rodata.str1.8
	.align 8
.LC138:
	.string	"%s:%d: error: illegal write: %s"
	.section	.text.unlikely,"ax",@progbits
.LCOLDB139:
	.text
.LHOTB139:
	.p2align 4
	.globl	stencil_val_a
	.type	stencil_val_a, @function
stencil_val_a:
.LFB180:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movl	%esi, %r10d
	movq	%rdi, (%rsp)
	movl	48(%rsp), %esi
	movl	%r10d, 8(%rsp)
	cmpl	$65535, %edx
	ja	.L3758
	movslq	%edx, %rdx
	addl	(%rsp), %ecx
	addl	4(%rsp), %r8d
	movl	%r9d, 28(%rsp)
	leaq	(%rdx,%rdx,4), %rax
	movl	%ecx, 20(%rsp)
	leaq	(%rdx,%rax,2), %rax
	movl	%r8d, 24(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	orl	%r8d, %ecx
	jne	.L3755
	testb	%sil, %sil
	je	.L3757
	cmpb	$0, 81(%rax)
	jne	.L3757
	movb	$1, 80(%rax)
.L3757:
	movb	$1, 81(%rax)
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
.L3755:
	.cfi_restore_state
	movq	32(%rax), %r8
	movl	64(%rsp), %ecx
	xorl	%eax, %eax
	movl	$.LC138, %esi
	movq	56(%rsp), %rdx
	movq	stderr(%rip), %rdi
	call	fprintf
	leaq	20(%rsp), %rdi
	call	write_stencil_index
	movq	stderr(%rip), %rsi
	movl	$10, %edi
	call	fputc
	movq	stderr(%rip), %rdi
	call	fflush
	call	abort
	.cfi_endproc
	.section	.text.unlikely
	.cfi_startproc
	.type	stencil_val_a.cold, @function
stencil_val_a.cold:
.LFSB180:
.L3758:
	.cfi_def_cfa_offset 48
	call	abort
	.cfi_endproc
.LFE180:
	.text
	.size	stencil_val_a, .-stencil_val_a
	.section	.text.unlikely
	.size	stencil_val_a.cold, .-stencil_val_a.cold
.LCOLDE139:
	.text
.LHOTE139:
	.section	.rodata.str1.1
.LC140:
	.string	"g"
	.section	.rodata.str1.8
	.align 8
.LC141:
	.string	"/root/mnt/basilisk/src/poisson.h"
	.text
	.p2align 4
	.type	residual, @function
residual:
.LFB283:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	(%rsi), %eax
	movslq	(%rdi), %rbp
	movl	$.LC140, %edi
	movslq	(%rdx), %rbx
	movq	8(%rcx), %r12
	movslq	8(%rcx), %r14
	movslq	12(%rcx), %r13
	movl	%eax, 36(%rsp)
	movl	16(%rcx), %eax
	movl	%eax, 16(%rsp)
	call	new_face_vector
	movq	baseblock(%rip), %rdx
	movq	%rax, 8(%rsp)
	sarq	$32, %rax
	movq	%rax, 24(%rsp)
	testq	%rdx, %rdx
	je	.L3764
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3764
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3765:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3765
.L3764:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	orl	$1, _loop.56+16(%rip)
	movl	$0, 80(%rsp)
	pushq	$356
	.cfi_def_cfa_offset 160
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	40(%rsp), %r15
	movl	%r15d, %edx
	shrq	$32, %r15
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$356
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$356
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %ecx
	movl	%ebp, %edx
	pushq	$356
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$356
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movq	%r15, %rdx
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	orl	$2, _loop.56+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	shrq	$32, %r12
	pushq	$356
	.cfi_def_cfa_offset 168
	movq	%r12, %rdx
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$356
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %r8d
	movl	%ebp, %edx
	pushq	$356
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.56, %edi
	call	end_stencil
	movl	$0, _loop.56+12(%rip)
	cmpl	$65535, %r14d
	jg	.L3817
	movq	grid(%rip), %r12
	cmpb	$0, 128(%r12)
	jne	.L3818
.L3766:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L3773
	movslq	%ebp, %rdx
	addl	$1, %r14d
	leal	-1(%rax), %r11d
	movl	%ebx, 56(%rsp)
	leaq	8(,%rdx,8), %r9
	movslq	8(%rsp), %rdx
	movslq	%r14d, %r14
	salq	$4, %r11
	leaq	0(,%r14,8), %rdi
	movl	%ebp, 60(%rsp)
	movsd	.LC10(%rip), %xmm3
	movl	$1, %r14d
	leaq	8(,%rdx,8), %rsi
	leaq	8(,%r13,8), %rdx
	movq	%rdi, %rbp
	movq	%rsi, 40(%rsp)
	movq	24(%rsp), %rsi
	movq	%rdx, %rbx
	leaq	8(,%rsi,8), %rsi
	movq	%rsi, 48(%rsp)
	movq	48(%r12), %rsi
	leaq	16(%rsi), %rax
	addq	%rax, %r11
	jmp	.L3772
	.p2align 4,,10
	.p2align 3
.L3819:
	addq	$16, %rax
.L3772:
	movslq	8(%rsi), %rcx
	movl	%r14d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm2
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm2
	testb	$1, %sil
	je	.L3770
	movq	24(%r12), %r10
	movslq	%ecx, %r8
	movslq	%edi, %r15
	movq	(%r10,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %r13
	movslq	%edx, %r8
	movq	0(%r13,%r15,8), %r10
	movq	-8(%r13,%r15,8), %r13
	movq	40(%rsp), %r15
	movq	(%r10,%r8,8), %r10
	movq	0(%r13,%r8,8), %r8
	movsd	(%r10,%r9), %xmm0
	subsd	(%r8,%r9), %xmm0
	divsd	%xmm2, %xmm0
	mulsd	(%r10,%rbp), %xmm0
	movsd	%xmm0, (%r10,%r15)
	movsd	L0(%rip), %xmm2
	mulsd	%xmm1, %xmm2
.L3770:
	andl	$2, %esi
	je	.L3771
	movq	24(%r12), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rsi
	movq	48(%rsp), %rdi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%r9), %xmm0
	subsd	(%rdx,%r9), %xmm0
	divsd	%xmm2, %xmm0
	mulsd	(%rcx,%rbx), %xmm0
	movsd	%xmm0, (%rcx,%rdi)
.L3771:
	movq	%rax, %rsi
	cmpq	%rax, %r11
	jne	.L3819
	movslq	56(%rsp), %rbx
	movslq	60(%rsp), %rbp
.L3773:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3769
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3769
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3780:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3780
.L3769:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%esi, %esi
	movl	%ebx, %edx
	pushq	$358
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	pushq	$358
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movl	68(%rsp), %edx
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	pushq	$358
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movl	48(%rsp), %r15d
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	movl	%r15d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$358
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$360
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %ecx
	pushq	$360
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	40(%rsp), %r14
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	movl	%r14d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r14d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$360
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$360
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movq	%r14, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	shrq	$32, %rax
	movl	$1, %r8d
	xorl	%ecx, %ecx
	pushq	$360
	.cfi_def_cfa_offset 168
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$360
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$367
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$368
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.55, %edi
	call	end_stencil
	movl	$0, _loop.55+12(%rip)
	cmpl	$65535, %r15d
	jg	.L3820
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3821
.L3781:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3788
	movslq	36(%rsp), %rcx
	movq	24(%rax), %r14
	subl	$1, %edx
	pxor	%xmm2, %xmm2
	movl	16(%rsp), %r11d
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rbp,8), %r12
	leaq	8(,%rbx,8), %rbp
	movq	24(%rsp), %rbx
	leaq	8(,%rcx,8), %r13
	movslq	8(%rsp), %rcx
	addl	$1, %r11d
	leaq	16(%rax), %rsi
	movsd	.LC10(%rip), %xmm3
	movq	.LC17(%rip), %xmm4
	movslq	%r11d, %r11
	leaq	8(,%rbx,8), %r9
	leaq	(%rdx,%rsi), %rbx
	movq	%rbx, 16(%rsp)
	salq	$3, %r11
	leaq	8(,%rcx,8), %r10
	movl	$1, %ebx
	jmp	.L3786
	.p2align 4,,10
	.p2align 3
.L3822:
	addq	$16, %rsi
.L3786:
	movslq	8(%rax), %rcx
	movl	%ebx, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm5
	movslq	(%rax), %r15
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	(%r14,%rcx,8), %rdx
	movslq	4(%rax), %rcx
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm5
	movq	16(%rdx), %r8
	movq	(%r8,%r15,8), %rdi
	movq	8(%r8,%r15,8), %r8
	movq	(%rdi,%rcx,8), %rax
	movq	(%r8,%rcx,8), %r8
	movq	8(%rdi,%rcx,8), %rcx
	movsd	(%rax,%r11), %xmm1
	mulsd	(%rax,%r12), %xmm1
	leaq	(%rax,%rbp), %rdx
	movsd	(%rax,%r13), %xmm0
	subsd	%xmm1, %xmm0
	mulsd	L0(%rip), %xmm5
	movsd	%xmm0, (%rdx)
	movsd	(%r8,%r10), %xmm1
	subsd	(%rax,%r10), %xmm1
	divsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
	movsd	(%rcx,%r9), %xmm1
	subsd	(%rax,%r9), %xmm1
	movq	%rsi, %rax
	divsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
	andpd	%xmm4, %xmm0
	maxsd	%xmm2, %xmm0
	movapd	%xmm0, %xmm2
	cmpq	%rsi, 16(%rsp)
	jne	.L3822
.L3783:
	movl	8(%rsp), %eax
	leaq	64(%rsp), %rdi
	movsd	%xmm2, 16(%rsp)
	movq	$-1, 72(%rsp)
	movl	%eax, 64(%rsp)
	movl	24(%rsp), %eax
	movl	%eax, 68(%rsp)
	call	delete
	movsd	16(%rsp), %xmm2
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	movapd	%xmm2, %xmm0
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3820:
	.cfi_restore_state
	movslq	16(%rsp), %rax
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm6
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3823
.L3787:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3788
	movslq	36(%rsp), %rcx
	movq	24(%rax), %r13
	leal	-1(%rdx), %r11d
	pxor	%xmm2, %xmm2
	movq	32(%rax), %rax
	leaq	8(,%rbx,8), %r14
	movq	24(%rsp), %rbx
	salq	$4, %r11
	leaq	8(,%rcx,8), %r12
	movslq	8(%rsp), %rcx
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rbp,8), %rbp
	leaq	16(%rax), %rsi
	leaq	8(,%rbx,8), %r9
	movq	.LC17(%rip), %xmm4
	movl	$1, %ebx
	leaq	8(,%rcx,8), %r10
	addq	%rsi, %r11
	jmp	.L3791
	.p2align 4,,10
	.p2align 3
.L3824:
	addq	$16, %rsi
.L3791:
	movslq	8(%rax), %rcx
	movl	%ebx, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm5
	movslq	(%rax), %r15
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	0(%r13,%rcx,8), %rdx
	movslq	4(%rax), %rcx
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm5
	movq	16(%rdx), %r8
	movq	(%r8,%r15,8), %rdi
	movq	8(%r8,%r15,8), %r8
	movq	(%rdi,%rcx,8), %rax
	movq	(%r8,%rcx,8), %r8
	movq	8(%rdi,%rcx,8), %rcx
	movsd	(%rax,%rbp), %xmm1
	movsd	(%rax,%r12), %xmm0
	leaq	(%rax,%r14), %rdx
	mulsd	%xmm6, %xmm1
	subsd	%xmm1, %xmm0
	mulsd	L0(%rip), %xmm5
	movsd	%xmm0, (%rdx)
	movsd	(%r8,%r10), %xmm1
	subsd	(%rax,%r10), %xmm1
	divsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
	movsd	(%rcx,%r9), %xmm1
	subsd	(%rax,%r9), %xmm1
	movq	%rsi, %rax
	divsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
	andpd	%xmm4, %xmm0
	maxsd	%xmm2, %xmm0
	movapd	%xmm0, %xmm2
	cmpq	%rsi, %r11
	jne	.L3824
	jmp	.L3783
	.p2align 4,,10
	.p2align 3
.L3817:
	movq	grid(%rip), %r11
	movq	_constant(%rip), %rax
	cmpb	$0, 128(%r11)
	movsd	-524288(%rax,%r14,8), %xmm4
	movsd	-524288(%rax,%r13,8), %xmm5
	jne	.L3825
.L3774:
	movl	56(%r11), %eax
	testl	%eax, %eax
	jle	.L3773
	movq	24(%rsp), %rsi
	movslq	%ebp, %rdx
	leal	-1(%rax), %r10d
	movl	%ebx, 40(%rsp)
	leaq	8(,%rdx,8), %r9
	salq	$4, %r10
	movslq	8(%rsp), %rdx
	movl	%ebp, 48(%rsp)
	leaq	8(,%rsi,8), %rcx
	movq	48(%r11), %rsi
	movsd	.LC10(%rip), %xmm3
	movl	$1, %r14d
	leaq	8(,%rdx,8), %rdi
	movq	%rcx, %rbx
	leaq	16(%rsi), %rax
	movq	%rdi, %rbp
	addq	%rax, %r10
	jmp	.L3777
	.p2align 4,,10
	.p2align 3
.L3826:
	addq	$16, %rax
.L3777:
	movslq	8(%rsi), %rcx
	movl	%r14d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm2
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm2
	testb	$1, %sil
	je	.L3775
	movq	24(%r11), %r12
	movslq	%ecx, %r8
	movslq	%edi, %r15
	movq	(%r12,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %r13
	movslq	%edx, %r8
	movq	0(%r13,%r15,8), %r12
	movq	-8(%r13,%r15,8), %r13
	movq	(%r12,%r8,8), %r12
	movq	0(%r13,%r8,8), %r8
	movsd	(%r12,%r9), %xmm0
	subsd	(%r8,%r9), %xmm0
	divsd	%xmm2, %xmm0
	mulsd	%xmm4, %xmm0
	movsd	%xmm0, (%r12,%rbp)
	movsd	L0(%rip), %xmm2
	mulsd	%xmm1, %xmm2
.L3775:
	andl	$2, %esi
	je	.L3776
	movq	24(%r11), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%r9), %xmm0
	subsd	(%rdx,%r9), %xmm0
	divsd	%xmm2, %xmm0
	mulsd	%xmm5, %xmm0
	movsd	%xmm0, (%rcx,%rbx)
.L3776:
	movq	%rax, %rsi
	cmpq	%rax, %r10
	jne	.L3826
	movslq	40(%rsp), %rbx
	movslq	48(%rsp), %rbp
	jmp	.L3773
	.p2align 4,,10
	.p2align 3
.L3818:
	call	update_cache_f
	movq	grid(%rip), %r12
	jmp	.L3766
	.p2align 4,,10
	.p2align 3
.L3821:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L3781
	.p2align 4,,10
	.p2align 3
.L3825:
	movsd	%xmm5, 48(%rsp)
	movsd	%xmm4, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r11
	movsd	48(%rsp), %xmm5
	movsd	40(%rsp), %xmm4
	jmp	.L3774
	.p2align 4,,10
	.p2align 3
.L3823:
	movsd	%xmm6, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	16(%rsp), %xmm6
	jmp	.L3787
	.p2align 4,,10
	.p2align 3
.L3788:
	pxor	%xmm2, %xmm2
	jmp	.L3783
	.cfi_endproc
.LFE283:
	.size	residual, .-residual
	.section	.rodata.str1.8
	.align 8
.LC142:
	.string	"/root/mnt/basilisk/src/viscosity.h"
	.section	.rodata.str1.1
.LC143:
	.string	"taux"
	.text
	.p2align 4
	.type	residual_viscosity, @function
residual_viscosity:
.LFB287:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	movq	8(%rcx), %rbx
	movsd	24(%rcx), %xmm7
	movl	4(%rdi), %eax
	movq	%rbx, 24(%rsp)
	movl	8(%rcx), %ebx
	movl	%eax, 60(%rsp)
	movl	%ebx, 48(%rsp)
	movl	12(%rcx), %ebx
	movsd	%xmm7, 88(%rsp)
	movl	%ebx, 40(%rsp)
	movl	16(%rcx), %ebx
	movq	(%rsi), %rcx
	movl	%ebx, 32(%rsp)
	movq	(%rdi), %rbx
	movq	%rcx, 72(%rsp)
	movl	(%rsi), %ecx
	movl	4(%rsi), %esi
	movq	%rbx, 8(%rsp)
	movl	(%rdi), %ebx
	movl	%ecx, 96(%rsp)
	leaq	128(%rsp), %rdi
	movl	%esi, 112(%rsp)
	movq	(%rdx), %rsi
	movl	%ebx, 56(%rsp)
	movq	%rsi, 80(%rsp)
	movl	(%rdx), %esi
	movl	%esi, 104(%rsp)
	movl	4(%rdx), %esi
	movl	$104, %edx
	movl	%eax, 132(%rsp)
	movl	%esi, 116(%rsp)
	movl	$.LC142, %esi
	movl	%ebx, 128(%rsp)
	movq	$-1, 136(%rsp)
	call	boundary_internal
	movl	$.LC143, %edi
	call	new_face_vector
	movq	baseblock(%rip), %rdx
	movq	%rax, 16(%rsp)
	sarq	$32, %rax
	movq	%rax, 64(%rsp)
	testq	%rdx, %rdx
	je	.L3831
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3831
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3832:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r11d, %r11d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r11w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3832
.L3831:
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 152(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 160(%rsp)
	pushq	$109
	.cfi_def_cfa_offset 240
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	48(%rsp), %edx
	orl	$1, _loop.51+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	56(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	40(%rsp), %r12d
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%r12d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.51, %edi
	call	end_stencil
	cmpl	$65535, 48(%rsp)
	movl	$0, _loop.51+12(%rip)
	jg	.L3963
	movq	grid(%rip), %r11
	cmpb	$0, 128(%r11)
	jne	.L3964
.L3833:
	movl	56(%r11), %eax
	testl	%eax, %eax
	jle	.L3839
	movslq	56(%rsp), %rdx
	movl	48(%rsp), %ebx
	leal	-1(%rax), %esi
	salq	$4, %rsi
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rdx,8), %r9
	movslq	16(%rsp), %rdx
	leal	1(%rbx), %r10d
	movl	$1, %ebx
	movslq	%r10d, %r10
	leaq	8(,%rdx,8), %rbp
	movq	48(%r11), %rdx
	salq	$3, %r10
	leaq	16(%rdx), %rax
	addq	%rax, %rsi
	jmp	.L3838
	.p2align 4,,10
	.p2align 3
.L3965:
	addq	$16, %rax
.L3838:
	testb	$1, 12(%rdx)
	je	.L3837
	movslq	8(%rdx), %r8
	movq	24(%r11), %rdi
	pxor	%xmm2, %xmm2
	movslq	(%rdx), %r12
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r8
	movslq	4(%rdx), %rdi
	movq	(%r8,%r12,8), %rdx
	movq	-8(%r8,%r12,8), %r8
	movq	(%rdx,%rdi,8), %rdx
	movq	(%r8,%rdi,8), %rdi
	movsd	(%rdx,%r9), %xmm0
	movsd	(%rdx,%r10), %xmm1
	subsd	(%rdi,%r9), %xmm0
	movl	%ebx, %edi
	sall	%cl, %edi
	addsd	%xmm1, %xmm1
	cvtsi2sdl	%edi, %xmm2
	mulsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	divsd	%xmm2, %xmm1
	mulsd	L0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx,%rbp)
.L3837:
	movq	%rax, %rdx
	cmpq	%rax, %rsi
	jne	.L3965
.L3839:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3836
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3836
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3845:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r10d, %r10d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r10w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3845
.L3836:
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 152(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 160(%rsp)
	pushq	$112
	.cfi_def_cfa_offset 240
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movq	48(%rsp), %rax
	orl	$2, _loop.50+16(%rip)
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	56(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	40(%rsp), %rbx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %r8d
	movl	%ebx, %edx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 240
	shrq	$32, %rax
	movl	$-1, %r8d
	movl	$1, %ecx
	pushq	$113
	.cfi_def_cfa_offset 248
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$1, %ecx
	movl	%r12d, %edx
	pushq	$113
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	movl	$-1, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %r8d
	movl	%r12d, %edx
	pushq	$114
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$114
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.50, %edi
	call	end_stencil
	cmpl	$65535, 48(%rsp)
	movl	$0, _loop.50+12(%rip)
	jg	.L3966
	movq	grid(%rip), %rbp
	cmpb	$0, 128(%rbp)
	jne	.L3967
.L3846:
	movl	56(%rbp), %eax
	testl	%eax, %eax
	jle	.L3852
	movslq	40(%rsp), %rdx
	leal	-1(%rax), %r10d
	movq	64(%rsp), %rcx
	salq	$4, %r10
	movsd	.LC3(%rip), %xmm2
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rdx,8), %r12
	movslq	56(%rsp), %rdx
	leaq	8(,%rcx,8), %r13
	leaq	8(,%rdx,8), %rbx
	movslq	60(%rsp), %rdx
	leaq	8(,%rdx,8), %rsi
	movq	48(%rbp), %rdx
	leaq	16(%rdx), %rax
	addq	%rax, %r10
	jmp	.L3851
	.p2align 4,,10
	.p2align 3
.L3968:
	addq	$16, %rax
.L3851:
	testb	$2, 12(%rdx)
	je	.L3850
	movslq	8(%rdx), %r8
	movq	24(%rbp), %rdi
	pxor	%xmm4, %xmm4
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r9
	movslq	(%rdx), %rdi
	movslq	4(%rdx), %rdx
	leaq	0(,%rdi,8), %r14
	movq	(%r9,%rdi,8), %r11
	movq	8(%r9,%r14), %r15
	leaq	0(,%rdx,8), %r8
	movq	-8(%r9,%r14), %r9
	movq	(%r11,%rdx,8), %rdi
	movq	-8(%r11,%r8), %r11
	movq	-8(%r15,%r8), %r14
	movq	(%r15,%rdx,8), %r15
	movsd	(%rdi,%rbx), %xmm1
	subsd	(%r11,%rbx), %xmm1
	movsd	(%r14,%rsi), %xmm0
	addsd	(%r15,%rsi), %xmm0
	movq	(%r9,%rdx,8), %rdx
	movq	-8(%r9,%r8), %r8
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	movsd	(%r8,%rsi), %xmm1
	addsd	(%rdx,%rsi), %xmm1
	movl	$1, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm4
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	mulsd	(%rdi,%r12), %xmm0
	movapd	%xmm3, %xmm1
	divsd	%xmm4, %xmm1
	mulsd	L0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdi,%r13)
.L3850:
	movq	%rax, %rdx
	cmpq	%rax, %r10
	jne	.L3968
.L3852:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3849
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3849
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3858:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r9d, %r9d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r9w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3858
.L3849:
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%edi, %edi
	movq	$0, 152(%rsp)
	xorl	%esi, %esi
	movl	$1, %ecx
	movl	$0, 160(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 240
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	48(%rsp), %rbx
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 240
	shrq	$32, %rax
	xorl	%ecx, %ecx
	movl	$1, %r8d
	pushq	$125
	.cfi_def_cfa_offset 248
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$126
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	112(%rsp), %r12d
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%r12d, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%r9d, %r9d
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	104(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	40(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	64(%rsp), %ebx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$127
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$128
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.49, %edi
	call	end_stencil
	movl	$0, _loop.49+12(%rip)
	cmpl	$65535, %ebx
	jg	.L3969
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3970
.L3859:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3866
	movslq	16(%rsp), %rcx
	movq	24(%rax), %rbp
	leal	-1(%rdx), %r11d
	pxor	%xmm2, %xmm2
	movq	64(%rsp), %rbx
	movq	32(%rax), %rax
	salq	$4, %r11
	movapd	%xmm2, %xmm1
	leaq	8(,%rcx,8), %r10
	movslq	96(%rsp), %rcx
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rbx,8), %r9
	movl	32(%rsp), %ebx
	leaq	16(%rax), %rdi
	movq	.LC17(%rip), %xmm3
	leaq	8(,%rcx,8), %r14
	movslq	56(%rsp), %rcx
	movsd	88(%rsp), %xmm7
	addq	%rdi, %r11
	addl	$1, %ebx
	leaq	8(,%rcx,8), %r13
	movslq	104(%rsp), %rcx
	movslq	%ebx, %rbx
	salq	$3, %rbx
	leaq	8(,%rcx,8), %r12
	jmp	.L3864
	.p2align 4,,10
	.p2align 3
.L3971:
	addq	$16, %rdi
.L3864:
	movslq	8(%rax), %rdx
	movslq	4(%rax), %rsi
	pxor	%xmm6, %xmm6
	movq	%rdx, %rcx
	movq	0(%rbp,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r8
	movslq	(%rax), %rdx
	addq	$1, %rdx
	movq	-8(%r8,%rdx,8), %r15
	movq	(%r8,%rdx,8), %rdx
	movq	(%r15,%rsi,8), %rax
	movq	(%rdx,%rsi,8), %rdx
	movsd	(%rdx,%r10), %xmm5
	subsd	(%rax,%r10), %xmm5
	movq	8(%r15,%rsi,8), %rdx
	addsd	%xmm2, %xmm5
	movsd	(%rdx,%r9), %xmm0
	subsd	(%rax,%r9), %xmm0
	movl	$1, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm6
	addsd	%xmm5, %xmm0
	movapd	%xmm7, %xmm5
	divsd	(%rax,%rbx), %xmm5
	mulsd	%xmm5, %xmm0
	movapd	%xmm4, %xmm5
	divsd	%xmm6, %xmm5
	mulsd	L0(%rip), %xmm5
	divsd	%xmm5, %xmm0
	movsd	(%rax,%r14), %xmm5
	subsd	(%rax,%r13), %xmm5
	addsd	%xmm5, %xmm0
	movsd	%xmm0, (%rax,%r12)
	andpd	%xmm3, %xmm0
	movq	%rdi, %rax
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	cmpq	%rdi, %r11
	jne	.L3971
.L3861:
	movl	16(%rsp), %eax
	leaq	144(%rsp), %rdi
	movsd	%xmm2, 104(%rsp)
	movsd	%xmm1, 96(%rsp)
	movl	%eax, 144(%rsp)
	movl	64(%rsp), %eax
	movq	$-1, 152(%rsp)
	movl	%eax, 148(%rsp)
	call	delete
	movl	$.LC143, %edi
	call	new_face_vector
	movq	baseblock(%rip), %rdx
	movsd	96(%rsp), %xmm1
	movq	%rax, 16(%rsp)
	sarq	$32, %rax
	movsd	104(%rsp), %xmm2
	testq	%rdx, %rdx
	movq	%rax, 64(%rsp)
	je	.L3873
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3873
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3874:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r8d, %r8d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r8w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3874
.L3873:
	movsd	%xmm2, 104(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movsd	%xmm1, 104(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movq	$0, 152(%rsp)
	movl	$0, 160(%rsp)
	pushq	$109
	.cfi_def_cfa_offset 240
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movq	48(%rsp), %rax
	orl	$2, _loop.48+16(%rip)
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	56(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	40(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movl	%eax, %edx
	movq	%rax, %r12
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %r8d
	movl	%r12d, %edx
	pushq	$109
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.48, %edi
	call	end_stencil
	cmpl	$65535, 40(%rsp)
	movl	$0, _loop.48+12(%rip)
	movsd	96(%rsp), %xmm1
	movsd	104(%rsp), %xmm2
	jg	.L3972
	movq	grid(%rip), %r9
	cmpb	$0, 128(%r9)
	jne	.L3973
.L3875:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L3881
	movslq	60(%rsp), %rdx
	movl	40(%rsp), %ebx
	leal	-1(%rax), %esi
	movl	$1, %r10d
	salq	$4, %rsi
	movsd	.LC10(%rip), %xmm5
	leaq	8(,%rdx,8), %rdi
	movq	48(%r9), %rdx
	leal	1(%rbx), %r8d
	movq	64(%rsp), %rbx
	movslq	%r8d, %r8
	leaq	16(%rdx), %rax
	salq	$3, %r8
	leaq	8(,%rbx,8), %r11
	addq	%rax, %rsi
	jmp	.L3880
	.p2align 4,,10
	.p2align 3
.L3974:
	addq	$16, %rax
.L3880:
	testb	$2, 12(%rdx)
	je	.L3879
	movslq	8(%rdx), %rbp
	movq	24(%r9), %rbx
	pxor	%xmm4, %xmm4
	movq	(%rbx,%rbp,8), %rbx
	movq	%rbp, %rcx
	movslq	(%rdx), %rbp
	movq	(%rbx), %rbx
	movq	16(%rbx), %rbx
	movq	(%rbx,%rbp,8), %rbx
	movslq	4(%rdx), %rbp
	movq	(%rbx,%rbp,8), %rdx
	movq	-8(%rbx,%rbp,8), %rbx
	movsd	(%rdx,%rdi), %xmm0
	movsd	(%rdx,%r8), %xmm3
	subsd	(%rbx,%rdi), %xmm0
	movl	%r10d, %ebx
	sall	%cl, %ebx
	addsd	%xmm3, %xmm3
	cvtsi2sdl	%ebx, %xmm4
	mulsd	%xmm3, %xmm0
	movapd	%xmm5, %xmm3
	divsd	%xmm4, %xmm3
	mulsd	L0(%rip), %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdx,%r11)
.L3879:
	movq	%rax, %rdx
	cmpq	%rax, %rsi
	jne	.L3974
.L3881:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3878
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3878
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3887:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3887
.L3878:
	movsd	%xmm2, 104(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movsd	%xmm1, 104(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movq	$0, 152(%rsp)
	movl	$0, 160(%rsp)
	pushq	$112
	.cfi_def_cfa_offset 240
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	48(%rsp), %edx
	orl	$1, _loop.47+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	56(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	40(%rsp), %rbx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movq	%rbx, %rax
	shrq	$32, %rax
	movl	%eax, %edx
	movq	%rax, %r12
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$112
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$1, %r8d
	movl	$-1, %ecx
	pushq	$113
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$113
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %r8d
	movl	$-1, %ecx
	pushq	$114
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	$-1, %r8d
	movl	%ebx, %edx
	pushq	$114
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.47, %edi
	call	end_stencil
	cmpl	$65535, 40(%rsp)
	movl	$0, _loop.47+12(%rip)
	movsd	96(%rsp), %xmm1
	movsd	104(%rsp), %xmm2
	jg	.L3975
	movq	grid(%rip), %rbp
	cmpb	$0, 128(%rbp)
	jne	.L3976
.L3888:
	movl	56(%rbp), %ecx
	testl	%ecx, %ecx
	jle	.L3894
	movslq	48(%rsp), %rax
	movq	48(%rbp), %rdx
	leal	-1(%rcx), %r11d
	movl	$1, %r15d
	salq	$4, %r11
	movsd	.LC3(%rip), %xmm4
	movsd	.LC10(%rip), %xmm5
	leaq	8(,%rax,8), %r14
	movslq	60(%rsp), %rax
	leaq	8(,%rax,8), %rbx
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rsi
	movslq	16(%rsp), %rax
	leaq	8(,%rax,8), %r13
	leaq	16(%rdx), %rax
	addq	%rax, %r11
	jmp	.L3893
	.p2align 4,,10
	.p2align 3
.L3977:
	addq	$16, %rax
.L3893:
	testb	$1, 12(%rdx)
	je	.L3892
	movslq	8(%rdx), %r8
	movq	24(%rbp), %rdi
	pxor	%xmm6, %xmm6
	movslq	(%rdx), %r12
	movslq	4(%rdx), %r10
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	leaq	0(,%r10,8), %rdx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r9
	movq	(%r9,%r12,8), %r8
	movq	-8(%r9,%r12,8), %r9
	movq	8(%r8,%rdx), %r12
	movq	(%r8,%r10,8), %rdi
	movq	(%r9,%r10,8), %r10
	movq	%r12, 24(%rsp)
	movq	8(%r9,%rdx), %r12
	movsd	(%rdi,%rbx), %xmm3
	subsd	(%r10,%rbx), %xmm3
	movsd	(%r12,%rsi), %xmm0
	movq	24(%rsp), %r12
	movq	-8(%r9,%rdx), %r9
	movq	-8(%r8,%rdx), %rdx
	addsd	(%r12,%rsi), %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm3, %xmm0
	movsd	(%r9,%rsi), %xmm3
	addsd	(%rdx,%rsi), %xmm3
	movl	%r15d, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm6
	mulsd	%xmm4, %xmm3
	subsd	%xmm3, %xmm0
	mulsd	(%rdi,%r14), %xmm0
	movapd	%xmm5, %xmm3
	divsd	%xmm6, %xmm3
	mulsd	L0(%rip), %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdi,%r13)
.L3892:
	movq	%rax, %rdx
	cmpq	%rax, %r11
	jne	.L3977
.L3894:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L3891
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L3891
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L3900:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L3900
.L3891:
	movsd	%xmm2, 40(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movsd	%xmm1, 32(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$1, %r8d
	movq	$0, 152(%rsp)
	movl	$0, 160(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 240
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	48(%rsp), %rbx
	movq	%rbx, %rax
	shrq	$32, %rax
	movl	%eax, %edx
	movq	%rax, %r12
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	movl	%ebx, %edx
	movl	$1, %ecx
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$125
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$126
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$.LC142
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	movq	112(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movl	%eax, %edx
	movq	%rax, %r12
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	104(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	40(%rsp), %rax
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	pushq	$126
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movl	64(%rsp), %ebx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$127
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 232
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 240
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$128
	.cfi_def_cfa_offset 248
	pushq	$.LC142
	.cfi_def_cfa_offset 256
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 224
	movl	$_loop.46, %edi
	call	end_stencil
	cmpl	$65535, %ebx
	movl	$0, _loop.46+12(%rip)
	movsd	24(%rsp), %xmm1
	movsd	40(%rsp), %xmm2
	jg	.L3978
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L3979
.L3901:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L3902
	movslq	16(%rsp), %rcx
	movq	64(%rsp), %rbx
	subl	$1, %edx
	movq	24(%rax), %r14
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rcx,8), %r10
	movslq	112(%rsp), %rcx
	leaq	8(,%rbx,8), %r11
	movl	32(%rsp), %ebx
	leaq	16(%rax), %rsi
	movsd	.LC10(%rip), %xmm4
	movq	.LC17(%rip), %xmm3
	leaq	8(,%rcx,8), %r13
	movslq	60(%rsp), %rcx
	addl	$1, %ebx
	movsd	88(%rsp), %xmm7
	movslq	%ebx, %rbx
	leaq	8(,%rcx,8), %r12
	movslq	116(%rsp), %rcx
	salq	$3, %rbx
	leaq	8(,%rcx,8), %rbp
	leaq	(%rdx,%rsi), %rcx
	movq	%rcx, 8(%rsp)
	jmp	.L3905
	.p2align 4,,10
	.p2align 3
.L3980:
	addq	$16, %rsi
.L3905:
	movslq	8(%rax), %rdx
	movslq	(%rax), %r9
	pxor	%xmm6, %xmm6
	movq	%rdx, %rcx
	movq	(%r14,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r8
	movslq	4(%rax), %rdx
	movq	(%r8,%r9,8), %r15
	addq	$1, %rdx
	leaq	0(,%rdx,8), %rdi
	movq	(%r15,%rdx,8), %rdx
	movq	-8(%r15,%rdi), %rax
	movsd	(%rdx,%r11), %xmm5
	movq	8(%r8,%r9,8), %rdx
	subsd	(%rax,%r11), %xmm5
	movq	-8(%rdx,%rdi), %rdx
	addsd	%xmm2, %xmm5
	movsd	(%rdx,%r10), %xmm0
	subsd	(%rax,%r10), %xmm0
	movl	$1, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm6
	addsd	%xmm5, %xmm0
	movapd	%xmm7, %xmm5
	divsd	(%rax,%rbx), %xmm5
	mulsd	%xmm5, %xmm0
	movapd	%xmm4, %xmm5
	divsd	%xmm6, %xmm5
	mulsd	L0(%rip), %xmm5
	divsd	%xmm5, %xmm0
	movsd	(%rax,%r13), %xmm5
	subsd	(%rax,%r12), %xmm5
	addsd	%xmm5, %xmm0
	movsd	%xmm0, (%rax,%rbp)
	andpd	%xmm3, %xmm0
	movq	%rsi, %rax
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	cmpq	8(%rsp), %rsi
	jne	.L3980
.L3902:
	movl	16(%rsp), %eax
	leaq	144(%rsp), %rdi
	movsd	%xmm1, 8(%rsp)
	movq	$-1, 152(%rsp)
	movl	%eax, 144(%rsp)
	movl	64(%rsp), %eax
	movl	%eax, 148(%rsp)
	call	delete
	movsd	8(%rsp), %xmm1
	addq	$168, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	movapd	%xmm1, %xmm0
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L3975:
	.cfi_restore_state
	movq	grid(%rip), %rbp
	movslq	40(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%rbp)
	movsd	-524288(%rdx,%rax,8), %xmm5
	jne	.L3981
.L3895:
	movl	56(%rbp), %ecx
	testl	%ecx, %ecx
	jle	.L3894
	movslq	60(%rsp), %rax
	movq	48(%rbp), %rdx
	leal	-1(%rcx), %r10d
	movl	$1, %r13d
	salq	$4, %r10
	movsd	.LC3(%rip), %xmm4
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rax,8), %rbx
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rsi
	movslq	16(%rsp), %rax
	leaq	8(,%rax,8), %r14
	leaq	16(%rdx), %rax
	addq	%rax, %r10
	jmp	.L3897
	.p2align 4,,10
	.p2align 3
.L3982:
	addq	$16, %rax
.L3897:
	testb	$1, 12(%rdx)
	je	.L3896
	movslq	8(%rdx), %r8
	movq	24(%rbp), %rdi
	pxor	%xmm7, %xmm7
	movslq	(%rdx), %r12
	movslq	4(%rdx), %r11
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	leaq	0(,%r11,8), %rdx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r9
	movq	(%r9,%r12,8), %r8
	movq	-8(%r9,%r12,8), %r9
	movq	8(%r8,%rdx), %r12
	movq	8(%r9,%rdx), %r15
	movq	(%r8,%r11,8), %rdi
	movq	(%r9,%r11,8), %r11
	movsd	(%r15,%rsi), %xmm0
	addsd	(%r12,%rsi), %xmm0
	movsd	(%rdi,%rbx), %xmm3
	subsd	(%r11,%rbx), %xmm3
	movq	-8(%r9,%rdx), %r9
	movq	-8(%r8,%rdx), %rdx
	mulsd	%xmm4, %xmm0
	addsd	%xmm3, %xmm0
	movsd	(%r9,%rsi), %xmm3
	addsd	(%rdx,%rsi), %xmm3
	movl	%r13d, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm7
	mulsd	%xmm4, %xmm3
	subsd	%xmm3, %xmm0
	movapd	%xmm6, %xmm3
	divsd	%xmm7, %xmm3
	mulsd	%xmm5, %xmm0
	mulsd	L0(%rip), %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdi,%r14)
.L3896:
	movq	%rax, %rdx
	cmpq	%rax, %r10
	jne	.L3982
	jmp	.L3894
	.p2align 4,,10
	.p2align 3
.L3972:
	movq	grid(%rip), %r8
	movslq	48(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%r8)
	movsd	-524288(%rdx,%rax,8), %xmm4
	jne	.L3983
.L3882:
	movl	56(%r8), %eax
	testl	%eax, %eax
	jle	.L3881
	movslq	60(%rsp), %rdx
	leal	-1(%rax), %esi
	movq	64(%rsp), %rbx
	movl	$1, %r9d
	salq	$4, %rsi
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rdx,8), %rdi
	movq	48(%r8), %rdx
	leaq	8(,%rbx,8), %r10
	leaq	16(%rdx), %rax
	addq	%rax, %rsi
	jmp	.L3884
	.p2align 4,,10
	.p2align 3
.L3984:
	addq	$16, %rax
.L3884:
	testb	$2, 12(%rdx)
	je	.L3883
	movslq	8(%rdx), %rbx
	movq	24(%r8), %r11
	movapd	%xmm4, %xmm3
	pxor	%xmm5, %xmm5
	addsd	%xmm4, %xmm3
	movq	(%r11,%rbx,8), %r11
	movq	%rbx, %rcx
	movslq	(%rdx), %rbx
	movq	(%r11), %r11
	movq	16(%r11), %r11
	movq	(%r11,%rbx,8), %r11
	movslq	4(%rdx), %rbx
	movq	(%r11,%rbx,8), %rdx
	movq	-8(%r11,%rbx,8), %r11
	movl	%r9d, %ebx
	sall	%cl, %ebx
	movsd	(%rdx,%rdi), %xmm0
	cvtsi2sdl	%ebx, %xmm5
	subsd	(%r11,%rdi), %xmm0
	mulsd	%xmm3, %xmm0
	movapd	%xmm6, %xmm3
	divsd	%xmm5, %xmm3
	mulsd	L0(%rip), %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm0, (%rdx,%r10)
.L3883:
	movq	%rax, %rdx
	cmpq	%rax, %rsi
	jne	.L3984
	jmp	.L3881
	.p2align 4,,10
	.p2align 3
.L3978:
	movq	grid(%rip), %rcx
	movslq	32(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%rcx)
	movsd	-524288(%rdx,%rax,8), %xmm0
	jne	.L3985
.L3906:
	movl	40(%rcx), %edx
	testl	%edx, %edx
	jle	.L3902
	movq	64(%rsp), %rax
	subl	$1, %edx
	movq	24(%rcx), %r14
	movsd	88(%rsp), %xmm6
	salq	$4, %rdx
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rax,8), %r11
	movslq	16(%rsp), %rax
	movq	.LC17(%rip), %xmm3
	divsd	%xmm0, %xmm6
	leaq	8(,%rax,8), %r10
	movslq	112(%rsp), %rax
	leaq	8(,%rax,8), %r13
	movslq	60(%rsp), %rax
	leaq	8(,%rax,8), %r12
	movslq	116(%rsp), %rax
	leaq	8(,%rax,8), %rbp
	movq	32(%rcx), %rax
	leaq	16(%rax), %rsi
	leaq	(%rdx,%rsi), %rbx
	movq	%rbx, 8(%rsp)
	movl	$1, %ebx
	jmp	.L3909
	.p2align 4,,10
	.p2align 3
.L3986:
	addq	$16, %rsi
.L3909:
	movslq	8(%rax), %rdx
	movslq	(%rax), %r9
	pxor	%xmm7, %xmm7
	movq	%rdx, %rcx
	movq	(%r14,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r8
	movslq	4(%rax), %rdx
	movq	(%r8,%r9,8), %r15
	addq	$1, %rdx
	leaq	0(,%rdx,8), %rdi
	movq	(%r15,%rdx,8), %rdx
	movq	-8(%r15,%rdi), %rax
	movsd	(%rdx,%r11), %xmm5
	movq	8(%r8,%r9,8), %rdx
	subsd	(%rax,%r11), %xmm5
	movq	-8(%rdx,%rdi), %rdx
	movsd	(%rdx,%r10), %xmm0
	movl	%ebx, %edx
	addsd	%xmm2, %xmm5
	subsd	(%rax,%r10), %xmm0
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm7
	addsd	%xmm5, %xmm0
	movapd	%xmm4, %xmm5
	divsd	%xmm7, %xmm5
	mulsd	%xmm6, %xmm0
	mulsd	L0(%rip), %xmm5
	divsd	%xmm5, %xmm0
	movsd	(%rax,%r13), %xmm5
	subsd	(%rax,%r12), %xmm5
	addsd	%xmm5, %xmm0
	movsd	%xmm0, (%rax,%rbp)
	andpd	%xmm3, %xmm0
	movq	%rsi, %rax
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	cmpq	%rsi, 8(%rsp)
	jne	.L3986
	jmp	.L3902
	.p2align 4,,10
	.p2align 3
.L3963:
	movq	grid(%rip), %r10
	movslq	48(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%r10)
	movsd	-524288(%rdx,%rax,8), %xmm2
	jne	.L3987
.L3840:
	movl	56(%r10), %eax
	testl	%eax, %eax
	jle	.L3839
	movslq	56(%rsp), %rdx
	movq	48(%r10), %rsi
	movl	$1, %r11d
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rdx,8), %r9
	movslq	16(%rsp), %rdx
	leaq	8(,%rdx,8), %rbx
	leal	-1(%rax), %edx
	salq	$4, %rdx
	leaq	16(%rsi), %rax
	addq	%rax, %rdx
	jmp	.L3842
	.p2align 4,,10
	.p2align 3
.L3988:
	addq	$16, %rax
.L3842:
	testb	$1, 12(%rsi)
	je	.L3841
	movslq	8(%rsi), %r8
	movq	24(%r10), %rdi
	movapd	%xmm2, %xmm1
	pxor	%xmm3, %xmm3
	movslq	(%rsi), %rbp
	addsd	%xmm2, %xmm1
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r8
	movslq	4(%rsi), %rdi
	movq	(%r8,%rbp,8), %rsi
	movq	-8(%r8,%rbp,8), %r8
	movq	(%rsi,%rdi,8), %rsi
	movq	(%r8,%rdi,8), %rdi
	movsd	(%rsi,%r9), %xmm0
	subsd	(%rdi,%r9), %xmm0
	movl	%r11d, %edi
	sall	%cl, %edi
	cvtsi2sdl	%edi, %xmm3
	mulsd	%xmm1, %xmm0
	movapd	%xmm4, %xmm1
	divsd	%xmm3, %xmm1
	mulsd	L0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rsi,%rbx)
.L3841:
	movq	%rax, %rsi
	cmpq	%rax, %rdx
	jne	.L3988
	jmp	.L3839
	.p2align 4,,10
	.p2align 3
.L3969:
	movq	grid(%rip), %rcx
	movslq	32(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%rcx)
	movsd	-524288(%rdx,%rax,8), %xmm0
	jne	.L3989
.L3865:
	movl	40(%rcx), %edx
	testl	%edx, %edx
	jle	.L3866
	movslq	16(%rsp), %rax
	leal	-1(%rdx), %r11d
	pxor	%xmm2, %xmm2
	movq	24(%rcx), %r14
	movsd	88(%rsp), %xmm6
	salq	$4, %r11
	movapd	%xmm2, %xmm1
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rax,8), %r10
	movq	64(%rsp), %rax
	movl	$1, %ebx
	movq	.LC17(%rip), %xmm3
	divsd	%xmm0, %xmm6
	leaq	8(,%rax,8), %r9
	movslq	96(%rsp), %rax
	leaq	8(,%rax,8), %r13
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %r12
	movslq	104(%rsp), %rax
	leaq	8(,%rax,8), %rbp
	movq	32(%rcx), %rax
	leaq	16(%rax), %rdi
	addq	%rdi, %r11
	jmp	.L3869
	.p2align 4,,10
	.p2align 3
.L3990:
	addq	$16, %rdi
.L3869:
	movslq	8(%rax), %rdx
	movslq	4(%rax), %rsi
	pxor	%xmm7, %xmm7
	movq	%rdx, %rcx
	movq	(%r14,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r8
	movslq	(%rax), %rdx
	addq	$1, %rdx
	movq	-8(%r8,%rdx,8), %r15
	movq	(%r8,%rdx,8), %rdx
	movq	(%rdx,%rsi,8), %rdx
	movq	(%r15,%rsi,8), %rax
	movsd	(%rdx,%r10), %xmm5
	movq	8(%r15,%rsi,8), %rdx
	subsd	(%rax,%r10), %xmm5
	movsd	(%rdx,%r9), %xmm0
	movl	%ebx, %edx
	subsd	(%rax,%r9), %xmm0
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm7
	addsd	%xmm2, %xmm5
	addsd	%xmm5, %xmm0
	movapd	%xmm4, %xmm5
	divsd	%xmm7, %xmm5
	mulsd	%xmm6, %xmm0
	mulsd	L0(%rip), %xmm5
	divsd	%xmm5, %xmm0
	movsd	(%rax,%r13), %xmm5
	subsd	(%rax,%r12), %xmm5
	addsd	%xmm5, %xmm0
	movsd	%xmm0, (%rax,%rbp)
	andpd	%xmm3, %xmm0
	movq	%rdi, %rax
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
	cmpq	%rdi, %r11
	jne	.L3990
	jmp	.L3861
	.p2align 4,,10
	.p2align 3
.L3966:
	movq	grid(%rip), %rbp
	movslq	40(%rsp), %rax
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%rbp)
	movsd	-524288(%rdx,%rax,8), %xmm3
	jne	.L3991
.L3853:
	movl	56(%rbp), %eax
	testl	%eax, %eax
	jle	.L3852
	movslq	56(%rsp), %rdx
	leal	-1(%rax), %r9d
	movq	64(%rsp), %rcx
	movl	$1, %r12d
	salq	$4, %r9
	movsd	.LC3(%rip), %xmm2
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rdx,8), %rbx
	movslq	60(%rsp), %rdx
	leaq	8(,%rcx,8), %r13
	leaq	8(,%rdx,8), %rsi
	movq	48(%rbp), %rdx
	leaq	16(%rdx), %rax
	addq	%rax, %r9
	jmp	.L3855
	.p2align 4,,10
	.p2align 3
.L3992:
	addq	$16, %rax
.L3855:
	testb	$2, 12(%rdx)
	je	.L3854
	movslq	8(%rdx), %r8
	movq	24(%rbp), %rdi
	pxor	%xmm5, %xmm5
	movq	(%rdi,%r8,8), %rdi
	movq	%r8, %rcx
	movq	(%rdi), %rdi
	movq	16(%rdi), %r10
	movslq	(%rdx), %rdi
	movslq	4(%rdx), %rdx
	leaq	0(,%rdi,8), %r14
	movq	(%r10,%rdi,8), %r11
	movq	8(%r10,%r14), %r15
	leaq	0(,%rdx,8), %r8
	movq	-8(%r10,%r14), %r10
	movq	(%r11,%rdx,8), %rdi
	movq	-8(%r11,%r8), %r11
	movq	-8(%r15,%r8), %r14
	movq	(%r15,%rdx,8), %r15
	movsd	(%rdi,%rbx), %xmm1
	subsd	(%r11,%rbx), %xmm1
	movsd	(%r14,%rsi), %xmm0
	addsd	(%r15,%rsi), %xmm0
	movq	(%r10,%rdx,8), %rdx
	movq	-8(%r10,%r8), %r8
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	movsd	(%r8,%rsi), %xmm1
	addsd	(%rdx,%rsi), %xmm1
	movl	%r12d, %edx
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm5
	mulsd	%xmm2, %xmm1
	subsd	%xmm1, %xmm0
	movapd	%xmm4, %xmm1
	divsd	%xmm5, %xmm1
	mulsd	%xmm3, %xmm0
	mulsd	L0(%rip), %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdi,%r13)
.L3854:
	movq	%rax, %rdx
	cmpq	%rax, %r9
	jne	.L3992
	jmp	.L3852
	.p2align 4,,10
	.p2align 3
.L3964:
	call	update_cache_f
	movq	grid(%rip), %r11
	jmp	.L3833
	.p2align 4,,10
	.p2align 3
.L3979:
	movsd	%xmm2, 24(%rsp)
	movsd	%xmm1, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	24(%rsp), %xmm2
	movsd	8(%rsp), %xmm1
	jmp	.L3901
	.p2align 4,,10
	.p2align 3
.L3976:
	movsd	%xmm2, 40(%rsp)
	movsd	%xmm1, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rbp
	movsd	40(%rsp), %xmm2
	movsd	24(%rsp), %xmm1
	jmp	.L3888
	.p2align 4,,10
	.p2align 3
.L3973:
	movsd	%xmm2, 104(%rsp)
	movsd	%xmm1, 96(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	104(%rsp), %xmm2
	movsd	96(%rsp), %xmm1
	jmp	.L3875
	.p2align 4,,10
	.p2align 3
.L3970:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L3859
	.p2align 4,,10
	.p2align 3
.L3967:
	call	update_cache_f
	movq	grid(%rip), %rbp
	jmp	.L3846
	.p2align 4,,10
	.p2align 3
.L3991:
	movsd	%xmm3, 120(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rbp
	movsd	120(%rsp), %xmm3
	jmp	.L3853
	.p2align 4,,10
	.p2align 3
.L3989:
	movsd	%xmm0, 120(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rcx
	movsd	120(%rsp), %xmm0
	jmp	.L3865
	.p2align 4,,10
	.p2align 3
.L3987:
	movsd	%xmm2, 120(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r10
	movsd	120(%rsp), %xmm2
	jmp	.L3840
	.p2align 4,,10
	.p2align 3
.L3985:
	movsd	%xmm2, 32(%rsp)
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm0, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rcx
	movsd	32(%rsp), %xmm2
	movsd	24(%rsp), %xmm1
	movsd	8(%rsp), %xmm0
	jmp	.L3906
	.p2align 4,,10
	.p2align 3
.L3983:
	movsd	%xmm2, 120(%rsp)
	movsd	%xmm1, 104(%rsp)
	movsd	%xmm4, 96(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r8
	movsd	120(%rsp), %xmm2
	movsd	104(%rsp), %xmm1
	movsd	96(%rsp), %xmm4
	jmp	.L3882
	.p2align 4,,10
	.p2align 3
.L3981:
	movsd	%xmm2, 48(%rsp)
	movsd	%xmm1, 40(%rsp)
	movsd	%xmm5, 24(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rbp
	movsd	48(%rsp), %xmm2
	movsd	40(%rsp), %xmm1
	movsd	24(%rsp), %xmm5
	jmp	.L3895
	.p2align 4,,10
	.p2align 3
.L3866:
	pxor	%xmm2, %xmm2
	movapd	%xmm2, %xmm1
	jmp	.L3861
	.cfi_endproc
.LFE287:
	.size	residual_viscosity, .-residual_viscosity
	.p2align 4
	.type	acceleration_2, @function
acceleration_2:
.LFB421:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	subq	$16, %rsp
	.cfi_def_cfa_offset 32
	movq	baseblock(%rip), %rcx
	movq	a(%rip), %rdx
	movslq	a(%rip), %rbx
	testq	%rcx, %rcx
	je	.L3997
	movslq	(%rcx), %rax
	testl	%eax, %eax
	js	.L3997
	movq	_attribute(%rip), %rdi
	.p2align 4,,10
	.p2align 3
.L3998:
	leaq	(%rax,%rax,4), %rsi
	addq	$4, %rcx
	leaq	(%rax,%rsi,2), %rax
	xorl	%esi, %esi
	salq	$4, %rax
	addq	%rdi, %rax
	movw	%si, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rcx), %rax
	testl	%eax, %eax
	jns	.L3998
.L3997:
	movq	$0, 4(%rsp)
	xorl	%esi, %esi
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	subq	$8, %rsp
	.cfi_def_cfa_offset 40
	xorl	%r8d, %r8d
	xorl	%edi, %edi
	orl	$1, _loop.21+16(%rip)
	movl	$0, 20(%rsp)
	pushq	$108
	.cfi_def_cfa_offset 48
	pushq	$.LC133
	.cfi_def_cfa_offset 56
	pushq	$1
	.cfi_def_cfa_offset 64
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 32
	movl	$_loop.21, %edi
	call	end_stencil
	movq	grid(%rip), %rsi
	movl	$0, _loop.21+12(%rip)
	cmpb	$0, 128(%rsi)
	jne	.L4010
.L3996:
	movl	56(%rsi), %eax
	testl	%eax, %eax
	jle	.L4008
	movq	48(%rsi), %rdx
	leal	-1(%rax), %ecx
	movsd	.LC144(%rip), %xmm1
	leaq	8(,%rbx,8), %r10
	salq	$4, %rcx
	leaq	16(%rdx), %rax
	addq	%rax, %rcx
	jmp	.L4001
	.p2align 4,,10
	.p2align 3
.L4011:
	addq	$16, %rax
.L4001:
	testb	$1, 12(%rdx)
	je	.L4000
	movslq	8(%rdx), %r8
	movq	24(%rsi), %rdi
	movslq	(%rdx), %r9
	movq	(%rdi,%r8,8), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %r8
	movslq	4(%rdx), %rdi
	movq	(%r8,%r9,8), %rdx
	movq	(%rdx,%rdi,8), %rbx
	addq	%r10, %rbx
	movsd	(%rbx), %xmm0
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rbx)
.L4000:
	movq	%rax, %rdx
	cmpq	%rcx, %rax
	jne	.L4011
.L4008:
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4010:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rsi
	jmp	.L3996
	.cfi_endproc
.LFE421:
	.size	acceleration_2, .-acceleration_2
	.section	.rodata.str1.8
	.align 8
.LC145:
	.string	"/root/mnt/basilisk/src/iforce.h"
	.text
	.p2align 4
	.type	acceleration_0, @function
acceleration_0:
.LFB373:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movq	interfaces(%rip), %r13
	testq	%r13, %r13
	je	.L4013
	movl	0(%r13), %r12d
	testl	%r12d, %r12d
	js	.L4013
	xorl	%ebp, %ebp
	jmp	.L4026
	.p2align 4,,10
	.p2align 3
.L4014:
	movl	4(%r13), %r12d
	addq	$4, %r13
	testl	%r12d, %r12d
	js	.L4297
.L4026:
	movslq	%r12d, %r14
	movq	_attribute(%rip), %r15
	leaq	(%r14,%r14,4), %rax
	leaq	(%r14,%rax,2), %rax
	salq	$4, %rax
	movl	152(%r15,%rax), %r10d
	testl	%r10d, %r10d
	je	.L4014
	testq	%rbp, %rbp
	je	.L4015
	movl	0(%rbp), %eax
	testl	%eax, %eax
	js	.L4015
	cmpl	%r12d, %eax
	je	.L4016
	movq	%rbp, %rax
	jmp	.L4017
	.p2align 4,,10
	.p2align 3
.L4018:
	cmpl	%r12d, %edx
	je	.L4016
.L4017:
	movl	4(%rax), %edx
	addq	$4, %rax
	testl	%edx, %edx
	jns	.L4018
.L4015:
	movq	%rbp, %rdi
	movl	%r12d, %esi
	call	list_append
	movq	%rax, %rbp
.L4016:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	jne	.L4019
.L4022:
	movq	$0, 68(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 76(%rsp)
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	%r12d, %edx
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	pushq	$61
	.cfi_def_cfa_offset 160
	pushq	$.LC145
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$61
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movl	108(%rsp), %esi
	movq	100(%rsp), %rdi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.19, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movq	.LC10(%rip), %rsi
	movl	$0, _loop.19+12(%rip)
	pxor	%xmm1, %xmm1
	cmpb	$0, 128(%rax)
	movq	%rsi, %xmm2
	jne	.L4298
.L4021:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L4014
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %r8d
	leaq	8(,%r14,8), %r10
	salq	$4, %r8
	leaq	16(%rax), %rdx
	addq	%rdx, %r8
	jmp	.L4025
	.p2align 4,,10
	.p2align 3
.L4299:
	movapd	%xmm2, %xmm5
	minsd	%xmm0, %xmm5
	movapd	%xmm5, %xmm0
.L4024:
	movsd	%xmm0, (%rax)
	movq	%rdx, %rax
	cmpq	%rdx, %r8
	je	.L4014
	addq	$16, %rdx
.L4025:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rdi
	movq	(%r9,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	movslq	4(%rax), %rcx
	movq	(%rsi,%rdi,8), %rax
	movq	(%rax,%rcx,8), %rdi
	addq	%r10, %rdi
	movsd	(%rdi), %xmm0
	movq	%rdi, %rax
	comisd	%xmm0, %xmm1
	jbe	.L4299
	movapd	%xmm1, %xmm0
	jmp	.L4024
	.p2align 4,,10
	.p2align 3
.L4297:
	testq	%rbp, %rbp
	je	.L4013
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4027
	movslq	p(%rip), %rdx
	movq	_attribute(%rip), %rdi
	leaq	(%rdx,%rdx,4), %rcx
	leaq	(%rdx,%rcx,2), %rsi
	movq	%rbp, %rdx
	salq	$4, %rsi
	addq	%rdi, %rsi
	.p2align 4,,10
	.p2align 3
.L4028:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	movq	96(%rsi), %rcx
	salq	$4, %rax
	addq	%rdi, %rax
	movq	%rcx, 96(%rax)
	movl	$1, 88(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4028
.L4027:
	movl	a(%rip), %eax
	movq	baseblock(%rip), %rdx
	movl	_loop.18+16(%rip), %edi
	movl	%eax, (%rsp)
	movl	a+4(%rip), %eax
	movl	%eax, 8(%rsp)
	testq	%rdx, %rdx
	je	.L4291
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4291
.L4150:
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4031:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r8d, %r8d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r8w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4031
	orl	$1, %edi
	movl	$0, 76(%rsp)
	movq	$0, 68(%rsp)
	movl	%edi, _loop.18+16(%rip)
	testq	%rbp, %rbp
	je	.L4030
.L4029:
	movl	0(%rbp), %r13d
	testl	%r13d, %r13d
	js	.L4034
	movl	(%rsp), %r15d
	movq	%rbp, %r12
	.p2align 4,,10
	.p2align 3
.L4035:
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r13d, %edx
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r13d, %edx
	movl	$-1, %ecx
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	movslq	%r13d, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	leaq	(%rax,%rax,4), %rdx
	xorl	%r8d, %r8d
	movl	$-1, %ecx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	152(%rax), %r14d
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$104
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	%r14d, %edx
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %ecx
	movl	%r14d, %edx
	pushq	$104
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$103
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$103
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %ecx
	movl	%r14d, %edx
	pushq	$102
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$102
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %ecx
	movl	%r14d, %edx
	pushq	$101
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$101
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movabsq	$-4294967296, %rax
	pushq	$107
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	andq	%rax, %rbx
	pushq	$.LC145
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	orq	%r15, %rbx
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	addq	$4, %r12
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r13d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r13d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	movl	$-1, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	movl	(%r12), %r13d
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	testl	%r13d, %r13d
	jns	.L4035
	movl	0(%rbp), %r13d
	orl	$2, _loop.18+16(%rip)
	testl	%r13d, %r13d
	js	.L4033
	movq	8(%rsp), %r15
	movq	%rbp, %r12
	salq	$32, %r15
	.p2align 4,,10
	.p2align 3
.L4036:
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r13d, %edx
	movl	%ebx, %ebx
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r13d, %edx
	movl	$-1, %r8d
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$89
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	movslq	%r13d, %rax
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	leaq	(%rax,%rax,4), %rdx
	xorl	%ecx, %ecx
	movl	$-1, %r8d
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	152(%rax), %r14d
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$104
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	%r14d, %edx
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %r8d
	movl	%r14d, %edx
	pushq	$104
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$103
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	orq	%r15, %rbx
	pushq	$103
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %r8d
	movl	%r14d, %edx
	pushq	$102
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$102
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %r8d
	movl	%r14d, %edx
	pushq	$101
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$101
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movq	%r15, %rax
	xorl	%r9d, %r9d
	pushq	$107
	.cfi_def_cfa_offset 160
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC145
	.cfi_def_cfa_offset 168
	movq	%rax, %rdx
	pushq	$1
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	addq	$4, %r12
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r13d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r13d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$-1, %r8d
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 168
	pushq	$.LC145
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	movl	(%r12), %r13d
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	testl	%r13d, %r13d
	jns	.L4036
.L4033:
	movl	$_loop.18, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.18+12(%rip)
	cmpl	$65535, %eax
	jle	.L4300
	movq	_constant(%rip), %rcx
	movq	grid(%rip), %r11
	movslq	alpha(%rip), %rdx
	movsd	-524288(%rcx,%rax,8), %xmm3
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm4
	movzbl	128(%r11), %eax
	cmpl	$65535, %edx
	jg	.L4067
	testb	%al, %al
	jne	.L4301
.L4068:
	movl	56(%r11), %edx
	testl	%edx, %edx
	jle	.L4046
	movslq	(%rsp), %r12
	movslq	8(%rsp), %r13
	subl	$1, %edx
	pxor	%xmm2, %xmm2
	salq	$4, %rdx
	movq	_attribute(%rip), %r14
	movsd	.LC10(%rip), %xmm1
	leaq	8(,%r12,8), %rax
	movsd	.LC2(%rip), %xmm6
	movsd	.LC5(%rip), %xmm7
	movq	%rax, 24(%rsp)
	movslq	alpha(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 32(%rsp)
	leaq	8(,%r13,8), %rax
	movq	%rax, 8(%rsp)
	movslq	alpha+4(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	movq	48(%r11), %rax
	leaq	16(%rax), %r8
	leaq	(%rdx,%r8), %r15
	jmp	.L4071
	.p2align 4,,10
	.p2align 3
.L4302:
	testq	%rbp, %rbp
	jne	.L4070
.L4072:
	movq	%r8, %rax
	cmpq	%r8, %r15
	je	.L4046
	addq	$16, %r8
.L4071:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rsi
	pxor	%xmm0, %xmm0
	movapd	%xmm1, %xmm9
	movslq	4(%rax), %rdx
	movl	12(%rax), %edi
	movl	$1, %eax
	sall	%cl, %eax
	movsd	L0(%rip), %xmm5
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm0, %xmm9
	mulsd	%xmm9, %xmm5
	testb	$1, %dil
	jne	.L4302
	andl	$2, %edi
	je	.L4072
	testq	%rbp, %rbp
	je	.L4072
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4072
	movq	24(%r11), %rdi
	leaq	0(,%rdx,8), %r13
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rbx
	movq	(%rbx,%rdx,8), %rcx
.L4149:
	movq	-8(%rbx,%r13), %rdi
	movq	8(%rsp), %rbx
	movq	%rbp, %rdx
	leaq	(%rcx,%rbx), %r9
	movq	16(%rsp), %rbx
	leaq	(%rcx,%rbx), %r10
	jmp	.L4091
	.p2align 4,,10
	.p2align 3
.L4280:
	movsd	(%rdi,%rax,8), %xmm10
	movapd	%xmm10, %xmm11
	cmpltsd	%xmm6, %xmm11
	andpd	%xmm11, %xmm10
	andnpd	%xmm2, %xmm11
	orpd	%xmm11, %xmm10
.L4088:
	movsd	(%r10), %xmm0
	subsd	%xmm9, %xmm8
	divsd	%xmm4, %xmm0
	mulsd	%xmm10, %xmm0
	mulsd	%xmm8, %xmm0
	divsd	%xmm5, %xmm0
	addsd	(%r9), %xmm0
	movsd	%xmm0, (%r9)
.L4083:
	movslq	4(%rdx), %rax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L4072
.L4091:
	leaq	1(%rax), %rsi
	movsd	(%rcx,%rsi,8), %xmm8
	movsd	(%rdi,%rsi,8), %xmm9
	ucomisd	%xmm9, %xmm8
	jp	.L4176
	je	.L4083
.L4176:
	comisd	%xmm2, %xmm4
	jbe	.L4083
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	movslq	152(%r14,%rax), %rax
	addq	$1, %rax
	movsd	(%rcx,%rax,8), %xmm10
	comisd	%xmm10, %xmm6
	jbe	.L4280
	movsd	(%rdi,%rax,8), %xmm0
	comisd	%xmm0, %xmm6
	jbe	.L4088
	addsd	%xmm0, %xmm10
	mulsd	%xmm7, %xmm10
	jmp	.L4088
	.p2align 4,,10
	.p2align 3
.L4013:
	movl	a(%rip), %eax
	movq	baseblock(%rip), %rdx
	movl	_loop.18+16(%rip), %edi
	movl	%eax, (%rsp)
	movl	a+4(%rip), %eax
	movl	%eax, 8(%rsp)
	testq	%rdx, %rdx
	je	.L4290
	movslq	(%rdx), %rax
	xorl	%ebp, %ebp
	testl	%eax, %eax
	jns	.L4150
.L4290:
	orl	$1, %edi
.L4030:
	orl	$2, %edi
	xorl	%ebp, %ebp
	movl	%edi, _loop.18+16(%rip)
	jmp	.L4033
	.p2align 4,,10
	.p2align 3
.L4019:
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4022
	.p2align 4,,10
	.p2align 3
.L4023:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r9d, %r9d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%r15, %rax
	movw	%r9w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4023
	jmp	.L4022
	.p2align 4,,10
	.p2align 3
.L4067:
	movsd	-524288(%rcx,%rdx,8), %xmm7
	movslq	alpha+4(%rip), %rdx
	movsd	-524288(%rcx,%rdx,8), %xmm8
	testb	%al, %al
	jne	.L4303
.L4116:
	movl	56(%r11), %edx
	testl	%edx, %edx
	jle	.L4046
	movslq	(%rsp), %r12
	movslq	8(%rsp), %r13
	leal	-1(%rdx), %ebx
	pxor	%xmm2, %xmm2
	salq	$4, %rbx
	movq	_attribute(%rip), %r14
	movsd	.LC10(%rip), %xmm1
	leaq	8(,%r12,8), %rax
	movsd	.LC2(%rip), %xmm6
	movsd	.LC5(%rip), %xmm9
	movq	%rax, 16(%rsp)
	leaq	8(,%r13,8), %rax
	movq	%rax, (%rsp)
	movq	48(%r11), %rax
	leaq	16(%rax), %r8
	addq	%r8, %rbx
	jmp	.L4119
	.p2align 4,,10
	.p2align 3
.L4304:
	testq	%rbp, %rbp
	jne	.L4118
.L4120:
	movq	%r8, %rax
	cmpq	%r8, %rbx
	je	.L4046
	addq	$16, %r8
.L4119:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rsi
	pxor	%xmm0, %xmm0
	movapd	%xmm1, %xmm11
	movslq	4(%rax), %rdx
	movl	12(%rax), %r9d
	movl	$1, %eax
	sall	%cl, %eax
	movsd	L0(%rip), %xmm5
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm0, %xmm11
	mulsd	%xmm11, %xmm5
	testb	$1, %r9b
	jne	.L4304
	andl	$2, %r9d
	je	.L4120
	testq	%rbp, %rbp
	je	.L4120
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4120
	movq	24(%r11), %rdi
	leaq	0(,%rdx,8), %r15
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %r13
	movq	0(%r13,%rdx,8), %rdi
.L4148:
	movq	(%rsp), %rcx
	movq	-8(%r13,%r15), %rsi
	movq	%rbp, %rdx
	leaq	(%rdi,%rcx), %r9
	jmp	.L4139
	.p2align 4,,10
	.p2align 3
.L4286:
	movsd	(%rsi,%rax,8), %xmm12
	movapd	%xmm12, %xmm13
	cmpltsd	%xmm6, %xmm13
	andpd	%xmm13, %xmm12
	andnpd	%xmm2, %xmm13
	orpd	%xmm13, %xmm12
.L4136:
	movapd	%xmm8, %xmm0
	subsd	%xmm11, %xmm10
	divsd	%xmm4, %xmm0
	mulsd	%xmm12, %xmm0
	mulsd	%xmm10, %xmm0
	divsd	%xmm5, %xmm0
	addsd	(%r9), %xmm0
	movsd	%xmm0, (%r9)
.L4131:
	movslq	4(%rdx), %rax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L4120
.L4139:
	leaq	1(%rax), %rcx
	movsd	(%rdi,%rcx,8), %xmm10
	movsd	(%rsi,%rcx,8), %xmm11
	ucomisd	%xmm11, %xmm10
	jp	.L4192
	je	.L4131
.L4192:
	comisd	%xmm2, %xmm4
	jbe	.L4131
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movslq	152(%r14,%rax), %rax
	addq	$1, %rax
	movsd	(%rdi,%rax,8), %xmm12
	comisd	%xmm12, %xmm6
	jbe	.L4286
	movsd	(%rsi,%rax,8), %xmm0
	comisd	%xmm0, %xmm6
	jbe	.L4136
	addsd	%xmm0, %xmm12
	mulsd	%xmm9, %xmm12
	jmp	.L4136
	.p2align 4,,10
	.p2align 3
.L4046:
	testq	%rbp, %rbp
	je	.L4042
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4042
	movq	_attribute(%rip), %rcx
	movslq	%eax, %rdx
	movq	%rbp, %rsi
	.p2align 4,,10
	.p2align 3
.L4140:
	leaq	(%rdx,%rdx,4), %rdi
	addq	$4, %rsi
	leaq	(%rdx,%rdi,2), %rdx
	salq	$4, %rdx
	addq	%rcx, %rdx
	movq	$fraction_refine, 96(%rdx)
	movl	$1, 88(%rdx)
	movslq	(%rsi), %rdx
	testl	%edx, %edx
	jns	.L4140
	movq	%rbp, %r12
	.p2align 4,,10
	.p2align 3
.L4141:
	leaq	(%rax,%rax,4), %rdx
	leaq	68(%rsp), %rdi
	addq	$4, %r12
	leaq	(%rax,%rdx,2), %rbx
	salq	$4, %rbx
	movl	152(%rcx,%rbx), %eax
	movl	$-1, 72(%rsp)
	movl	%eax, 68(%rsp)
	call	delete
	movq	_attribute(%rip), %rcx
	movl	$0, 152(%rcx,%rbx)
	movslq	(%r12), %rax
	testl	%eax, %eax
	jns	.L4141
.L4042:
	movq	%rbp, %rdi
	call	free
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4118:
	.cfi_restore_state
	movslq	0(%rbp), %rax
	andl	$2, %r9d
	testl	%eax, %eax
	js	.L4120
	movq	24(%r11), %rdi
	leaq	0(,%rdx,8), %r15
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %r13
	movq	-8(%rcx,%rsi,8), %rcx
	movq	16(%rsp), %rsi
	movq	0(%r13,%rdx,8), %rdi
	movq	(%rcx,%rdx,8), %r10
	movq	%rbp, %rcx
	movslq	%eax, %rdx
	leaq	(%rdi,%rsi), %r12
	jmp	.L4129
	.p2align 4,,10
	.p2align 3
.L4284:
	movsd	(%r10,%rdx,8), %xmm13
	movapd	%xmm13, %xmm14
	cmpltsd	%xmm6, %xmm14
	andpd	%xmm14, %xmm13
	andnpd	%xmm2, %xmm14
	orpd	%xmm14, %xmm13
.L4126:
	movapd	%xmm7, %xmm0
	subsd	%xmm12, %xmm10
	divsd	%xmm3, %xmm0
	mulsd	%xmm13, %xmm0
	mulsd	%xmm10, %xmm0
	divsd	%xmm5, %xmm0
	addsd	(%r12), %xmm0
	movsd	%xmm0, (%r12)
.L4121:
	movslq	4(%rcx), %rdx
	addq	$4, %rcx
	testl	%edx, %edx
	js	.L4305
.L4129:
	leaq	1(%rdx), %rsi
	movsd	(%rdi,%rsi,8), %xmm10
	movsd	(%r10,%rsi,8), %xmm12
	ucomisd	%xmm12, %xmm10
	jp	.L4188
	je	.L4121
.L4188:
	comisd	%xmm2, %xmm3
	jbe	.L4121
	leaq	(%rdx,%rdx,4), %rsi
	leaq	(%rdx,%rsi,2), %rdx
	salq	$4, %rdx
	movslq	152(%r14,%rdx), %rdx
	addq	$1, %rdx
	movsd	(%rdi,%rdx,8), %xmm13
	comisd	%xmm13, %xmm6
	jbe	.L4284
	movsd	(%r10,%rdx,8), %xmm0
	comisd	%xmm0, %xmm6
	jbe	.L4126
	addsd	%xmm0, %xmm13
	mulsd	.LC5(%rip), %xmm13
	jmp	.L4126
	.p2align 4,,10
	.p2align 3
.L4305:
	testl	%r9d, %r9d
	je	.L4120
	movsd	L0(%rip), %xmm5
	mulsd	%xmm11, %xmm5
	jmp	.L4148
	.p2align 4,,10
	.p2align 3
.L4300:
	movq	grid(%rip), %r15
	movslq	alpha(%rip), %rax
	movzbl	128(%r15), %edx
	cmpl	$65535, %eax
	jg	.L4038
	testb	%dl, %dl
	jne	.L4306
.L4039:
	movl	56(%r15), %edx
	testl	%edx, %edx
	jle	.L4046
	movslq	(%rsp), %r12
	movslq	8(%rsp), %r13
	subl	$1, %edx
	pxor	%xmm2, %xmm2
	movslq	fm(%rip), %rax
	salq	$4, %rdx
	movq	_attribute(%rip), %rbx
	movsd	.LC10(%rip), %xmm1
	movsd	.LC2(%rip), %xmm4
	leaq	8(,%rax,8), %rax
	movsd	.LC5(%rip), %xmm5
	movq	%rax, 40(%rsp)
	leaq	8(,%r12,8), %rax
	movq	%rax, 48(%rsp)
	movslq	alpha(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 56(%rsp)
	movslq	fm+4(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	leaq	8(,%r13,8), %rax
	movq	%rax, 24(%rsp)
	movslq	alpha+4(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 32(%rsp)
	movq	48(%r15), %rax
	leaq	16(%rax), %r8
	leaq	(%rdx,%r8), %r13
	jmp	.L4045
	.p2align 4,,10
	.p2align 3
.L4307:
	testq	%rbp, %rbp
	jne	.L4044
.L4047:
	movq	%r8, %rax
	cmpq	%r13, %r8
	je	.L4046
	addq	$16, %r8
.L4045:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rsi
	pxor	%xmm0, %xmm0
	movapd	%xmm1, %xmm9
	movslq	4(%rax), %rdx
	movl	12(%rax), %edi
	movl	$1, %eax
	sall	%cl, %eax
	movsd	L0(%rip), %xmm3
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm0, %xmm9
	mulsd	%xmm9, %xmm3
	testb	$1, %dil
	jne	.L4307
	andl	$2, %edi
	je	.L4047
	testq	%rbp, %rbp
	je	.L4047
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4047
	movq	24(%r15), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %r12
	leaq	0(,%rdx,8), %rsi
	movq	%rsi, (%rsp)
	movq	(%r12,%rdx,8), %rcx
.L4146:
	movq	(%rsp), %rsi
	movq	%rbp, %rdx
	movq	-8(%r12,%rsi), %rdi
	movq	16(%rsp), %rsi
	leaq	(%rcx,%rsi), %r10
	movq	24(%rsp), %rsi
	leaq	(%rcx,%rsi), %r9
	movq	32(%rsp), %rsi
	leaq	(%rcx,%rsi), %r11
	jmp	.L4066
	.p2align 4,,10
	.p2align 3
.L4277:
	movsd	(%rdi,%rax,8), %xmm8
	movapd	%xmm8, %xmm10
	cmpltsd	%xmm4, %xmm10
	andpd	%xmm10, %xmm8
	andnpd	%xmm2, %xmm10
	orpd	%xmm10, %xmm8
.L4063:
	movsd	(%r11), %xmm0
	subsd	%xmm7, %xmm6
	divsd	%xmm9, %xmm0
	mulsd	%xmm8, %xmm0
	mulsd	%xmm6, %xmm0
	divsd	%xmm3, %xmm0
	addsd	(%r9), %xmm0
	movsd	%xmm0, (%r9)
.L4058:
	movslq	4(%rdx), %rax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L4047
.L4066:
	leaq	1(%rax), %rsi
	movsd	(%rcx,%rsi,8), %xmm6
	movsd	(%rdi,%rsi,8), %xmm7
	ucomisd	%xmm7, %xmm6
	jp	.L4168
	je	.L4058
.L4168:
	movsd	(%r10), %xmm9
	comisd	%xmm2, %xmm9
	jbe	.L4058
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	movslq	152(%rbx,%rax), %rax
	addq	$1, %rax
	movsd	(%rcx,%rax,8), %xmm8
	comisd	%xmm8, %xmm4
	jbe	.L4277
	movsd	(%rdi,%rax,8), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L4063
	addsd	%xmm0, %xmm8
	mulsd	%xmm5, %xmm8
	jmp	.L4063
	.p2align 4,,10
	.p2align 3
.L4044:
	movslq	0(%rbp), %rax
	andl	$2, %edi
	movl	%edi, 8(%rsp)
	testl	%eax, %eax
	js	.L4047
	movq	24(%r15), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	leaq	0(,%rdx,8), %rcx
	movq	%rcx, (%rsp)
	movq	(%rdi,%rsi,8), %r12
	movq	-8(%rdi,%rsi,8), %rsi
	movq	(%r12,%rdx,8), %rcx
	movq	(%rsi,%rdx,8), %r9
	movslq	%eax, %rdx
	movq	40(%rsp), %rsi
	leaq	(%rcx,%rsi), %r11
	movq	48(%rsp), %rsi
	leaq	(%rcx,%rsi), %r10
	movq	56(%rsp), %rsi
	leaq	(%rcx,%rsi), %r14
	movq	%rbp, %rsi
	jmp	.L4056
	.p2align 4,,10
	.p2align 3
.L4275:
	movsd	(%r9,%rdx,8), %xmm8
	movapd	%xmm8, %xmm11
	cmpltsd	%xmm4, %xmm11
	andpd	%xmm11, %xmm8
	andnpd	%xmm2, %xmm11
	orpd	%xmm11, %xmm8
.L4053:
	movsd	(%r14), %xmm0
	subsd	%xmm7, %xmm6
	divsd	%xmm10, %xmm0
	mulsd	%xmm8, %xmm0
	mulsd	%xmm6, %xmm0
	divsd	%xmm3, %xmm0
	addsd	(%r10), %xmm0
	movsd	%xmm0, (%r10)
.L4048:
	movslq	4(%rsi), %rdx
	addq	$4, %rsi
	testl	%edx, %edx
	js	.L4308
.L4056:
	leaq	1(%rdx), %rdi
	movsd	(%rcx,%rdi,8), %xmm6
	movsd	(%r9,%rdi,8), %xmm7
	ucomisd	%xmm7, %xmm6
	jp	.L4164
	je	.L4048
.L4164:
	movsd	(%r11), %xmm10
	comisd	%xmm2, %xmm10
	jbe	.L4048
	leaq	(%rdx,%rdx,4), %rdi
	leaq	(%rdx,%rdi,2), %rdx
	salq	$4, %rdx
	movslq	152(%rbx,%rdx), %rdx
	addq	$1, %rdx
	movsd	(%rcx,%rdx,8), %xmm8
	comisd	%xmm8, %xmm4
	jbe	.L4275
	movsd	(%r9,%rdx,8), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L4053
	addsd	%xmm0, %xmm8
	mulsd	.LC5(%rip), %xmm8
	jmp	.L4053
	.p2align 4,,10
	.p2align 3
.L4308:
	movl	8(%rsp), %edi
	testl	%edi, %edi
	je	.L4047
	movsd	L0(%rip), %xmm3
	mulsd	%xmm9, %xmm3
	jmp	.L4146
	.p2align 4,,10
	.p2align 3
.L4298:
	call	update_cache_f
	movq	.LC10(%rip), %rsi
	movq	grid(%rip), %rax
	pxor	%xmm1, %xmm1
	movq	%rsi, %xmm2
	jmp	.L4021
	.p2align 4,,10
	.p2align 3
.L4038:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm5
	movslq	alpha+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm6
	testb	%dl, %dl
	jne	.L4309
.L4092:
	movl	56(%r15), %edx
	testl	%edx, %edx
	jle	.L4046
	movslq	(%rsp), %r12
	movslq	8(%rsp), %r13
	subl	$1, %edx
	pxor	%xmm2, %xmm2
	movslq	fm(%rip), %rax
	salq	$4, %rdx
	movq	_attribute(%rip), %rbx
	movsd	.LC10(%rip), %xmm1
	movsd	.LC2(%rip), %xmm4
	leaq	8(,%rax,8), %rax
	movsd	.LC5(%rip), %xmm7
	movq	%rax, 24(%rsp)
	leaq	8(,%r12,8), %rax
	movq	%rax, 32(%rsp)
	movslq	fm+4(%rip), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	leaq	8(,%r13,8), %rax
	movq	%rax, 8(%rsp)
	movq	48(%r15), %rax
	leaq	16(%rax), %r8
	leaq	(%rdx,%r8), %r14
	jmp	.L4095
	.p2align 4,,10
	.p2align 3
.L4310:
	testq	%rbp, %rbp
	jne	.L4094
.L4096:
	movq	%r8, %rax
	cmpq	%r8, %r14
	je	.L4046
	addq	$16, %r8
.L4095:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rsi
	pxor	%xmm0, %xmm0
	movapd	%xmm1, %xmm10
	movslq	4(%rax), %rdx
	movl	12(%rax), %r9d
	movl	$1, %eax
	sall	%cl, %eax
	movsd	L0(%rip), %xmm3
	cvtsi2sdl	%eax, %xmm0
	divsd	%xmm0, %xmm10
	mulsd	%xmm10, %xmm3
	testb	$1, %r9b
	jne	.L4310
	andl	$2, %r9d
	je	.L4096
	testq	%rbp, %rbp
	je	.L4096
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L4096
	movq	24(%r15), %rdi
	leaq	0(,%rdx,8), %r9
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %r13
	movq	0(%r13,%rdx,8), %rcx
.L4147:
	movq	16(%rsp), %rsi
	movq	-8(%r13,%r9), %rdi
	movq	%rbp, %rdx
	leaq	(%rcx,%rsi), %r10
	movq	8(%rsp), %rsi
	leaq	(%rcx,%rsi), %r9
	jmp	.L4115
	.p2align 4,,10
	.p2align 3
.L4283:
	movsd	(%rdi,%rax,8), %xmm10
	movapd	%xmm10, %xmm12
	cmpltsd	%xmm4, %xmm12
	andpd	%xmm12, %xmm10
	andnpd	%xmm2, %xmm12
	orpd	%xmm12, %xmm10
.L4112:
	movapd	%xmm6, %xmm0
	subsd	%xmm9, %xmm8
	divsd	%xmm11, %xmm0
	mulsd	%xmm10, %xmm0
	mulsd	%xmm8, %xmm0
	divsd	%xmm3, %xmm0
	addsd	(%r9), %xmm0
	movsd	%xmm0, (%r9)
.L4107:
	movslq	4(%rdx), %rax
	addq	$4, %rdx
	testl	%eax, %eax
	js	.L4096
.L4115:
	leaq	1(%rax), %rsi
	movsd	(%rcx,%rsi,8), %xmm8
	movsd	(%rdi,%rsi,8), %xmm9
	ucomisd	%xmm9, %xmm8
	jp	.L4184
	je	.L4107
.L4184:
	movsd	(%r10), %xmm11
	comisd	%xmm2, %xmm11
	jbe	.L4107
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	movslq	152(%rbx,%rax), %rax
	addq	$1, %rax
	movsd	(%rcx,%rax,8), %xmm10
	comisd	%xmm10, %xmm4
	jbe	.L4283
	movsd	(%rdi,%rax,8), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L4112
	addsd	%xmm0, %xmm10
	mulsd	%xmm7, %xmm10
	jmp	.L4112
	.p2align 4,,10
	.p2align 3
.L4306:
	call	update_cache_f
	movq	grid(%rip), %r15
	jmp	.L4039
	.p2align 4,,10
	.p2align 3
.L4070:
	movslq	0(%rbp), %rax
	andl	$2, %edi
	movl	%edi, (%rsp)
	testl	%eax, %eax
	js	.L4072
	movq	24(%r11), %rdi
	leaq	0(,%rdx,8), %r13
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	movq	(%rdi,%rsi,8), %rbx
	movq	-8(%rdi,%rsi,8), %rsi
	movq	(%rbx,%rdx,8), %rcx
	movq	(%rsi,%rdx,8), %r9
	movslq	%eax, %rdx
	movq	24(%rsp), %rsi
	leaq	(%rcx,%rsi), %r10
	movq	32(%rsp), %rsi
	leaq	(%rcx,%rsi), %r12
	movq	%rbp, %rsi
	jmp	.L4081
	.p2align 4,,10
	.p2align 3
.L4278:
	movsd	(%r9,%rdx,8), %xmm11
	movapd	%xmm11, %xmm12
	cmpltsd	%xmm6, %xmm12
	andpd	%xmm12, %xmm11
	andnpd	%xmm2, %xmm12
	orpd	%xmm12, %xmm11
.L4078:
	movsd	(%r12), %xmm0
	subsd	%xmm10, %xmm8
	divsd	%xmm3, %xmm0
	mulsd	%xmm11, %xmm0
	mulsd	%xmm8, %xmm0
	divsd	%xmm5, %xmm0
	addsd	(%r10), %xmm0
	movsd	%xmm0, (%r10)
.L4073:
	movslq	4(%rsi), %rdx
	addq	$4, %rsi
	testl	%edx, %edx
	js	.L4311
.L4081:
	leaq	1(%rdx), %rdi
	movsd	(%rcx,%rdi,8), %xmm8
	movsd	(%r9,%rdi,8), %xmm10
	ucomisd	%xmm10, %xmm8
	jp	.L4172
	je	.L4073
.L4172:
	comisd	%xmm2, %xmm3
	jbe	.L4073
	leaq	(%rdx,%rdx,4), %rdi
	leaq	(%rdx,%rdi,2), %rdx
	salq	$4, %rdx
	movslq	152(%r14,%rdx), %rdx
	addq	$1, %rdx
	movsd	(%rcx,%rdx,8), %xmm11
	comisd	%xmm11, %xmm6
	jbe	.L4278
	movsd	(%r9,%rdx,8), %xmm0
	comisd	%xmm0, %xmm6
	jbe	.L4078
	addsd	%xmm0, %xmm11
	mulsd	.LC5(%rip), %xmm11
	jmp	.L4078
	.p2align 4,,10
	.p2align 3
.L4311:
	movl	(%rsp), %edx
	testl	%edx, %edx
	je	.L4072
	movsd	L0(%rip), %xmm5
	mulsd	%xmm9, %xmm5
	jmp	.L4149
	.p2align 4,,10
	.p2align 3
.L4094:
	movslq	0(%rbp), %rax
	andl	$2, %r9d
	movl	%r9d, (%rsp)
	testl	%eax, %eax
	js	.L4096
	movq	24(%r15), %rdi
	leaq	0(,%rdx,8), %r9
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	movq	(%rdi,%rsi,8), %r13
	movq	-8(%rdi,%rsi,8), %rsi
	movq	0(%r13,%rdx,8), %rcx
	movq	(%rsi,%rdx,8), %r10
	movslq	%eax, %rdx
	movq	24(%rsp), %rsi
	leaq	(%rcx,%rsi), %r12
	movq	32(%rsp), %rsi
	leaq	(%rcx,%rsi), %r11
	movq	%rbp, %rsi
	jmp	.L4105
	.p2align 4,,10
	.p2align 3
.L4281:
	movsd	(%r10,%rdx,8), %xmm11
	movapd	%xmm11, %xmm13
	cmpltsd	%xmm4, %xmm13
	andpd	%xmm13, %xmm11
	andnpd	%xmm2, %xmm13
	orpd	%xmm13, %xmm11
.L4102:
	movapd	%xmm5, %xmm0
	subsd	%xmm9, %xmm8
	divsd	%xmm12, %xmm0
	mulsd	%xmm11, %xmm0
	mulsd	%xmm8, %xmm0
	divsd	%xmm3, %xmm0
	addsd	(%r11), %xmm0
	movsd	%xmm0, (%r11)
.L4097:
	movslq	4(%rsi), %rdx
	addq	$4, %rsi
	testl	%edx, %edx
	js	.L4312
.L4105:
	leaq	1(%rdx), %rdi
	movsd	(%rcx,%rdi,8), %xmm8
	movsd	(%r10,%rdi,8), %xmm9
	ucomisd	%xmm9, %xmm8
	jp	.L4180
	je	.L4097
.L4180:
	movsd	(%r12), %xmm12
	comisd	%xmm2, %xmm12
	jbe	.L4097
	leaq	(%rdx,%rdx,4), %rdi
	leaq	(%rdx,%rdi,2), %rdx
	salq	$4, %rdx
	movslq	152(%rbx,%rdx), %rdx
	addq	$1, %rdx
	movsd	(%rcx,%rdx,8), %xmm11
	comisd	%xmm11, %xmm4
	jbe	.L4281
	movsd	(%r10,%rdx,8), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L4102
	addsd	%xmm0, %xmm11
	mulsd	.LC5(%rip), %xmm11
	jmp	.L4102
	.p2align 4,,10
	.p2align 3
.L4312:
	movl	(%rsp), %esi
	testl	%esi, %esi
	je	.L4096
	movsd	L0(%rip), %xmm3
	mulsd	%xmm10, %xmm3
	jmp	.L4147
	.p2align 4,,10
	.p2align 3
.L4291:
	orl	$1, %edi
	movl	$0, 76(%rsp)
	movq	$0, 68(%rsp)
	movl	%edi, _loop.18+16(%rip)
	jmp	.L4029
	.p2align 4,,10
	.p2align 3
.L4303:
	movsd	%xmm4, 40(%rsp)
	movsd	%xmm3, 32(%rsp)
	movsd	%xmm8, 24(%rsp)
	movsd	%xmm7, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r11
	movsd	40(%rsp), %xmm4
	movsd	32(%rsp), %xmm3
	movsd	24(%rsp), %xmm8
	movsd	16(%rsp), %xmm7
	jmp	.L4116
.L4034:
	orl	$2, _loop.18+16(%rip)
	jmp	.L4033
.L4301:
	movsd	%xmm4, 24(%rsp)
	movsd	%xmm3, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r11
	movsd	24(%rsp), %xmm4
	movsd	16(%rsp), %xmm3
	jmp	.L4068
	.p2align 4,,10
	.p2align 3
.L4309:
	movsd	%xmm6, 24(%rsp)
	movsd	%xmm5, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r15
	movsd	24(%rsp), %xmm6
	movsd	16(%rsp), %xmm5
	jmp	.L4092
	.cfi_endproc
.LFE373:
	.size	acceleration_0, .-acceleration_0
	.section	.rodata.str1.8
	.align 8
.LC146:
	.string	"/root/mnt/basilisk/src/two-phase.h"
	.text
	.p2align 4
	.type	properties_0, @function
properties_0:
.LFB369:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4318
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4318
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4319:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4319
.L4318:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 44(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	f(%rip), %edx
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$-1, %ecx
	pushq	$98
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	orl	$1, _loop.17+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$98
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$99
	.cfi_def_cfa_offset 128
	movl	alphav(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC146
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$99
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	pxor	%xmm1, %xmm1
	ucomisd	mu1(%rip), %xmm1
	jp	.L4315
	jne	.L4315
	ucomisd	mu2(%rip), %xmm1
	jp	.L4315
	jne	.L4315
.L4320:
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	f(%rip), %edx
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$-1, %r8d
	pushq	$98
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	orl	$2, _loop.17+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$98
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$99
	.cfi_def_cfa_offset 128
	movl	alphav+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC146
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$99
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	pxor	%xmm1, %xmm1
	ucomisd	mu1(%rip), %xmm1
	jp	.L4322
	jne	.L4322
	ucomisd	mu2(%rip), %xmm1
	jp	.L4322
	jne	.L4322
.L4324:
	movl	$_loop.17, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	pxor	%xmm1, %xmm1
	movl	$0, _loop.17+12(%rip)
	cmpl	$65535, %eax
	jg	.L4326
	movq	grid(%rip), %rbx
	cmpb	$0, 128(%rbx)
	jne	.L4404
.L4327:
	movl	56(%rbx), %eax
	testl	%eax, %eax
	jle	.L4348
	movslq	f(%rip), %rdx
	movq	48(%rbx), %rcx
	leal	-1(%rax), %r11d
	salq	$4, %r11
	movsd	.LC5(%rip), %xmm3
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rdx,8), %r10
	movslq	fm(%rip), %rdx
	leaq	16(%rcx), %rax
	addq	%rax, %r11
	leaq	8(,%rdx,8), %r15
	movslq	alphav(%rip), %rdx
	leaq	8(,%rdx,8), %r14
	movslq	mu(%rip), %rdx
	leaq	8(,%rdx,8), %rdi
	movslq	fm+4(%rip), %rdx
	movq	%rdi, 24(%rsp)
	leaq	8(,%rdx,8), %r13
	movslq	alphav+4(%rip), %rdx
	leaq	8(,%rdx,8), %rdi
	movslq	mu+4(%rip), %rdx
	movq	%rdi, 8(%rsp)
	leaq	8(,%rdx,8), %rdi
	movq	%rdi, 16(%rsp)
	jmp	.L4347
	.p2align 4,,10
	.p2align 3
.L4405:
	movapd	%xmm4, %xmm6
	minsd	%xmm0, %xmm6
	movapd	%xmm6, %xmm0
.L4333:
	movsd	rho2(%rip), %xmm6
	movsd	rho1(%rip), %xmm2
	subsd	%xmm6, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm6, %xmm2
	divsd	%xmm2, %xmm5
	movsd	%xmm5, (%r9,%r14)
	movsd	mu1(%rip), %xmm2
	movsd	mu2(%rip), %xmm5
	ucomisd	%xmm1, %xmm2
	jp	.L4336
	jne	.L4336
	ucomisd	%xmm1, %xmm5
	jp	.L4336
	je	.L4332
.L4336:
	subsd	%xmm5, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm5, %xmm2
	mulsd	(%r8), %xmm2
	movq	24(%rsp), %r8
	movsd	%xmm2, (%r9,%r8)
.L4332:
	andl	$2, %ecx
	je	.L4340
	movq	24(%rbx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rdx,%r10), %xmm0
	addsd	(%rcx,%r10), %xmm0
	leaq	(%rcx,%r13), %rdx
	movsd	(%rdx), %xmm5
	mulsd	%xmm3, %xmm0
	comisd	%xmm0, %xmm1
	ja	.L4379
	movapd	%xmm4, %xmm6
	minsd	%xmm0, %xmm6
	movapd	%xmm6, %xmm0
.L4341:
	movsd	rho2(%rip), %xmm6
	movsd	rho1(%rip), %xmm2
	movq	8(%rsp), %rdi
	subsd	%xmm6, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm6, %xmm2
	divsd	%xmm2, %xmm5
	movsd	%xmm5, (%rcx,%rdi)
	movsd	mu1(%rip), %xmm2
	movsd	mu2(%rip), %xmm5
	ucomisd	%xmm1, %xmm2
	jp	.L4344
	jne	.L4344
	ucomisd	%xmm1, %xmm5
	jp	.L4344
	je	.L4340
.L4344:
	subsd	%xmm5, %xmm2
	movq	16(%rsp), %rdi
	mulsd	%xmm0, %xmm2
	addsd	%xmm5, %xmm2
	mulsd	(%rdx), %xmm2
	movsd	%xmm2, (%rcx,%rdi)
.L4340:
	movq	%rax, %rcx
	cmpq	%rax, %r11
	je	.L4348
	addq	$16, %rax
.L4347:
	movslq	(%rcx), %rsi
	movslq	4(%rcx), %rdx
	movslq	8(%rcx), %rdi
	movl	12(%rcx), %ecx
	testb	$1, %cl
	je	.L4332
	movq	24(%rbx), %r9
	movslq	%edi, %r8
	movslq	%esi, %r12
	movq	(%r9,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%edx, %r8
	movq	0(%rbp,%r12,8), %r9
	movq	-8(%rbp,%r12,8), %rbp
	movq	(%r9,%r8,8), %r9
	movq	0(%rbp,%r8,8), %r8
	movsd	(%r8,%r10), %xmm0
	addsd	(%r9,%r10), %xmm0
	leaq	(%r9,%r15), %r8
	movsd	(%r8), %xmm5
	mulsd	%xmm3, %xmm0
	comisd	%xmm0, %xmm1
	jbe	.L4405
	movapd	%xmm1, %xmm0
	jmp	.L4333
	.p2align 4,,10
	.p2align 3
.L4322:
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	mu+4(%rip), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$102
	.cfi_def_cfa_offset 128
	xorl	%ecx, %ecx
	pushq	$.LC146
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$102
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	jmp	.L4324
	.p2align 4,,10
	.p2align 3
.L4315:
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	mu(%rip), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$102
	.cfi_def_cfa_offset 128
	xorl	%ecx, %ecx
	pushq	$.LC146
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$102
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	jmp	.L4320
	.p2align 4,,10
	.p2align 3
.L4348:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4330
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4330
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4369:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4369
.L4330:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	rhov(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$107
	.cfi_def_cfa_offset 128
	pushq	$.LC146
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$107
	.cfi_def_cfa_offset 136
	pushq	$.LC146
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	movl	$_loop.16, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	pxor	%xmm1, %xmm1
	movl	$0, _loop.16+12(%rip)
	cmpl	$65535, %eax
	jg	.L4406
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L4407
.L4370:
	movl	40(%rax), %edx
	movslq	f(%rip), %r8
	testl	%edx, %edx
	jle	.L4371
	movslq	cm(%rip), %rcx
	movq	24(%rax), %rbp
	leal	-1(%rdx), %r9d
	leaq	8(,%r8,8), %r11
	movq	32(%rax), %rax
	salq	$4, %r9
	movsd	.LC10(%rip), %xmm5
	leaq	8(,%rcx,8), %rbx
	movslq	rhov(%rip), %rcx
	leaq	16(%rax), %rdx
	leaq	8(,%rcx,8), %r10
	addq	%rdx, %r9
	jmp	.L4373
	.p2align 4,,10
	.p2align 3
.L4408:
	movapd	%xmm5, %xmm6
	minsd	%xmm2, %xmm6
	movapd	%xmm6, %xmm2
.L4372:
	movsd	rho2(%rip), %xmm3
	movsd	rho1(%rip), %xmm0
	subsd	%xmm3, %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm3, %xmm0
	mulsd	%xmm4, %xmm0
	movsd	%xmm0, (%rax,%r10)
	movq	%rdx, %rax
	cmpq	%r9, %rdx
	je	.L4371
	addq	$16, %rdx
.L4373:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rdi
	movq	0(%rbp,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	movslq	4(%rax), %rcx
	movq	(%rsi,%rdi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r11), %xmm2
	movsd	(%rax,%rbx), %xmm4
	comisd	%xmm2, %xmm1
	jbe	.L4408
	movapd	%xmm1, %xmm2
	jmp	.L4372
	.p2align 4,,10
	.p2align 3
.L4371:
	leaq	(%r8,%r8,4), %rax
	leaq	(%r8,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$fraction_refine, 96(%rax)
	movl	$1, 88(%rax)
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4379:
	.cfi_restore_state
	movapd	%xmm1, %xmm0
	jmp	.L4341
	.p2align 4,,10
	.p2align 3
.L4406:
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm4
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L4409
.L4374:
	movl	40(%rax), %edx
	movslq	f(%rip), %r8
	testl	%edx, %edx
	jle	.L4371
	movq	24(%rax), %rbx
	movq	32(%rax), %rax
	leal	-1(%rdx), %r9d
	leaq	8(,%r8,8), %r11
	movslq	rhov(%rip), %rcx
	salq	$4, %r9
	movsd	.LC10(%rip), %xmm5
	leaq	16(%rax), %rdx
	leaq	8(,%rcx,8), %r10
	addq	%rdx, %r9
	jmp	.L4376
	.p2align 4,,10
	.p2align 3
.L4410:
	movapd	%xmm5, %xmm6
	minsd	%xmm2, %xmm6
	movapd	%xmm6, %xmm2
.L4375:
	movsd	rho2(%rip), %xmm3
	movsd	rho1(%rip), %xmm0
	subsd	%xmm3, %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm3, %xmm0
	mulsd	%xmm4, %xmm0
	movsd	%xmm0, (%rax,%r10)
	movq	%rdx, %rax
	cmpq	%rdx, %r9
	je	.L4371
	addq	$16, %rdx
.L4376:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rdi
	movq	(%rbx,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	movslq	4(%rax), %rcx
	movq	(%rsi,%rdi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r11), %xmm2
	comisd	%xmm2, %xmm1
	jbe	.L4410
	movapd	%xmm1, %xmm2
	jmp	.L4375
	.p2align 4,,10
	.p2align 3
.L4326:
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %rbx
	movsd	-524288(%rdx,%rax,8), %xmm4
	movslq	fm+4(%rip), %rax
	cmpb	$0, 128(%rbx)
	movsd	-524288(%rdx,%rax,8), %xmm5
	jne	.L4411
.L4349:
	movl	56(%rbx), %eax
	testl	%eax, %eax
	jle	.L4348
	movslq	f(%rip), %rdx
	movq	48(%rbx), %rcx
	leal	-1(%rax), %r11d
	salq	$4, %r11
	movsd	.LC5(%rip), %xmm3
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rdx,8), %r9
	movslq	alphav(%rip), %rdx
	leaq	16(%rcx), %rax
	addq	%rax, %r11
	leaq	8(,%rdx,8), %r14
	movslq	mu(%rip), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	alphav+4(%rip), %rdx
	leaq	8(,%rdx,8), %r13
	movslq	mu+4(%rip), %rdx
	leaq	8(,%rdx,8), %rdi
	movq	%rdi, 8(%rsp)
	jmp	.L4366
	.p2align 4,,10
	.p2align 3
.L4412:
	movapd	%xmm6, %xmm7
	minsd	%xmm0, %xmm7
	movapd	%xmm7, %xmm0
.L4352:
	movsd	rho2(%rip), %xmm7
	movsd	rho1(%rip), %xmm2
	subsd	%xmm7, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm7, %xmm2
	movapd	%xmm4, %xmm7
	divsd	%xmm2, %xmm7
	movsd	%xmm7, (%r10,%r14)
	movsd	mu1(%rip), %xmm2
	movsd	mu2(%rip), %xmm7
	ucomisd	%xmm1, %xmm2
	jp	.L4355
	jne	.L4355
	ucomisd	%xmm1, %xmm7
	jp	.L4355
	je	.L4351
.L4355:
	subsd	%xmm7, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm7, %xmm2
	mulsd	%xmm4, %xmm2
	movsd	%xmm2, (%r10,%r15)
.L4351:
	andl	$2, %ecx
	je	.L4359
	movq	24(%rbx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rdx,%r9), %xmm0
	addsd	(%rcx,%r9), %xmm0
	mulsd	%xmm3, %xmm0
	comisd	%xmm0, %xmm1
	ja	.L4383
	movapd	%xmm6, %xmm7
	minsd	%xmm0, %xmm7
	movapd	%xmm7, %xmm0
.L4360:
	movsd	rho2(%rip), %xmm7
	movsd	rho1(%rip), %xmm2
	subsd	%xmm7, %xmm2
	mulsd	%xmm0, %xmm2
	addsd	%xmm7, %xmm2
	movapd	%xmm5, %xmm7
	divsd	%xmm2, %xmm7
	movsd	%xmm7, (%rcx,%r13)
	movsd	mu1(%rip), %xmm2
	movsd	mu2(%rip), %xmm7
	ucomisd	%xmm1, %xmm2
	jp	.L4363
	jne	.L4363
	ucomisd	%xmm1, %xmm7
	jp	.L4363
	je	.L4359
.L4363:
	subsd	%xmm7, %xmm2
	movq	8(%rsp), %rdi
	mulsd	%xmm0, %xmm2
	addsd	%xmm7, %xmm2
	mulsd	%xmm5, %xmm2
	movsd	%xmm2, (%rcx,%rdi)
.L4359:
	movq	%rax, %rcx
	cmpq	%rax, %r11
	je	.L4348
	addq	$16, %rax
.L4366:
	movslq	(%rcx), %rsi
	movslq	4(%rcx), %rdx
	movslq	8(%rcx), %rdi
	movl	12(%rcx), %ecx
	testb	$1, %cl
	je	.L4351
	movq	24(%rbx), %r10
	movslq	%edi, %r8
	movslq	%esi, %r12
	movq	(%r10,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%edx, %r8
	movq	0(%rbp,%r12,8), %r10
	movq	-8(%rbp,%r12,8), %rbp
	movq	(%r10,%r8,8), %r10
	movq	0(%rbp,%r8,8), %r8
	movsd	(%r8,%r9), %xmm0
	addsd	(%r10,%r9), %xmm0
	mulsd	%xmm3, %xmm0
	comisd	%xmm0, %xmm1
	jbe	.L4412
	movapd	%xmm1, %xmm0
	jmp	.L4352
	.p2align 4,,10
	.p2align 3
.L4383:
	movapd	%xmm1, %xmm0
	jmp	.L4360
	.p2align 4,,10
	.p2align 3
.L4404:
	call	update_cache_f
	movq	grid(%rip), %rbx
	pxor	%xmm1, %xmm1
	jmp	.L4327
	.p2align 4,,10
	.p2align 3
.L4411:
	movsd	%xmm5, 16(%rsp)
	movsd	%xmm4, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rbx
	movsd	16(%rsp), %xmm5
	pxor	%xmm1, %xmm1
	movsd	8(%rsp), %xmm4
	jmp	.L4349
	.p2align 4,,10
	.p2align 3
.L4409:
	movsd	%xmm4, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm4
	pxor	%xmm1, %xmm1
	jmp	.L4374
	.p2align 4,,10
	.p2align 3
.L4407:
	call	update_cache_f
	movq	grid(%rip), %rax
	pxor	%xmm1, %xmm1
	jmp	.L4370
	.cfi_endproc
.LFE369:
	.size	properties_0, .-properties_0
	.section	.rodata.str1.8
	.align 8
.LC147:
	.string	"/root/mnt/basilisk/src/navier-stokes/centered.h"
	.text
	.p2align 4
	.type	correction, @function
correction:
.LFB319:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$40, %rsp
	.cfi_def_cfa_offset 64
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4417
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4417
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4418:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4418
.L4417:
	movsd	%xmm0, 8(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 28(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	movl	u(%rip), %edx
	pushq	$327
	.cfi_def_cfa_offset 80
	pushq	$.LC147
	.cfi_def_cfa_offset 88
	pushq	$1
	.cfi_def_cfa_offset 96
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 80
	movl	g(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$327
	.cfi_def_cfa_offset 88
	pushq	$.LC147
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$327
	.cfi_def_cfa_offset 80
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 88
	pushq	$1
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 80
	movl	g+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$327
	.cfi_def_cfa_offset 88
	pushq	$.LC147
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
	movl	$_loop.15, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.15+12(%rip)
	movsd	8(%rsp), %xmm0
	cmpb	$0, 128(%rax)
	jne	.L4425
.L4416:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L4413
	movslq	u(%rip), %rcx
	movq	24(%rax), %r11
	leal	-1(%rdx), %esi
	movq	32(%rax), %rax
	salq	$4, %rsi
	leaq	8(,%rcx,8), %r10
	movslq	g(%rip), %rcx
	leaq	16(%rax), %rdx
	leaq	8(,%rcx,8), %r9
	movslq	u+4(%rip), %rcx
	addq	%rdx, %rsi
	leaq	8(,%rcx,8), %r8
	movslq	g+4(%rip), %rcx
	leaq	8(,%rcx,8), %rdi
	jmp	.L4420
	.p2align 4,,10
	.p2align 3
.L4426:
	addq	$16, %rdx
.L4420:
	movslq	8(%rax), %rcx
	movslq	(%rax), %rbp
	movq	(%r11,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rbx
	movslq	4(%rax), %rcx
	movq	(%rbx,%rbp,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r9), %xmm1
	leaq	(%rax,%r10), %rcx
	mulsd	%xmm0, %xmm1
	addsd	(%rcx), %xmm1
	movsd	%xmm1, (%rcx)
	movsd	(%rax,%rdi), %xmm1
	leaq	(%rax,%r8), %rcx
	movq	%rdx, %rax
	mulsd	%xmm0, %xmm1
	addsd	(%rcx), %xmm1
	movsd	%xmm1, (%rcx)
	cmpq	%rsi, %rdx
	jne	.L4426
.L4413:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4425:
	.cfi_restore_state
	movsd	%xmm0, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm0
	jmp	.L4416
	.cfi_endproc
.LFE319:
	.size	correction, .-correction
	.p2align 4
	.type	acceleration, @function
acceleration:
.LFB323:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4431
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4431
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4432:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4432
.L4431:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	movl	uf(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$377
	.cfi_def_cfa_offset 128
	pushq	$.LC147
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	orl	$1, _loop.14+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	u(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	u(%rip), %edx
	movl	$-1, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	a(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$377
	.cfi_def_cfa_offset 128
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	orl	$2, _loop.14+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	u+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	a+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$377
	.cfi_def_cfa_offset 136
	pushq	$.LC147
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	movl	$_loop.14, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.14+12(%rip)
	cmpl	$65535, %eax
	jle	.L4429
	movq	_constant(%rip), %rcx
	movslq	a(%rip), %rdx
	movsd	-524288(%rcx,%rax,8), %xmm1
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm2
	movq	grid(%rip), %rax
	movzbl	128(%rax), %esi
	cmpl	$65535, %edx
	jg	.L4440
	testb	%sil, %sil
	jne	.L4497
.L4441:
	movl	56(%rax), %edx
	testl	%edx, %edx
	jle	.L4465
	movslq	u(%rip), %rcx
	movq	48(%rax), %r8
	leal	-1(%rdx), %r11d
	salq	$4, %r11
	movsd	.LC5(%rip), %xmm4
	leaq	8(,%rcx,8), %r13
	movslq	a(%rip), %rcx
	leaq	16(%r8), %rdx
	addq	%rdx, %r11
	leaq	8(,%rcx,8), %r15
	movslq	uf(%rip), %rcx
	leaq	8(,%rcx,8), %rbx
	movslq	u+4(%rip), %rcx
	movq	%rbx, (%rsp)
	leaq	8(,%rcx,8), %r12
	movslq	a+4(%rip), %rcx
	leaq	8(,%rcx,8), %r14
	movslq	uf+4(%rip), %rcx
	leaq	8(,%rcx,8), %rbx
	movq	%rbx, 8(%rsp)
	jmp	.L4444
	.p2align 4,,10
	.p2align 3
.L4498:
	addq	$16, %rdx
.L4444:
	movslq	(%r8), %rsi
	movslq	4(%r8), %rcx
	movslq	8(%r8), %rdi
	movl	12(%r8), %r8d
	testb	$1, %r8b
	je	.L4442
	movq	24(%rax), %r10
	movslq	%edi, %r9
	movslq	%esi, %rbp
	movq	(%r10,%r9,8), %r9
	movq	(%r9), %r9
	movq	16(%r9), %rbx
	movslq	%ecx, %r9
	movq	(%rbx,%rbp,8), %r10
	movq	-8(%rbx,%rbp,8), %rbx
	movq	(%r10,%r9,8), %r10
	movq	(%rbx,%r9,8), %r9
	movq	(%rsp), %rbx
	movsd	(%r9,%r13), %xmm0
	addsd	(%r10,%r13), %xmm0
	movsd	(%r10,%r15), %xmm3
	mulsd	dt(%rip), %xmm3
	mulsd	%xmm4, %xmm0
	addsd	%xmm3, %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, (%r10,%rbx)
.L4442:
	andl	$2, %r8d
	je	.L4443
	movq	24(%rax), %r8
	movq	8(%rsp), %rbx
	movq	(%r8,%rdi,8), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%rsi,8), %rdi
	movq	(%rdi,%rcx,8), %rsi
	movq	-8(%rdi,%rcx,8), %rcx
	movsd	(%rcx,%r12), %xmm0
	addsd	(%rsi,%r12), %xmm0
	movsd	(%rsi,%r14), %xmm3
	mulsd	dt(%rip), %xmm3
	mulsd	%xmm4, %xmm0
	addsd	%xmm3, %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, (%rsi,%rbx)
.L4443:
	movq	%rdx, %r8
	cmpq	%r11, %rdx
	jne	.L4498
.L4465:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4440:
	.cfi_restore_state
	movsd	-524288(%rcx,%rdx,8), %xmm5
	movslq	a+4(%rip), %rdx
	movsd	-524288(%rcx,%rdx,8), %xmm6
	testb	%sil, %sil
	jne	.L4499
.L4449:
	movl	56(%rax), %ecx
	testl	%ecx, %ecx
	jle	.L4465
	movslq	u(%rip), %rdx
	leal	-1(%rcx), %esi
	movsd	.LC5(%rip), %xmm3
	salq	$4, %rsi
	leaq	8(,%rdx,8), %r8
	movslq	uf(%rip), %rdx
	leaq	8(,%rdx,8), %r10
	movslq	u+4(%rip), %rdx
	leaq	8(,%rdx,8), %rdi
	movslq	uf+4(%rip), %rdx
	leaq	8(,%rdx,8), %r9
	movq	48(%rax), %rdx
	leaq	16(%rdx), %rcx
	addq	%rcx, %rsi
	jmp	.L4452
	.p2align 4,,10
	.p2align 3
.L4500:
	addq	$16, %rcx
.L4452:
	movslq	(%rdx), %rbx
	movslq	4(%rdx), %r11
	movslq	8(%rdx), %rbp
	movl	12(%rdx), %edx
	testb	$1, %dl
	je	.L4450
	movq	24(%rax), %r13
	movslq	%ebp, %r12
	movslq	%ebx, %r15
	movsd	dt(%rip), %xmm4
	movq	0(%r13,%r12,8), %r12
	mulsd	%xmm5, %xmm4
	movq	(%r12), %r12
	movq	16(%r12), %r14
	movslq	%r11d, %r12
	movq	(%r14,%r15,8), %r13
	movq	-8(%r14,%r15,8), %r14
	movq	0(%r13,%r12,8), %r13
	movq	(%r14,%r12,8), %r12
	movsd	(%r12,%r8), %xmm0
	addsd	0(%r13,%r8), %xmm0
	mulsd	%xmm3, %xmm0
	addsd	%xmm4, %xmm0
	mulsd	%xmm1, %xmm0
	movsd	%xmm0, 0(%r13,%r10)
.L4450:
	andl	$2, %edx
	je	.L4451
	movq	24(%rax), %rdx
	movsd	dt(%rip), %xmm4
	movq	(%rdx,%rbp,8), %rdx
	mulsd	%xmm6, %xmm4
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rbx,8), %rbx
	movq	(%rbx,%r11,8), %rdx
	movq	-8(%rbx,%r11,8), %r11
	movsd	(%r11,%rdi), %xmm0
	addsd	(%rdx,%rdi), %xmm0
	mulsd	%xmm3, %xmm0
	addsd	%xmm4, %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, (%rdx,%r9)
.L4451:
	movq	%rcx, %rdx
	cmpq	%rsi, %rcx
	jne	.L4500
	jmp	.L4465
	.p2align 4,,10
	.p2align 3
.L4429:
	movq	grid(%rip), %r10
	movslq	a(%rip), %rax
	movzbl	128(%r10), %edx
	cmpl	$65535, %eax
	jg	.L4433
	testb	%dl, %dl
	jne	.L4501
.L4434:
	movl	56(%r10), %eax
	testl	%eax, %eax
	jle	.L4465
	movslq	fm(%rip), %rdx
	movq	48(%r10), %rcx
	leal	-1(%rax), %r11d
	salq	$4, %r11
	movsd	.LC5(%rip), %xmm2
	leaq	8(,%rdx,8), %rbx
	movslq	u(%rip), %rdx
	leaq	16(%rcx), %rax
	movq	%rbx, (%rsp)
	addq	%rax, %r11
	leaq	8(,%rdx,8), %r13
	movslq	a(%rip), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	uf(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movslq	fm+4(%rip), %rdx
	movq	%rbx, 24(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	u+4(%rip), %rdx
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %r12
	movslq	a+4(%rip), %rdx
	leaq	8(,%rdx,8), %r14
	movslq	uf+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 16(%rsp)
	jmp	.L4438
	.p2align 4,,10
	.p2align 3
.L4502:
	addq	$16, %rax
.L4438:
	movslq	(%rcx), %rsi
	movslq	4(%rcx), %rdx
	movslq	8(%rcx), %rdi
	movl	12(%rcx), %ecx
	testb	$1, %cl
	je	.L4436
	movq	24(%r10), %r9
	movslq	%edi, %r8
	movslq	%esi, %rbp
	movq	(%r9,%r8,8), %r8
	movslq	%edx, %r9
	movq	(%r8), %r8
	movq	16(%r8), %rbx
	movq	(%rbx,%rbp,8), %r8
	movq	-8(%rbx,%rbp,8), %rbx
	movq	(%r8,%r9,8), %r8
	movq	(%rbx,%r9,8), %r9
	movq	(%rsp), %rbx
	movsd	(%r9,%r13), %xmm0
	addsd	(%r8,%r13), %xmm0
	movsd	(%r8,%r15), %xmm1
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	mulsd	(%r8,%rbx), %xmm0
	movq	24(%rsp), %rbx
	movsd	%xmm0, (%r8,%rbx)
.L4436:
	andl	$2, %ecx
	je	.L4437
	movq	24(%r10), %rcx
	movq	8(%rsp), %rbx
	movq	(%rcx,%rdi,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rdx,%r12), %xmm0
	addsd	(%rcx,%r12), %xmm0
	movsd	(%rcx,%r14), %xmm1
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
	mulsd	(%rcx,%rbx), %xmm0
	movq	16(%rsp), %rbx
	movsd	%xmm0, (%rcx,%rbx)
.L4437:
	movq	%rax, %rcx
	cmpq	%r11, %rax
	jne	.L4502
	jmp	.L4465
	.p2align 4,,10
	.p2align 3
.L4433:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm3
	movslq	a+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm4
	testb	%dl, %dl
	jne	.L4503
.L4445:
	movl	56(%r10), %eax
	testl	%eax, %eax
	jle	.L4465
	movslq	fm(%rip), %rdx
	movq	48(%r10), %rdi
	leal	-1(%rax), %r11d
	salq	$4, %r11
	movsd	.LC5(%rip), %xmm1
	leaq	8(,%rdx,8), %r15
	movslq	u(%rip), %rdx
	leaq	16(%rdi), %rax
	addq	%rax, %r11
	leaq	8(,%rdx,8), %r13
	movslq	uf(%rip), %rdx
	leaq	8(,%rdx,8), %r14
	movslq	fm+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movslq	u+4(%rip), %rdx
	movq	%rbx, (%rsp)
	leaq	8(,%rdx,8), %r12
	movslq	uf+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 8(%rsp)
	jmp	.L4448
	.p2align 4,,10
	.p2align 3
.L4504:
	addq	$16, %rax
.L4448:
	movslq	(%rdi), %rcx
	movslq	4(%rdi), %rdx
	movslq	8(%rdi), %rsi
	movl	12(%rdi), %edi
	testb	$1, %dil
	je	.L4446
	movq	24(%r10), %r9
	movslq	%esi, %r8
	movslq	%ecx, %rbp
	movsd	dt(%rip), %xmm2
	movq	(%r9,%r8,8), %r8
	mulsd	%xmm3, %xmm2
	movq	(%r8), %r8
	movq	16(%r8), %rbx
	movslq	%edx, %r8
	movq	(%rbx,%rbp,8), %r9
	movq	-8(%rbx,%rbp,8), %rbx
	movq	(%r9,%r8,8), %r9
	movq	(%rbx,%r8,8), %r8
	movsd	(%r8,%r13), %xmm0
	addsd	(%r9,%r13), %xmm0
	mulsd	%xmm1, %xmm0
	addsd	%xmm2, %xmm0
	mulsd	(%r9,%r15), %xmm0
	movsd	%xmm0, (%r9,%r14)
.L4446:
	andl	$2, %edi
	je	.L4447
	movq	24(%r10), %rdi
	movsd	dt(%rip), %xmm2
	movq	(%rsp), %rbx
	movq	(%rdi,%rsi,8), %rsi
	mulsd	%xmm4, %xmm2
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rdx,%r12), %xmm0
	addsd	(%rcx,%r12), %xmm0
	mulsd	%xmm1, %xmm0
	addsd	%xmm2, %xmm0
	mulsd	(%rcx,%rbx), %xmm0
	movq	8(%rsp), %rbx
	movsd	%xmm0, (%rcx,%rbx)
.L4447:
	movq	%rax, %rdi
	cmpq	%rax, %r11
	jne	.L4504
	jmp	.L4465
	.p2align 4,,10
	.p2align 3
.L4501:
	call	update_cache_f
	movq	grid(%rip), %r10
	jmp	.L4434
	.p2align 4,,10
	.p2align 3
.L4499:
	movsd	%xmm2, 24(%rsp)
	movsd	%xmm1, 16(%rsp)
	movsd	%xmm6, 8(%rsp)
	movsd	%xmm5, (%rsp)
	call	update_cache_f
	movsd	24(%rsp), %xmm2
	movsd	(%rsp), %xmm5
	movq	grid(%rip), %rax
	movsd	16(%rsp), %xmm1
	movsd	8(%rsp), %xmm6
	jmp	.L4449
.L4497:
	movsd	%xmm2, 8(%rsp)
	movsd	%xmm1, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm2
	movsd	(%rsp), %xmm1
	movq	grid(%rip), %rax
	jmp	.L4441
	.p2align 4,,10
	.p2align 3
.L4503:
	movsd	%xmm4, 8(%rsp)
	movsd	%xmm3, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm4
	movsd	(%rsp), %xmm3
	movq	grid(%rip), %r10
	jmp	.L4445
	.cfi_endproc
.LFE323:
	.size	acceleration, .-acceleration
	.p2align 4
	.type	defaults_4, @function
defaults_4:
.LFB371:
	.cfi_startproc
	cmpl	$65535, a(%rip)
	jg	.L4532
	xorl	%eax, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L4532:
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movl	$.LC116, %edi
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	subq	$16, %rsp
	.cfi_def_cfa_offset 48
	call	new_face_vector
	movq	baseblock(%rip), %rdx
	movq	%rax, a(%rip)
	testq	%rdx, %rdx
	je	.L4511
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4511
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4512:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4512
.L4511:
	movq	$0, 4(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 56
	movl	a(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 20(%rsp)
	pushq	$34
	.cfi_def_cfa_offset 64
	pushq	$.LC145
	.cfi_def_cfa_offset 72
	pushq	$0
	.cfi_def_cfa_offset 80
	orl	$1, _loop.2+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 56
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$34
	.cfi_def_cfa_offset 64
	movl	a+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC145
	.cfi_def_cfa_offset 72
	pushq	$0
	.cfi_def_cfa_offset 80
	movq	36(%rsp), %rdi
	movl	44(%rsp), %esi
	orl	$2, _loop.2+16(%rip)
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 48
	movl	$_loop.2, %edi
	call	end_stencil
	cmpl	$65535, a(%rip)
	movl	$0, _loop.2+12(%rip)
	jg	.L4533
	movq	grid(%rip), %r10
	cmpb	$0, 128(%r10)
	jne	.L4534
.L4513:
	movl	56(%r10), %edx
	testl	%edx, %edx
	jle	.L4507
	movslq	a(%rip), %rax
	leal	-1(%rdx), %r9d
	salq	$4, %r9
	leaq	8(,%rax,8), %rbx
	movslq	a+4(%rip), %rax
	leaq	8(,%rax,8), %r11
	movq	48(%r10), %rax
	leaq	16(%rax), %rdx
	addq	%rdx, %r9
	jmp	.L4517
	.p2align 4,,10
	.p2align 3
.L4535:
	addq	$16, %rdx
.L4517:
	movslq	(%rax), %rsi
	movslq	4(%rax), %rcx
	movslq	8(%rax), %rdi
	movl	12(%rax), %eax
	testb	$1, %al
	je	.L4515
	movq	24(%r10), %rbp
	movslq	%edi, %r8
	movq	0(%rbp,%r8,8), %r8
	movslq	%esi, %rbp
	movq	(%r8), %r8
	movq	16(%r8), %r12
	movslq	%ecx, %r8
	movq	(%r12,%rbp,8), %rbp
	movq	0(%rbp,%r8,8), %r8
	movq	$0x000000000, (%r8,%rbx)
.L4515:
	testb	$2, %al
	je	.L4516
	movq	24(%r10), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movq	$0x000000000, (%rax,%r11)
.L4516:
	movq	%rdx, %rax
	cmpq	%r9, %rdx
	jne	.L4535
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4533:
	.cfi_restore_state
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L4536
.L4507:
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4534:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %r10
	jmp	.L4513
	.p2align 4,,10
	.p2align 3
.L4536:
	call	update_cache_f
	jmp	.L4507
	.cfi_endproc
.LFE371:
	.size	defaults_4, .-defaults_4
	.section	.rodata.str1.1
.LC148:
	.string	"stability"
	.text
	.p2align 4
	.type	init, @function
init:
.LFB303:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4541
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4541
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4542:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4542
.L4541:
	movq	$0, 20(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 104
	movl	uf(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	pushq	$192
	.cfi_def_cfa_offset 112
	pushq	$.LC147
	.cfi_def_cfa_offset 120
	pushq	$0
	.cfi_def_cfa_offset 128
	orl	$1, _loop.1+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	u(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	u(%rip), %edx
	movl	$-1, %ecx
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$192
	.cfi_def_cfa_offset 112
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 120
	pushq	$0
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	orl	$2, _loop.1+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	u+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$192
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 96
	movl	$_loop.1, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.1+12(%rip)
	cmpl	$65535, %eax
	jg	.L4571
	movq	grid(%rip), %r11
	cmpb	$0, 128(%r11)
	jne	.L4572
.L4543:
	movl	56(%r11), %eax
	testl	%eax, %eax
	jle	.L4548
	movslq	fm(%rip), %rdx
	movq	48(%r11), %rcx
	leal	-1(%rax), %r10d
	salq	$4, %r10
	movsd	.LC5(%rip), %xmm1
	leaq	8(,%rdx,8), %r15
	movslq	u(%rip), %rdx
	leaq	16(%rcx), %rax
	addq	%rax, %r10
	leaq	8(,%rdx,8), %r13
	movslq	uf(%rip), %rdx
	leaq	8(,%rdx,8), %r14
	movslq	fm+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movslq	u+4(%rip), %rdx
	movq	%rbx, (%rsp)
	leaq	8(,%rdx,8), %r12
	movslq	uf+4(%rip), %rdx
	leaq	8(,%rdx,8), %rdi
	movq	%rdi, 8(%rsp)
	jmp	.L4547
	.p2align 4,,10
	.p2align 3
.L4573:
	addq	$16, %rax
.L4547:
	movslq	(%rcx), %rsi
	movslq	4(%rcx), %rdx
	movslq	8(%rcx), %rdi
	movl	12(%rcx), %ecx
	testb	$1, %cl
	je	.L4545
	movq	24(%r11), %r9
	movslq	%edi, %r8
	movslq	%esi, %rbp
	movq	(%r9,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbx
	movslq	%edx, %r8
	movq	(%rbx,%rbp,8), %r9
	movq	-8(%rbx,%rbp,8), %rbx
	movq	(%r9,%r8,8), %r9
	movq	(%rbx,%r8,8), %r8
	movsd	(%r8,%r13), %xmm0
	addsd	(%r9,%r13), %xmm0
	mulsd	%xmm1, %xmm0
	mulsd	(%r9,%r15), %xmm0
	movsd	%xmm0, (%r9,%r14)
.L4545:
	andl	$2, %ecx
	je	.L4546
	movq	24(%r11), %rcx
	movq	(%rsp), %rbx
	movq	(%rcx,%rdi,8), %rcx
	movq	8(%rsp), %rdi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rdx,%r12), %xmm0
	addsd	(%rcx,%r12), %xmm0
	mulsd	%xmm1, %xmm0
	mulsd	(%rcx,%rbx), %xmm0
	movsd	%xmm0, (%rcx,%rdi)
.L4546:
	movq	%rax, %rcx
	cmpq	%rax, %r10
	jne	.L4573
.L4548:
	movl	$.LC86, %edi
	call	event
	movsd	DT(%rip), %xmm0
	movl	$.LC148, %edi
	movsd	%xmm0, dtmax(%rip)
	call	event
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4571:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %rsi
	movsd	-524288(%rdx,%rax,8), %xmm2
	movslq	fm+4(%rip), %rax
	cmpb	$0, 128(%rsi)
	movsd	-524288(%rdx,%rax,8), %xmm3
	jne	.L4574
.L4549:
	movl	56(%rsi), %edx
	testl	%edx, %edx
	jle	.L4548
	movslq	u(%rip), %rax
	leal	-1(%rdx), %ecx
	movsd	.LC5(%rip), %xmm1
	salq	$4, %rcx
	leaq	8(,%rax,8), %r8
	movslq	uf(%rip), %rax
	leaq	8(,%rax,8), %r10
	movslq	u+4(%rip), %rax
	leaq	8(,%rax,8), %rdi
	movslq	uf+4(%rip), %rax
	leaq	8(,%rax,8), %r9
	movq	48(%rsi), %rax
	leaq	16(%rax), %rdx
	addq	%rdx, %rcx
	jmp	.L4552
	.p2align 4,,10
	.p2align 3
.L4575:
	addq	$16, %rdx
.L4552:
	movslq	(%rax), %rbx
	movslq	4(%rax), %r11
	movslq	8(%rax), %rbp
	movl	12(%rax), %eax
	testb	$1, %al
	je	.L4550
	movq	24(%rsi), %r13
	movslq	%ebp, %r12
	movslq	%ebx, %r15
	movq	0(%r13,%r12,8), %r12
	movslq	%r11d, %r13
	movq	(%r12), %r12
	movq	16(%r12), %r14
	movq	(%r14,%r15,8), %r12
	movq	-8(%r14,%r15,8), %r14
	movq	(%r12,%r13,8), %r12
	movq	(%r14,%r13,8), %r13
	movsd	0(%r13,%r8), %xmm0
	addsd	(%r12,%r8), %xmm0
	mulsd	%xmm1, %xmm0
	mulsd	%xmm2, %xmm0
	movsd	%xmm0, (%r12,%r10)
.L4550:
	testb	$2, %al
	je	.L4551
	movq	24(%rsi), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbx,8), %rbx
	movq	(%rbx,%r11,8), %rax
	movq	-8(%rbx,%r11,8), %r11
	movsd	(%r11,%rdi), %xmm0
	addsd	(%rax,%rdi), %xmm0
	mulsd	%xmm1, %xmm0
	mulsd	%xmm3, %xmm0
	movsd	%xmm0, (%rax,%r9)
.L4551:
	movq	%rdx, %rax
	cmpq	%rcx, %rdx
	jne	.L4575
	jmp	.L4548
	.p2align 4,,10
	.p2align 3
.L4572:
	call	update_cache_f
	movq	grid(%rip), %r11
	jmp	.L4543
	.p2align 4,,10
	.p2align 3
.L4574:
	movsd	%xmm3, 8(%rsp)
	movsd	%xmm2, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm3
	movsd	(%rsp), %xmm2
	movq	grid(%rip), %rsi
	jmp	.L4549
	.cfi_endproc
.LFE303:
	.size	init, .-init
	.p2align 4
	.type	defaults_0, @function
defaults_0:
.LFB299:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	.LC149(%rip), %rax
	movl	alpha(%rip), %ebp
	movq	_attribute(%rip), %rcx
	movq	%rax, CFL(%rip)
	movslq	pf(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movb	$1, 60(%rcx,%rax)
	movslq	p(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movb	$1, 60(%rcx,%rax)
	cmpl	$65538, %ebp
	je	.L4609
	cmpl	$65535, %ebp
	jg	.L4578
	movq	baseblock(%rip), %rdx
	movq	alpha(%rip), %r12
	movslq	alpha+4(%rip), %rbx
	testq	%rdx, %rdx
	je	.L4582
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4582
	.p2align 4,,10
	.p2align 3
.L4583:
	leaq	(%rax,%rax,4), %rsi
	addq	$4, %rdx
	leaq	(%rax,%rsi,2), %rax
	xorl	%esi, %esi
	salq	$4, %rax
	addq	%rcx, %rax
	movw	%si, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4583
.L4582:
	movq	$0, 20(%rsp)
	movl	%r12d, %edx
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 28(%rsp)
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 104
	orl	$1, _loop.0+16(%rip)
	shrq	$32, %r12
	pushq	$146
	.cfi_def_cfa_offset 112
	pushq	$.LC147
	.cfi_def_cfa_offset 120
	pushq	$0
	.cfi_def_cfa_offset 128
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$146
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$146
	.cfi_def_cfa_offset 112
	xorl	%ecx, %ecx
	movq	%r12, %rdx
	pushq	$.LC147
	.cfi_def_cfa_offset 120
	pushq	$0
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	orl	$2, _loop.0+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 104
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 112
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$146
	.cfi_def_cfa_offset 120
	pushq	$.LC147
	.cfi_def_cfa_offset 128
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 96
	movl	$_loop.0, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.0+12(%rip)
	cmpl	$65535, %eax
	jg	.L4610
	movq	grid(%rip), %r10
	cmpb	$0, 128(%r10)
	jne	.L4611
.L4584:
	movl	56(%r10), %edx
	movq	_attribute(%rip), %rcx
	testl	%edx, %edx
	jle	.L4578
	movslq	fm(%rip), %rax
	leal	-1(%rdx), %r9d
	addl	$1, %ebp
	leaq	8(,%rbx,8), %rbx
	movslq	%ebp, %rbp
	salq	$4, %r9
	leaq	8(,%rax,8), %r11
	movslq	fm+4(%rip), %rax
	salq	$3, %rbp
	leaq	8(,%rax,8), %r12
	movq	48(%r10), %rax
	leaq	16(%rax), %rdx
	addq	%rdx, %r9
	jmp	.L4587
	.p2align 4,,10
	.p2align 3
.L4612:
	addq	$16, %rdx
.L4587:
	movslq	(%rax), %rdi
	movslq	4(%rax), %rsi
	movslq	8(%rax), %r8
	movl	12(%rax), %eax
	testb	$1, %al
	je	.L4585
	movq	24(%r10), %r14
	movslq	%r8d, %r13
	movq	(%r14,%r13,8), %r13
	movslq	%edi, %r14
	movq	0(%r13), %r13
	movq	16(%r13), %r15
	movslq	%esi, %r13
	movq	(%r15,%r14,8), %r14
	movq	(%r14,%r13,8), %r13
	movsd	0(%r13,%r11), %xmm0
	movsd	%xmm0, 0(%r13,%rbp)
.L4585:
	testb	$2, %al
	je	.L4586
	movq	24(%r10), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r12), %xmm0
	movsd	%xmm0, (%rax,%rbx)
.L4586:
	movq	%rdx, %rax
	cmpq	%rdx, %r9
	jne	.L4612
.L4578:
	movslq	uf(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movq	$refine_face_solenoidal, 112(%rcx,%rax)
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4609:
	.cfi_restore_state
	movq	fm(%rip), %rax
	movq	%rax, alpha(%rip)
	movl	cm(%rip), %eax
	movl	%eax, rho(%rip)
	jmp	.L4578
	.p2align 4,,10
	.p2align 3
.L4610:
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %r9
	movsd	-524288(%rdx,%rax,8), %xmm0
	movslq	fm+4(%rip), %rax
	cmpb	$0, 128(%r9)
	movsd	-524288(%rdx,%rax,8), %xmm1
	jne	.L4613
.L4588:
	movl	56(%r9), %edx
	movq	_attribute(%rip), %rcx
	testl	%edx, %edx
	jle	.L4578
	movq	48(%r9), %rax
	leal	-1(%rdx), %r11d
	addl	$1, %ebp
	leaq	8(,%rbx,8), %rbx
	movslq	%ebp, %rbp
	salq	$4, %r11
	leaq	16(%rax), %rdx
	salq	$3, %rbp
	addq	%rdx, %r11
	jmp	.L4591
	.p2align 4,,10
	.p2align 3
.L4614:
	addq	$16, %rdx
.L4591:
	movslq	(%rax), %rdi
	movslq	4(%rax), %rsi
	movslq	8(%rax), %r8
	movl	12(%rax), %eax
	testb	$1, %al
	je	.L4589
	movq	24(%r9), %r12
	movslq	%r8d, %r10
	movq	(%r12,%r10,8), %r10
	movslq	%edi, %r12
	movq	(%r10), %r10
	movq	16(%r10), %r13
	movslq	%esi, %r10
	movq	0(%r13,%r12,8), %r12
	movq	(%r12,%r10,8), %r10
	movsd	%xmm0, (%r10,%rbp)
.L4589:
	testb	$2, %al
	je	.L4590
	movq	24(%r9), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	%xmm1, (%rax,%rbx)
.L4590:
	movq	%rdx, %rax
	cmpq	%rdx, %r11
	jne	.L4614
	jmp	.L4578
	.p2align 4,,10
	.p2align 3
.L4611:
	call	update_cache_f
	movq	grid(%rip), %r10
	jmp	.L4584
	.p2align 4,,10
	.p2align 3
.L4613:
	movsd	%xmm1, 8(%rsp)
	movsd	%xmm0, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm1
	movsd	(%rsp), %xmm0
	movq	grid(%rip), %r9
	jmp	.L4588
	.cfi_endproc
.LFE299:
	.size	defaults_0, .-defaults_0
	.p2align 4
	.globl	wavelet
	.type	wavelet, @function
wavelet:
.LFB188:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	%edi, 40(%rsp)
	movl	%edi, 52(%rsp)
	leaq	52(%rsp), %rdi
	movl	%esi, 12(%rsp)
	movl	$-1, 56(%rsp)
	call	*restriction(%rip)
	movq	grid(%rip), %rdx
	movl	20(%rdx), %ebp
	subl	$1, %ebp
	js	.L4641
	movslq	40(%rsp), %rax
	movslq	12(%rsp), %rcx
	movslq	%ebp, %r13
	salq	$3, %r13
	leaq	8(,%rcx,8), %r15
	leaq	(%rax,%rax,4), %rcx
	leaq	8(,%rax,8), %r12
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movq	%rax, 32(%rsp)
	leaq	60(%rsp), %rax
	movq	%rax, 16(%rsp)
	jmp	.L4626
	.p2align 4,,10
	.p2align 3
.L4617:
	movl	12(%rsp), %eax
	subl	$1, %ebp
	movq	16(%rsp), %rdi
	movl	%r14d, %esi
	movl	$-1, 64(%rsp)
	subq	$8, %r13
	movl	%eax, 60(%rsp)
	call	*boundary_level(%rip)
	cmpl	$-1, %ebp
	je	.L4642
	movq	grid(%rip), %rdx
.L4626:
	leal	1(%rbp), %r14d
	cmpl	%ebp, 16(%rdx)
	jl	.L4617
	cmpb	$0, 128(%rdx)
	jne	.L4643
.L4618:
	movq	96(%rdx), %rax
	leal	1(%rbp), %r14d
	leaq	(%rax,%r13,2), %rax
	movq	(%rax), %rbx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L4617
	movslq	%r14d, %rcx
	subl	$1, %eax
	movl	%r14d, 44(%rsp)
	movl	%ebp, %r14d
	salq	$3, %rcx
	leaq	8(%rbx,%rax,8), %r8
	movq	%rcx, (%rsp)
	movq	%r8, %rbp
	jmp	.L4624
	.p2align 4,,10
	.p2align 3
.L4623:
	addq	$8, %rbx
	cmpq	%rbx, %rbp
	je	.L4644
.L4624:
	movq	24(%rdx), %rcx
	movslq	(%rbx), %r10
	movl	4(%rbx), %eax
	movq	(%rcx,%r13), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %r9
	movslq	%eax, %rdi
	movq	(%r9,%r10,8), %r9
	movq	(%r9,%rdi,8), %rdi
	testb	$2, (%rdi)
	jne	.L4623
	movq	(%rsp), %rsi
	leal	-2(%r10,%r10), %edx
	leal	-2(%rax,%rax), %eax
	xorl	%r9d, %r9d
	movslq	%eax, %r10
	movq	(%rcx,%rsi), %rcx
	movslq	%edx, %rsi
	salq	$3, %r10
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	leaq	(%rcx,%rsi,8), %r11
	leal	1(%rax), %ecx
	movslq	%ecx, %rcx
	salq	$3, %rcx
.L4621:
	movq	(%r11,%r9,8), %rsi
	movq	(%rsi,%r10), %rdi
	movq	(%rsi,%rcx), %rsi
	movsd	(%rdi,%r12), %xmm0
	movsd	%xmm0, (%rdi,%r15)
	movsd	(%rsi,%r12), %xmm0
	movsd	%xmm0, (%rsi,%r15)
	cmpq	$1, %r9
	jne	.L4631
	addl	$2, %eax
	leal	2(%rdx), %r9d
	movl	%r14d, %esi
	movl	40(%rsp), %edx
	sarl	%eax
	movq	_attribute(%rip), %rcx
	sarl	%r9d
	movl	%r14d, 76(%rsp)
	movl	%eax, 72(%rsp)
	movl	%eax, 24(%rsp)
	movq	32(%rsp), %rax
	movl	%r9d, 68(%rsp)
	movq	68(%rsp), %rdi
	movl	%r9d, 28(%rsp)
	call	*96(%rcx,%rax)
	movl	24(%rsp), %eax
	movq	grid(%rip), %rdx
	movq	(%rsp), %rsi
	movl	28(%rsp), %r9d
	leal	-2(%rax,%rax), %ecx
	movq	24(%rdx), %rax
	movslq	%ecx, %r10
	addl	$1, %ecx
	movq	(%rax,%rsi), %rax
	movslq	%ecx, %rcx
	salq	$3, %r10
	salq	$3, %rcx
	movq	(%rax), %rsi
	leal	-2(%r9,%r9), %eax
	xorl	%r9d, %r9d
	cltq
	movq	16(%rsi), %rsi
	leaq	(%rsi,%rax,8), %r11
.L4622:
	movq	(%r11,%r9,8), %rsi
	movq	(%rsi,%r10), %rax
	leaq	(%rax,%r12), %rdi
	addq	%r15, %rax
	movsd	(%rdi), %xmm1
	movsd	(%rax), %xmm0
	movsd	%xmm0, (%rdi)
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax)
	movq	(%rsi,%rcx), %rax
	leaq	(%rax,%r12), %rsi
	addq	%r15, %rax
	movsd	(%rsi), %xmm1
	movsd	(%rax), %xmm0
	movsd	%xmm0, (%rsi)
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax)
	cmpq	$1, %r9
	je	.L4623
	movl	$1, %r9d
	jmp	.L4622
	.p2align 4,,10
	.p2align 3
.L4631:
	movl	$1, %r9d
	jmp	.L4621
	.p2align 4,,10
	.p2align 3
.L4644:
	movl	%r14d, %ebp
	movl	44(%rsp), %r14d
	jmp	.L4617
	.p2align 4,,10
	.p2align 3
.L4642:
	movq	grid(%rip), %rcx
.L4616:
	movl	16(%rcx), %eax
	testl	%eax, %eax
	js	.L4629
	cmpb	$0, 128(%rcx)
	jne	.L4645
.L4628:
	movq	96(%rcx), %rdx
	movl	8(%rdx), %esi
	movq	(%rdx), %rax
	testl	%esi, %esi
	jle	.L4629
	movq	24(%rcx), %rdx
	movq	(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r9
	movslq	40(%rsp), %rdx
	leaq	8(,%rdx,8), %r8
	movslq	12(%rsp), %rdx
	leaq	8(,%rdx,8), %rdi
	leal	-1(%rsi), %edx
	leaq	8(%rax,%rdx,8), %rsi
	.p2align 4,,10
	.p2align 3
.L4630:
	movslq	(%rax), %rdx
	movslq	4(%rax), %rcx
	addq	$8, %rax
	movq	(%r9,%rdx,8), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movsd	(%rdx,%r8), %xmm0
	movsd	%xmm0, (%rdx,%rdi)
	cmpq	%rax, %rsi
	jne	.L4630
.L4629:
	movl	12(%rsp), %eax
	movl	$-1, 64(%rsp)
	xorl	%esi, %esi
	movq	16(%rsp), %rdi
	movl	%eax, 60(%rsp)
	call	*boundary_level(%rip)
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4643:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L4618
.L4645:
	call	update_cache_f
	movq	grid(%rip), %rcx
	jmp	.L4628
.L4641:
	leaq	60(%rsp), %rax
	movq	%rdx, %rcx
	movq	%rax, 16(%rsp)
	jmp	.L4616
	.cfi_endproc
.LFE188:
	.size	wavelet, .-wavelet
	.p2align 4
	.globl	inverse_wavelet
	.type	inverse_wavelet, @function
inverse_wavelet:
.LFB189:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%esi, %rbx
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movq	grid(%rip), %rdx
	movl	%edi, 8(%rsp)
	movl	16(%rdx), %ecx
	testl	%ecx, %ecx
	js	.L4651
	cmpb	$0, 128(%rdx)
	jne	.L4668
.L4650:
	movq	96(%rdx), %rcx
	movq	(%rcx), %rax
	movl	8(%rcx), %ecx
	testl	%ecx, %ecx
	jle	.L4651
	movq	24(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r9
	movslq	%ebx, %rdx
	leaq	8(,%rdx,8), %r8
	movslq	8(%rsp), %rdx
	leaq	8(,%rdx,8), %rdi
	leal	-1(%rcx), %edx
	leaq	8(%rax,%rdx,8), %rsi
	.p2align 4,,10
	.p2align 3
.L4652:
	movslq	(%rax), %rdx
	movslq	4(%rax), %rcx
	addq	$8, %rax
	movq	(%r9,%rdx,8), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movsd	(%rdx,%r8), %xmm0
	movsd	%xmm0, (%rdx,%rdi)
	cmpq	%rax, %rsi
	jne	.L4652
.L4651:
	movl	8(%rsp), %eax
	movl	$-1, 56(%rsp)
	xorl	%esi, %esi
	leaq	52(%rsp), %rdi
	movl	%eax, 52(%rsp)
	call	*boundary_level(%rip)
	movq	grid(%rip), %rax
	movl	20(%rax), %edx
	testl	%edx, %edx
	jle	.L4646
	movslq	8(%rsp), %rdx
	leaq	8(,%rbx,8), %r12
	xorl	%ebp, %ebp
	leaq	(%rdx,%rdx,4), %rcx
	leaq	8(,%rdx,8), %r15
	leaq	(%rdx,%rcx,2), %rcx
	salq	$4, %rcx
	movq	%rcx, 24(%rsp)
	jmp	.L4660
	.p2align 4,,10
	.p2align 3
.L4653:
	movl	8(%rsp), %eax
	movl	%r13d, %esi
	leaq	60(%rsp), %rdi
	addq	$1, %rbp
	movl	$-1, 64(%rsp)
	movl	%eax, 60(%rsp)
	call	*boundary_level(%rip)
	movq	grid(%rip), %rax
	cmpl	%ebp, 20(%rax)
	jle	.L4646
.L4660:
	movl	%ebp, %ebx
	movl	%ebp, %r9d
	leal	1(%rbp), %r13d
	cmpl	%ebp, 16(%rax)
	jl	.L4653
	cmpb	$0, 128(%rax)
	jne	.L4669
.L4654:
	movq	%rbp, %rdx
	leal	1(%rbx), %r13d
	salq	$4, %rdx
	addq	96(%rax), %rdx
	movq	(%rdx), %rcx
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L4653
	leal	1(%rbx), %r13d
	subl	$1, %edx
	movq	%rbp, 32(%rsp)
	leaq	0(,%rbp,8), %r14
	movslq	%r13d, %rsi
	movl	%r13d, 44(%rsp)
	movq	%rcx, %rbx
	movl	%r9d, %r13d
	leaq	0(,%rsi,8), %rdi
	movq	%rdi, 16(%rsp)
	leaq	8(%rcx,%rdx,8), %rdi
	movq	%rdi, %rbp
	jmp	.L4659
	.p2align 4,,10
	.p2align 3
.L4658:
	addq	$8, %rbx
	cmpq	%rbp, %rbx
	je	.L4670
.L4659:
	movq	24(%rax), %rdx
	movslq	(%rbx), %rdi
	movl	4(%rbx), %r8d
	movq	(%rdx,%r14), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rsi
	movslq	%r8d, %rdx
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi,%rdx,8), %rdx
	testb	$2, (%rdx)
	jne	.L4658
	movq	_attribute(%rip), %rax
	movq	24(%rsp), %rcx
	movl	%edi, 68(%rsp)
	movl	%r13d, %esi
	movl	%r8d, 72(%rsp)
	movl	8(%rsp), %edx
	movl	%edi, 40(%rsp)
	movq	68(%rsp), %rdi
	movl	%r8d, 12(%rsp)
	movl	%r13d, 76(%rsp)
	call	*96(%rax,%rcx)
	movq	grid(%rip), %rax
	movq	16(%rsp), %rdi
	movl	12(%rsp), %r8d
	movl	40(%rsp), %ecx
	movq	24(%rax), %rsi
	leal	-2(%r8,%r8), %edx
	leal	-2(%rcx,%rcx), %ecx
	xorl	%r8d, %r8d
	movq	(%rsi,%rdi), %rsi
	movslq	%edx, %r10
	addl	$1, %edx
	movslq	%ecx, %rcx
	movslq	%edx, %rdx
	salq	$3, %r10
	movq	(%rsi), %rsi
	salq	$3, %rdx
	movq	16(%rsi), %rsi
	leaq	(%rsi,%rcx,8), %r11
.L4657:
	movq	(%r11,%r8,8), %rcx
	movq	(%rcx,%r10), %rdi
	leaq	(%rdi,%r15), %rsi
	movsd	(%rsi), %xmm0
	addsd	(%rdi,%r12), %xmm0
	movsd	%xmm0, (%rsi)
	movq	(%rcx,%rdx), %rsi
	leaq	(%rsi,%r15), %rcx
	movsd	(%rcx), %xmm0
	addsd	(%rsi,%r12), %xmm0
	movsd	%xmm0, (%rcx)
	cmpq	$1, %r8
	je	.L4658
	movl	$1, %r8d
	jmp	.L4657
	.p2align 4,,10
	.p2align 3
.L4670:
	movq	32(%rsp), %rbp
	movl	44(%rsp), %r13d
	jmp	.L4653
	.p2align 4,,10
	.p2align 3
.L4646:
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4669:
	.cfi_restore_state
	movl	%ebp, 12(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movl	12(%rsp), %r9d
	jmp	.L4654
.L4668:
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L4650
	.cfi_endproc
.LFE189:
	.size	inverse_wavelet, .-inverse_wavelet
	.p2align 4
	.globl	multigrid_methods
	.type	multigrid_methods, @function
multigrid_methods:
.LFB204:
	.cfi_startproc
	movq	$cartesian_init_vector, init_vector(%rip)
	movq	$cartesian_init_tensor, init_tensor(%rip)
	movq	$cartesian_boundary_level, boundary_level(%rip)
	movq	$cartesian_boundary_face, boundary_face(%rip)
	movq	$multigrid_debug, debug(%rip)
	movq	$multigrid_init_scalar, init_scalar(%rip)
	movq	$multigrid_init_vertex_scalar, init_vertex_scalar(%rip)
	movq	$multigrid_init_face_vector, init_face_vector(%rip)
	movq	$multigrid_restriction, restriction(%rip)
	ret
	.cfi_endproc
.LFE204:
	.size	multigrid_methods, .-multigrid_methods
	.section	.rodata.str1.8
	.align 8
.LC150:
	.string	"/root/mnt/basilisk/src/grid/multigrid-common.h"
	.text
	.p2align 4
	.globl	subtree_size
	.type	subtree_size, @function
subtree_size:
.LFB205:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movl	%esi, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%edi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L4676
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4676
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4677:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4677
.L4676:
	movq	$0, 20(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	movl	$0, 28(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 104
	xorl	%edi, %edi
	xorl	%esi, %esi
	pushq	$429
	.cfi_def_cfa_offset 112
	xorl	%r8d, %r8d
	pushq	$.LC150
	.cfi_def_cfa_offset 120
	pushq	$0
	.cfi_def_cfa_offset 128
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 96
	movl	$_loop.72, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.72+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L4714
.L4675:
	movl	40(%rdx), %ecx
	testl	%ecx, %ecx
	jle	.L4682
	movslq	%ebp, %rax
	leal	-1(%rcx), %r9d
	movq	24(%rdx), %r11
	movsd	.LC10(%rip), %xmm0
	leaq	8(,%rax,8), %r10
	movq	32(%rdx), %rax
	salq	$4, %r9
	leaq	16(%rax), %rcx
	addq	%rcx, %r9
	jmp	.L4681
	.p2align 4,,10
	.p2align 3
.L4715:
	addq	$16, %rcx
.L4681:
	movslq	8(%rax), %rsi
	movslq	(%rax), %r8
	movq	(%r11,%rsi,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %rdi
	movslq	4(%rax), %rsi
	movq	(%rdi,%r8,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	%xmm0, (%rax,%r10)
	movq	%rcx, %rax
	cmpq	%rcx, %r9
	jne	.L4715
.L4682:
	movq	boundaries(%rip), %rbx
	testq	%rbx, %rbx
	je	.L4680
.L4679:
	movq	(%rbx), %rdi
	addq	$8, %rbx
	testq	%rdi, %rdi
	je	.L4680
.L4684:
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L4679
	addq	$8, %rbx
	movl	16(%rdx), %edx
	leaq	20(%rsp), %rsi
	movl	%ebp, 20(%rsp)
	movl	$-1, 24(%rsp)
	call	*%rax
	movq	-8(%rbx), %rdi
	movq	grid(%rip), %rdx
	testq	%rdi, %rdi
	jne	.L4684
.L4680:
	movl	16(%rdx), %eax
	movl	%eax, %ebx
	subl	$1, %ebx
	js	.L4672
	movslq	%ebp, %rcx
	xorl	$1, %r13d
	leaq	8(,%rcx,8), %r12
	movslq	%ebx, %rcx
	leaq	0(,%rcx,8), %r15
	movzbl	%r13b, %ecx
	movl	%ecx, 12(%rsp)
	cmpl	%eax, %ebx
	jle	.L4686
	.p2align 4,,10
	.p2align 3
.L4690:
	movq	boundaries(%rip), %r13
	testq	%r13, %r13
	je	.L4688
.L4687:
	movq	0(%r13), %rdi
	addq	$8, %r13
	testq	%rdi, %rdi
	je	.L4688
.L4696:
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.L4687
	addq	$8, %r13
	movl	%ebp, 20(%rsp)
	movl	%ebx, %edx
	leaq	20(%rsp), %rsi
	movl	$-1, 24(%rsp)
	call	*%rax
	movq	-8(%r13), %rdi
	testq	%rdi, %rdi
	jne	.L4696
.L4688:
	subl	$1, %ebx
	subq	$8, %r15
	cmpl	$-1, %ebx
	je	.L4672
	movq	grid(%rip), %rdx
	movl	16(%rdx), %eax
	cmpl	%eax, %ebx
	jg	.L4690
.L4686:
	cmpb	$0, 128(%rdx)
	jne	.L4716
.L4689:
	movq	96(%rdx), %rax
	leaq	(%rax,%r15,2), %rcx
	movq	(%rcx), %rax
	movl	8(%rcx), %ecx
	testl	%ecx, %ecx
	jle	.L4690
	movq	24(%rdx), %rsi
	movq	(%rsi,%r15), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r9
	leal	1(%rbx), %edx
	movslq	%edx, %rdx
	leaq	(%rsi,%rdx,8), %r13
	leal	-1(%rcx), %edx
	leaq	8(%rax,%rdx,8), %r11
	jmp	.L4693
	.p2align 4,,10
	.p2align 3
.L4691:
	addq	$8, %rax
	cmpq	%r11, %rax
	je	.L4690
.L4693:
	movslq	(%rax), %rsi
	movslq	4(%rax), %rdi
	movq	%rsi, %rcx
	movq	(%r9,%rsi,8), %rsi
	movq	(%rsi,%rdi,8), %rsi
	testb	$2, (%rsi)
	jne	.L4691
	movq	0(%r13), %rsi
	pxor	%xmm0, %xmm0
	leal	-2(%rcx,%rcx), %ecx
	leal	-2(%rdi,%rdi), %edx
	cvtsi2sdl	12(%rsp), %xmm0
	movslq	%ecx, %rdi
	movq	%rax, (%rsp)
	movslq	%edx, %r10
	movq	(%rsi), %rsi
	salq	$3, %r10
	movq	16(%rsi), %rsi
	leaq	(%rsi,%rdi,8), %r14
	leal	1(%rdx), %esi
	xorl	%edi, %edi
	movslq	%esi, %rsi
	salq	$3, %rsi
.L4692:
	movq	(%r14,%rdi,8), %r8
	movq	(%r8,%r10), %rax
	movq	(%r8,%rsi), %r8
	addsd	(%rax,%r12), %xmm0
	addsd	(%r8,%r12), %xmm0
	cmpq	$1, %rdi
	jne	.L4698
	addl	$2, %ecx
	addl	$2, %edx
	movq	(%rsp), %rax
	sarl	%ecx
	sarl	%edx
	movslq	%ecx, %rcx
	movslq	%edx, %rdx
	movq	(%r9,%rcx,8), %rcx
	movq	(%rcx,%rdx,8), %rdx
	movsd	%xmm0, (%rdx,%r12)
	jmp	.L4691
	.p2align 4,,10
	.p2align 3
.L4698:
	movl	$1, %edi
	jmp	.L4692
	.p2align 4,,10
	.p2align 3
.L4672:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L4716:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L4689
.L4714:
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L4675
	.cfi_endproc
.LFE205:
	.size	subtree_size, .-subtree_size
	.p2align 4
	.globl	refine_cell
	.type	refine_cell, @function
refine_cell:
.LFB206:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movl	%esi, %r15d
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rdx, %r13
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	movl	%ecx, 32(%rsp)
	movq	%rax, %rcx
	movl	%eax, 80(%rsp)
	movslq	%esi, %rax
	leaq	0(,%rax,8), %rbx
	movl	%edi, 76(%rsp)
	movq	%rdi, 128(%rsp)
	movl	%esi, 136(%rsp)
	movq	%rax, 64(%rsp)
	movq	%rbx, (%rsp)
	movl	$0, 28(%rsp)
	testl	%esi, %esi
	jle	.L4718
	leal	2(%rdi), %edi
	addl	$2, %ecx
	leal	-1(%rsi), %esi
	movl	%r15d, 124(%rsp)
	movl	%edi, %edx
	leaq	-8(%rbx), %r10
	movl	$0, 8(%rsp)
	shrl	$31, %edx
	leal	(%rdi,%rdx), %eax
	andl	$1, %eax
	subl	%edx, %eax
	leal	-1(%rax,%rax), %r11d
	movl	%ecx, %eax
	shrl	$31, %eax
	movl	%r11d, 36(%rsp)
	leal	(%rcx,%rax), %edx
	andl	$1, %edx
	subl	%eax, %edx
	movl	%edi, %eax
	leal	-1(%rdx,%rdx), %r14d
	movl	%ecx, %edx
	shrl	$31, %eax
	shrl	$31, %edx
	addl	%edi, %eax
	leal	(%r14,%r14), %r12d
	addl	%ecx, %edx
	leal	(%r11,%r11), %ecx
	sarl	%eax
	sarl	%edx
	movl	%ecx, 56(%rsp)
	movl	%esi, %ecx
	movslq	%eax, %r9
	movl	%edx, %ebp
	movl	%edx, 60(%rsp)
	movl	$1, %edx
	salq	$3, %r9
	sall	%cl, %edx
	movq	%r9, %r15
	leal	1(%rdx), %ecx
	movl	%edx, 12(%rsp)
	movslq	%r11d, %rdx
	movl	%eax, %r11d
	movslq	%r14d, %rax
	movl	%ecx, 24(%rsp)
	movl	%esi, %ecx
	leaq	0(,%rdx,8), %rbx
	leaq	0(,%rax,8), %rdi
	movslq	%ebp, %rax
	movq	grid(%rip), %rdx
	movq	%rbx, 40(%rsp)
	salq	$3, %rax
	movq	%rdi, %r9
	movq	%rax, 48(%rsp)
	movl	$2, %eax
	sall	%cl, %eax
	movq	%rdx, %rcx
	movq	%r13, %rdx
	movl	%r11d, %r13d
	movl	%eax, 72(%rsp)
	movl	%r12d, %r11d
.L4719:
	movl	72(%rsp), %ebx
	movl	%r13d, %eax
	subl	12(%rsp), %eax
	xorl	%ebp, %ebp
	movl	%eax, 20(%rsp)
	movl	60(%rsp), %r12d
	addl	%eax, %ebx
	movl	%ebx, 16(%rsp)
	movq	48(%rsp), %rbx
.L4724:
	movq	24(%rcx), %rax
	movq	(%rax,%r10), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15), %rax
	movq	(%rax,%rbx), %rax
	movl	4(%rax), %edi
	testl	%edi, %edi
	js	.L4720
	testb	$2, (%rax)
	je	.L4720
	movl	16(%rsp), %ecx
	cmpl	$1, %r13d
	jle	.L4721
	movl	20(%rsp), %ecx
	cmpl	24(%rsp), %r13d
	cmovle	%r13d, %ecx
.L4721:
	cmpl	$1, %r12d
	jle	.L4744
	movl	%r12d, %eax
	subl	12(%rsp), %eax
	cmpl	24(%rsp), %r12d
	cmovle	%r12d, %eax
.L4723:
	movl	%ecx, 148(%rsp)
	movl	32(%rsp), %ecx
	movl	%eax, 152(%rsp)
	movq	148(%rsp), %rdi
	movl	%r11d, 120(%rsp)
	movq	%r9, 112(%rsp)
	movq	%r10, 104(%rsp)
	movl	%esi, 156(%rsp)
	movq	%r8, 96(%rsp)
	movq	%rdx, 88(%rsp)
	movl	%esi, 84(%rsp)
	call	refine_cell
	movq	grid(%rip), %rcx
	addl	%eax, 28(%rsp)
	movq	104(%rsp), %r10
	movzwl	32(%rsp), %esi
	movq	24(%rcx), %rax
	movl	120(%rsp), %r11d
	movq	112(%rsp), %r9
	movq	96(%rsp), %r8
	movq	(%rax,%r10), %rax
	movq	88(%rsp), %rdx
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15), %rax
	movq	(%rax,%rbx), %rax
	orw	%si, (%rax)
	movl	84(%rsp), %esi
	.p2align 4,,10
	.p2align 3
.L4720:
	addl	%r14d, %ebp
	addq	%r9, %rbx
	addl	%r14d, %r12d
	cmpl	%r11d, %ebp
	jne	.L4724
	movl	36(%rsp), %edi
	addq	40(%rsp), %r15
	addl	%edi, 8(%rsp)
	movl	8(%rsp), %eax
	addl	%edi, %r13d
	cmpl	56(%rsp), %eax
	jne	.L4719
	movl	124(%rsp), %r15d
	movq	%rdx, %r13
.L4718:
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	increment_neighbors
	movq	grid(%rip), %rax
	movslq	80(%rsp), %rsi
	movq	24(%rax), %rdx
	movq	64(%rsp), %rax
	leal	-2(%rsi,%rsi), %ebx
	movslq	%ebx, %r8
	movq	(%rdx,%rax,8), %rax
	salq	$3, %r8
	movq	(%rax), %rax
	movq	16(%rax), %rcx
	movslq	76(%rsp), %rax
	movq	%rax, %rdi
	movq	(%rcx,%rax,8), %rax
	leal	-2(%rdi,%rdi), %ebp
	movq	(%rax,%rsi,8), %rax
	movq	(%rsp), %rsi
	movq	8(%rdx,%rsi), %rdx
	movzwl	(%rax), %eax
	movslq	%ebp, %rsi
	movq	(%rdx), %rdx
	andl	$1, %eax
	addl	$2, %eax
	movq	16(%rdx), %rdx
	leaq	(%rdx,%rsi,8), %r9
	leal	1(%rbx), %edx
	xorl	%esi, %esi
	movslq	%edx, %rdx
	salq	$3, %rdx
.L4725:
	movq	(%r9,%rsi,8), %rdi
	movq	(%rdi,%r8), %r10
	movq	(%rdi,%rdx), %rdi
	orw	%ax, (%r10)
	orw	%ax, (%rdi)
	cmpq	$1, %rsi
	jne	.L4733
	addl	$2, %ebp
	addl	$2, %ebx
	sarl	%ebp
	sarl	%ebx
	movslq	%ebp, %rdx
	movslq	%ebx, %rax
	leaq	0(,%rdx,8), %r12
	movq	(%rcx,%rdx,8), %rdx
	leaq	0(,%rax,8), %r14
	movq	(%rdx,%rax,8), %rcx
	testq	%r13, %r13
	je	.L4726
	movl	0(%r13), %edx
	testl	%edx, %edx
	js	.L4726
	movl	%ebx, %eax
	movl	%r15d, %ebx
	movq	%r13, %r15
	movl	%eax, %r13d
	.p2align 4,,10
	.p2align 3
.L4729:
	movslq	%edx, %rax
	movl	4(%rcx), %edi
	leaq	(%rax,%rax,4), %rsi
	leaq	(%rax,%rsi,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	testl	%edi, %edi
	je	.L4727
	movl	56(%rax), %esi
	testl	%esi, %esi
	je	.L4728
.L4727:
	movl	%ebp, 128(%rsp)
	movl	%ebx, %esi
	movl	%r13d, 132(%rsp)
	movq	128(%rsp), %rdi
	movl	%ebx, 136(%rsp)
	call	*112(%rax)
	movq	grid(%rip), %rax
	movq	(%rsp), %rdi
	movq	24(%rax), %rax
	movq	(%rax,%rdi), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r12), %rax
	movq	(%rax,%r14), %rcx
.L4728:
	movl	4(%r15), %edx
	addq	$4, %r15
	testl	%edx, %edx
	jns	.L4729
.L4726:
	andw	$-3, (%rcx)
	movl	28(%rsp), %eax
	addq	$168, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4733:
	.cfi_restore_state
	movl	$1, %esi
	jmp	.L4725
	.p2align 4,,10
	.p2align 3
.L4744:
	movl	12(%rsp), %eax
	addl	%r12d, %eax
	jmp	.L4723
	.cfi_endproc
.LFE206:
	.size	refine_cell, .-refine_cell
	.p2align 4
	.type	refine_level, @function
refine_level:
.LFB210:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movl	%edi, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movabsq	$8589934592, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$344, %rsp
	.cfi_def_cfa_offset 400
	.p2align 4,,10
	.p2align 3
.L4757:
	movq	grid(%rip), %rdi
	movq	%r12, 16(%rsp)
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	movl	$2, %r10d
	movl	$2, %edx
	xorl	%ebp, %ebp
	movl	$0, 88(%rdi)
	movq	24(%rdi), %r8
	movq	$2, 24(%rsp)
	jmp	.L4756
	.p2align 4,,10
	.p2align 3
.L4777:
	cmpl	%edx, 4(%rax)
	jle	.L4746
	movq	16(%rax), %r15
	movslq	%edx, %r14
	leaq	0(,%r14,8), %r11
	movq	(%r15,%r14,8), %r14
	testq	%r14, %r14
	je	.L4746
	addq	8(%rax), %r11
	cmpl	%r10d, (%r11)
	jg	.L4746
	cmpl	%r10d, 4(%r11)
	jle	.L4746
	movslq	%r10d, %rax
	movq	(%r14,%rax,8), %rax
	testq	%rax, %rax
	je	.L4746
	cmpl	$2, %r9d
	je	.L4747
	jg	.L4748
	testl	%r9d, %r9d
	je	.L4749
	cmpl	$1, %r9d
	jne	.L4746
	movslq	%ecx, %rax
	addl	$1, %ecx
	leal	-2(%rdx,%rdx), %edx
	addl	$1, %esi
	salq	$4, %rax
	movl	$2, 28(%rsp,%rax)
	movslq	%ecx, %rax
	movq	%rax, %r9
	salq	$4, %r9
	movl	%edx, 20(%rsp,%r9)
	leal	-1(%r10,%r10), %edx
	movl	%esi, 16(%rsp,%r9)
	movl	%edx, 24(%rsp,%r9)
	movl	$0, 28(%rsp,%r9)
.L4753:
	xorl	%r9d, %r9d
	.p2align 4,,10
	.p2align 3
.L4758:
	salq	$4, %rax
	movl	16(%rsp,%rax), %esi
	movl	20(%rsp,%rax), %edx
	movl	24(%rsp,%rax), %r10d
.L4756:
	movslq	%esi, %rax
	leal	-1(%rcx), %ebx
	movq	(%r8,%rax,8), %rax
	movq	(%rax), %rax
	cmpl	%edx, (%rax)
	jle	.L4777
.L4746:
	cmpl	$-1, %ebx
	je	.L4755
	movq	grid(%rip), %rdi
.L4754:
	movslq	%ebx, %rax
	movq	24(%rdi), %r8
	movl	%ebx, %ecx
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	28(%rsp,%rdx), %r9d
	jmp	.L4758
	.p2align 4,,10
	.p2align 3
.L4748:
	cmpl	$3, %r9d
	jne	.L4746
	movslq	%ecx, %rax
	leal	-1(%rdx,%rdx), %edx
	addl	$1, %esi
	movl	%ecx, %ebx
	salq	$4, %rax
	movl	%edx, 20(%rsp,%rax)
	leal	-1(%r10,%r10), %edx
	movl	%esi, 16(%rsp,%rax)
	movl	%edx, 24(%rsp,%rax)
	movl	$0, 28(%rsp,%rax)
	jmp	.L4754
	.p2align 4,,10
	.p2align 3
.L4755:
	testl	%ebp, %ebp
	jne	.L4757
	addq	$344, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4749:
	.cfi_restore_state
	movzwl	(%rax), %r9d
	testb	$2, %r9b
	je	.L4752
	andl	$1, %r9d
	je	.L4746
	movl	4(%rax), %eax
	testl	%eax, %eax
	jne	.L4746
	cmpl	%esi, %r13d
	jle	.L4746
	movl	%edx, 4(%rsp)
	leaq	80(%rdi), %r8
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	movl	%r10d, 8(%rsp)
	movq	4(%rsp), %rdi
	addl	$1, %ebp
	movl	%esi, 12(%rsp)
	call	refine_cell
	jmp	.L4746
	.p2align 4,,10
	.p2align 3
.L4747:
	movslq	%ecx, %rax
	addl	$1, %ecx
	leal	-1(%rdx,%rdx), %edx
	addl	$1, %esi
	salq	$4, %rax
	movl	$3, 28(%rsp,%rax)
	movslq	%ecx, %rax
	movq	%rax, %r9
	salq	$4, %r9
	movl	%edx, 20(%rsp,%r9)
	leal	-2(%r10,%r10), %edx
	movl	%esi, 16(%rsp,%r9)
	movl	%edx, 24(%rsp,%r9)
	movl	$0, 28(%rsp,%r9)
	jmp	.L4753
	.p2align 4,,10
	.p2align 3
.L4752:
	cmpl	%esi, 16(%rdi)
	jle	.L4746
	movslq	%ecx, %rax
	addl	$1, %ecx
	leal	-2(%rdx,%rdx), %edx
	addl	$1, %esi
	salq	$4, %rax
	movl	$1, 28(%rsp,%rax)
	movslq	%ecx, %rax
	movq	%rax, %r9
	salq	$4, %r9
	movl	%edx, 20(%rsp,%r9)
	leal	-2(%r10,%r10), %edx
	movl	%esi, 16(%rsp,%r9)
	movl	%edx, 24(%rsp,%r9)
	movl	$0, 28(%rsp,%r9)
	jmp	.L4753
	.cfi_endproc
.LFE210:
	.size	refine_level, .-refine_level
	.section	.rodata.str1.8
	.align 8
.LC151:
	.string	"tree: N must be a power-of-two\n"
	.text
	.p2align 4
	.globl	init_grid
	.type	init_grid, @function
init_grid:
.LFB113:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movl	%edi, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$24, %rsp
	.cfi_def_cfa_offset 80
	cmpq	$0, grid(%rip)
	je	.L4779
	call	free_grid.part.0
.L4779:
	cmpl	$1, %r12d
	jle	.L4797
	testb	$1, %r12b
	jne	.L4781
	xorl	%r13d, %r13d
	jmp	.L4782
	.p2align 4,,10
	.p2align 3
.L4783:
	testb	$1, %r12b
	jne	.L4781
.L4782:
	sarl	%r12d
	addl	$1, %r13d
	cmpl	$1, %r12d
	jne	.L4783
	movl	%r13d, %ecx
	sall	%cl, %r12d
	movl	%r12d, 12(%rsp)
.L4780:
	movl	$136, %esi
	movl	$1, %edi
	call	calloc
	movl	$16, %edi
	movl	$0, 16(%rax)
	movq	%rax, %r14
	movq	%rax, grid(%rip)
	call	malloc
	movl	$32, %edi
	movq	$0, (%rax)
	movq	%rax, %rbx
	leaq	8(%rax), %rax
	movq	%rax, 24(%r14)
	call	malloc
	movl	$24, %esi
	movl	$1, %edi
	movl	$5, 24(%rax)
	movq	%rax, %rbp
	movq	$0, 8(%rax)
	call	calloc
	movl	Period(%rip), %edx
	movl	$5, %ecx
	movq	$0, 16(%rbp)
	movq	%rax, 0(%rbp)
	leal	(%rdx,%rdx), %r15d
	movq	%rbp, 8(%rbx)
	subl	%r15d, %ecx
	cmpl	%ecx, %r15d
	jge	.L4784
	movl	Period+4(%rip), %eax
	movl	$5, %r12d
	.p2align 4,,10
	.p2align 3
.L4787:
	leal	(%rax,%rax), %ebx
	movl	%r12d, %esi
	subl	%ebx, %esi
	cmpl	%esi, %ebx
	jge	.L4785
	.p2align 4,,10
	.p2align 3
.L4786:
	movq	datasize(%rip), %rax
	movl	$1, %edi
	leaq	8(%rax), %rsi
	call	calloc
	movq	0(%rbp), %rdi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movq	%rax, %r8
	movl	%r15d, %esi
	movl	$mem_assign, %r9d
	addl	$1, %ebx
	call	periodic_function
	movl	24(%rbp), %r12d
	movl	Period+4(%rip), %eax
	movl	%r12d, %edx
	leal	(%rax,%rax), %esi
	subl	%esi, %edx
	cmpl	%ebx, %edx
	jg	.L4786
	movl	Period(%rip), %edx
.L4785:
	leal	(%rdx,%rdx), %edi
	movl	%r12d, %esi
	addl	$1, %r15d
	subl	%edi, %esi
	cmpl	%r15d, %esi
	jg	.L4787
	movq	0(%rbp), %rax
.L4784:
	movq	16(%rax), %r11
	leal	-2(%rdx,%rdx), %esi
	movl	$1, %r10d
	movq	16(%r11), %rax
	movq	16(%rax), %rbp
	movl	%esi, %eax
	negl	%eax
	orw	$3, 0(%rbp)
	cmpl	%esi, %eax
	jl	.L4793
	movl	%r10d, %r9d
	subl	Period+4(%rip), %r9d
	subl	%esi, %r10d
	movl	$-4, %ebx
	negl	%r9d
	addl	%r9d, %r9d
	movl	%r9d, %edi
	negl	%edi
	.p2align 4,,10
	.p2align 3
.L4792:
	cmpl	%edi, %r9d
	jg	.L4796
	leal	2(%rsi), %eax
	cltq
	movq	(%r11,%rax,8), %r8
	movslq	%r9d, %rax
	jmp	.L4795
	.p2align 4,,10
	.p2align 3
.L4800:
	movl	$-3, %edx
	.p2align 4,,10
	.p2align 3
.L4794:
	movq	16(%r8,%rax,8), %rcx
	addq	$1, %rax
	movl	%edx, 4(%rcx)
	cmpl	%eax, %edi
	jl	.L4796
.L4795:
	movl	$-2, %edx
	testl	%esi, %esi
	js	.L4794
	movl	$-1, %edx
	jne	.L4794
	movl	%eax, %edx
	testl	%eax, %eax
	jg	.L4800
	cmovne	%ebx, %edx
	movq	16(%r8,%rax,8), %rcx
	addq	$1, %rax
	movl	%edx, 4(%rcx)
	cmpl	%eax, %edi
	jge	.L4795
	.p2align 4,,10
	.p2align 3
.L4796:
	addl	$1, %esi
	cmpl	%r10d, %esi
	jne	.L4792
.L4793:
	movl	$0, 4(%rbp)
	movl	$16, %esi
	movl	$1, %edi
	call	calloc
	movl	$16, %esi
	movl	$1, %edi
	movq	%rax, 96(%r14)
	call	calloc
	movl	$16, %esi
	movl	$1, %edi
	movq	%rax, 104(%r14)
	call	calloc
	movl	$16, %esi
	movl	$1, %edi
	movq	%rax, 112(%r14)
	call	calloc
	movl	$24, %esi
	movl	$1, %edi
	movb	$1, 128(%r14)
	movq	%rax, 120(%r14)
	movl	12(%rsp), %eax
	movl	%eax, N(%rip)
	call	calloc
	movq	$box_boundary_level, 8(%rax)
	movq	%rax, %rdi
	movq	$masked_boundary_restriction, 16(%rax)
	call	add_boundary
	movl	%r13d, %edi
	call	refine_level
	movq	all(%rip), %rdi
	pxor	%xmm0, %xmm0
	call	reset
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L4809
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L4809:
	.cfi_restore_state
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	update_cache_f
.L4797:
	.cfi_restore_state
	movl	$1, 12(%rsp)
	xorl	%r13d, %r13d
	jmp	.L4780
.L4781:
	movl	$.LC151, %edi
	movl	$31, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE113:
	.size	init_grid, .-init_grid
	.p2align 4
	.globl	coarsen_cell
	.type	coarsen_cell, @function
coarsen_cell:
.LFB207:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	movl	%edi, %ecx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leal	-2(%rcx,%rcx), %r13d
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rdx, %rbp
	movq	%rax, %rdx
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%esi, %rbx
	movslq	%edx, %r9
	leal	-2(%rdx,%rdx), %r12d
	movslq	%r13d, %rdx
	movq	%rbx, %r14
	subq	$40, %rsp
	.cfi_def_cfa_offset 96
	movq	grid(%rip), %rax
	movq	%rdi, 16(%rsp)
	movq	24(%rax), %rax
	movl	%ebx, 24(%rsp)
	movq	%rbx, 8(%rsp)
	movq	(%rax,%rbx,8), %rsi
	movq	8(%rax,%rbx,8), %rax
	movq	(%rsi), %rsi
	movq	(%rax), %rax
	movq	16(%rsi), %rdi
	movslq	%ecx, %rsi
	movq	16(%rax), %rax
	movq	(%rdi,%rsi,8), %rsi
	leaq	(%rax,%rdx,8), %r11
	leal	1(%r12), %edx
	movslq	%edx, %rdx
	movq	(%rsi,%r9,8), %rsi
	movslq	%r12d, %r9
	salq	$3, %rdx
	salq	$3, %r9
	movl	4(%rsi), %r10d
	xorl	%esi, %esi
.L4813:
	movq	(%r11,%rsi,8), %rcx
	movq	(%rcx,%r9), %rax
	cmpw	$0, 2(%rax)
	jne	.L4818
	movl	4(%rax), %eax
	movl	%eax, %ebx
	shrl	$31, %ebx
	cmpl	%eax, %r10d
	setne	%al
	andb	%bl, %al
	jne	.L4818
	movq	(%rcx,%rdx), %rcx
	cmpw	$0, 2(%rcx)
	jne	.L4810
	movl	4(%rcx), %ecx
	testl	%ecx, %ecx
	jns	.L4820
	cmpl	%r10d, %ecx
	jne	.L4810
.L4820:
	cmpq	$1, %rsi
	jne	.L4819
	addl	$2, %r13d
	addl	$2, %r12d
	sarl	%r13d
	sarl	%r12d
	testq	%rbp, %rbp
	je	.L4814
	movl	0(%rbp), %r15d
	testl	%r15d, %r15d
	js	.L4814
	.p2align 4,,10
	.p2align 3
.L4816:
	movslq	%r15d, %rax
	movl	%r13d, 16(%rsp)
	movl	%r14d, %esi
	leaq	(%rax,%rax,4), %rdx
	movl	%r12d, 20(%rsp)
	movq	16(%rsp), %rdi
	leaq	(%rax,%rdx,2), %rbx
	movq	_attribute(%rip), %rax
	movl	%r14d, 24(%rsp)
	movl	%r15d, %edx
	salq	$4, %rbx
	call	*104(%rax,%rbx)
	movq	_attribute(%rip), %rax
	movq	120(%rax,%rbx), %rax
	testq	%rax, %rax
	je	.L4815
	movq	16(%rsp), %rdi
	movl	24(%rsp), %esi
	movl	%r15d, %edx
	call	*%rax
.L4815:
	movl	4(%rbp), %r15d
	addq	$4, %rbp
	testl	%r15d, %r15d
	jns	.L4816
	movq	grid(%rip), %rax
	movq	8(%rsp), %rcx
	movq	24(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rdi
.L4814:
	movslq	%r13d, %rax
	movslq	%r12d, %rdx
	movl	%r13d, 16(%rsp)
	movl	%r14d, %esi
	movq	(%rdi,%rax,8), %rax
	movl	%r12d, 20(%rsp)
	movq	16(%rsp), %rdi
	movq	(%rax,%rdx,8), %rax
	orw	$2, (%rax)
	call	decrement_neighbors
	movl	$1, %eax
.L4810:
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4819:
	.cfi_restore_state
	movl	$1, %esi
	jmp	.L4813
	.p2align 4,,10
	.p2align 3
.L4818:
	xorl	%eax, %eax
	jmp	.L4810
	.cfi_endproc
.LFE207:
	.size	coarsen_cell, .-coarsen_cell
	.section	.rodata.str1.1
.LC152:
	.string	"coarsen_cell (point, list)"
	.text
	.p2align 4
	.globl	coarsen_cell_recursive
	.type	coarsen_cell_recursive, @function
coarsen_cell_recursive:
.LFB208:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %rax
	leal	-2(%rdi,%rdi), %r11d
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	shrq	$32, %rax
	movslq	%r11d, %r15
	leal	-1(%r11), %ecx
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	leal	-2(%rax,%rax), %r10d
	salq	$3, %r15
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%r10d, %rax
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	salq	$3, %rax
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movl	%esi, 32(%rsp)
	movl	%esi, 88(%rsp)
	addl	$1, %esi
	movslq	%esi, %r14
	movq	%rdi, 80(%rsp)
	movq	%rax, 8(%rsp)
	salq	$3, %r14
	leal	-1(%r10), %eax
	movl	%eax, 20(%rsp)
	movq	%r15, %rax
	movq	%r14, %r15
.L4836:
	leal	3(%rcx), %ebx
	movl	20(%rsp), %r13d
	movq	8(%rsp), %r12
	movl	%ebx, 16(%rsp)
.L4835:
	movq	grid(%rip), %rdi
	movq	24(%rdi), %rdi
	movq	(%rdi,%r15), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%rax), %r8
	movq	(%r8,%r12), %r8
	cmpw	$0, 2(%r8)
	jne	.L4843
.L4830:
	addq	$8, %r12
	leal	1(%r13), %edi
	cmpl	%r13d, %r10d
	jne	.L4838
	addq	$8, %rax
	leal	1(%rcx), %edi
	cmpl	%ecx, %r11d
	jne	.L4839
	leal	2(%r11), %eax
	movl	32(%rsp), %esi
	sarl	%eax
	movl	%eax, 80(%rsp)
	leal	2(%r10), %eax
	sarl	%eax
	movl	%eax, 84(%rsp)
	movq	80(%rsp), %rdi
	call	coarsen_cell
	testb	%al, %al
	je	.L4844
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4838:
	.cfi_restore_state
	movl	%edi, %r13d
	jmp	.L4835
	.p2align 4,,10
	.p2align 3
.L4839:
	movl	%edi, %ecx
	jmp	.L4836
	.p2align 4,,10
	.p2align 3
.L4843:
	leaq	-8(%r12), %rbx
	leal	3(%r13), %r9d
	movl	%r13d, %r8d
	movq	%rbx, 24(%rsp)
	movl	%r9d, %ebx
	leaq	-8(%rax), %r14
	movq	%r12, %r9
	movl	%ebx, %r13d
	movl	%ecx, %r12d
.L4834:
	movq	24(%rsp), %rbp
	movq	(%rdi,%r14), %rdi
	movl	%r8d, %ebx
	movq	(%rdi,%rbp), %rdi
	testb	$2, (%rdi)
	jne	.L4831
.L4845:
	cmpw	$0, 2(%rdi)
	je	.L4831
	movl	4(%rdi), %edi
	testl	%edi, %edi
	js	.L4831
	movl	%r12d, 80(%rsp)
	movl	%ebx, 84(%rsp)
	movq	80(%rsp), %rdi
	movq	%r9, 72(%rsp)
	movl	%r8d, 68(%rsp)
	movq	%rax, 56(%rsp)
	movl	%ecx, 64(%rsp)
	movl	%r10d, 52(%rsp)
	movl	%r11d, 48(%rsp)
	movl	%esi, 88(%rsp)
	movq	%rdx, 40(%rsp)
	movl	%esi, 36(%rsp)
	call	coarsen_cell_recursive
	movq	72(%rsp), %r9
	movl	68(%rsp), %r8d
	movq	56(%rsp), %rax
	movl	64(%rsp), %ecx
	movl	52(%rsp), %r10d
	movl	48(%rsp), %r11d
	movq	40(%rsp), %rdx
	movl	36(%rsp), %esi
	.p2align 4,,10
	.p2align 3
.L4831:
	addl	$1, %ebx
	addq	$8, %rbp
	cmpl	%ebx, %r13d
	je	.L4832
.L4846:
	movq	grid(%rip), %rdi
	movq	24(%rdi), %rdi
	movq	(%rdi,%r15), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%r14), %rdi
	movq	(%rdi,%rbp), %rdi
	testb	$2, (%rdi)
	je	.L4845
	addl	$1, %ebx
	addq	$8, %rbp
	cmpl	%ebx, %r13d
	jne	.L4846
.L4832:
	addl	$1, %r12d
	addq	$8, %r14
	cmpl	%r12d, 16(%rsp)
	je	.L4840
	movq	grid(%rip), %rdi
	movq	24(%rdi), %rdi
	movq	(%rdi,%r15), %rdi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	jmp	.L4834
	.p2align 4,,10
	.p2align 3
.L4840:
	movl	%r8d, %r13d
	movq	%r9, %r12
	jmp	.L4830
.L4844:
	movl	$.LC152, %edx
	movl	$148, %esi
	movl	$.LC104, %edi
	call	qassert
	.cfi_endproc
.LFE208:
	.size	coarsen_cell_recursive, .-coarsen_cell_recursive
	.p2align 4
	.globl	adapt_wavelet
	.type	adapt_wavelet, @function
adapt_wavelet:
.LFB209:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$488, %rsp
	.cfi_def_cfa_offset 544
	cmpl	$65535, cm(%rip)
	movl	560(%rsp), %eax
	movq	544(%rsp), %r13
	movl	564(%rsp), %ebx
	movl	%eax, 28(%rsp)
	movq	568(%rsp), %rax
	movq	%rax, 40(%rsp)
	jle	.L4848
	movq	all(%rip), %rbp
	testq	%rax, %rax
	je	.L4849
	cmpq	%rbp, %rax
	je	.L4850
	movq	%rax, 8(%rsp)
.L4851:
	movq	8(%rsp), %rdi
	movl	$175, %edx
	movl	$.LC104, %esi
	call	boundary_internal
	movq	%r13, %rdi
	call	*restriction(%rip)
	jmp	.L4853
.L4848:
	movq	40(%rsp), %rax
	testq	%rax, %rax
	je	.L4854
	cmpq	%rax, all(%rip)
	movq	%rax, 8(%rsp)
	leaq	160(%rsp), %rbp
	je	.L4854
.L4855:
	movq	8(%rsp), %rdi
	movl	$184, %edx
	movl	$.LC104, %esi
	call	boundary_internal
	movl	cm(%rip), %eax
	movq	%rbp, %rsi
	movq	%r13, %rdi
	movl	$-1, 164(%rsp)
	movl	%eax, 160(%rsp)
	call	list_concat
	movq	%rax, %rbp
	movq	%rax, %rdi
	call	*restriction(%rip)
	movq	%rbp, %rdi
	call	free
.L4853:
	movq	8(%rsp), %rbp
	xorl	%edi, %edi
	movq	%rdi, 32(%rsp)
	testq	%rbp, %rbp
	je	.L4864
	movl	0(%rbp), %esi
	testl	%esi, %esi
	js	.L4864
	.p2align 4,,10
	.p2align 3
.L4870:
	cmpl	$65535, %esi
	jg	.L4865
	movslq	%esi, %rdx
	leaq	(%rdx,%rdx,4), %rax
	leaq	(%rdx,%rax,2), %rdx
	salq	$4, %rdx
	addq	_attribute(%rip), %rdx
	cmpq	$no_restriction, 104(%rdx)
	je	.L4865
	testq	%rdi, %rdi
	je	.L4866
	movl	(%rdi), %eax
	testl	%eax, %eax
	js	.L4866
	cmpl	%esi, %eax
	je	.L4865
	movq	%rdi, %rdx
	jmp	.L4868
	.p2align 4,,10
	.p2align 3
.L4869:
	cmpl	%esi, %ecx
	je	.L4865
.L4868:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L4869
.L4866:
	call	list_append
	movq	%rax, %rdi
	.p2align 4,,10
	.p2align 3
.L4865:
	movl	4(%rbp), %esi
	addq	$4, %rbp
	testl	%esi, %esi
	jns	.L4870
	movq	%rdi, 32(%rsp)
.L4864:
	testl	%ebx, %ebx
	movl	$1, %eax
	movq	grid(%rip), %r11
	movl	$0, 16(%rsp)
	cmovg	%ebx, %eax
	movl	$2, %ecx
	xorl	%r8d, %r8d
	xorl	%r14d, %r14d
	movl	$0, 88(%r11)
	movq	24(%r11), %rsi
	xorl	%r15d, %r15d
	movq	%r11, %r12
	movq	$2, 168(%rsp)
	movl	%eax, %ebp
	movabsq	$8589934592, %rax
	movq	%rax, 160(%rsp)
	movl	$2, %eax
	jmp	.L4901
	.p2align 4,,10
	.p2align 3
.L5005:
	cmpl	%ecx, 4(%rdx)
	jle	.L4871
	movq	16(%rdx), %r11
	movslq	%ecx, %r10
	leaq	0(,%r10,8), %r9
	movq	(%r11,%r10,8), %r10
	testq	%r10, %r10
	je	.L4871
	addq	8(%rdx), %r9
	cmpl	%eax, (%r9)
	jg	.L4871
	cmpl	%eax, 4(%r9)
	jle	.L4871
	movslq	%eax, %rdx
	movq	(%r10,%rdx,8), %rdx
	testq	%rdx, %rdx
	je	.L4871
	cmpl	$2, %r8d
	je	.L4872
	jg	.L4873
	testl	%r8d, %r8d
	je	.L4874
	cmpl	$1, %r8d
	jne	.L4871
	movslq	%r15d, %rdx
	addl	$1, %r15d
	leal	-2(%rcx,%rcx), %ecx
	addl	$1, %r14d
	salq	$4, %rdx
	leal	-1(%rax,%rax), %eax
	movl	$2, 172(%rsp,%rdx)
	movslq	%r15d, %rdx
	movq	%rdx, %rdi
	salq	$4, %rdi
	movl	%r14d, 160(%rsp,%rdi)
	movl	%ecx, 164(%rsp,%rdi)
	movl	%eax, 168(%rsp,%rdi)
	movl	$0, 172(%rsp,%rdi)
.L4898:
	xorl	%r8d, %r8d
	.p2align 4,,10
	.p2align 3
.L4931:
	movq	%rdx, %rax
	salq	$4, %rax
	movl	160(%rsp,%rax), %r14d
	movl	164(%rsp,%rax), %ecx
	movl	168(%rsp,%rax), %eax
.L4901:
	movslq	%r14d, %rdx
	leal	-1(%r15), %ebx
	leaq	0(,%rdx,8), %rdi
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rdx), %rdx
	cmpl	%ecx, (%rdx)
	jle	.L5005
.L4871:
	cmpl	$-1, %ebx
	je	.L4900
.L4899:
	movslq	%ebx, %rax
	movq	24(%r12), %rsi
	movl	%ebx, %r15d
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	172(%rsp,%rdx), %r8d
	movq	%rax, %rdx
	jmp	.L4931
.L4854:
	movl	fm(%rip), %eax
	movl	cm(%rip), %esi
	movl	$-1, 172(%rsp)
	movl	%eax, 164(%rsp)
	movl	fm+4(%rip), %eax
	movl	%esi, 160(%rsp)
	movl	%eax, 168(%rsp)
	testl	%esi, %esi
	js	.L4936
	leaq	160(%rsp), %rbp
	xorl	%edi, %edi
	movq	%rbp, %r12
	.p2align 4,,10
	.p2align 3
.L4857:
	call	list_append
	movl	4(%r12), %esi
	addq	$4, %r12
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L4857
	movq	%rax, 8(%rsp)
.L4856:
	movq	all(%rip), %r12
	testq	%r12, %r12
	je	.L4855
	movl	(%r12), %esi
	testl	%esi, %esi
	js	.L4855
	movq	8(%rsp), %rdi
	.p2align 4,,10
	.p2align 3
.L4863:
	testq	%rdi, %rdi
	je	.L4859
	movl	(%rdi), %eax
	testl	%eax, %eax
	js	.L4859
	cmpl	%esi, %eax
	je	.L4860
	movq	%rdi, %rdx
	jmp	.L4861
	.p2align 4,,10
	.p2align 3
.L4862:
	cmpl	%esi, %ecx
	je	.L4860
.L4861:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L4862
.L4859:
	call	list_append
	movq	%rax, %rdi
.L4860:
	movl	4(%r12), %esi
	addq	$4, %r12
	testl	%esi, %esi
	jns	.L4863
	movq	%rdi, 8(%rsp)
	jmp	.L4855
.L4873:
	cmpl	$3, %r8d
	jne	.L4871
	movslq	%r15d, %rdx
	addl	$1, %r14d
	leal	-1(%rcx,%rcx), %ecx
	movl	%r15d, %ebx
	salq	$4, %rdx
	leal	-1(%rax,%rax), %eax
	movl	%r14d, 160(%rsp,%rdx)
	movl	%ecx, 164(%rsp,%rdx)
	movl	%eax, 168(%rsp,%rdx)
	movl	$0, 172(%rsp,%rdx)
	jmp	.L4899
	.p2align 4,,10
	.p2align 3
.L4900:
	movl	16(%r12), %esi
	movq	%r12, %r11
	testl	%esi, %esi
	js	.L4942
	movl	$0, 28(%rsp)
	movl	%esi, %r10d
	.p2align 4,,10
	.p2align 3
.L4923:
	movq	24(%r11), %rcx
	xorl	%edi, %edi
	movl	$2, %r13d
	xorl	%edx, %edx
	movabsq	$8589934592, %rax
	movl	$2, %ebp
	movq	$2, 168(%rsp)
	movq	%rax, 160(%rsp)
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L4921:
	movslq	%eax, %r12
	leal	-1(%rdx), %ebx
	movq	(%rcx,%r12,8), %rsi
	leaq	0(,%r12,8), %r15
	movq	(%rsi), %rsi
	cmpl	%ebp, (%rsi)
	jg	.L4903
	cmpl	%ebp, 4(%rsi)
	jle	.L4903
	movq	16(%rsi), %r9
	movslq	%ebp, %r14
	leaq	0(,%r14,8), %r8
	movq	(%r9,%r14,8), %r9
	testq	%r9, %r9
	je	.L4903
	addq	8(%rsi), %r8
	cmpl	%r13d, (%r8)
	jg	.L4903
	cmpl	%r13d, 4(%r8)
	jle	.L4903
	movslq	%r13d, %r8
	movq	(%r9,%r8,8), %rsi
	testq	%rsi, %rsi
	je	.L4903
	cmpl	$2, %edi
	je	.L4904
	jg	.L4905
	testl	%edi, %edi
	je	.L4906
	cmpl	$1, %edi
	jne	.L4903
	movslq	%edx, %rsi
	addl	$1, %edx
	addl	$1, %eax
	salq	$4, %rsi
	movl	$2, 172(%rsp,%rsi)
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	salq	$4, %rdi
	movl	%eax, 160(%rsp,%rdi)
	leal	-2(%rbp,%rbp), %eax
	movl	%eax, 164(%rsp,%rdi)
	leal	-1(%r13,%r13), %eax
	movl	%eax, 168(%rsp,%rdi)
	movl	$0, 172(%rsp,%rdi)
.L4918:
	xorl	%edi, %edi
	.p2align 4,,10
	.p2align 3
.L4929:
	salq	$4, %rsi
	movl	160(%rsp,%rsi), %eax
	movl	164(%rsp,%rsi), %ebp
	movl	168(%rsp,%rsi), %r13d
	jmp	.L4921
.L5006:
	testw	%r9w, %r9w
	je	.L4911
	testb	$32, %dil
	je	.L4913
	andl	$-33, %edi
	movw	%di, (%rsi)
	.p2align 4,,10
	.p2align 3
.L4903:
	cmpl	$-1, %ebx
	je	.L4920
.L4919:
	movslq	%ebx, %rsi
	movq	24(%r11), %rcx
	movl	%ebx, %edx
	movq	%rsi, %rax
	salq	$4, %rax
	movl	172(%rsp,%rax), %edi
	jmp	.L4929
	.p2align 4,,10
	.p2align 3
.L4905:
	cmpl	$3, %edi
	jne	.L4903
	movslq	%edx, %rcx
	addl	$1, %eax
	movl	%edx, %ebx
	salq	$4, %rcx
	movl	%eax, 160(%rsp,%rcx)
	leal	-1(%rbp,%rbp), %eax
	movl	%eax, 164(%rsp,%rcx)
	leal	-1(%r13,%r13), %eax
	movl	%eax, 168(%rsp,%rcx)
	movl	$0, 172(%rsp,%rcx)
	jmp	.L4919
	.p2align 4,,10
	.p2align 3
.L4920:
	subl	$1, %r10d
	jnb	.L4923
.L4930:
	movl	16(%rsp), %ebx
	orl	28(%rsp), %ebx
.L4902:
	movq	32(%rsp), %rdi
	call	free
	testl	%ebx, %ebx
	je	.L4924
	cmpq	$0, 8(%rsp)
	je	.L4926
	movq	8(%rsp), %rdx
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L4926
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L4927:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$1, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L4927
.L4926:
	movq	8(%rsp), %rdi
	movl	$1694, %edx
	movl	$.LC35, %esi
	call	boundary_internal
.L4924:
	movq	8(%rsp), %rax
	movq	40(%rsp), %rdi
	cmpq	%rdi, %rax
	je	.L4928
	movq	%rax, %rdi
	call	free
.L4928:
	movq	16(%rsp), %rdx
	movl	28(%rsp), %eax
	addq	$488, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	salq	$32, %rdx
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	orq	%rdx, %rax
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L4904:
	.cfi_restore_state
	movslq	%edx, %rsi
	addl	$1, %edx
	addl	$1, %eax
	salq	$4, %rsi
	movl	$3, 172(%rsp,%rsi)
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	salq	$4, %rdi
	movl	%eax, 160(%rsp,%rdi)
	leal	-1(%rbp,%rbp), %eax
	movl	%eax, 164(%rsp,%rdi)
	leal	-2(%r13,%r13), %eax
	movl	%eax, 168(%rsp,%rdi)
	movl	$0, 172(%rsp,%rdi)
	jmp	.L4918
	.p2align 4,,10
	.p2align 3
.L4906:
	movl	4(%rsi), %edi
	movl	%edi, 56(%rsp)
	testl	%edi, %edi
	js	.L4909
	movzwl	(%rsi), %edi
	movl	%edi, %r9d
	andl	$2, %r9d
	cmpl	%eax, %r10d
	je	.L5006
	testw	%r9w, %r9w
	jne	.L4903
.L4909:
	cmpl	%eax, 16(%r11)
	jle	.L4903
	movslq	%edx, %rsi
	addl	$1, %edx
	addl	$1, %eax
	salq	$4, %rsi
	movl	$1, 172(%rsp,%rsi)
	movslq	%edx, %rsi
	movq	%rsi, %rdi
	salq	$4, %rdi
	movl	%eax, 160(%rsp,%rdi)
	leal	-2(%rbp,%rbp), %eax
	movl	%eax, 164(%rsp,%rdi)
	leal	-2(%r13,%r13), %eax
	movl	%eax, 168(%rsp,%rdi)
	movl	$0, 172(%rsp,%rdi)
	jmp	.L4918
.L4872:
	movslq	%r15d, %rdx
	addl	$1, %r15d
	leal	-1(%rcx,%rcx), %ecx
	addl	$1, %r14d
	salq	$4, %rdx
	leal	-2(%rax,%rax), %eax
	movl	$3, 172(%rsp,%rdx)
	movslq	%r15d, %rdx
	movq	%rdx, %rdi
	salq	$4, %rdi
	movl	%r14d, 160(%rsp,%rdi)
	movl	%ecx, 164(%rsp,%rdi)
	movl	%eax, 168(%rsp,%rdi)
	movl	$0, 172(%rsp,%rdi)
	jmp	.L4898
.L4874:
	movzwl	(%rdx), %r8d
	testb	$1, %r8b
	je	.L4871
	testb	$2, %r8b
	jne	.L5007
	testb	$16, %r8b
	jne	.L5008
	movq	8(%rsi,%rdi), %rsi
	leal	1(%r14), %r10d
	movl	4(%rdx), %r9d
	movl	%r10d, 56(%rsp)
	leaq	8(%rdi), %r10
	movq	(%rsi), %rsi
	movq	%r10, 80(%rsp)
	movq	16(%rsi), %r11
	testl	%r9d, %r9d
	jne	.L5009
.L4879:
	testq	%r13, %r13
	jne	.L5010
.L4883:
	leal	-2(%rcx,%rcx), %edx
	leal	-2(%rax,%rax), %r10d
	xorl	%ecx, %ecx
	movslq	%edx, %rax
	leaq	(%r11,%rax,8), %r11
	movslq	%r10d, %rax
	salq	$3, %rax
	movq	%rax, 48(%rsp)
.L4897:
	movl	%edx, 60(%rsp)
	movq	48(%rsp), %r9
	xorl	%esi, %esi
	addq	(%r11,%rcx,8), %r9
.L4896:
	movq	(%r9,%rsi,8), %rdi
	movzwl	(%rdi), %eax
	testb	$2, %al
	jne	.L4891
	andb	$63, %al
	movl	56(%rsp), %edx
	movl	%eax, %r8d
	orl	$32, %r8d
	cmpl	%edx, 28(%rsp)
	cmovle	%r8d, %eax
	movw	%ax, (%rdi)
.L4893:
	cmpq	$1, %rsi
	jne	.L4940
	movl	60(%rsp), %edx
	cmpq	$1, %rcx
	jne	.L4941
	addl	$2, %edx
	leal	2(%r10), %eax
	movl	%edx, %ecx
	sarl	%eax
	sarl	%ecx
.L4932:
	cmpl	%r14d, 16(%r12)
	jle	.L4871
	movslq	%r15d, %rdx
	addl	$1, %r15d
	movl	56(%rsp), %edi
	salq	$4, %rdx
	movl	%ecx, 164(%rsp,%rdx)
	leal	-2(%rcx,%rcx), %ecx
	movl	%eax, 168(%rsp,%rdx)
	leal	-2(%rax,%rax), %eax
	movl	$1, 172(%rsp,%rdx)
	movslq	%r15d, %rdx
	movq	%rdx, %rsi
	salq	$4, %rsi
	movl	%edi, 160(%rsp,%rsi)
	movl	%ecx, 164(%rsp,%rsi)
	movl	%eax, 168(%rsp,%rsi)
	movl	$0, 172(%rsp,%rsi)
	movq	24(%r12), %rsi
	jmp	.L4898
.L4911:
	testb	$16, %dil
	je	.L4914
	andl	$-49, %edi
	movw	%di, (%rsi)
.L4913:
	testl	%r10d, %r10d
	je	.L4917
	movq	-8(%rcx,%r15), %rax
	addl	$2, %ebp
	addl	$2, %r13d
	movl	%ebp, %edx
	movq	(%rax), %rax
	shrl	$31, %edx
	addl	%ebp, %edx
	movq	16(%rax), %rcx
	movl	%r13d, %eax
	sarl	%edx
	shrl	$31, %eax
	movslq	%edx, %rdx
	addl	%r13d, %eax
	movq	(%rcx,%rdx,8), %rdx
	sarl	%eax
	cltq
	movq	(%rdx,%rax,8), %rdx
	movzwl	(%rdx), %eax
	testb	$32, %al
	je	.L4903
	andl	$-33, %eax
	movw	%ax, (%rdx)
	jmp	.L4903
.L4849:
	movq	$0, 8(%rsp)
	testq	%rbp, %rbp
	je	.L4851
.L4850:
	movl	0(%rbp), %esi
	testl	%esi, %esi
	js	.L4934
	xorl	%edi, %edi
	.p2align 4,,10
	.p2align 3
.L4852:
	call	list_append
	movl	4(%rbp), %esi
	addq	$4, %rbp
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L4852
	movq	%rax, 8(%rsp)
	jmp	.L4851
.L4942:
	movl	$0, 28(%rsp)
	movl	16(%rsp), %ebx
	jmp	.L4902
.L4917:
	cmpl	$-1, %ebx
	jne	.L4919
	jmp	.L4930
.L4914:
	testb	$32, %dil
	je	.L4913
	movl	56(%rsp), %eax
	testl	%eax, %eax
	je	.L5011
.L4915:
	andl	$-33, %edi
	movw	%di, (%rsi)
	jmp	.L4913
.L4936:
	movq	$0, 8(%rsp)
	leaq	160(%rsp), %rbp
	jmp	.L4856
.L5009:
	leal	-2(%rax,%rax), %esi
	leal	-2(%rcx,%rcx), %edx
	leal	1(%rsi), %eax
	movslq	%esi, %rcx
	cltq
	salq	$3, %rcx
	leaq	0(,%rax,8), %r9
	xorl	%eax, %eax
.L4881:
	leal	(%rax,%rdx), %edi
	movslq	%edi, %rdi
	movq	(%r11,%rdi,8), %rdi
	movq	(%rdi,%rcx), %r8
	movl	4(%r8), %r8d
	testl	%r8d, %r8d
	jne	.L5012
.L4880:
	leal	2(%rdx), %eax
	movl	$2, %edi
	cltd
	idivl	%edi
	movl	%eax, %ecx
	leal	2(%rsi), %eax
	cltd
	idivl	%edi
	jmp	.L4879
	.p2align 4,,10
	.p2align 3
.L5012:
	movq	(%rdi,%r9), %rdi
	movl	4(%rdi), %edi
	testl	%edi, %edi
	je	.L4880
	testl	%eax, %eax
	jne	.L5013
	movl	$1, %eax
	jmp	.L4881
.L5007:
	testb	$64, %r8b
	je	.L4871
	andl	$-65, %r8d
	movl	%ecx, 116(%rsp)
	movl	%r14d, %esi
	movl	$16, %ecx
	movw	%r8w, (%rdx)
	movq	32(%rsp), %rdx
	leaq	80(%r12), %r8
	movl	%eax, 120(%rsp)
	movq	116(%rsp), %rdi
	movl	%r14d, 124(%rsp)
	call	refine_cell
	addl	$1, 16(%rsp)
	movq	grid(%rip), %r12
	jmp	.L4871
.L4940:
	movl	$1, %esi
	jmp	.L4896
.L4891:
	movl	%eax, %r8d
	andb	$63, %r8b
	movl	%r8d, %edx
	movl	%eax, %r8d
	andb	$127, %r8b
	testb	$1, %al
	movl	%edx, %eax
	cmove	%eax, %r8d
	movw	%r8w, (%rdi)
	jmp	.L4893
.L5008:
	andl	$-65, %r8d
	movw	%r8w, (%rdx)
	jmp	.L4871
.L4934:
	movq	$0, 8(%rsp)
	jmp	.L4851
.L4941:
	movl	$1, %ecx
	jmp	.L4897
.L5010:
	movl	0(%r13), %r8d
	testl	%r8d, %r8d
	js	.L4883
	movq	552(%rsp), %rdi
	movl	56(%rsp), %edx
	movq	%r13, 48(%rsp)
	cmpl	%edx, 28(%rsp)
	movl	%ebx, 96(%rsp)
	movq	%rdi, 64(%rsp)
	movq	%r13, 88(%rsp)
	movl	%r15d, 100(%rsp)
	setg	60(%rsp)
	jmp	.L4890
	.p2align 4,,10
	.p2align 3
.L5016:
	movl	56(%rsp), %r8d
	cmpl	%r8d, 28(%rsp)
	jl	.L4886
.L4887:
	testb	$64, %al
	jne	.L4885
	andl	$-33, %eax
	orb	$-128, %al
	movw	%ax, (%rcx)
.L4885:
	addq	$8, %rdx
	movsd	%xmm2, (%rsi)
	cmpq	$16, %rdx
	jne	.L4888
	movq	104(%rsp), %r8
	addl	$2, %r15d
	addq	$16, %rdi
	addq	$8, %r8
	cmpl	$4, %r15d
	jne	.L4889
	addq	$4, 48(%rsp)
	movq	48(%rsp), %rdi
	leal	2(%r13), %ecx
	leal	2(%r12), %eax
	sarl	%ecx
	addq	$8, 64(%rsp)
	sarl	%eax
	movl	(%rdi), %r8d
	testl	%r8d, %r8d
	js	.L5014
.L4890:
	movq	64(%rsp), %rdi
	leal	-2(%rcx,%rcx), %edx
	leal	-2(%rax,%rax), %eax
	movslq	%r8d, %rsi
	movslq	%eax, %r10
	leaq	1(%rsi), %rcx
	movl	%r14d, 124(%rsp)
	xorl	%r15d, %r15d
	movsd	(%rdi), %xmm3
	movslq	%edx, %rdi
	leaq	0(,%rcx,8), %rbx
	movq	(%r11,%rdi,8), %r9
	movsd	%xmm3, 104(%rsp)
	movq	(%r9,%r10,8), %rdi
	movsd	(%rdi,%rcx,8), %xmm1
	leal	1(%rax), %edi
	addl	$2, %eax
	movslq	%edi, %rdi
	sarl	%eax
	movq	(%r9,%rdi,8), %r9
	movl	%eax, 120(%rsp)
	movl	%eax, %r12d
	movsd	%xmm1, 128(%rsp)
	leal	-2(%r12,%r12), %r12d
	movsd	(%r9,%rcx,8), %xmm1
	leal	1(%rdx), %r9d
	addl	$2, %edx
	movslq	%r9d, %r9
	sarl	%edx
	movsd	%xmm1, 136(%rsp)
	movq	(%r11,%r9,8), %r9
	movl	%edx, %r13d
	leaq	(%rsi,%rsi,4), %rdx
	movl	%r13d, 116(%rsp)
	leal	-2(%r13,%r13), %r13d
	movq	(%r9,%r10,8), %r10
	movq	(%r9,%rdi,8), %rdi
	leaq	(%rsi,%rdx,2), %r9
	movl	%r8d, %edx
	salq	$4, %r9
	addq	_attribute(%rip), %r9
	movl	%r14d, %esi
	movsd	(%r10,%rcx,8), %xmm1
	movsd	%xmm1, 144(%rsp)
	movsd	(%rdi,%rcx,8), %xmm1
	movq	116(%rsp), %rdi
	movsd	%xmm1, 152(%rsp)
	call	*96(%r9)
	movq	grid(%rip), %r10
	movq	80(%rsp), %rdi
	movq	.LC17(%rip), %xmm0
	movsd	104(%rsp), %xmm3
	movq	24(%r10), %rax
	movq	(%rax,%rdi), %rax
	leaq	128(%rsp), %rdi
	movq	(%rax), %rax
	movq	16(%rax), %r11
	movslq	%r13d, %rax
	leaq	(%r11,%rax,8), %r8
	movslq	%r12d, %rax
	salq	$3, %rax
	movq	%rax, 72(%rsp)
.L4889:
	movq	%r8, 104(%rsp)
	movq	72(%rsp), %r9
	xorl	%edx, %edx
	addq	(%r8), %r9
.L4888:
	movq	(%r9,%rdx), %rcx
	movsd	(%rdi,%rdx), %xmm2
	leaq	(%rcx,%rbx), %rsi
	movapd	%xmm2, %xmm1
	movzwl	(%rcx), %eax
	subsd	(%rsi), %xmm1
	andpd	%xmm0, %xmm1
	comisd	%xmm3, %xmm1
	jbe	.L4884
	cmpb	$0, 60(%rsp)
	jne	.L5015
.L4884:
	movapd	%xmm3, %xmm4
	divsd	.LC33(%rip), %xmm4
	comisd	%xmm1, %xmm4
	jb	.L5016
.L4886:
	testb	$-64, %al
	jne	.L4887
	cmpl	56(%rsp), %ebp
	jg	.L4885
	orl	$32, %eax
	movw	%ax, (%rcx)
	jmp	.L4885
.L5015:
	andl	$-33, %eax
	orl	$64, %eax
	movw	%ax, (%rcx)
	jmp	.L4885
.L5014:
	movl	96(%rsp), %ebx
	movq	88(%rsp), %r13
	movq	%r10, %r12
	movl	100(%rsp), %r15d
	jmp	.L4883
.L5011:
	movl	%ebp, 128(%rsp)
	movq	32(%rsp), %rdx
	movl	%r10d, %esi
	movl	%r13d, 132(%rsp)
	movq	128(%rsp), %rdi
	movq	%r8, 48(%rsp)
	movl	%r10d, 136(%rsp)
	movl	%r10d, 56(%rsp)
	call	coarsen_cell
	movl	56(%rsp), %r10d
	movq	48(%rsp), %r8
	testb	%al, %al
	je	.L5004
	addl	$1, 28(%rsp)
.L5004:
	movq	grid(%rip), %r11
	movq	24(%r11), %rcx
	movq	(%rcx,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r14,8), %rax
	movq	(%rax,%r8,8), %rsi
	movzwl	(%rsi), %edi
	jmp	.L4915
.L5013:
	leal	2(%rdx), %eax
	movl	$2, %edi
	cltd
	idivl	%edi
	movl	%eax, %ecx
	leal	2(%rsi), %eax
	cltd
	idivl	%edi
	jmp	.L4932
	.cfi_endproc
.LFE209:
	.size	adapt_wavelet, .-adapt_wavelet
	.p2align 4
	.globl	treex
	.type	treex, @function
treex:
.LFB221:
	.cfi_startproc
	movq	%rdi, %rax
	addl	$2, %edi
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	pxor	%xmm0, %xmm0
	movl	%edi, %edx
	shrq	$32, %rax
	shrl	$31, %edx
	addl	$2, %eax
	addl	%edi, %edx
	subq	$48, %rsp
	.cfi_def_cfa_offset 64
	sarl	%edx
	movl	%edx, 36(%rsp)
	movl	%eax, %edx
	shrl	$31, %edx
	addl	%eax, %edx
	sarl	%edx
	movl	%edx, 40(%rsp)
	testl	%esi, %esi
	je	.L5017
	movl	%edi, %edx
	movl	%esi, %ecx
	pxor	%xmm1, %xmm1
	movl	%eax, %esi
	shrl	$31, %edx
	shrl	$31, %esi
	addl	%edx, %edi
	addl	%esi, %eax
	andl	$1, %edi
	andl	$1, %eax
	subl	%edx, %edi
	subl	%esi, %eax
	leal	-2(,%rdi,4), %edx
	leal	-1(%rax,%rax), %esi
	movl	%edx, %eax
	subl	%esi, %eax
	cvtsi2sdl	%eax, %xmm1
	addl	$1, %eax
	cmpl	$2, %eax
	jbe	.L5024
.L5019:
	leal	-1(%rcx), %ebx
	movq	36(%rsp), %rdi
	movsd	%xmm1, 8(%rsp)
	movl	%ebx, %esi
	call	treex
	leal	(%rbx,%rbx), %ecx
	movl	$1, %eax
	pxor	%xmm3, %xmm3
	sall	%cl, %eax
	movsd	8(%rsp), %xmm1
	movapd	%xmm0, %xmm2
	cvtsi2sdl	%eax, %xmm3
	divsd	%xmm3, %xmm1
	movapd	%xmm1, %xmm0
	addsd	%xmm2, %xmm0
.L5017:
	addq	$48, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5024:
	.cfi_restore_state
	xorpd	.LC1(%rip), %xmm1
	jmp	.L5019
	.cfi_endproc
.LFE221:
	.size	treex, .-treex
	.p2align 4
	.globl	treey
	.type	treey, @function
treey:
.LFB222:
	.cfi_startproc
	movq	%rdi, %rax
	addl	$2, %edi
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	pxor	%xmm0, %xmm0
	shrq	$32, %rax
	movq	%rax, %rdx
	movl	%edi, %eax
	shrl	$31, %eax
	subq	$32, %rsp
	.cfi_def_cfa_offset 48
	addl	$2, %edx
	addl	%edi, %eax
	sarl	%eax
	movl	%eax, 20(%rsp)
	movl	%edx, %eax
	shrl	$31, %eax
	addl	%edx, %eax
	sarl	%eax
	movl	%eax, 24(%rsp)
	testl	%esi, %esi
	je	.L5025
	leal	-1(%rsi), %ebx
	movq	20(%rsp), %rdi
	movl	%ebx, %esi
	call	treey
	leal	(%rbx,%rbx), %ecx
	movl	$1, %eax
	pxor	%xmm2, %xmm2
	sall	%cl, %eax
	movapd	%xmm0, %xmm1
	movsd	.LC14(%rip), %xmm0
	cvtsi2sdl	%eax, %xmm2
	divsd	%xmm2, %xmm0
	addsd	%xmm1, %xmm0
.L5025:
	addq	$32, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE222:
	.size	treey, .-treey
	.section	.rodata.str1.1
.LC153:
	.string	"%g %g\n%g %g\n\n"
	.text
	.p2align 4
	.globl	output_tree
	.type	output_tree, @function
output_tree:
.LFB223:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rdi, %r9
	xorl	%ecx, %ecx
	xorl	%r15d, %r15d
	movabsq	$8589934592, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	xorl	%r10d, %r10d
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movl	$2, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	$2, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$440, %rsp
	.cfi_def_cfa_offset 496
	movq	grid(%rip), %rsi
	movq	$2, 120(%rsp)
	movq	%rax, 112(%rsp)
	movq	24(%rsi), %rax
	.p2align 4,,10
	.p2align 3
.L5047:
	movslq	%r15d, %rdx
	leal	-1(%r10), %ebx
	leaq	0(,%rdx,8), %rdi
	movq	(%rax,%rdx,8), %rdx
	movq	(%rdx), %rdx
	cmpl	%ebp, (%rdx)
	jg	.L5032
	cmpl	%ebp, 4(%rdx)
	jle	.L5032
	movq	16(%rdx), %r13
	movslq	%ebp, %r11
	leaq	0(,%r11,8), %r8
	movq	0(%r13,%r11,8), %r11
	testq	%r11, %r11
	je	.L5032
	addq	8(%rdx), %r8
	cmpl	%r12d, (%r8)
	jg	.L5032
	cmpl	%r12d, 4(%r8)
	jle	.L5032
	movslq	%r12d, %rdx
	movq	(%r11,%rdx,8), %rdx
	testq	%rdx, %rdx
	je	.L5032
	cmpl	$2, %ecx
	je	.L5033
	jg	.L5034
	testl	%ecx, %ecx
	je	.L5035
	cmpl	$1, %ecx
	jne	.L5032
	movslq	%r10d, %rdx
	addl	$1, %r10d
	leal	-2(%rbp,%rbp), %edi
	addl	$1, %r15d
	salq	$4, %rdx
	movl	$2, 124(%rsp,%rdx)
	movslq	%r10d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%edi, 116(%rsp,%rcx)
	leal	-1(%r12,%r12), %edi
	movl	%r15d, 112(%rsp,%rcx)
	movl	%edi, 120(%rsp,%rcx)
	movl	$0, 124(%rsp,%rcx)
.L5044:
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L5048:
	salq	$4, %rdx
	movl	112(%rsp,%rdx), %r15d
	movl	116(%rsp,%rdx), %ebp
	movl	120(%rsp,%rdx), %r12d
	jmp	.L5047
	.p2align 4,,10
	.p2align 3
.L5035:
	cmpw	$0, 2(%rdx)
	jne	.L5056
.L5038:
	cmpl	%r15d, 16(%rsi)
	jg	.L5057
	.p2align 4,,10
	.p2align 3
.L5032:
	cmpl	$-1, %ebx
	je	.L5031
.L5045:
	movslq	%ebx, %rdx
	movl	%ebx, %r10d
	movq	%rdx, %rax
	salq	$4, %rax
	movl	124(%rsp,%rax), %ecx
	movq	24(%rsi), %rax
	jmp	.L5048
	.p2align 4,,10
	.p2align 3
.L5034:
	cmpl	$3, %ecx
	jne	.L5032
	movslq	%r10d, %rax
	leal	-1(%rbp,%rbp), %edx
	addl	$1, %r15d
	movl	%r10d, %ebx
	salq	$4, %rax
	movl	%edx, 116(%rsp,%rax)
	leal	-1(%r12,%r12), %edx
	movl	%r15d, 112(%rsp,%rax)
	movl	%edx, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
	jmp	.L5045
	.p2align 4,,10
	.p2align 3
.L5031:
	addq	$440, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5033:
	.cfi_restore_state
	movslq	%r10d, %rdx
	addl	$1, %r10d
	leal	-1(%rbp,%rbp), %edi
	addl	$1, %r15d
	salq	$4, %rdx
	movl	$3, 124(%rsp,%rdx)
	movslq	%r10d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%edi, 116(%rsp,%rcx)
	leal	-2(%r12,%r12), %edi
	movl	%r15d, 112(%rsp,%rcx)
	movl	%edi, 120(%rsp,%rcx)
	movl	$0, 124(%rsp,%rcx)
	jmp	.L5044
	.p2align 4,,10
	.p2align 3
.L5057:
	movslq	%r10d, %rax
	addl	$1, %r10d
	leal	-2(%rbp,%rbp), %ecx
	addl	$1, %r15d
	salq	$4, %rax
	movslq	%r10d, %rdx
	movl	%ebp, 116(%rsp,%rax)
	movl	%r12d, 120(%rsp,%rax)
	movl	$1, 124(%rsp,%rax)
	movq	%rdx, %rax
	salq	$4, %rax
	movl	%ecx, 116(%rsp,%rax)
	leal	-2(%r12,%r12), %ecx
	movl	%r15d, 112(%rsp,%rax)
	movl	%ecx, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
	movq	24(%rsi), %rax
	jmp	.L5044
.L5056:
	leal	-2(%rbp,%rbp), %edx
	leal	-2(%r12,%r12), %r14d
	movq	%r9, 8(%rsp)
	leaq	8(%rdi), %r11
	leal	2(%rdx), %edi
	movl	%r14d, 20(%rsp)
	movslq	%edx, %rcx
	movl	%edi, 16(%rsp)
	movslq	%r14d, %rdi
	leal	2(%r14), %r12d
	leal	1(%r15), %r8d
	salq	$3, %rdi
	movl	%r10d, 72(%rsp)
	salq	$3, %rcx
	movl	%r12d, %r10d
	movq	%rdi, 24(%rsp)
	movq	%r11, %r12
	movl	%ebx, 76(%rsp)
	movl	%r8d, %ebx
.L5043:
	leal	2(%rdx), %edi
	movl	20(%rsp), %ebp
	movq	24(%rsp), %r13
	movl	%edi, %r9d
	shrl	$31, %r9d
	addl	%edi, %r9d
	sarl	%r9d
	movl	%r9d, %r14d
.L5041:
	movq	(%rax,%r12), %rax
	leal	2(%rbp), %r9d
	movl	%ebx, 108(%rsp)
	movl	%r9d, %edi
	movl	%r14d, 100(%rsp)
	movq	(%rax), %rax
	shrl	$31, %edi
	addl	%r9d, %edi
	movq	16(%rax), %rax
	sarl	%edi
	movl	%edi, 104(%rsp)
	movq	(%rax,%rcx), %rax
	movq	(%rax,%r13), %rax
	movl	4(%rax), %eax
	testl	%eax, %eax
	je	.L5058
.L5039:
	addl	$1, %ebp
	addq	$8, %r13
	cmpl	%ebp, %r10d
	je	.L5040
	movq	24(%rsi), %rax
	jmp	.L5041
	.p2align 4,,10
	.p2align 3
.L5040:
	addl	$1, %edx
	addq	$8, %rcx
	cmpl	%edx, 16(%rsp)
	je	.L5042
	movq	24(%rsi), %rax
	jmp	.L5043
.L5058:
	movl	%edx, 88(%rsp)
	movl	%ebx, %esi
	movl	%ebp, 92(%rsp)
	movq	88(%rsp), %r9
	movq	%rcx, 56(%rsp)
	movq	%r9, %rdi
	movl	%edx, 64(%rsp)
	movl	%r10d, 68(%rsp)
	movl	%ebx, 96(%rsp)
	call	treey
	movq	%r9, %rdi
	movl	%ebx, %esi
	movsd	%xmm0, 48(%rsp)
	call	treex
	movq	100(%rsp), %r9
	movl	%r15d, %esi
	movl	%r15d, 108(%rsp)
	movsd	%xmm0, 40(%rsp)
	movq	%r9, %rdi
	call	treey
	movq	%r9, %rdi
	movl	%r15d, %esi
	movsd	%xmm0, 32(%rsp)
	call	treex
	movsd	48(%rsp), %xmm3
	movsd	40(%rsp), %xmm2
	movl	$.LC153, %esi
	movsd	32(%rsp), %xmm1
	movq	8(%rsp), %rdi
	movl	$4, %eax
	call	fprintf
	movq	grid(%rip), %rsi
	movl	68(%rsp), %r10d
	movq	56(%rsp), %rcx
	movl	64(%rsp), %edx
	jmp	.L5039
.L5042:
	movl	16(%rsp), %ebp
	movl	%r10d, %r12d
	movl	76(%rsp), %ebx
	movq	8(%rsp), %r9
	movl	72(%rsp), %r10d
	sarl	%r12d
	sarl	%ebp
	jmp	.L5038
	.cfi_endproc
.LFE223:
	.size	output_tree, .-output_tree
	.section	.rodata.str1.1
.LC154:
	.string	"cell.pid >= 0"
	.section	.rodata.str1.8
	.align 8
.LC155:
	.string	"is_active(cell) || is_prolongation(cell)"
	.section	.rodata.str1.1
.LC156:
	.string	"cell.neighbors == neighbors"
.LC157:
	.string	"!allocated_child(0)"
.LC158:
	.string	"nactive == reachable"
.LC159:
	.string	"nleaves == reachable"
	.text
	.p2align 4
	.globl	tree_check
	.type	tree_check, @function
tree_check:
.LFB224:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	$2, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movl	%edx, %ecx
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$424, %rsp
	.cfi_def_cfa_offset 480
	movl	Period(%rip), %eax
	subl	%eax, %ecx
	leal	(%rcx,%rcx), %edi
	movl	%edi, 80(%rsp)
	movq	grid(%rip), %rdi
	movq	%rdi, 48(%rsp)
	movq	24(%rdi), %r15
	cmpl	%ecx, %eax
	jg	.L5112
	movq	$0, 64(%rsp)
	leal	(%rax,%rax), %esi
	movl	Period+4(%rip), %eax
	movl	%esi, 56(%rsp)
	subl	%eax, %edx
	leal	(%rax,%rax), %edi
	movl	%eax, 84(%rsp)
	leal	(%rdx,%rdx), %eax
	movl	%edi, 88(%rsp)
	movl	%edx, 92(%rsp)
	movl	%eax, 60(%rsp)
	movq	$0, 72(%rsp)
.L5085:
	movl	92(%rsp), %esi
	cmpl	%esi, 84(%rsp)
	jg	.L5061
	movl	88(%rsp), %eax
	movl	%eax, 32(%rsp)
	.p2align 4,,10
	.p2align 3
.L5084:
	movl	32(%rsp), %eax
	movl	56(%rsp), %r11d
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	movl	$0, 96(%rsp)
	xorl	%r14d, %r14d
	movl	%r11d, 100(%rsp)
	movl	%eax, %r9d
	movl	%eax, 104(%rsp)
	movl	$0, 108(%rsp)
	jmp	.L5083
	.p2align 4,,10
	.p2align 3
.L5158:
	movl	4(%r10), %ecx
	cmpl	%r11d, %ecx
	jle	.L5062
	movq	16(%r10), %r8
	movslq	%r11d, %rbx
	leaq	0(,%rbx,8), %rsi
	movq	(%r8,%rbx,8), %rbx
	testq	%rbx, %rbx
	je	.L5062
	movq	8(%r10), %r10
	leaq	(%r10,%rsi), %rbp
	cmpl	%r9d, 0(%rbp)
	jg	.L5062
	cmpl	%r9d, 4(%rbp)
	jle	.L5062
	movslq	%r9d, %rbp
	movq	(%rbx,%rbp,8), %rbx
	movq	%rbx, 8(%rsp)
	testq	%rbx, %rbx
	je	.L5062
	cmpl	$2, %r13d
	je	.L5063
	jg	.L5064
	testl	%r13d, %r13d
	je	.L5065
	cmpl	$1, %r13d
	jne	.L5062
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-2(%r11,%r11), %ecx
	addl	$1, %r12d
	salq	$4, %rax
	movl	$2, 108(%rsp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 100(%rsp,%rdx)
	leal	-1(%r9,%r9), %ecx
	movl	%r12d, 96(%rsp,%rdx)
	movl	%ecx, 104(%rsp,%rdx)
	movl	$0, 108(%rsp,%rdx)
.L5080:
	xorl	%r13d, %r13d
	.p2align 4,,10
	.p2align 3
.L5111:
	salq	$4, %rax
	movl	96(%rsp,%rax), %r12d
	movl	100(%rsp,%rax), %r11d
	movl	104(%rsp,%rax), %r9d
.L5083:
	movslq	%r12d, %rdx
	leal	-1(%r14), %eax
	leaq	0(,%rdx,8), %rdi
	movq	(%r15,%rdx,8), %rdx
	movq	(%rdx), %r10
	movl	(%r10), %edx
	cmpl	%r11d, %edx
	jle	.L5158
.L5062:
	cmpl	$-1, %eax
	je	.L5082
.L5081:
	movslq	%eax, %rdx
	movl	%eax, %r14d
	movq	%rdx, %rcx
	movq	%rdx, %rax
	salq	$4, %rcx
	movl	108(%rsp,%rcx), %r13d
	jmp	.L5111
	.p2align 4,,10
	.p2align 3
.L5064:
	cmpl	$3, %r13d
	jne	.L5062
	movslq	%r14d, %rax
	leal	-1(%r11,%r11), %edx
	addl	$1, %r12d
	salq	$4, %rax
	movl	%edx, 100(%rsp,%rax)
	leal	-1(%r9,%r9), %edx
	movl	%r12d, 96(%rsp,%rax)
	movl	%edx, 104(%rsp,%rax)
	movl	$0, 108(%rsp,%rax)
	movl	%r14d, %eax
	jmp	.L5081
	.p2align 4,,10
	.p2align 3
.L5065:
	movq	8(%rsp), %rbx
	movzwl	(%rbx), %ebp
	movl	4(%rbx), %ebx
	movl	%ebx, 20(%rsp)
	movl	%ebp, %ebx
	andw	$2, %bx
	movw	%bx, 24(%rsp)
	je	.L5068
	movl	20(%rsp), %ebx
	testl	%ebx, %ebx
	js	.L5159
	addq	$1, 72(%rsp)
.L5068:
	movl	20(%rsp), %ebx
	andl	$1, %ebp
	testl	%ebx, %ebx
	jne	.L5070
	testw	%bp, %bp
	jne	.L5071
	cmpw	$0, 24(%rsp)
	jne	.L5072
	movq	8(%rsp), %rbx
	movzwl	2(%rbx), %ebx
	movw	%bx, 38(%rsp)
	testw	%bx, %bx
	jne	.L5072
.L5073:
	leal	-1(%r11), %ebx
	leaq	24(%rsi), %r11
	movl	%r14d, 40(%rsp)
	movq	%rdi, %r14
	movq	%r11, 24(%rsp)
	leal	-1(%r9), %r11d
	leal	2(%r9), %ebp
	movl	%ebx, 44(%rsp)
	movl	%r11d, 20(%rsp)
.L5076:
	cmpl	%ebx, %edx
	movl	%eax, 8(%rsp)
	setle	%r9b
	cmpl	%ebx, %ecx
	setg	%dil
	andl	%edi, %r9d
	movl	20(%rsp), %edi
.L5075:
	testb	%r9b, %r9b
	jne	.L5160
.L5074:
	addl	$1, %edi
	cmpl	%edi, %ebp
	jne	.L5075
	movl	8(%rsp), %eax
	addl	$1, %ebx
	addq	$8, %rsi
	cmpq	%rsi, 24(%rsp)
	jne	.L5076
	movzwl	38(%rsp), %edx
	movq	%r14, %rdi
	movl	40(%rsp), %r14d
	cmpl	%r13d, %edx
	jne	.L5161
	movq	48(%rsp), %rsi
	cmpw	$0, 38(%rsp)
	movl	16(%rsi), %edx
	jne	.L5078
	cmpl	%edx, %r12d
	jge	.L5062
	movq	8(%r15,%rdi), %rdx
	movl	44(%rsp), %eax
	movq	(%rdx), %rdx
	addl	%eax, %eax
	cmpl	(%rdx), %eax
	jl	.L5079
	cmpl	4(%rdx), %eax
	jge	.L5079
	movq	16(%rdx), %rsi
	cltq
	leaq	0(,%rax,8), %rcx
	movq	(%rsi,%rax,8), %rsi
	testq	%rsi, %rsi
	je	.L5079
	movl	20(%rsp), %eax
	addq	8(%rdx), %rcx
	addl	%eax, %eax
	cmpl	(%rcx), %eax
	jl	.L5079
	cmpl	4(%rcx), %eax
	jge	.L5079
	cltq
	cmpq	$0, (%rsi,%rax,8)
	jne	.L5162
	.p2align 4,,10
	.p2align 3
.L5079:
	movslq	%r14d, %rax
	addl	$1, %r14d
	movl	44(%rsp), %edx
	addl	$1, %r12d
	salq	$4, %rax
	movl	$1, 108(%rsp,%rax)
	movslq	%r14d, %rax
	addl	%edx, %edx
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edx, 100(%rsp,%rcx)
	movl	20(%rsp), %edx
	movl	%r12d, 96(%rsp,%rcx)
	addl	%edx, %edx
	movl	$0, 108(%rsp,%rcx)
	movl	%edx, 104(%rsp,%rcx)
	jmp	.L5080
	.p2align 4,,10
	.p2align 3
.L5160:
	movq	-8(%r8,%rsi), %rax
	testq	%rax, %rax
	je	.L5074
	cmpl	-8(%r10,%rsi), %edi
	jl	.L5074
	cmpl	-4(%r10,%rsi), %edi
	jge	.L5074
	movslq	%edi, %r11
	movq	(%rax,%r11,8), %r11
	testq	%r11, %r11
	je	.L5074
	testb	$2, (%r11)
	jne	.L5074
	cmpw	$0, 2(%r11)
	je	.L5074
	cmpl	$-2147483648, 4(%r11)
	adcl	$0, %r13d
	jmp	.L5074
	.p2align 4,,10
	.p2align 3
.L5063:
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-1(%r11,%r11), %ecx
	addl	$1, %r12d
	salq	$4, %rax
	movl	$3, 108(%rsp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, 100(%rsp,%rdx)
	leal	-2(%r9,%r9), %ecx
	movl	%r12d, 96(%rsp,%rdx)
	movl	%ecx, 104(%rsp,%rdx)
	movl	$0, 108(%rsp,%rdx)
	jmp	.L5080
	.p2align 4,,10
	.p2align 3
.L5082:
	addl	$1, 32(%rsp)
	movl	32(%rsp), %eax
	cmpl	60(%rsp), %eax
	jle	.L5084
.L5061:
	addl	$1, 56(%rsp)
	movl	56(%rsp), %eax
	cmpl	%eax, 80(%rsp)
	jge	.L5085
.L5060:
	xorl	%r11d, %r11d
	movl	$2, %edi
	movl	$2, %esi
	xorl	%r10d, %r10d
	movq	$2, 104(%rsp)
	xorl	%r9d, %r9d
	movabsq	$8589934592, %rax
	movq	%rax, 96(%rsp)
	xorl	%eax, %eax
.L5095:
	movslq	%eax, %rdx
	leal	-1(%r10), %r8d
	movq	(%r15,%rdx,8), %rdx
	movq	(%rdx), %rcx
	cmpl	%esi, (%rcx)
	jg	.L5086
	cmpl	%esi, 4(%rcx)
	jle	.L5086
	movq	16(%rcx), %rbp
	movslq	%esi, %rbx
	leaq	0(,%rbx,8), %rdx
	movq	0(%rbp,%rbx,8), %rbx
	testq	%rbx, %rbx
	je	.L5086
	addq	8(%rcx), %rdx
	cmpl	%edi, (%rdx)
	jg	.L5086
	cmpl	%edi, 4(%rdx)
	jle	.L5086
	movslq	%edi, %rdx
	movq	(%rbx,%rdx,8), %rdx
	testq	%rdx, %rdx
	je	.L5086
	cmpl	$2, %r11d
	je	.L5087
	jg	.L5088
	testl	%r11d, %r11d
	je	.L5089
	cmpl	$1, %r11d
	jne	.L5086
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$2, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-2(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-1(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
.L5092:
	xorl	%r11d, %r11d
	jmp	.L5110
	.p2align 4,,10
	.p2align 3
.L5078:
	cmpl	%edx, %r12d
	jl	.L5079
	jmp	.L5062
.L5070:
	testw	%bp, %bp
	je	.L5157
.L5071:
	addq	$1, 64(%rsp)
.L5157:
	movq	8(%rsp), %rbx
	movzwl	2(%rbx), %ebx
	movw	%bx, 38(%rsp)
	jmp	.L5073
.L5088:
	cmpl	$3, %r11d
	je	.L5091
.L5086:
	cmpl	$-1, %r8d
	je	.L5094
.L5093:
	movslq	%r8d, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	movl	108(%rsp,%rax), %r11d
.L5110:
	salq	$4, %rdx
	movl	%r8d, %r10d
	movl	96(%rsp,%rdx), %eax
	movl	100(%rsp,%rdx), %esi
	movl	104(%rsp,%rdx), %edi
	jmp	.L5095
.L5094:
	cmpq	64(%rsp), %r9
	jne	.L5163
	xorl	%r11d, %r11d
	movl	$2, %edi
	movl	$2, %esi
	xorl	%r10d, %r10d
	movq	$2, 104(%rsp)
	xorl	%r9d, %r9d
	movabsq	$8589934592, %rax
	movq	%rax, 96(%rsp)
	xorl	%eax, %eax
.L5107:
	movslq	%eax, %rdx
	leal	-1(%r10), %r8d
	movq	(%r15,%rdx,8), %rdx
	movq	(%rdx), %rcx
	cmpl	%esi, (%rcx)
	jg	.L5097
	cmpl	%esi, 4(%rcx)
	jle	.L5097
	movq	16(%rcx), %rbp
	movslq	%esi, %rbx
	leaq	0(,%rbx,8), %rdx
	movq	0(%rbp,%rbx,8), %rbx
	testq	%rbx, %rbx
	je	.L5097
	addq	8(%rcx), %rdx
	cmpl	%edi, (%rdx)
	jg	.L5097
	cmpl	%edi, 4(%rdx)
	jle	.L5097
	movslq	%edi, %rdx
	movq	(%rbx,%rdx,8), %rdx
	testq	%rdx, %rdx
	je	.L5097
	cmpl	$2, %r11d
	je	.L5098
	jg	.L5099
	testl	%r11d, %r11d
	je	.L5100
	cmpl	$1, %r11d
	jne	.L5097
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$2, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-2(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-1(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
.L5104:
	xorl	%r11d, %r11d
	jmp	.L5109
.L5099:
	cmpl	$3, %r11d
	je	.L5102
.L5097:
	cmpl	$-1, %r8d
	je	.L5106
.L5105:
	movslq	%r8d, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	movl	108(%rsp,%rax), %r11d
.L5109:
	salq	$4, %rdx
	movl	%r8d, %r10d
	movl	96(%rsp,%rdx), %eax
	movl	100(%rsp,%rdx), %esi
	movl	104(%rsp,%rdx), %edi
	jmp	.L5107
.L5106:
	cmpq	72(%rsp), %r9
	jne	.L5164
	addq	$424, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L5072:
	.cfi_restore_state
	movl	$.LC155, %edx
	movl	$762, %esi
	movl	$.LC104, %edi
	call	qassert
.L5161:
	movl	$.LC156, %edx
	movl	$770, %esi
	movl	$.LC104, %edi
	call	qassert
.L5159:
	movl	$.LC154, %edx
	movl	$758, %esi
	movl	$.LC104, %edi
	call	qassert
.L5100:
	testb	$2, (%rdx)
	jne	.L5165
	movq	48(%rsp), %rbx
	cmpl	%eax, 16(%rbx)
	jle	.L5097
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$1, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-2(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-2(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
	jmp	.L5104
.L5102:
	movslq	%r10d, %rdx
	addl	$1, %eax
	movl	%r10d, %r8d
	salq	$4, %rdx
	movl	%eax, 96(%rsp,%rdx)
	leal	-1(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rdx)
	leal	-1(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rdx)
	movl	$0, 108(%rsp,%rdx)
	jmp	.L5105
.L5098:
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$3, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-1(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-2(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
	jmp	.L5104
.L5089:
	testb	$1, (%rdx)
	je	.L5086
	movq	48(%rsp), %rbx
	addq	$1, %r9
	cmpl	%eax, 16(%rbx)
	jle	.L5086
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$1, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-2(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-2(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
	jmp	.L5092
.L5091:
	movslq	%r10d, %rdx
	addl	$1, %eax
	movl	%r10d, %r8d
	salq	$4, %rdx
	movl	%eax, 96(%rsp,%rdx)
	leal	-1(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rdx)
	leal	-1(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rdx)
	movl	$0, 108(%rsp,%rdx)
	jmp	.L5093
.L5087:
	movslq	%r10d, %rdx
	leal	1(%r10), %r8d
	addl	$1, %eax
	salq	$4, %rdx
	movl	$3, 108(%rsp,%rdx)
	movslq	%r8d, %rdx
	movq	%rdx, %rcx
	salq	$4, %rcx
	movl	%eax, 96(%rsp,%rcx)
	leal	-1(%rsi,%rsi), %eax
	movl	%eax, 100(%rsp,%rcx)
	leal	-2(%rdi,%rdi), %eax
	movl	%eax, 104(%rsp,%rcx)
	movl	$0, 108(%rsp,%rcx)
	jmp	.L5092
.L5112:
	movq	$0, 64(%rsp)
	movq	$0, 72(%rsp)
	jmp	.L5060
.L5163:
	movl	$.LC158, %edx
	movl	$785, %esi
	movl	$.LC104, %edi
	call	qassert
.L5164:
	movl	$.LC159, %edx
	movl	$794, %esi
	movl	$.LC104, %edi
	call	qassert
	.p2align 4,,10
	.p2align 3
.L5165:
	addq	$1, %r9
	jmp	.L5097
.L5162:
	movl	$.LC157, %edx
	movl	$774, %esi
	movl	$.LC104, %edi
	call	qassert
	.cfi_endproc
.LFE224:
	.size	tree_check, .-tree_check
	.p2align 4
	.globl	tree_methods
	.type	tree_methods, @function
tree_methods:
.LFB226:
	.cfi_startproc
	movq	$cartesian_init_vector, init_vector(%rip)
	movq	$cartesian_init_tensor, init_tensor(%rip)
	movq	$multigrid_debug, debug(%rip)
	movq	$tree_init_scalar, init_scalar(%rip)
	movq	$tree_init_vertex_scalar, init_vertex_scalar(%rip)
	movq	$tree_init_face_vector, init_face_vector(%rip)
	movq	$tree_boundary_level, boundary_level(%rip)
	movq	$halo_face, boundary_face(%rip)
	movq	$tree_restriction, restriction(%rip)
	ret
	.cfi_endproc
.LFE226:
	.size	tree_methods, .-tree_methods
	.section	.rodata.str1.1
.LC160:
	.string	"/root/mnt/basilisk/src/run.h"
.LC161:
	.string	"defaults"
.LC162:
	.string	"default_display"
.LC163:
	.string	"init"
.LC164:
	.string	"/root/mnt/basilisk/src/vof.h"
.LC165:
	.string	"logfile"
.LC166:
	.string	"output_field_bolla"
.LC167:
	.string	"output_field_fuori"
.LC168:
	.string	"interface"
.LC169:
	.string	"snapshot"
.LC170:
	.string	"velocity_grid_x"
.LC171:
	.string	"velocity_grid_y"
.LC172:
	.string	"pressure_grid"
.LC173:
	.string	"vorticity_grid"
.LC174:
	.string	"zerof"
.LC175:
	.string	"unityf"
.LC176:
	.string	"unity"
.LC177:
	.string	"zeroc"
.LC178:
	.string	"cleanup"
.LC179:
	.string	"p"
.LC180:
	.string	"u"
.LC181:
	.string	"pf"
.LC182:
	.string	"uf"
.LC183:
	.string	"set_dtmax"
.LC184:
	.string	"vof"
.LC185:
	.string	"tracer_advection"
.LC186:
	.string	"tracer_diffusion"
.LC187:
	.string	"advection_term"
.LC188:
	.string	"viscous_term"
.LC189:
	.string	"acceleration"
.LC190:
	.string	"projection"
.LC191:
	.string	"end_timestep"
.LC192:
	.string	"adapt"
.LC193:
	.string	"f"
.LC194:
	.string	"alphav"
.LC195:
	.string	"rhov"
	.text
	.p2align 4
	.type	_init_solver, @function
_init_solver:
.LFB447:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	xorl	%eax, %eax
	xorl	%ebx, %ebx
	subq	$4432, %rsp
	.cfi_def_cfa_offset 4448
	movq	$96, datasize(%rip)
	call	init_solver
	xorl	%eax, %eax
	leaq	64(%rsp), %rdi
	movl	$14, %ecx
	call	tree_methods
	movq	%rbx, %rax
	rep stosq
	movl	$1, 68(%rsp)
	movq	$defaults, 72(%rsp)
	movq	$defaults_expr0, 80(%rsp)
	movq	$.LC160, 120(%rsp)
	movl	$42, 128(%rsp)
	movq	$.LC161, 136(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	168(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	288(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 292(%rsp)
	movq	$defaults_0, 296(%rsp)
	movq	$defaults_0_expr0, 304(%rsp)
	movq	$.LC147, 344(%rsp)
	movl	$126, 352(%rsp)
	movq	$.LC161, 360(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	280(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	400(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 404(%rsp)
	movq	$default_display, 408(%rsp)
	movq	$default_display_expr0, 416(%rsp)
	movq	$.LC147, 456(%rsp)
	movl	$179, 464(%rsp)
	movq	$.LC162, 472(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	392(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	512(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 516(%rsp)
	movq	$init, 520(%rsp)
	movq	$init_expr0, 528(%rsp)
	movq	$.LC147, 568(%rsp)
	movl	$188, 576(%rsp)
	movq	$.LC163, 584(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	504(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	624(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 628(%rsp)
	movq	$defaults_1, 632(%rsp)
	movq	$defaults_1_expr0, 640(%rsp)
	movq	$.LC164, 680(%rsp)
	movl	$107, 688(%rsp)
	movq	$.LC161, 696(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	616(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	736(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 740(%rsp)
	movq	$defaults_2, 744(%rsp)
	movq	$defaults_2_expr0, 752(%rsp)
	movq	$.LC164, 792(%rsp)
	movl	$127, 800(%rsp)
	movq	$.LC161, 808(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	728(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	848(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 852(%rsp)
	movq	$defaults_3, 856(%rsp)
	movq	$defaults_3_expr0, 864(%rsp)
	movq	$.LC146, 904(%rsp)
	movl	$25, 912(%rsp)
	movq	$.LC161, 920(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	840(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	960(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 964(%rsp)
	movq	$defaults_4, 968(%rsp)
	movq	$defaults_4_expr0, 976(%rsp)
	movq	$.LC145, 1016(%rsp)
	movl	$30, 1024(%rsp)
	movq	$.LC161, 1032(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	952(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1072(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 1076(%rsp)
	movq	$init_0, 1080(%rsp)
	movq	$init_0_expr0, 1088(%rsp)
	movq	$.LC133, 1128(%rsp)
	movl	$88, 1136(%rsp)
	movq	$.LC163, 1144(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1064(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1184(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 1188(%rsp)
	movq	$logfile, 1192(%rsp)
	movq	$logfile_expr0, 1200(%rsp)
	movq	$.LC133, 1240(%rsp)
	movl	$158, 1248(%rsp)
	movq	$.LC165, 1256(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1176(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1296(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$3, 1300(%rsp)
	movq	$output_field_bolla, 1304(%rsp)
	movq	$output_field_bolla_expr0, 1312(%rsp)
	movq	$output_field_bolla_expr1, 1320(%rsp)
	movq	$output_field_bolla_expr2, 1328(%rsp)
	movq	$.LC133, 1352(%rsp)
	movl	$202, 1360(%rsp)
	movq	$.LC166, 1368(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1288(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1408(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$3, 1412(%rsp)
	movq	$output_field_fuori, 1416(%rsp)
	movq	$output_field_fuori_expr0, 1424(%rsp)
	movq	$output_field_fuori_expr1, 1432(%rsp)
	movq	$output_field_fuori_expr2, 1440(%rsp)
	movq	$.LC133, 1464(%rsp)
	movl	$236, 1472(%rsp)
	movq	$.LC167, 1480(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1400(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1520(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$3, 1524(%rsp)
	movq	$interface, 1528(%rsp)
	movq	$interface_expr0, 1536(%rsp)
	movq	$interface_expr1, 1544(%rsp)
	movq	$interface_expr2, 1552(%rsp)
	movq	$.LC133, 1576(%rsp)
	movl	$290, 1584(%rsp)
	movq	$.LC168, 1592(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1512(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1632(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$2, 1636(%rsp)
	movq	$snapshot, 1640(%rsp)
	movq	$snapshot_expr0, 1648(%rsp)
	movq	$snapshot_expr1, 1656(%rsp)
	movq	$.LC133, 1688(%rsp)
	movl	$322, 1696(%rsp)
	movq	$.LC169, 1704(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1624(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1744(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 1748(%rsp)
	movq	$velocity_grid_x, 1752(%rsp)
	movq	$velocity_grid_x_expr0, 1760(%rsp)
	movq	$.LC133, 1800(%rsp)
	movl	$401, 1808(%rsp)
	movq	$.LC170, 1816(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1736(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1856(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 1860(%rsp)
	movq	$velocity_grid_y, 1864(%rsp)
	movq	$velocity_grid_y_expr0, 1872(%rsp)
	movq	$.LC133, 1912(%rsp)
	movl	$417, 1920(%rsp)
	movq	$.LC171, 1928(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1848(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	1968(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 1972(%rsp)
	movq	$pressure_grid, 1976(%rsp)
	movq	$pressure_grid_expr0, 1984(%rsp)
	movq	$.LC133, 2024(%rsp)
	movl	$433, 2032(%rsp)
	movq	$.LC172, 2040(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	1960(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	movq	%rbx, %rax
	movl	$14, %ecx
	leaq	2080(%rsp), %rdi
	rep stosq
	movl	$1, 2084(%rsp)
	movq	$vorticity_grid, 2088(%rsp)
	movq	$vorticity_grid_expr0, 2096(%rsp)
	movq	$.LC133, 2136(%rsp)
	movl	$449, 2144(%rsp)
	movq	$.LC173, 2152(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2072(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	movl	$.LC174, %esi
	movq	$0x000000000, 112(%rsp)
	movabsq	$281479271743488, %rdi
	movq	$0x000000000, 120(%rsp)
	movq	$0x000000000, 128(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	movq	%rsp, %rdx
	call	init_const_vector
	leaq	32(%rsp), %rdx
	movl	$.LC175, %esi
	movsd	.LC10(%rip), %xmm0
	movabsq	$281487861678082, %rdi
	movsd	%xmm0, 32(%rsp)
	movsd	%xmm0, 40(%rsp)
	movsd	%xmm0, 48(%rsp)
	call	init_const_vector
	movl	$.LC176, %esi
	movl	$65540, %edi
	movq	.LC10(%rip), %rax
	movq	%rax, %xmm0
	call	init_const_scalar
	pxor	%xmm0, %xmm0
	movl	$.LC177, %esi
	movl	$65541, %edi
	call	init_const_scalar
	leaq	2080(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2084(%rsp)
	movq	$cleanup, 2088(%rsp)
	movq	$cleanup_expr0, 2096(%rsp)
	movq	$.LC160, 2136(%rsp)
	movl	$50, 2144(%rsp)
	movq	$.LC178, 2152(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2184(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	xorl	%edi, %edi
	movl	$.LC179, %esi
	call	*init_scalar(%rip)
	movl	$.LC180, %esi
	movabsq	$8589934593, %rdi
	call	*init_vector(%rip)
	movl	$.LC140, %esi
	movabsq	$17179869187, %rdi
	call	*init_vector(%rip)
	movl	$.LC181, %esi
	movl	$5, %edi
	call	*init_scalar(%rip)
	movl	$.LC182, %esi
	movabsq	$30064771078, %rdi
	call	*init_face_vector(%rip)
	leaq	2192(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2196(%rsp)
	movq	$set_dtmax, 2200(%rsp)
	movq	$set_dtmax_expr0, 2208(%rsp)
	movq	$.LC147, 2248(%rsp)
	movl	$214, 2256(%rsp)
	movq	$.LC183, 2264(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2296(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2416(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2420(%rsp)
	movq	$stability, 2424(%rsp)
	movq	$stability_expr0, 2432(%rsp)
	movq	$.LC147, 2472(%rsp)
	movl	$216, 2480(%rsp)
	movq	$.LC148, 2488(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2408(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2528(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2532(%rsp)
	movq	$vof, 2536(%rsp)
	movq	$vof_expr0, 2544(%rsp)
	movq	$.LC147, 2584(%rsp)
	movl	$226, 2592(%rsp)
	movq	$.LC184, 2600(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2520(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2640(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2644(%rsp)
	movq	$tracer_advection, 2648(%rsp)
	movq	$tracer_advection_expr0, 2656(%rsp)
	movq	$.LC147, 2696(%rsp)
	movl	$227, 2704(%rsp)
	movq	$.LC185, 2712(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2632(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2752(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2756(%rsp)
	movq	$tracer_diffusion, 2760(%rsp)
	movq	$tracer_diffusion_expr0, 2768(%rsp)
	movq	$.LC147, 2808(%rsp)
	movl	$228, 2816(%rsp)
	movq	$.LC186, 2824(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2744(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2864(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2868(%rsp)
	movq	$properties, 2872(%rsp)
	movq	$properties_expr0, 2880(%rsp)
	movq	$.LC147, 2920(%rsp)
	movl	$235, 2928(%rsp)
	movq	$.LC86, 2936(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2856(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	2976(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 2980(%rsp)
	movq	$advection_term, 2984(%rsp)
	movq	$advection_term_expr0, 2992(%rsp)
	movq	$.LC147, 3032(%rsp)
	movl	$308, 3040(%rsp)
	movq	$.LC187, 3048(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	2968(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3088(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3092(%rsp)
	movq	$viscous_term, 3096(%rsp)
	movq	$viscous_term_expr0, 3104(%rsp)
	movq	$.LC147, 3144(%rsp)
	movl	$337, 3152(%rsp)
	movq	$.LC188, 3160(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3080(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3200(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3204(%rsp)
	movq	$acceleration, 3208(%rsp)
	movq	$acceleration_expr0, 3216(%rsp)
	movq	$.LC147, 3256(%rsp)
	movl	$373, 3264(%rsp)
	movq	$.LC189, 3272(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3192(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3312(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3316(%rsp)
	movq	$projection, 3320(%rsp)
	movq	$projection_expr0, 3328(%rsp)
	movq	$.LC147, 3368(%rsp)
	movl	$413, 3376(%rsp)
	movq	$.LC190, 3384(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3304(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3424(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3428(%rsp)
	movq	$end_timestep, 3432(%rsp)
	movq	$end_timestep_expr0, 3440(%rsp)
	movq	$.LC147, 3480(%rsp)
	movl	$428, 3488(%rsp)
	movq	$.LC191, 3496(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3416(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3536(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3540(%rsp)
	movq	$adapt, 3544(%rsp)
	movq	$adapt_expr0, 3552(%rsp)
	movq	$.LC147, 3592(%rsp)
	movl	$438, 3600(%rsp)
	movq	$.LC192, 3608(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3528(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3648(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3652(%rsp)
	movq	$stability_0, 3656(%rsp)
	movq	$stability_0_expr0, 3664(%rsp)
	movq	$.LC164, 3704(%rsp)
	movl	$140, 3712(%rsp)
	movq	$.LC148, 3720(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3640(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	movq	%rbx, %rax
	movl	$14, %ecx
	leaq	3760(%rsp), %rdi
	rep stosq
	movl	$1, 3764(%rsp)
	movq	$vof_0, 3768(%rsp)
	movq	$vof_0_expr0, 3776(%rsp)
	movq	$.LC164, 3816(%rsp)
	movl	$364, 3824(%rsp)
	movq	$.LC184, 3832(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3752(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	movl	$.LC193, %esi
	movl	$8, %edi
	call	*init_scalar(%rip)
	movl	$.LC194, %esi
	movabsq	$42949672969, %rdi
	call	*init_face_vector(%rip)
	movl	$.LC195, %esi
	movl	$11, %edi
	call	*init_scalar(%rip)
	leaq	3760(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3764(%rsp)
	movq	$tracer_advection_0, 3768(%rsp)
	movq	$tracer_advection_0_expr0, 3776(%rsp)
	movq	$.LC146, 3816(%rsp)
	movl	$64, 3824(%rsp)
	movq	$.LC185, 3832(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3864(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	3984(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 3988(%rsp)
	movq	$properties_0, 3992(%rsp)
	movq	$properties_0_expr0, 4000(%rsp)
	movq	$.LC146, 4040(%rsp)
	movl	$95, 4048(%rsp)
	movq	$.LC86, 4056(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	3976(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	4096(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 4100(%rsp)
	movq	$acceleration_0, 4104(%rsp)
	movq	$acceleration_0_expr0, 4112(%rsp)
	movq	$.LC145, 4152(%rsp)
	movl	$43, 4160(%rsp)
	movq	$.LC189, 4168(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	4088(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	4208(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 4212(%rsp)
	movq	$stability_1, 4216(%rsp)
	movq	$stability_1_expr0, 4224(%rsp)
	movq	$.LC131, 4264(%rsp)
	movl	$36, 4272(%rsp)
	movq	$.LC148, 4280(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	4200(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	leaq	4320(%rsp), %rdi
	movq	%rbx, %rax
	movl	$14, %ecx
	rep stosq
	movl	$1, 4324(%rsp)
	movq	$acceleration_1, 4328(%rsp)
	movq	$acceleration_1_expr0, 4336(%rsp)
	movq	$.LC131, 4376(%rsp)
	movl	$72, 4384(%rsp)
	movq	$.LC189, 4392(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	4312(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	movq	%rbx, %rax
	movl	$14, %ecx
	leaq	4432(%rsp), %rdi
	rep stosq
	movl	$1, 4436(%rsp)
	movq	$acceleration_2, 4440(%rsp)
	movq	$acceleration_2_expr0, 4448(%rsp)
	movq	$.LC133, 4488(%rsp)
	movl	$104, 4496(%rsp)
	movq	$.LC189, 4504(%rsp)
	addq	$112, %rsp
	.cfi_def_cfa_offset 4448
	pushq	$0
	.cfi_def_cfa_offset 4456
	pushq	$0
	.cfi_def_cfa_offset 4464
	pushq	$0
	.cfi_def_cfa_offset 4472
	pushq	$0
	.cfi_def_cfa_offset 4480
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4488
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4496
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4504
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4512
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4520
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4528
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4536
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4544
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4552
	pushq	4424(%rsp)
	.cfi_def_cfa_offset 4560
	call	event_register
	movslq	p(%rip), %rax
	movl	$5, %edi
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	$_boundary0, (%rcx)
	movq	$_boundary0_homogeneous, (%rdx)
	movq	$_boundary1, 8(%rcx)
	movq	$_boundary1_homogeneous, 8(%rdx)
	movq	$_boundary2, 16(%rcx)
	movq	$_boundary2_homogeneous, 16(%rdx)
	movl	$1, 88(%rax)
	movslq	u+4(%rip), %rax
	movq	$_boundary3, 24(%rcx)
	movq	$_boundary3_homogeneous, 24(%rdx)
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	$_boundary4, (%rcx)
	movq	$_boundary4_homogeneous, (%rdx)
	movl	$1, 88(%rax)
	movslq	uf(%rip), %rax
	movq	$_boundary5, 8(%rcx)
	movq	$_boundary5_homogeneous, 8(%rdx)
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	(%rax), %rcx
	movq	8(%rax), %rdx
	movq	$_boundary6, 24(%rcx)
	movq	$_boundary6, 24(%rdx)
	movl	$1, 88(%rax)
	movabsq	$9218868437227405313, %rax
	movq	$_boundary7, 16(%rcx)
	movq	%rax, undefined(%rip)
	movq	$_boundary7, 16(%rdx)
	addq	$4544, %rsp
	.cfi_def_cfa_offset 16
	popq	%rbx
	.cfi_def_cfa_offset 8
	jmp	feenableexcept
	.cfi_endproc
.LFE447:
	.size	_init_solver, .-_init_solver
	.p2align 4
	.globl	tree_periodic
	.type	tree_periodic, @function
tree_periodic:
.LFB227:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movl	%edi, %ebx
	subq	$8, %rsp
	.cfi_def_cfa_offset 32
	movq	grid(%rip), %rax
	testq	%rax, %rax
	je	.L5170
	movl	16(%rax), %ebp
	call	free_grid.part.0
	cmpl	$3, %ebx
	jg	.L5173
	movl	%ebx, %r11d
	shrl	$31, %r11d
	addl	%ebx, %r11d
	movl	%r11d, %ebx
	andl	$-2, %r11d
	movl	%r11d, %edi
	sarl	%ebx
	call	periodic_boundary
	movslq	%ebx, %rbx
	leal	1(%r11), %edi
	call	periodic_boundary
	movl	$1, Period(,%rbx,4)
	testl	%ebp, %ebp
	js	.L5169
	movl	%ebp, %ecx
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movl	$1, %edi
	popq	%rbx
	.cfi_def_cfa_offset 16
	sall	%cl, %edi
	popq	%rbp
	.cfi_def_cfa_offset 8
	jmp	init_grid
	.p2align 4,,10
	.p2align 3
.L5170:
	.cfi_restore_state
	cmpl	$3, %edi
	jg	.L5173
	movl	%ebx, %r11d
	shrl	$31, %r11d
	addl	%ebx, %r11d
	movl	%r11d, %ebx
	andl	$-2, %r11d
	movl	%r11d, %edi
	sarl	%ebx
	call	periodic_boundary
	movslq	%ebx, %rbx
	leal	1(%r11), %edi
	call	periodic_boundary
	movl	$1, Period(,%rbx,4)
.L5169:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
.L5173:
	.cfi_restore_state
	movl	$.LC126, %edx
	movl	$898, %esi
	movl	$.LC89, %edi
	call	qassert
	.cfi_endproc
.LFE227:
	.size	tree_periodic, .-tree_periodic
	.p2align 4
	.globl	mpi_boundary_refine
	.type	mpi_boundary_refine, @function
mpi_boundary_refine:
.LFB228:
	.cfi_startproc
	ret
	.cfi_endproc
.LFE228:
	.size	mpi_boundary_refine, .-mpi_boundary_refine
	.p2align 4
	.globl	mpi_boundary_coarsen
	.type	mpi_boundary_coarsen, @function
mpi_boundary_coarsen:
.LFB229:
	.cfi_startproc
	ret
	.cfi_endproc
.LFE229:
	.size	mpi_boundary_coarsen, .-mpi_boundary_coarsen
	.p2align 4
	.globl	mpi_boundary_update
	.type	mpi_boundary_update, @function
mpi_boundary_update:
.LFB230:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L5180
	movslq	(%rdi), %rax
	testl	%eax, %eax
	js	.L5180
	movq	_attribute(%rip), %rsi
	movq	%rdi, %rdx
	.p2align 4,,10
	.p2align 3
.L5181:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$1, 88(%rsi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5181
.L5180:
	movl	$1694, %edx
	movl	$.LC35, %esi
	jmp	boundary_internal
	.cfi_endproc
.LFE230:
	.size	mpi_boundary_update, .-mpi_boundary_update
	.p2align 4
	.globl	quadtree_methods
	.type	quadtree_methods, @function
quadtree_methods:
.LFB231:
	.cfi_startproc
	movq	$cartesian_init_vector, init_vector(%rip)
	movq	$cartesian_init_tensor, init_tensor(%rip)
	movq	$multigrid_debug, debug(%rip)
	movq	$tree_init_scalar, init_scalar(%rip)
	movq	$tree_init_vertex_scalar, init_vertex_scalar(%rip)
	movq	$tree_init_face_vector, init_face_vector(%rip)
	movq	$tree_boundary_level, boundary_level(%rip)
	movq	$halo_face, boundary_face(%rip)
	movq	$tree_restriction, restriction(%rip)
	ret
	.cfi_endproc
.LFE231:
	.size	quadtree_methods, .-quadtree_methods
	.p2align 4
	.globl	update_perf
	.type	update_perf, @function
update_perf:
.LFB232:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	xorl	%esi, %esi
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$24, %rsp
	.cfi_def_cfa_offset 48
	movq	grid(%rip), %rax
	movq	perf+40(%rip), %rbx
	movq	%rsp, %rdi
	movq	perf+48(%rip), %rbp
	movq	(%rax), %rdx
	movq	8(%rax), %rax
	addq	%rdx, perf(%rip)
	addq	%rax, perf+8(%rip)
	call	gettimeofday
	movq	8(%rsp), %rax
	pxor	%xmm0, %xmm0
	pxor	%xmm1, %xmm1
	subq	%rbp, %rax
	cvtsi2sdq	%rax, %xmm0
	movq	(%rsp), %rax
	divsd	.LC62(%rip), %xmm0
	subq	%rbx, %rax
	cvtsi2sdq	%rax, %xmm1
	addsd	%xmm1, %xmm0
	pxor	%xmm1, %xmm1
	cvtsi2sdq	perf+8(%rip), %xmm1
	movsd	%xmm0, perf+16(%rip)
	divsd	%xmm0, %xmm1
	movsd	%xmm1, perf+24(%rip)
	addq	$24, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE232:
	.size	update_perf, .-update_perf
	.p2align 4
	.globl	timer_timing
	.type	timer_timing, @function
timer_timing:
.LFB233:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movl	%esi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdx, %rbx
	subq	$168, %rsp
	.cfi_def_cfa_offset 224
	movq	224(%rsp), %r13
	call	clock
	pxor	%xmm0, %xmm0
	xorl	%esi, %esi
	leaq	16(%rsp), %rdi
	subq	%r13, %rax
	movq	240(%rsp), %r14
	movq	232(%rsp), %r13
	cvtsi2sdq	%rax, %xmm0
	divsd	.LC62(%rip), %xmm0
	movq	%xmm0, %r15
	call	gettimeofday
	movq	24(%rsp), %rax
	pxor	%xmm1, %xmm1
	pxor	%xmm0, %xmm0
	subq	%r14, %rax
	cvtsi2sdq	%rax, %xmm1
	movq	16(%rsp), %rax
	divsd	.LC62(%rip), %xmm1
	subq	%r13, %rax
	cvtsi2sdq	%rax, %xmm0
	addsd	%xmm0, %xmm1
	testq	%rbx, %rbx
	jne	.L5202
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5209
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5203
.L5210:
	pxor	%xmm3, %xmm3
	movsd	.LC10(%rip), %xmm2
	xorl	%eax, %eax
	movapd	%xmm3, %xmm0
	.p2align 4,,10
	.p2align 3
.L5193:
	addl	$1, %eax
	addsd	%xmm2, %xmm0
	cmpl	%edx, %eax
	jne	.L5193
	movsd	.LC196(%rip), %xmm4
	comisd	%xmm4, %xmm0
	jnb	.L5194
	cvttsd2siq	%xmm0, %r13
.L5192:
	pxor	%xmm2, %xmm2
	cvtsi2sdl	%ebp, %xmm2
	mulsd	%xmm2, %xmm0
	comisd	%xmm4, %xmm0
	jnb	.L5196
	cvttsd2siq	%xmm0, %rbx
	jmp	.L5190
	.p2align 4,,10
	.p2align 3
.L5202:
	movq	%rbx, %r13
	pxor	%xmm3, %xmm3
.L5190:
	xorl	%edi, %edi
	leaq	16(%rsp), %rsi
	movsd	%xmm3, 8(%rsp)
	movsd	%xmm1, (%rsp)
	call	getrusage
	movsd	(%rsp), %xmm1
	movsd	8(%rsp), %xmm3
	movq	48(%rsp), %rax
	movsd	.LC23(%rip), %xmm0
	comisd	%xmm3, %xmm1
	jbe	.L5198
	testq	%rbx, %rbx
	js	.L5200
	pxor	%xmm0, %xmm0
	cvtsi2sdq	%rbx, %xmm0
.L5201:
	divsd	%xmm1, %xmm0
.L5198:
	movq	%r15, (%r12)
	movq	%r13, 48(%r12)
	movq	%rax, 56(%r12)
	movq	%r12, %rax
	movq	$0x000000000, 24(%r12)
	movq	$0x000000000, 32(%r12)
	movq	$0x000000000, 40(%r12)
	movsd	%xmm1, 8(%r12)
	movsd	%xmm0, 16(%r12)
	addq	$168, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5200:
	.cfi_restore_state
	movq	%rbx, %rdx
	andl	$1, %ebx
	pxor	%xmm0, %xmm0
	shrq	%rdx
	orq	%rbx, %rdx
	cvtsi2sdq	%rdx, %xmm0
	addsd	%xmm0, %xmm0
	jmp	.L5201
	.p2align 4,,10
	.p2align 3
.L5196:
	subsd	%xmm4, %xmm0
	cvttsd2siq	%xmm0, %rbx
	btcq	$63, %rbx
	jmp	.L5190
	.p2align 4,,10
	.p2align 3
.L5194:
	movapd	%xmm0, %xmm2
	subsd	%xmm4, %xmm2
	cvttsd2siq	%xmm2, %r13
	btcq	$63, %r13
	jmp	.L5192
	.p2align 4,,10
	.p2align 3
.L5209:
	movsd	%xmm1, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	(%rsp), %xmm1
	movl	40(%rax), %edx
	testl	%edx, %edx
	jg	.L5210
.L5203:
	pxor	%xmm3, %xmm3
	movsd	.LC196(%rip), %xmm4
	xorl	%r13d, %r13d
	movapd	%xmm3, %xmm0
	jmp	.L5192
	.cfi_endproc
.LFE233:
	.size	timer_timing, .-timer_timing
	.section	.rodata.str1.8
	.align 8
.LC197:
	.string	"\n# Quadtree, %d steps, %g CPU, %.4g real, %.3g points.step/s, %d var\n"
	.text
	.p2align 4
	.globl	timer_print
	.type	timer_print, @function
timer_print:
.LFB234:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rsi, %rdx
	movl	%edi, %r12d
	movl	%edi, %esi
	xorl	%ecx, %ecx
	subq	$64, %rsp
	.cfi_def_cfa_offset 80
	pushq	104(%rsp)
	.cfi_def_cfa_offset 88
	pushq	104(%rsp)
	.cfi_def_cfa_offset 96
	pushq	104(%rsp)
	.cfi_def_cfa_offset 104
	pushq	104(%rsp)
	.cfi_def_cfa_offset 112
	leaq	32(%rsp), %rdi
	call	timer_timing
	movq	datasize(%rip), %rcx
	movl	%r12d, %edx
	movsd	48(%rsp), %xmm2
	movsd	40(%rsp), %xmm1
	movsd	32(%rsp), %xmm0
	movl	$.LC197, %esi
	movl	$3, %eax
	movq	stdout(%rip), %rdi
	addq	$96, %rsp
	.cfi_def_cfa_offset 16
	shrq	$3, %rcx
	popq	%r12
	.cfi_def_cfa_offset 8
	jmp	fprintf
	.cfi_endproc
.LFE234:
	.size	timer_print, .-timer_print
	.section	.rodata.str1.8
	.align 8
.LC198:
	.string	"/root/mnt/basilisk/src/utils.h"
	.text
	.p2align 4
	.globl	normf
	.type	normf, @function
normf:
.LFB235:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	movslq	%esi, %rbx
	subq	$48, %rsp
	.cfi_def_cfa_offset 80
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5217
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5217
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5218:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5218
.L5217:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 44(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	xorl	%esi, %esi
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%r8d, %r8d
	pushq	$137
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$137
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$138
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$140
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$141
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$142
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 80
	movl	$_loop.71, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.71+12(%rip)
	cmpl	$65535, %eax
	jg	.L5255
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5256
.L5219:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5220
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %edi
	pxor	%xmm3, %xmm3
	movslq	cm(%rip), %rcx
	salq	$4, %rdi
	movapd	%xmm3, %xmm5
	movsd	L0(%rip), %xmm9
	leaq	16(%rax), %rdx
	movapd	%xmm3, %xmm6
	movsd	.LC2(%rip), %xmm4
	movsd	.LC10(%rip), %xmm8
	movq	.LC17(%rip), %xmm10
	addq	%rdx, %rdi
	movapd	%xmm3, %xmm0
	movapd	%xmm3, %xmm7
	leaq	8(,%rbx,8), %r8
	leaq	8(,%rcx,8), %r11
	movl	$1, %r10d
	jmp	.L5226
	.p2align 4,,10
	.p2align 3
.L5257:
	addq	$16, %rdx
.L5226:
	movslq	8(%rax), %rsi
	movslq	(%rax), %rbp
	movq	%rsi, %rcx
	movq	(%r9,%rsi,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %rbx
	movslq	4(%rax), %rsi
	movq	(%rbx,%rbp,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r8), %xmm2
	ucomisd	%xmm4, %xmm2
	jp	.L5240
	je	.L5221
.L5240:
	movl	%r10d, %ebx
	pxor	%xmm11, %xmm11
	movapd	%xmm8, %xmm1
	sall	%cl, %ebx
	cvtsi2sdl	%ebx, %xmm11
	divsd	%xmm11, %xmm1
	mulsd	%xmm9, %xmm1
	mulsd	%xmm1, %xmm1
	mulsd	(%rax,%r11), %xmm1
	comisd	%xmm3, %xmm1
	jbe	.L5221
	movapd	%xmm2, %xmm11
	addsd	%xmm1, %xmm5
	mulsd	%xmm2, %xmm2
	andpd	%xmm10, %xmm11
	movapd	%xmm11, %xmm13
	mulsd	%xmm1, %xmm11
	maxsd	%xmm6, %xmm13
	mulsd	%xmm1, %xmm2
	movapd	%xmm13, %xmm6
	addsd	%xmm11, %xmm7
	addsd	%xmm2, %xmm0
.L5221:
	movq	%rdx, %rax
	cmpq	%rdx, %rdi
	jne	.L5257
.L5227:
	ucomisd	%xmm3, %xmm5
	jp	.L5246
	je	.L5235
.L5246:
	divsd	%xmm5, %xmm0
	divsd	%xmm5, %xmm7
	ucomisd	%xmm0, %xmm3
	ja	.L5252
	sqrtsd	%xmm0, %xmm0
.L5239:
	movsd	%xmm7, (%r12)
	movq	%r12, %rax
	movsd	%xmm0, 8(%r12)
	movsd	%xmm6, 16(%r12)
	movsd	%xmm5, 24(%r12)
	addq	$48, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5220:
	.cfi_restore_state
	pxor	%xmm3, %xmm3
	movapd	%xmm3, %xmm5
	movapd	%xmm3, %xmm6
.L5235:
	movapd	%xmm3, %xmm7
	movapd	%xmm3, %xmm0
	jmp	.L5239
	.p2align 4,,10
	.p2align 3
.L5255:
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm8
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5258
.L5228:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5220
	movq	24(%rax), %r10
	movq	32(%rax), %rax
	leal	-1(%rdx), %r8d
	pxor	%xmm3, %xmm3
	salq	$4, %r8
	movapd	%xmm3, %xmm5
	movsd	L0(%rip), %xmm10
	movsd	.LC2(%rip), %xmm4
	leaq	16(%rax), %rdx
	movapd	%xmm3, %xmm6
	movapd	%xmm3, %xmm0
	movsd	.LC10(%rip), %xmm9
	movq	.LC17(%rip), %xmm11
	leaq	8(,%rbx,8), %r9
	addq	%rdx, %r8
	movapd	%xmm3, %xmm7
	movl	$1, %r11d
	jmp	.L5234
	.p2align 4,,10
	.p2align 3
.L5259:
	addq	$16, %rdx
.L5234:
	movslq	8(%rax), %rsi
	movslq	(%rax), %rbx
	movq	%rsi, %rcx
	movq	(%r10,%rsi,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %rdi
	movslq	4(%rax), %rsi
	movq	(%rdi,%rbx,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r9), %xmm2
	ucomisd	%xmm4, %xmm2
	jp	.L5243
	je	.L5229
.L5243:
	movl	%r11d, %eax
	pxor	%xmm12, %xmm12
	movapd	%xmm9, %xmm1
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm12
	divsd	%xmm12, %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm1, %xmm1
	mulsd	%xmm8, %xmm1
	comisd	%xmm3, %xmm1
	jbe	.L5229
	movapd	%xmm2, %xmm12
	addsd	%xmm1, %xmm5
	mulsd	%xmm2, %xmm2
	andpd	%xmm11, %xmm12
	movapd	%xmm12, %xmm14
	mulsd	%xmm1, %xmm12
	maxsd	%xmm6, %xmm14
	mulsd	%xmm1, %xmm2
	movapd	%xmm14, %xmm6
	addsd	%xmm12, %xmm7
	addsd	%xmm2, %xmm0
.L5229:
	movq	%rdx, %rax
	cmpq	%rdx, %r8
	jne	.L5259
	jmp	.L5227
	.p2align 4,,10
	.p2align 3
.L5256:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L5219
	.p2align 4,,10
	.p2align 3
.L5258:
	movsd	%xmm8, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm8
	jmp	.L5228
.L5252:
	movsd	%xmm5, 24(%rsp)
	movsd	%xmm6, 16(%rsp)
	movsd	%xmm7, 8(%rsp)
	call	sqrt
	movsd	24(%rsp), %xmm5
	movsd	16(%rsp), %xmm6
	movsd	8(%rsp), %xmm7
	jmp	.L5239
	.cfi_endproc
.LFE235:
	.size	normf, .-normf
	.p2align 4
	.globl	statsf
	.type	statsf, @function
statsf:
.LFB236:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movslq	%esi, %rbx
	subq	$56, %rsp
	.cfi_def_cfa_offset 80
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5264
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5264
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5265:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5265
.L5264:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	movl	cm(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 96
	pushq	$165
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$165
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$166
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$167
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$167
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$168
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$168
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$169
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$169
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$170
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$170
	.cfi_def_cfa_offset 104
	pushq	$.LC198
	.cfi_def_cfa_offset 112
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 80
	movl	$_loop.70, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.70+12(%rip)
	cmpl	$65535, %eax
	jg	.L5310
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5311
.L5266:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5267
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %esi
	pxor	%xmm2, %xmm2
	movslq	cm(%rip), %rcx
	salq	$4, %rsi
	movsd	L0(%rip), %xmm9
	leaq	8(,%rbx,8), %r10
	leaq	16(%rax), %rdx
	movapd	%xmm2, %xmm3
	movsd	.LC199(%rip), %xmm5
	movsd	.LC200(%rip), %xmm6
	addq	%rdx, %rsi
	movapd	%xmm2, %xmm0
	movapd	%xmm2, %xmm4
	movl	$1, %edi
	movsd	.LC10(%rip), %xmm8
	leaq	8(,%rcx,8), %r8
	movsd	.LC2(%rip), %xmm10
	jmp	.L5274
	.p2align 4,,10
	.p2align 3
.L5312:
	addq	$16, %rdx
.L5274:
	movslq	8(%rax), %rcx
	movl	%edi, %r11d
	pxor	%xmm7, %xmm7
	movapd	%xmm8, %xmm1
	movslq	(%rax), %rbx
	sall	%cl, %r11d
	movq	(%r9,%rcx,8), %rcx
	cvtsi2sdl	%r11d, %xmm7
	movq	(%rcx), %rcx
	movq	16(%rcx), %r11
	movslq	4(%rax), %rcx
	divsd	%xmm7, %xmm1
	movq	(%r11,%rbx,8), %rax
	movq	(%rax,%rcx,8), %rax
	mulsd	%xmm9, %xmm1
	mulsd	%xmm1, %xmm1
	mulsd	(%rax,%r8), %xmm1
	comisd	%xmm2, %xmm1
	jbe	.L5268
	movsd	(%rax,%r10), %xmm7
	ucomisd	%xmm10, %xmm7
	jp	.L5292
	je	.L5268
.L5292:
	movapd	%xmm1, %xmm11
	addsd	%xmm1, %xmm3
	mulsd	%xmm7, %xmm11
	addsd	%xmm11, %xmm4
	movapd	%xmm7, %xmm11
	mulsd	%xmm7, %xmm11
	mulsd	%xmm11, %xmm1
	addsd	%xmm1, %xmm0
	movapd	%xmm7, %xmm1
	minsd	%xmm6, %xmm7
	maxsd	%xmm5, %xmm1
	movapd	%xmm7, %xmm6
	movapd	%xmm1, %xmm5
.L5268:
	movq	%rdx, %rax
	cmpq	%rdx, %rsi
	jne	.L5312
.L5275:
	comisd	%xmm2, %xmm3
	jbe	.L5284
	movapd	%xmm4, %xmm1
	mulsd	%xmm4, %xmm1
	divsd	%xmm3, %xmm1
	subsd	%xmm1, %xmm0
.L5284:
	comisd	%xmm2, %xmm0
	ja	.L5313
.L5286:
	movsd	%xmm6, (%r12)
	movq	%r12, %rax
	movsd	%xmm5, 8(%r12)
	movsd	%xmm4, 16(%r12)
	movsd	%xmm2, 24(%r12)
	movsd	%xmm3, 32(%r12)
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5310:
	.cfi_restore_state
	movq	grid(%rip), %r8
	movq	_constant(%rip), %rdx
	cmpb	$0, 128(%r8)
	movsd	-524288(%rdx,%rax,8), %xmm9
	jne	.L5314
.L5276:
	movl	40(%r8), %eax
	testl	%eax, %eax
	jle	.L5267
	movq	32(%r8), %rdx
	leal	-1(%rax), %edi
	pxor	%xmm2, %xmm2
	movsd	L0(%rip), %xmm10
	salq	$4, %rdi
	movapd	%xmm2, %xmm3
	movsd	.LC199(%rip), %xmm5
	movsd	.LC200(%rip), %xmm6
	leaq	16(%rdx), %rax
	movapd	%xmm2, %xmm0
	movsd	.LC10(%rip), %xmm8
	movsd	.LC2(%rip), %xmm11
	leaq	8(,%rbx,8), %r10
	addq	%rax, %rdi
	movapd	%xmm2, %xmm4
	movl	$1, %r9d
	jmp	.L5283
	.p2align 4,,10
	.p2align 3
.L5315:
	addq	$16, %rax
.L5283:
	movslq	8(%rdx), %rcx
	movl	%r9d, %esi
	pxor	%xmm7, %xmm7
	movapd	%xmm8, %xmm1
	sall	%cl, %esi
	cvtsi2sdl	%esi, %xmm7
	divsd	%xmm7, %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm1, %xmm1
	mulsd	%xmm9, %xmm1
	comisd	%xmm2, %xmm1
	jbe	.L5277
	movq	24(%r8), %rsi
	movslq	(%rdx), %r11
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	movslq	4(%rdx), %rcx
	movq	(%rsi,%r11,8), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movsd	(%rdx,%r10), %xmm7
	ucomisd	%xmm11, %xmm7
	jp	.L5296
	je	.L5277
.L5296:
	movapd	%xmm1, %xmm12
	addsd	%xmm1, %xmm3
	mulsd	%xmm7, %xmm12
	addsd	%xmm12, %xmm4
	movapd	%xmm7, %xmm12
	mulsd	%xmm7, %xmm12
	mulsd	%xmm12, %xmm1
	addsd	%xmm1, %xmm0
	movapd	%xmm7, %xmm1
	minsd	%xmm6, %xmm7
	maxsd	%xmm5, %xmm1
	movapd	%xmm7, %xmm6
	movapd	%xmm1, %xmm5
.L5277:
	movq	%rax, %rdx
	cmpq	%rax, %rdi
	jne	.L5315
	jmp	.L5275
	.p2align 4,,10
	.p2align 3
.L5313:
	divsd	%xmm3, %xmm0
	ucomisd	%xmm0, %xmm2
	ja	.L5307
	sqrtsd	%xmm0, %xmm0
	movapd	%xmm0, %xmm2
	jmp	.L5286
	.p2align 4,,10
	.p2align 3
.L5311:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L5266
	.p2align 4,,10
	.p2align 3
.L5314:
	movsd	%xmm9, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r8
	movsd	(%rsp), %xmm9
	jmp	.L5276
	.p2align 4,,10
	.p2align 3
.L5267:
	pxor	%xmm4, %xmm4
	movsd	.LC200(%rip), %xmm6
	movsd	.LC199(%rip), %xmm5
	movapd	%xmm4, %xmm3
	movapd	%xmm4, %xmm2
	jmp	.L5286
.L5307:
	movsd	%xmm3, 24(%rsp)
	movsd	%xmm4, 16(%rsp)
	movsd	%xmm5, 8(%rsp)
	movsd	%xmm6, (%rsp)
	call	sqrt
	movsd	(%rsp), %xmm6
	movsd	8(%rsp), %xmm5
	movsd	16(%rsp), %xmm4
	movsd	24(%rsp), %xmm3
	movapd	%xmm0, %xmm2
	jmp	.L5286
	.cfi_endproc
.LFE236:
	.size	statsf, .-statsf
	.p2align 4
	.globl	minmod
	.type	minmod, @function
minmod:
.LFB238:
	.cfi_startproc
	ucomisd	%xmm0, %xmm1
	jp	.L5323
	pxor	%xmm3, %xmm3
	jne	.L5323
.L5316:
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5323:
	movapd	%xmm1, %xmm3
	subsd	%xmm1, %xmm2
	subsd	%xmm0, %xmm3
	movsd	.LC10(%rip), %xmm0
	divsd	%xmm3, %xmm2
	comisd	%xmm2, %xmm0
	jbe	.L5316
	pxor	%xmm0, %xmm0
	comisd	%xmm2, %xmm0
	jbe	.L5325
	mulsd	%xmm0, %xmm3
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5325:
	mulsd	%xmm2, %xmm3
	jmp	.L5316
	.cfi_endproc
.LFE238:
	.size	minmod, .-minmod
	.p2align 4
	.globl	superbee
	.type	superbee, @function
superbee:
.LFB239:
	.cfi_startproc
	ucomisd	%xmm0, %xmm1
	jp	.L5341
	pxor	%xmm3, %xmm3
	jne	.L5341
.L5326:
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5341:
	movapd	%xmm1, %xmm3
	subsd	%xmm1, %xmm2
	movsd	.LC80(%rip), %xmm1
	subsd	%xmm0, %xmm3
	divsd	%xmm3, %xmm2
	comisd	%xmm2, %xmm1
	movapd	%xmm2, %xmm0
	addsd	%xmm2, %xmm0
	jbe	.L5344
	movsd	.LC10(%rip), %xmm1
	comisd	%xmm0, %xmm1
	ja	.L5347
	pxor	%xmm0, %xmm0
	comisd	%xmm2, %xmm0
	ja	.L5326
	movapd	%xmm1, %xmm0
.L5333:
	comisd	%xmm0, %xmm2
	ja	.L5337
.L5346:
	mulsd	%xmm0, %xmm3
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5344:
	movsd	.LC10(%rip), %xmm2
	comisd	%xmm0, %xmm2
	movapd	%xmm1, %xmm2
	ja	.L5333
.L5337:
	mulsd	%xmm2, %xmm3
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5347:
	pxor	%xmm1, %xmm1
	maxsd	%xmm2, %xmm1
	movapd	%xmm1, %xmm2
	comisd	%xmm0, %xmm2
	jbe	.L5346
	jmp	.L5337
	.cfi_endproc
.LFE239:
	.size	superbee, .-superbee
	.p2align 4
	.globl	sweby
	.type	sweby, @function
sweby:
.LFB240:
	.cfi_startproc
	ucomisd	%xmm0, %xmm1
	jp	.L5363
	pxor	%xmm3, %xmm3
	jne	.L5363
.L5348:
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5363:
	movapd	%xmm1, %xmm3
	subsd	%xmm1, %xmm2
	subsd	%xmm0, %xmm3
	movsd	.LC33(%rip), %xmm0
	divsd	%xmm3, %xmm2
	comisd	%xmm2, %xmm0
	movapd	%xmm2, %xmm1
	mulsd	%xmm0, %xmm1
	jbe	.L5366
	movsd	.LC10(%rip), %xmm0
	comisd	%xmm1, %xmm0
	ja	.L5369
	pxor	%xmm1, %xmm1
	comisd	%xmm2, %xmm1
	ja	.L5348
	movapd	%xmm0, %xmm1
.L5355:
	comisd	%xmm1, %xmm2
	ja	.L5359
.L5368:
	mulsd	%xmm1, %xmm3
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5366:
	movsd	.LC10(%rip), %xmm2
	comisd	%xmm1, %xmm2
	movapd	%xmm0, %xmm2
	ja	.L5355
.L5359:
	mulsd	%xmm2, %xmm3
	movapd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5369:
	pxor	%xmm0, %xmm0
	maxsd	%xmm2, %xmm0
	movapd	%xmm0, %xmm2
	comisd	%xmm1, %xmm2
	jbe	.L5368
	jmp	.L5359
	.cfi_endproc
.LFE240:
	.size	sweby, .-sweby
	.p2align 4
	.globl	minmod2
	.type	minmod2, @function
minmod2:
.LFB241:
	.cfi_startproc
	comisd	%xmm0, %xmm1
	movapd	%xmm0, %xmm3
	jbe	.L5371
	comisd	%xmm1, %xmm2
	ja	.L5391
.L5371:
	comisd	%xmm1, %xmm3
	jbe	.L5390
	comisd	%xmm2, %xmm1
	ja	.L5392
.L5390:
	pxor	%xmm0, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5391:
	movapd	%xmm1, %xmm0
	movsd	theta(%rip), %xmm5
	movapd	%xmm2, %xmm4
	subsd	%xmm1, %xmm2
	subsd	%xmm3, %xmm0
	subsd	%xmm3, %xmm4
	mulsd	.LC5(%rip), %xmm4
	mulsd	%xmm5, %xmm2
	mulsd	%xmm5, %xmm0
	minsd	%xmm0, %xmm4
	movapd	%xmm4, %xmm0
	minsd	%xmm2, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L5392:
	movapd	%xmm1, %xmm0
	movsd	theta(%rip), %xmm5
	movapd	%xmm2, %xmm4
	subsd	%xmm1, %xmm2
	subsd	%xmm3, %xmm0
	subsd	%xmm3, %xmm4
	mulsd	.LC5(%rip), %xmm4
	mulsd	%xmm5, %xmm2
	mulsd	%xmm5, %xmm0
	maxsd	%xmm0, %xmm4
	movapd	%xmm4, %xmm0
	maxsd	%xmm2, %xmm0
	ret
	.cfi_endproc
.LFE241:
	.size	minmod2, .-minmod2
	.section	.rodata.str1.1
.LC201:
	.string	"list_len(f) == vectors_len(g)"
	.text
	.p2align 4
	.globl	gradients
	.type	gradients, @function
gradients:
.LFB242:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	movq	%rdi, 88(%rsp)
	movq	%rsi, 80(%rsp)
	testq	%rdi, %rdi
	je	.L5394
	movl	(%rdi), %r11d
	movq	%rdi, %rax
	testl	%r11d, %r11d
	js	.L5394
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L5395:
	movl	4(%rax), %r10d
	addq	$4, %rax
	addl	$1, %edx
	testl	%r10d, %r10d
	jns	.L5395
	cmpq	$0, 80(%rsp)
	je	.L5415
	movq	80(%rsp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	js	.L5415
.L5421:
	movq	80(%rsp), %rax
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L5398:
	movl	8(%rax), %r8d
	addq	$8, %rax
	addl	$1, %ecx
	testl	%r8d, %r8d
	jns	.L5398
	cmpl	%edx, %ecx
	jne	.L5415
.L5397:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5445
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5401
.L5422:
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5402:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5402
.L5401:
	cmpq	$0, 80(%rsp)
	movl	$0, 108(%rsp)
	movq	$0, 100(%rsp)
	je	.L5405
.L5399:
	movq	80(%rsp), %rbp
	movq	88(%rsp), %r13
	movl	0(%rbp), %esi
	movq	0(%rbp), %rbx
	movl	0(%r13), %r12d
	testl	%esi, %esi
	jns	.L5408
	jmp	.L5405
	.p2align 4,,10
	.p2align 3
.L5446:
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$250
	.cfi_def_cfa_offset 192
	movl	%ebx, %edx
	shrq	$32, %rbx
	pushq	$.LC198
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %ecx
	movl	%r12d, %edx
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$250
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movq	%rbx, %rdx
	pushq	$.LC198
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %r8d
	movl	%r12d, %edx
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	$1, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$250
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
.L5444:
	movl	140(%rsp), %esi
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	addq	$8, %rbp
	movq	132(%rsp), %rdi
	addq	$4, %r13
	call	stencil_val
	movl	0(%rbp), %ecx
	movq	0(%rbp), %rbx
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	0(%r13), %r12d
	testl	%ecx, %ecx
	js	.L5405
.L5408:
	movslq	%r12d, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$0, 16(%rax)
	jne	.L5446
	subq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 184
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$259
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	shrq	$32, %rbx
	pushq	$.LC198
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %ecx
	movl	%r12d, %edx
	pushq	$259
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$259
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$259
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movq	%rbx, %rdx
	pushq	$.LC198
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %r8d
	movl	%r12d, %edx
	pushq	$259
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	movq	132(%rsp), %rdi
	movl	140(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	$-1, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$259
	.cfi_def_cfa_offset 200
	pushq	$.LC198
	.cfi_def_cfa_offset 208
	jmp	.L5444
.L5394:
	.cfi_restore_state
	cmpq	$0, 80(%rsp)
	jne	.L5417
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5405
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5422
	.p2align 4,,10
	.p2align 3
.L5405:
	movl	$_loop.69, %edi
	call	end_stencil
	movq	grid(%rip), %r11
	movl	$0, _loop.69+12(%rip)
	cmpb	$0, 128(%r11)
	jne	.L5447
.L5404:
	movq	$0, 72(%rsp)
	movl	40(%r11), %edx
	testl	%edx, %edx
	jg	.L5409
	jmp	.L5393
	.p2align 4,,10
	.p2align 3
.L5410:
	addq	$1, 72(%rsp)
	movq	72(%rsp), %rax
	cmpl	%eax, 40(%r11)
	jle	.L5393
.L5409:
	movq	80(%rsp), %rdi
	testq	%rdi, %rdi
	je	.L5410
	movq	88(%rsp), %r15
	movslq	(%rdi), %rax
	movslq	4(%rdi), %rbp
	movslq	(%r15), %rbx
	testl	%eax, %eax
	js	.L5410
	movq	72(%rsp), %rdx
	movl	$1, %esi
	pxor	%xmm1, %xmm1
	movsd	.LC10(%rip), %xmm0
	salq	$4, %rdx
	addq	32(%r11), %rdx
	movslq	8(%rdx), %rcx
	movslq	4(%rdx), %r12
	movslq	(%rdx), %r14
	movq	%rdi, %rdx
	sall	%cl, %esi
	salq	$3, %r12
	leaq	0(,%rcx,8), %r13
	cvtsi2sdl	%esi, %xmm1
	leaq	8(%r12), %rcx
	leaq	8(,%r14,8), %r9
	movq	%rcx, 56(%rsp)
	salq	$3, %r14
	leaq	-8(%r12), %rcx
	movq	%rcx, 64(%rsp)
	leaq	-16(%r9), %r10
	movq	%r15, %rcx
	divsd	%xmm1, %xmm0
	mulsd	L0(%rip), %xmm0
	movsd	%xmm0, 8(%rsp)
	jmp	.L5413
	.p2align 4,,10
	.p2align 3
.L5448:
	movq	%rdx, 40(%rsp)
	movsd	(%r8,%rbx,8), %xmm1
	movq	%r10, 32(%rsp)
	movq	%r9, 24(%rsp)
	movq	%rcx, 48(%rsp)
	movq	%rax, 16(%rsp)
	call	*%rsi
	movq	grid(%rip), %rsi
	movq	16(%rsp), %rax
	divsd	8(%rsp), %xmm0
	movq	64(%rsp), %rcx
	movq	24(%rsi), %rsi
	movq	(%rsi,%r13), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%r14), %rsi
	movq	(%rsi,%r12), %rdi
	movsd	%xmm0, (%rdi,%rax,8)
	movq	56(%rsp), %rax
	movsd	(%rdi,%rbx,8), %xmm1
	movq	(%rsi,%rax), %rax
	movq	(%rsi,%rcx), %rsi
	movsd	(%rax,%rbx,8), %xmm2
	movq	_attribute(%rip), %rax
	movsd	(%rsi,%rbx,8), %xmm0
	call	*16(%rax,%r15)
	movq	24(%rsp), %r9
	movq	32(%rsp), %r10
	divsd	8(%rsp), %xmm0
	movq	grid(%rip), %r11
	movq	40(%rsp), %rdx
	movq	48(%rsp), %rcx
	movq	24(%r11), %rax
	movq	(%rax,%r13), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r14), %rax
	movq	(%rax,%r12), %rax
	movsd	%xmm0, (%rax,%rbp,8)
.L5412:
	movslq	8(%rdx), %rax
	addq	$8, %rdx
	addq	$4, %rcx
	movslq	4(%rdx), %rbp
	movslq	(%rcx), %rbx
	testl	%eax, %eax
	js	.L5410
.L5413:
	movq	24(%r11), %rdi
	leaq	(%rbx,%rbx,4), %rsi
	addq	$1, %rbp
	addq	$1, %rax
	leaq	(%rbx,%rsi,2), %r15
	addq	$1, %rbx
	movq	_attribute(%rip), %rsi
	movq	(%rdi,%r13), %rdi
	salq	$4, %r15
	movq	16(%rsi,%r15), %rsi
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%r9), %r8
	movq	(%r8,%r12), %r8
	movsd	(%r8,%rbx,8), %xmm2
	movq	(%rdi,%r10), %r8
	movq	(%rdi,%r14), %rdi
	movq	(%r8,%r12), %r8
	movsd	(%r8,%rbx,8), %xmm0
	movq	(%rdi,%r12), %r8
	testq	%rsi, %rsi
	jne	.L5448
	movsd	8(%rsp), %xmm4
	subsd	%xmm0, %xmm2
	movq	64(%rsp), %rsi
	movapd	%xmm4, %xmm1
	movq	(%rdi,%rsi), %rsi
	addsd	%xmm4, %xmm1
	divsd	%xmm1, %xmm2
	movsd	%xmm2, (%r8,%rax,8)
	movq	56(%rsp), %rax
	movq	(%rdi,%rax), %rax
	movsd	(%rax,%rbx,8), %xmm0
	subsd	(%rsi,%rbx,8), %xmm0
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%r8,%rbp,8)
	jmp	.L5412
	.p2align 4,,10
	.p2align 3
.L5393:
	addq	$120, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L5447:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %r11
	jmp	.L5404
.L5445:
	movq	$0, 100(%rsp)
	movl	$0, 108(%rsp)
	jmp	.L5399
.L5417:
	movq	80(%rsp), %rax
	movl	(%rax), %r9d
	testl	%r9d, %r9d
	js	.L5397
	xorl	%edx, %edx
	jmp	.L5421
.L5415:
	movl	$.LC201, %edx
	movl	$239, %esi
	movl	$.LC198, %edi
	call	qassert
	.cfi_endproc
.LFE242:
	.size	gradients, .-gradients
	.p2align 4
	.globl	vorticity
	.type	vorticity, @function
vorticity:
.LFB243:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rdi, %r14
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	sarq	$32, %r14
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movslq	%esi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdi, %rbx
	subq	$56, %rsp
	.cfi_def_cfa_offset 112
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5453
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5453
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5454:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5454
.L5453:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 44(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 120
	xorl	%esi, %esi
	movl	%ebp, %edx
	pushq	$283
	.cfi_def_cfa_offset 128
	xorl	%r8d, %r8d
	pushq	$.LC198
	.cfi_def_cfa_offset 136
	pushq	$0
	.cfi_def_cfa_offset 144
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	movl	$1, %ecx
	pushq	$283
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 128
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 136
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm(%rip), %edx
	movl	$1, %ecx
	pushq	$284
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$1, %ecx
	movl	%r12d, %edx
	pushq	$284
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	movl	fm(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 128
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$284
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$-1, %ecx
	movl	%r12d, %edx
	pushq	$284
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	movl	$1, %r8d
	pushq	$285
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$285
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$285
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$-1, %r8d
	movl	%ebx, %edx
	pushq	$286
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	fm+4(%rip), %edx
	movl	$1, %r8d
	pushq	$286
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$286
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 120
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 128
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 136
	pushq	$.LC198
	.cfi_def_cfa_offset 144
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 112
	movl	$_loop.68, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.68+12(%rip)
	cmpl	$65535, %eax
	jle	.L5451
	movq	_constant(%rip), %rcx
	movslq	cm(%rip), %rdx
	movsd	-524288(%rcx,%rax,8), %xmm5
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rcx,%rax,8), %xmm4
	movq	grid(%rip), %rax
	movzbl	128(%rax), %esi
	cmpl	$65535, %edx
	jg	.L5460
	testb	%sil, %sil
	jne	.L5489
.L5461:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5449
	movq	24(%rax), %r12
	movq	32(%rax), %rax
	subl	$1, %edx
	movslq	%ebx, %rbx
	movapd	%xmm5, %xmm7
	salq	$4, %rdx
	movapd	%xmm4, %xmm6
	pxor	%xmm2, %xmm2
	movslq	cm(%rip), %rcx
	leaq	16(%rax), %rsi
	subsd	%xmm5, %xmm7
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rbx,8), %r9
	leaq	(%rdx,%rsi), %rbx
	leaq	8(,%r14,8), %r10
	subsd	%xmm4, %xmm6
	movq	%rbx, 8(%rsp)
	leaq	8(,%rbp,8), %r14
	leaq	8(,%rcx,8), %r13
	movl	$1, %ebp
	jmp	.L5462
	.p2align 4,,10
	.p2align 3
.L5490:
	addq	$16, %rsi
.L5462:
	movslq	8(%rax), %rdx
	pxor	%xmm8, %xmm8
	movq	%rdx, %rcx
	movq	(%r12,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %r8
	movslq	(%rax), %rdx
	leaq	0(,%rdx,8), %rbx
	movq	(%r8,%rdx,8), %rdi
	movslq	4(%rax), %rdx
	movq	8(%r8,%rbx), %r15
	movq	-8(%r8,%rbx), %r8
	movq	(%rdi,%rdx,8), %rax
	leaq	0(,%rdx,8), %r11
	movq	(%r15,%rdx,8), %r15
	movq	(%r8,%rdx,8), %rdx
	movsd	(%rax,%r10), %xmm1
	movsd	(%r15,%r10), %xmm0
	mulsd	%xmm7, %xmm1
	mulsd	%xmm5, %xmm0
	addsd	%xmm1, %xmm0
	movsd	(%rdx,%r10), %xmm1
	movq	-8(%rdi,%r11), %rdx
	mulsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	(%rax,%r9), %xmm1
	mulsd	%xmm6, %xmm1
	subsd	%xmm1, %xmm0
	movsd	(%rdx,%r9), %xmm1
	movq	8(%rdi,%r11), %rdx
	mulsd	%xmm4, %xmm1
	addsd	%xmm1, %xmm0
	movsd	(%rdx,%r9), %xmm1
	movl	%ebp, %edx
	sall	%cl, %edx
	mulsd	%xmm4, %xmm1
	cvtsi2sdl	%edx, %xmm8
	subsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	divsd	%xmm8, %xmm1
	movsd	(%rax,%r13), %xmm8
	addsd	%xmm8, %xmm8
	mulsd	L0(%rip), %xmm1
	mulsd	%xmm8, %xmm1
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r14)
	movq	%rsi, %rax
	cmpq	%rsi, 8(%rsp)
	jne	.L5490
.L5449:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5460:
	.cfi_restore_state
	movsd	-524288(%rcx,%rdx,8), %xmm6
	testb	%sil, %sil
	jne	.L5491
.L5465:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5449
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %r10d
	movslq	%ebx, %rbx
	movapd	%xmm4, %xmm7
	salq	$4, %r10
	addsd	%xmm6, %xmm6
	pxor	%xmm2, %xmm2
	movapd	%xmm5, %xmm8
	leaq	16(%rax), %rdx
	subsd	%xmm4, %xmm7
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rbx,8), %rdi
	subsd	%xmm5, %xmm8
	addq	%rdx, %r10
	movl	$1, %r11d
	leaq	8(,%r14,8), %r8
	leaq	8(,%rbp,8), %rbx
	jmp	.L5466
	.p2align 4,,10
	.p2align 3
.L5492:
	addq	$16, %rdx
.L5466:
	movslq	8(%rax), %rsi
	pxor	%xmm9, %xmm9
	movq	%rsi, %rcx
	movq	(%r9,%rsi,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %r12
	movslq	(%rax), %rsi
	leaq	0(,%rsi,8), %r14
	movq	(%r12,%rsi,8), %rbp
	movslq	4(%rax), %rsi
	movq	8(%r12,%r14), %r15
	movq	-8(%r12,%r14), %r12
	movq	0(%rbp,%rsi,8), %rax
	leaq	0(,%rsi,8), %r13
	movq	(%r15,%rsi,8), %r15
	movq	(%r12,%rsi,8), %rsi
	movsd	(%rax,%r8), %xmm1
	movsd	(%r15,%r8), %xmm0
	mulsd	%xmm8, %xmm1
	mulsd	%xmm5, %xmm0
	addsd	%xmm1, %xmm0
	movsd	(%rsi,%r8), %xmm1
	movq	-8(%rbp,%r13), %rsi
	mulsd	%xmm5, %xmm1
	subsd	%xmm1, %xmm0
	movsd	(%rax,%rdi), %xmm1
	mulsd	%xmm7, %xmm1
	subsd	%xmm1, %xmm0
	movsd	(%rsi,%rdi), %xmm1
	movq	8(%rbp,%r13), %rsi
	mulsd	%xmm4, %xmm1
	addsd	%xmm1, %xmm0
	movsd	(%rsi,%rdi), %xmm1
	movl	%r11d, %esi
	sall	%cl, %esi
	mulsd	%xmm4, %xmm1
	cvtsi2sdl	%esi, %xmm9
	subsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	divsd	%xmm9, %xmm1
	mulsd	L0(%rip), %xmm1
	mulsd	%xmm6, %xmm1
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%rbx)
	movq	%rdx, %rax
	cmpq	%rdx, %r10
	jne	.L5492
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5451:
	.cfi_restore_state
	movq	grid(%rip), %rax
	movslq	cm(%rip), %rdx
	movzbl	128(%rax), %ecx
	cmpl	$65535, %edx
	jg	.L5455
	testb	%cl, %cl
	jne	.L5493
.L5456:
	movl	40(%rax), %ecx
	testl	%ecx, %ecx
	jle	.L5449
	movslq	fm(%rip), %rdx
	movq	24(%rax), %rdi
	movslq	%ebx, %rbx
	pxor	%xmm2, %xmm2
	leaq	8(,%r14,8), %r10
	leaq	8(,%rbx,8), %r9
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rdx,8), %r13
	movslq	fm+4(%rip), %rdx
	movq	%rdi, 8(%rsp)
	leaq	8(,%rbp,8), %rbx
	movq	%rbx, 16(%rsp)
	leaq	8(,%rdx,8), %r12
	movslq	cm(%rip), %rdx
	leaq	8(,%rdx,8), %r14
	movq	32(%rax), %rdx
	leal	-1(%rcx), %eax
	salq	$4, %rax
	leaq	16(%rdx), %rsi
	addq	%rsi, %rax
	movq	%rax, 24(%rsp)
	jmp	.L5458
	.p2align 4,,10
	.p2align 3
.L5494:
	addq	$16, %rsi
.L5458:
	movslq	8(%rdx), %rax
	movq	8(%rsp), %rbx
	movq	%rax, %rcx
	movq	(%rbx,%rax,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %r8
	movslq	(%rdx), %rax
	movslq	4(%rdx), %rdx
	addq	$1, %rax
	leaq	0(,%rax,8), %rbp
	movq	(%r8,%rax,8), %rax
	leaq	0(,%rdx,8), %rbx
	movq	-8(%r8,%rbp), %rdi
	movq	-16(%r8,%rbp), %r8
	movq	(%rax,%rdx,8), %r15
	movq	(%rdi,%rdx,8), %rax
	movq	8(%rdi,%rbx), %r11
	movsd	(%r15,%r13), %xmm0
	movq	(%r8,%rdx,8), %rdx
	movsd	(%rax,%r13), %xmm6
	movsd	(%r11,%r12), %xmm4
	movapd	%xmm0, %xmm1
	movsd	(%rax,%r12), %xmm5
	mulsd	(%r15,%r10), %xmm0
	subsd	%xmm6, %xmm1
	mulsd	(%rax,%r10), %xmm1
	mulsd	(%rdx,%r10), %xmm6
	movq	-8(%rdi,%rbx), %rdx
	movq	16(%rsp), %rbx
	addsd	%xmm1, %xmm0
	movapd	%xmm4, %xmm1
	subsd	%xmm5, %xmm1
	mulsd	(%rax,%r9), %xmm1
	mulsd	(%rdx,%r9), %xmm5
	movl	$1, %edx
	subsd	%xmm6, %xmm0
	mulsd	(%r11,%r9), %xmm4
	sall	%cl, %edx
	subsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	addsd	%xmm5, %xmm0
	subsd	%xmm4, %xmm0
	pxor	%xmm4, %xmm4
	cvtsi2sdl	%edx, %xmm4
	movq	%rsi, %rdx
	divsd	%xmm4, %xmm1
	movsd	(%rax,%r14), %xmm4
	addsd	%xmm4, %xmm4
	mulsd	L0(%rip), %xmm1
	mulsd	%xmm4, %xmm1
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%rbx)
	cmpq	24(%rsp), %rsi
	jne	.L5494
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5455:
	.cfi_restore_state
	movq	_constant(%rip), %rsi
	movsd	-524288(%rsi,%rdx,8), %xmm5
	testb	%cl, %cl
	jne	.L5495
.L5463:
	movl	40(%rax), %ecx
	testl	%ecx, %ecx
	jle	.L5449
	movq	24(%rax), %r13
	movslq	%ebx, %rbx
	addsd	%xmm5, %xmm5
	pxor	%xmm2, %xmm2
	movslq	fm(%rip), %rdx
	leaq	8(,%r14,8), %r10
	leaq	8(,%rbx,8), %r9
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rbp,8), %rbx
	leaq	8(,%rdx,8), %r12
	movslq	fm+4(%rip), %rdx
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %r14
	movq	32(%rax), %rdx
	leal	-1(%rcx), %eax
	salq	$4, %rax
	leaq	16(%rdx), %rsi
	addq	%rsi, %rax
	movq	%rax, 16(%rsp)
	jmp	.L5464
	.p2align 4,,10
	.p2align 3
.L5496:
	addq	$16, %rsi
.L5464:
	movslq	8(%rdx), %rax
	movq	%rax, %rcx
	movq	0(%r13,%rax,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %r8
	movslq	(%rdx), %rax
	movslq	4(%rdx), %rdx
	addq	$1, %rax
	leaq	0(,%rax,8), %rbp
	movq	(%r8,%rax,8), %rax
	leaq	0(,%rdx,8), %rbx
	movq	-8(%r8,%rbp), %rdi
	movq	-16(%r8,%rbp), %r8
	movq	(%rax,%rdx,8), %r15
	movq	(%rdi,%rdx,8), %rax
	movq	8(%rdi,%rbx), %r11
	movsd	(%r15,%r12), %xmm0
	movq	(%r8,%rdx,8), %rdx
	movsd	(%rax,%r12), %xmm7
	movsd	(%r11,%r14), %xmm4
	movapd	%xmm0, %xmm1
	movsd	(%rax,%r14), %xmm6
	mulsd	(%r15,%r10), %xmm0
	subsd	%xmm7, %xmm1
	mulsd	(%rax,%r10), %xmm1
	mulsd	(%rdx,%r10), %xmm7
	movq	-8(%rdi,%rbx), %rdx
	movq	8(%rsp), %rbx
	addsd	%xmm1, %xmm0
	movapd	%xmm4, %xmm1
	subsd	%xmm6, %xmm1
	mulsd	(%rax,%r9), %xmm1
	mulsd	(%rdx,%r9), %xmm6
	movl	$1, %edx
	subsd	%xmm7, %xmm0
	mulsd	(%r11,%r9), %xmm4
	sall	%cl, %edx
	subsd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	addsd	%xmm6, %xmm0
	subsd	%xmm4, %xmm0
	pxor	%xmm4, %xmm4
	cvtsi2sdl	%edx, %xmm4
	movq	%rsi, %rdx
	divsd	%xmm4, %xmm1
	mulsd	L0(%rip), %xmm1
	mulsd	%xmm5, %xmm1
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%rbx)
	cmpq	%rsi, 16(%rsp)
	jne	.L5496
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5493:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L5456
	.p2align 4,,10
	.p2align 3
.L5491:
	movsd	%xmm4, 24(%rsp)
	movsd	%xmm5, 16(%rsp)
	movsd	%xmm6, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	24(%rsp), %xmm4
	movsd	16(%rsp), %xmm5
	movsd	8(%rsp), %xmm6
	jmp	.L5465
.L5489:
	movsd	%xmm4, 16(%rsp)
	movsd	%xmm5, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	16(%rsp), %xmm4
	movsd	8(%rsp), %xmm5
	jmp	.L5461
	.p2align 4,,10
	.p2align 3
.L5495:
	movsd	%xmm5, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm5
	jmp	.L5463
	.cfi_endproc
.LFE243:
	.size	vorticity, .-vorticity
	.section	.rodata.str1.8
	.align 8
.LC202:
	.string	"rising_output_9_2/vorticty_grid-%2.1f.txt"
	.section	.rodata.str1.1
.LC203:
	.string	"vort"
	.text
	.p2align 4
	.type	vorticity_grid, @function
vorticity_grid:
.LFB446:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movl	$.LC202, %esi
	movl	$1, %eax
	xorl	%r14d, %r14d
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movl	$100, %r13d
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	addq	$-128, %rsp
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	sprintf
	movl	$.LC76, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC203, %edi
	movq	%rax, %rbp
	call	new_block_scalar
	movq	u(%rip), %rdi
	movl	%eax, %esi
	movl	%eax, %r12d
	call	vorticity
	.p2align 4,,10
	.p2align 3
.L5498:
	movl	$25, %ebx
	pxor	%xmm1, %xmm1
	.p2align 4,,10
	.p2align 3
.L5499:
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 8(%rsp)
	movaps	%xmm0, 16(%rsp)
	movaps	%xmm0, 32(%rsp)
	movl	%r12d, 16(%rsp)
	movsd	%xmm1, 32(%rsp)
	movq	%r14, 24(%rsp)
	pushq	40(%rsp)
	.cfi_def_cfa_offset 184
	pushq	40(%rsp)
	.cfi_def_cfa_offset 192
	pushq	40(%rsp)
	.cfi_def_cfa_offset 200
	pushq	40(%rsp)
	.cfi_def_cfa_offset 208
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$.LC121, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	8(%rsp), %xmm1
	addsd	.LC122(%rip), %xmm1
	subl	$1, %ebx
	jne	.L5499
	movq	%rbp, %rcx
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC123, %edi
	call	fwrite
	movsd	.LC122(%rip), %xmm3
	movq	%r14, %xmm4
	addsd	%xmm4, %xmm3
	movq	%xmm3, %r14
	subl	$1, %r13d
	jne	.L5498
	movq	%rbp, %rdi
	call	fclose
	leaq	16(%rsp), %rdi
	movl	%r12d, 16(%rsp)
	movl	$-1, 20(%rsp)
	call	delete
	subq	$-128, %rsp
	.cfi_def_cfa_offset 48
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE446:
	.size	vorticity_grid, .-vorticity_grid
	.section	.rodata.str1.8
	.align 8
.LC204:
	.string	"rising_output_9_2/output_field-%2.1f.txt"
	.section	.rodata.str1.1
.LC205:
	.string	"%f %f %f %f %f %f\r\n"
	.text
	.p2align 4
	.type	output_field_fuori, @function
output_field_fuori:
.LFB431:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	movl	$.LC204, %esi
	movl	$1, %eax
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movl	%edi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	subq	$112, %rsp
	.cfi_def_cfa_offset 160
	leaq	32(%rsp), %rdi
	call	sprintf
	movl	$.LC90, %esi
	movl	$.LC203, %edi
	movl	$1, %edx
	call	new_block_scalar
	movq	u(%rip), %rdi
	movl	%eax, %esi
	movl	%eax, %ebx
	call	vorticity
	testl	%ebp, %ebp
	jne	.L5506
	movl	$.LC76, %esi
	leaq	32(%rsp), %rdi
	call	fopen
	movq	baseblock(%rip), %rdx
	movq	%rax, fp2.11(%rip)
	testq	%rdx, %rdx
	je	.L5510
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5510
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5511:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5511
.L5510:
	movq	$0, 20(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	movl	u(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 176
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	p(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 176
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$252
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	movl	$_loop.10, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.10+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L5529
	movl	40(%rdx), %esi
	testl	%esi, %esi
	jle	.L5523
.L5512:
	movslq	%ebx, %rax
	pxor	%xmm7, %xmm7
	xorl	%r13d, %r13d
	movl	$1, %ebp
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rax,8), %r12
	movsd	%xmm7, (%rsp)
	movq	%xmm6, %r14
	movsd	.LC5(%rip), %xmm6
	movsd	%xmm6, 8(%rsp)
	.p2align 4,,10
	.p2align 3
.L5514:
	movq	%r13, %rax
	pxor	%xmm0, %xmm0
	movq	%r14, %xmm3
	addq	$1, %r13
	salq	$4, %rax
	addq	32(%rdx), %rax
	pxor	%xmm1, %xmm1
	movsd	(%rsp), %xmm6
	movslq	8(%rax), %rcx
	movl	(%rax), %edi
	movl	4(%rax), %r8d
	movl	%ebp, %eax
	movsd	8(%rsp), %xmm7
	sall	%cl, %eax
	movslq	p(%rip), %rsi
	cvtsi2sdl	%eax, %xmm0
	movq	24(%rdx), %rax
	movslq	%r8d, %rdx
	subl	$2, %r8d
	cvtsi2sdl	%r8d, %xmm1
	movq	(%rax,%rcx,8), %rax
	movslq	%edi, %rcx
	subl	$2, %edi
	divsd	%xmm0, %xmm3
	pxor	%xmm0, %xmm0
	movq	(%rax), %rax
	cvtsi2sdl	%edi, %xmm0
	addsd	%xmm6, %xmm1
	movq	fp2.11(%rip), %rdi
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	addsd	%xmm7, %xmm1
	movslq	u+4(%rip), %rcx
	addsd	%xmm6, %xmm0
	movq	(%rax,%rdx,8), %rax
	movslq	f(%rip), %rdx
	addsd	%xmm7, %xmm0
	movsd	8(%rax,%rdx,8), %xmm2
	movsd	8(%rax,%rsi,8), %xmm4
	movl	$.LC205, %esi
	movslq	u(%rip), %rdx
	movsd	(%rax,%r12), %xmm5
	mulsd	%xmm2, %xmm4
	mulsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm0
	movsd	8(%rax,%rcx,8), %xmm3
	addsd	Y0(%rip), %xmm1
	addsd	X0(%rip), %xmm0
	mulsd	%xmm2, %xmm3
	mulsd	8(%rax,%rdx,8), %xmm2
	movl	$6, %eax
	call	fprintf
	movq	grid(%rip), %rdx
	cmpl	%r13d, 40(%rdx)
	jg	.L5514
.L5523:
	movq	fp2.11(%rip), %rdi
	call	fclose
	leaq	20(%rsp), %rdi
	movl	%ebx, 20(%rsp)
	movl	$-1, 24(%rsp)
	call	delete
	addq	$112, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5506:
	.cfi_restore_state
	movl	$.LC116, %esi
	leaq	32(%rsp), %rdi
	call	fopen
	movq	baseblock(%rip), %rdx
	movq	%rax, fp2.11(%rip)
	testq	%rdx, %rdx
	je	.L5519
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5519
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5520:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5520
.L5519:
	movq	$0, 20(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	movl	u(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 176
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	p(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 176
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$259
	.cfi_def_cfa_offset 184
	pushq	$.LC133
	.cfi_def_cfa_offset 192
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	movl	$_loop.9, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.9+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L5530
	movl	40(%rdx), %eax
	testl	%eax, %eax
	jle	.L5523
.L5521:
	movslq	%ebx, %rax
	pxor	%xmm6, %xmm6
	xorl	%r13d, %r13d
	movl	$1, %ebp
	movsd	.LC10(%rip), %xmm7
	leaq	8(,%rax,8), %r12
	movsd	%xmm6, (%rsp)
	movq	%xmm7, %r14
	movsd	.LC5(%rip), %xmm7
	movsd	%xmm7, 8(%rsp)
	.p2align 4,,10
	.p2align 3
.L5522:
	movq	%r13, %rax
	pxor	%xmm0, %xmm0
	movq	%r14, %xmm3
	addq	$1, %r13
	salq	$4, %rax
	addq	32(%rdx), %rax
	pxor	%xmm1, %xmm1
	movsd	(%rsp), %xmm4
	movslq	8(%rax), %rcx
	movl	(%rax), %edi
	movl	4(%rax), %r8d
	movl	%ebp, %eax
	movsd	8(%rsp), %xmm5
	sall	%cl, %eax
	movslq	p(%rip), %rsi
	cvtsi2sdl	%eax, %xmm0
	movq	24(%rdx), %rax
	movslq	%r8d, %rdx
	subl	$2, %r8d
	cvtsi2sdl	%r8d, %xmm1
	movq	(%rax,%rcx,8), %rax
	movslq	%edi, %rcx
	subl	$2, %edi
	divsd	%xmm0, %xmm3
	pxor	%xmm0, %xmm0
	movq	(%rax), %rax
	cvtsi2sdl	%edi, %xmm0
	addsd	%xmm4, %xmm1
	movq	fp2.11(%rip), %rdi
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	addsd	%xmm5, %xmm1
	movslq	u+4(%rip), %rcx
	addsd	%xmm4, %xmm0
	movq	(%rax,%rdx,8), %rax
	movslq	f(%rip), %rdx
	addsd	%xmm5, %xmm0
	movsd	8(%rax,%rdx,8), %xmm2
	movsd	8(%rax,%rsi,8), %xmm4
	movl	$.LC205, %esi
	movslq	u(%rip), %rdx
	movsd	(%rax,%r12), %xmm5
	mulsd	%xmm2, %xmm4
	mulsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm0
	movsd	8(%rax,%rcx,8), %xmm3
	addsd	Y0(%rip), %xmm1
	addsd	X0(%rip), %xmm0
	mulsd	%xmm2, %xmm3
	mulsd	8(%rax,%rdx,8), %xmm2
	movl	$6, %eax
	call	fprintf
	movq	grid(%rip), %rdx
	cmpl	%r13d, 40(%rdx)
	jg	.L5522
	jmp	.L5523
	.p2align 4,,10
	.p2align 3
.L5530:
	call	update_cache_f
	movq	grid(%rip), %rdx
	movl	40(%rdx), %eax
	testl	%eax, %eax
	jg	.L5521
	jmp	.L5523
	.p2align 4,,10
	.p2align 3
.L5529:
	call	update_cache_f
	movq	grid(%rip), %rdx
	movl	40(%rdx), %esi
	testl	%esi, %esi
	jg	.L5512
	jmp	.L5523
	.cfi_endproc
.LFE431:
	.size	output_field_fuori, .-output_field_fuori
	.section	.rodata.str1.8
	.align 8
.LC206:
	.string	"rising_output_9_2/output_field_bolla-%2.1f.txt"
	.text
	.p2align 4
	.type	output_field_bolla, @function
output_field_bolla:
.LFB427:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movl	$.LC206, %esi
	movl	$1, %eax
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movl	%edi, %ebp
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$136, %rsp
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	sprintf
	movl	$.LC90, %esi
	movl	$.LC203, %edi
	movl	$1, %edx
	call	new_block_scalar
	movq	u(%rip), %rdi
	movl	%eax, %esi
	movl	%eax, %ebx
	call	vorticity
	testl	%ebp, %ebp
	jne	.L5532
	movl	$.LC76, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movq	baseblock(%rip), %rdx
	movq	%rax, fp2.8(%rip)
	testq	%rdx, %rdx
	je	.L5536
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5536
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5537:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5537
.L5536:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	movl	u(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	p(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$218
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.7, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.7+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L5555
	movl	40(%rdx), %esi
	testl	%esi, %esi
	jle	.L5549
.L5538:
	pxor	%xmm7, %xmm7
	movslq	%ebx, %rax
	xorl	%r13d, %r13d
	movl	$1, %ebp
	movsd	%xmm7, 8(%rsp)
	movsd	.LC5(%rip), %xmm7
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rax,8), %r12
	movsd	%xmm7, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L5540:
	pxor	%xmm0, %xmm0
	movapd	%xmm6, %xmm3
	pxor	%xmm1, %xmm1
	movq	%r13, %rax
	salq	$4, %rax
	addq	32(%rdx), %rax
	movsd	8(%rsp), %xmm7
	movapd	%xmm6, %xmm2
	movslq	8(%rax), %rcx
	movl	(%rax), %edi
	movsd	%xmm6, 24(%rsp)
	addq	$1, %r13
	movl	4(%rax), %r8d
	movl	%ebp, %eax
	movsd	16(%rsp), %xmm4
	sall	%cl, %eax
	movslq	p(%rip), %rsi
	cvtsi2sdl	%eax, %xmm0
	movq	24(%rdx), %rax
	movslq	%r8d, %rdx
	subl	$2, %r8d
	cvtsi2sdl	%r8d, %xmm1
	movq	(%rax,%rcx,8), %rax
	movslq	%edi, %rcx
	subl	$2, %edi
	divsd	%xmm0, %xmm3
	pxor	%xmm0, %xmm0
	movq	(%rax), %rax
	cvtsi2sdl	%edi, %xmm0
	addsd	%xmm7, %xmm1
	movq	fp2.8(%rip), %rdi
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	addsd	%xmm4, %xmm1
	movslq	u+4(%rip), %rcx
	addsd	%xmm7, %xmm0
	movq	(%rax,%rdx,8), %rax
	movslq	f(%rip), %rdx
	addsd	%xmm4, %xmm0
	subsd	8(%rax,%rdx,8), %xmm2
	movsd	8(%rax,%rsi,8), %xmm4
	movl	$.LC205, %esi
	movslq	u(%rip), %rdx
	movsd	(%rax,%r12), %xmm5
	mulsd	%xmm2, %xmm4
	mulsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm0
	movsd	8(%rax,%rcx,8), %xmm3
	addsd	Y0(%rip), %xmm1
	addsd	X0(%rip), %xmm0
	mulsd	%xmm2, %xmm3
	mulsd	8(%rax,%rdx,8), %xmm2
	movl	$6, %eax
	call	fprintf
	movq	grid(%rip), %rdx
	movsd	24(%rsp), %xmm6
	cmpl	%r13d, 40(%rdx)
	jg	.L5540
.L5549:
	movq	fp2.8(%rip), %rdi
	call	fclose
	leaq	36(%rsp), %rdi
	movl	%ebx, 36(%rsp)
	movl	$-1, 40(%rsp)
	call	delete
	addq	$136, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5532:
	.cfi_restore_state
	movl	$.LC116, %esi
	leaq	48(%rsp), %rdi
	call	fopen
	movq	baseblock(%rip), %rdx
	movq	%rax, fp2.8(%rip)
	testq	%rdx, %rdx
	je	.L5545
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5545
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5546:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5546
.L5545:
	movq	$0, 36(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	movl	u(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 52(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	p(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	f(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$225
	.cfi_def_cfa_offset 200
	pushq	$.LC133
	.cfi_def_cfa_offset 208
	movq	68(%rsp), %rdi
	movl	76(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.6, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.6+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L5556
	movl	40(%rdx), %eax
	testl	%eax, %eax
	jle	.L5549
.L5547:
	pxor	%xmm7, %xmm7
	movslq	%ebx, %rax
	xorl	%r13d, %r13d
	movl	$1, %ebp
	movsd	%xmm7, 8(%rsp)
	movsd	.LC5(%rip), %xmm7
	movsd	.LC10(%rip), %xmm6
	leaq	8(,%rax,8), %r12
	movsd	%xmm7, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L5548:
	pxor	%xmm0, %xmm0
	movapd	%xmm6, %xmm3
	pxor	%xmm1, %xmm1
	movq	%r13, %rax
	salq	$4, %rax
	addq	32(%rdx), %rax
	movsd	8(%rsp), %xmm5
	movapd	%xmm6, %xmm2
	movslq	8(%rax), %rcx
	movl	(%rax), %edi
	movsd	%xmm6, 24(%rsp)
	addq	$1, %r13
	movl	4(%rax), %r8d
	movl	%ebp, %eax
	movsd	16(%rsp), %xmm7
	sall	%cl, %eax
	movslq	p(%rip), %rsi
	cvtsi2sdl	%eax, %xmm0
	movq	24(%rdx), %rax
	movslq	%r8d, %rdx
	subl	$2, %r8d
	cvtsi2sdl	%r8d, %xmm1
	movq	(%rax,%rcx,8), %rax
	movslq	%edi, %rcx
	subl	$2, %edi
	divsd	%xmm0, %xmm3
	pxor	%xmm0, %xmm0
	movq	(%rax), %rax
	cvtsi2sdl	%edi, %xmm0
	addsd	%xmm5, %xmm1
	movq	fp2.8(%rip), %rdi
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	addsd	%xmm7, %xmm1
	movslq	u+4(%rip), %rcx
	addsd	%xmm5, %xmm0
	movq	(%rax,%rdx,8), %rax
	movslq	f(%rip), %rdx
	addsd	%xmm7, %xmm0
	subsd	8(%rax,%rdx,8), %xmm2
	movsd	8(%rax,%rsi,8), %xmm4
	movl	$.LC205, %esi
	movslq	u(%rip), %rdx
	movsd	(%rax,%r12), %xmm5
	mulsd	%xmm2, %xmm4
	mulsd	%xmm2, %xmm5
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	mulsd	%xmm3, %xmm0
	movsd	8(%rax,%rcx,8), %xmm3
	addsd	Y0(%rip), %xmm1
	addsd	X0(%rip), %xmm0
	mulsd	%xmm2, %xmm3
	mulsd	8(%rax,%rdx,8), %xmm2
	movl	$6, %eax
	call	fprintf
	movq	grid(%rip), %rdx
	movsd	24(%rsp), %xmm6
	cmpl	%r13d, 40(%rdx)
	jg	.L5548
	jmp	.L5549
	.p2align 4,,10
	.p2align 3
.L5556:
	call	update_cache_f
	movq	grid(%rip), %rdx
	movl	40(%rdx), %eax
	testl	%eax, %eax
	jg	.L5547
	jmp	.L5549
	.p2align 4,,10
	.p2align 3
.L5555:
	call	update_cache_f
	movq	grid(%rip), %rdx
	movl	40(%rdx), %esi
	testl	%esi, %esi
	jg	.L5538
	jmp	.L5549
	.cfi_endproc
.LFE427:
	.size	output_field_bolla, .-output_field_bolla
	.p2align 4
	.globl	change
	.type	change, @function
change:
.LFB244:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movslq	%edi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movslq	%esi, %rbx
	subq	$40, %rsp
	.cfi_def_cfa_offset 64
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L5561
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L5561
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L5562:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L5562
.L5561:
	movq	$0, 20(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 72
	movl	cm(%rip), %edx
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 80
	pushq	$297
	.cfi_def_cfa_offset 88
	pushq	$.LC198
	.cfi_def_cfa_offset 96
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$298
	.cfi_def_cfa_offset 88
	pushq	$.LC198
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$298
	.cfi_def_cfa_offset 88
	pushq	$.LC198
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$302
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC198
	.cfi_def_cfa_offset 88
	pushq	$0
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 72
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 80
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$302
	.cfi_def_cfa_offset 88
	pushq	$.LC198
	.cfi_def_cfa_offset 96
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 64
	movl	$_loop.67, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.67+12(%rip)
	cmpl	$65535, %eax
	jg	.L5586
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5587
.L5563:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5571
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %esi
	pxor	%xmm3, %xmm3
	movslq	cm(%rip), %rcx
	salq	$4, %rsi
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rbp,8), %r10
	leaq	16(%rax), %rdx
	movq	.LC17(%rip), %xmm5
	movapd	%xmm3, %xmm1
	leaq	8(,%rbx,8), %r11
	leaq	8(,%rcx,8), %r8
	addq	%rdx, %rsi
	movl	$1, %edi
	jmp	.L5569
	.p2align 4,,10
	.p2align 3
.L5588:
	addq	$16, %rdx
.L5569:
	movslq	8(%rax), %rcx
	movl	%edi, %ebx
	pxor	%xmm2, %xmm2
	movapd	%xmm4, %xmm0
	movslq	(%rax), %rbp
	sall	%cl, %ebx
	movq	(%r9,%rcx,8), %rcx
	cvtsi2sdl	%ebx, %xmm2
	movq	(%rcx), %rcx
	movq	16(%rcx), %rbx
	movslq	4(%rax), %rcx
	divsd	%xmm2, %xmm0
	movq	(%rbx,%rbp,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r10), %xmm2
	leaq	(%rax,%r11), %rcx
	mulsd	L0(%rip), %xmm0
	mulsd	%xmm0, %xmm0
	mulsd	(%rax,%r8), %xmm0
	comisd	%xmm3, %xmm0
	jbe	.L5566
	movapd	%xmm2, %xmm0
	subsd	(%rcx), %xmm0
	andpd	%xmm5, %xmm0
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
.L5566:
	movsd	%xmm2, (%rcx)
	movq	%rdx, %rax
	cmpq	%rdx, %rsi
	jne	.L5588
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movapd	%xmm1, %xmm0
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5586:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm5
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L5589
.L5570:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L5571
	movq	24(%rax), %r8
	movq	32(%rax), %rax
	leal	-1(%rdx), %esi
	pxor	%xmm3, %xmm3
	salq	$4, %rsi
	movsd	.LC10(%rip), %xmm4
	movq	.LC17(%rip), %xmm6
	leaq	8(,%rbp,8), %r9
	leaq	16(%rax), %rdx
	movapd	%xmm3, %xmm1
	movl	$1, %edi
	leaq	8(,%rbx,8), %r10
	addq	%rdx, %rsi
	jmp	.L5575
	.p2align 4,,10
	.p2align 3
.L5590:
	addq	$16, %rdx
.L5575:
	movslq	8(%rax), %rcx
	movl	%edi, %r11d
	pxor	%xmm2, %xmm2
	movapd	%xmm4, %xmm0
	movslq	(%rax), %rbx
	sall	%cl, %r11d
	movq	(%r8,%rcx,8), %rcx
	cvtsi2sdl	%r11d, %xmm2
	movq	(%rcx), %rcx
	movq	16(%rcx), %r11
	movslq	4(%rax), %rcx
	divsd	%xmm2, %xmm0
	movq	(%r11,%rbx,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r9), %xmm2
	addq	%r10, %rax
	mulsd	L0(%rip), %xmm0
	mulsd	%xmm0, %xmm0
	mulsd	%xmm5, %xmm0
	comisd	%xmm3, %xmm0
	jbe	.L5572
	movapd	%xmm2, %xmm0
	subsd	(%rax), %xmm0
	andpd	%xmm6, %xmm0
	maxsd	%xmm1, %xmm0
	movapd	%xmm0, %xmm1
.L5572:
	movsd	%xmm2, (%rax)
	movq	%rdx, %rax
	cmpq	%rdx, %rsi
	jne	.L5590
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	movapd	%xmm1, %xmm0
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5587:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L5563
	.p2align 4,,10
	.p2align 3
.L5589:
	movsd	%xmm5, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	8(%rsp), %xmm5
	jmp	.L5570
	.p2align 4,,10
	.p2align 3
.L5571:
	addq	$40, %rsp
	.cfi_def_cfa_offset 24
	pxor	%xmm1, %xmm1
	movapd	%xmm1, %xmm0
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE244:
	.size	change, .-change
	.p2align 4
	.globl	lookup_field
	.type	lookup_field, @function
lookup_field:
.LFB245:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movl	$-1, %r12d
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$8, %rsp
	.cfi_def_cfa_offset 48
	testq	%rdi, %rdi
	je	.L5592
	movq	all(%rip), %rbx
	testq	%rbx, %rbx
	je	.L5592
	movl	(%rbx), %r12d
	testl	%r12d, %r12d
	js	.L5596
	movq	_attribute(%rip), %rbp
	movq	%rdi, %r13
	jmp	.L5593
	.p2align 4,,10
	.p2align 3
.L5604:
	movl	4(%rbx), %r12d
	addq	$4, %rbx
	testl	%r12d, %r12d
	js	.L5596
.L5593:
	movslq	%r12d, %rax
	movq	%r13, %rsi
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	movq	32(%rbp,%rax), %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L5604
.L5592:
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movl	%r12d, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5596:
	.cfi_restore_state
	addq	$8, %rsp
	.cfi_def_cfa_offset 40
	movl	$-1, %r12d
	popq	%rbx
	.cfi_def_cfa_offset 32
	movl	%r12d, %eax
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE245:
	.size	lookup_field, .-lookup_field
	.p2align 4
	.globl	lookup_vector
	.type	lookup_vector, @function
lookup_vector:
.LFB246:
	.cfi_startproc
	testq	%rdi, %rdi
	je	.L5619
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	movq	%rdi, %r12
	pushq	%rbx
	subq	$8, %rsp
	.cfi_offset 3, -56
	call	strlen
	movq	%rsp, %r13
	movq	%r12, %rsi
	movq	%rax, %r14
	leaq	18(%rax), %rax
	andq	$-16, %rax
	movq	%r14, %rdx
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsp, %rbx
	call	memcpy
	movl	$30766, %eax
	movq	all(%rip), %r15
	movb	$0, 2(%rsp,%r14)
	movw	%ax, (%rsp,%r14)
	testq	%r15, %r15
	je	.L5607
	movslq	(%r15), %rax
	testl	%eax, %eax
	js	.L5607
	movq	_attribute(%rip), %r12
	jmp	.L5610
	.p2align 4,,10
	.p2align 3
.L5608:
	movslq	4(%r15), %rax
	addq	$4, %r15
	testl	%eax, %eax
	js	.L5607
.L5610:
	leaq	(%rax,%rax,4), %rdx
	movq	%rbx, %rsi
	leaq	(%rax,%rdx,2), %r14
	salq	$4, %r14
	addq	%r12, %r14
	movq	32(%r14), %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L5608
	movq	48(%r14), %rax
	movq	%r13, %rsp
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L5607:
	.cfi_restore_state
	movq	%r13, %rsp
	leaq	-40(%rbp), %rsp
	movl	$4294967295, %eax
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L5619:
	.cfi_restore 3
	.cfi_restore 6
	.cfi_restore 12
	.cfi_restore 13
	.cfi_restore 14
	.cfi_restore 15
	movl	$4294967295, %eax
	ret
	.cfi_endproc
.LFE246:
	.size	lookup_vector, .-lookup_vector
	.section	.rodata.str1.1
.LC207:
	.string	"# t = %g, fields = {"
.LC208:
	.string	" %s"
.LC209:
	.string	" }\n"
.LC210:
	.string	"stddev"
.LC211:
	.string	"avg"
.LC212:
	.string	"min"
.LC213:
	.string	"name"
.LC214:
	.string	"# %12s: %12s %12s %12s %12s\n"
.LC215:
	.string	"max"
.LC216:
	.string	"# %12s: %12g %12g %12g %12g\n"
	.text
	.p2align 4
	.globl	fields_stats
	.type	fields_stats, @function
fields_stats:
.LFB247:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movl	$.LC207, %esi
	movl	$1, %eax
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$56, %rsp
	.cfi_def_cfa_offset 80
	movsd	t(%rip), %xmm0
	movq	stderr(%rip), %rdi
	call	fprintf
	movq	all(%rip), %rbx
	testq	%rbx, %rbx
	jne	.L5637
	jmp	.L5624
	.p2align 4,,10
	.p2align 3
.L5625:
	leaq	(%rax,%rax,4), %rdx
	movq	stderr(%rip), %rdi
	movl	$.LC208, %esi
	addq	$4, %rbx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdx
	xorl	%eax, %eax
	call	fprintf
.L5637:
	movslq	(%rbx), %rax
	testl	%eax, %eax
	jns	.L5625
.L5624:
	movl	$3, %edx
	movl	$1, %esi
	movl	$.LC209, %edi
	movq	stderr(%rip), %rcx
	call	fwrite
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	movl	$.LC213, %edx
	xorl	%eax, %eax
	pushq	$.LC215
	.cfi_def_cfa_offset 96
	movl	$.LC212, %ecx
	movl	$.LC214, %esi
	movq	stderr(%rip), %rdi
	movl	$.LC210, %r9d
	movl	$.LC211, %r8d
	call	fprintf
	movq	all(%rip), %rbp
	popq	%rax
	.cfi_def_cfa_offset 88
	popq	%rdx
	.cfi_def_cfa_offset 80
	testq	%rbp, %rbp
	jne	.L5638
	jmp	.L5623
	.p2align 4,,10
	.p2align 3
.L5627:
	movl	%ebx, %esi
	movq	%rsp, %rdi
	addq	$4, %rbp
	call	statsf
	leaq	(%rbx,%rbx,4), %rax
	movsd	8(%rsp), %xmm3
	movsd	24(%rsp), %xmm2
	leaq	(%rbx,%rax,2), %rax
	movsd	(%rsp), %xmm0
	movl	$.LC216, %esi
	movq	stderr(%rip), %rdi
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movsd	16(%rsp), %xmm1
	divsd	32(%rsp), %xmm1
	movq	32(%rax), %rdx
	movl	$4, %eax
	call	fprintf
.L5638:
	movslq	0(%rbp), %rbx
	testl	%ebx, %ebx
	jns	.L5627
.L5623:
	addq	$56, %rsp
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%rbp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE247:
	.size	fields_stats, .-fields_stats
	.section	.rodata.str1.8
	.align 8
.LC217:
	.string	"/root/mnt/basilisk/src/output.h"
	.section	.rodata.str1.1
.LC219:
	.string	" %d:%s"
.LC220:
	.string	"%g %g"
.LC221:
	.string	" %g"
.LC222:
	.string	"# 1:x 2:y"
	.text
	.p2align 4
	.globl	output_field
	.type	output_field, @function
output_field:
.LFB248:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pxor	%xmm2, %xmm2
	movl	$0, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	movq	208(%rsp), %rbx
	movl	224(%rsp), %eax
	movq	216(%rsp), %rbp
	movsd	232(%rsp), %xmm7
	movsd	240(%rsp), %xmm5
	testq	%rbx, %rbx
	cmove	all(%rip), %rbx
	testl	%eax, %eax
	cmove	N(%rip), %eax
	testq	%rbp, %rbp
	movsd	%xmm7, 64(%rsp)
	cmove	stdout(%rip), %rbp
	movsd	248(%rsp), %xmm1
	movsd	%xmm5, 32(%rsp)
	movsd	256(%rsp), %xmm0
	movl	%eax, 80(%rsp)
	addl	$1, %eax
	ucomisd	%xmm2, %xmm7
	movl	%eax, 84(%rsp)
	setnp	%al
	cmovne	%edx, %eax
	ucomisd	%xmm2, %xmm5
	setnp	%cl
	cmovne	%edx, %ecx
	andl	%ecx, %eax
	ucomisd	%xmm2, %xmm1
	setnp	%cl
	cmovne	%edx, %ecx
	testb	%cl, %al
	je	.L5643
	ucomisd	%xmm2, %xmm0
	setnp	%al
	cmovne	%edx, %eax
	testb	%al, %al
	jne	.L5709
.L5643:
	movl	$58, %edx
	movl	$.LC217, %esi
	movq	%rbx, %rdi
	movsd	%xmm0, 16(%rsp)
	movsd	%xmm1, 8(%rsp)
	call	boundary_internal
	pxor	%xmm2, %xmm2
	testq	%rbx, %rbx
	movsd	8(%rsp), %xmm1
	cvtsi2sdl	80(%rsp), %xmm2
	subsd	64(%rsp), %xmm1
	movsd	16(%rsp), %xmm0
	mulsd	.LC218(%rip), %xmm1
	je	.L5644
	movapd	%xmm1, %xmm7
	subsd	32(%rsp), %xmm0
	movl	(%rbx), %r10d
	divsd	%xmm2, %xmm7
	divsd	%xmm7, %xmm0
	movsd	%xmm7, 24(%rsp)
	addsd	.LC10(%rip), %xmm0
	cvttsd2sil	%xmm0, %eax
	movl	%eax, %edx
	movl	%eax, 48(%rsp)
	movl	84(%rsp), %eax
	imull	%edx, %eax
	movslq	%eax, %r12
	testl	%r10d, %r10d
	js	.L5682
	movq	%rbx, %rax
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L5646:
	movl	4(%rax), %r9d
	addq	$4, %rax
	addl	$1, %r14d
	testl	%r9d, %r9d
	jns	.L5646
	movslq	%r14d, %r13
	salq	$3, %r13
	imulq	%r13, %r12
.L5645:
	movslq	84(%rsp), %rdi
	salq	$3, %rdi
	call	malloc
	movq	%r12, %rdi
	movq	%rax, 56(%rsp)
	movq	%rax, %r15
	call	malloc
	movl	84(%rsp), %r8d
	movq	%rax, %rdx
	testl	%r8d, %r8d
	jle	.L5647
	movl	80(%rsp), %edi
	movslq	48(%rsp), %rcx
	movq	%r15, %rax
	imulq	%r13, %rcx
	movq	%rdi, 72(%rsp)
	leaq	8(%r15,%rdi,8), %rsi
	.p2align 4,,10
	.p2align 3
.L5648:
	movq	%rdx, (%rax)
	addq	$8, %rax
	addq	%rcx, %rdx
	cmpq	%rsi, %rax
	jne	.L5648
	movq	%rbp, 88(%rsp)
	xorl	%r15d, %r15d
	movl	%r14d, 52(%rsp)
	.p2align 4,,10
	.p2align 3
.L5650:
	pxor	%xmm0, %xmm0
	movl	48(%rsp), %edi
	cvtsi2sdl	%r15d, %xmm0
	mulsd	24(%rsp), %xmm0
	addsd	64(%rsp), %xmm0
	movsd	%xmm0, 16(%rsp)
	testl	%edi, %edi
	jle	.L5662
	movzbl	228(%rsp), %eax
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
	movb	%al, 40(%rsp)
	jmp	.L5661
	.p2align 4,,10
	.p2align 3
.L5711:
	testq	%rbx, %rbx
	jne	.L5710
.L5654:
	addl	$1, %ebp
	addl	52(%rsp), %r12d
	cmpl	48(%rsp), %ebp
	je	.L5662
.L5661:
	pxor	%xmm0, %xmm0
	cmpb	$0, 40(%rsp)
	cvtsi2sdl	%ebp, %xmm0
	mulsd	24(%rsp), %xmm0
	addsd	32(%rsp), %xmm0
	movsd	%xmm0, 8(%rsp)
	jne	.L5711
	movsd	16(%rsp), %xmm5
	movsd	8(%rsp), %xmm6
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	movq	$0, 136(%rsp)
	movsd	%xmm5, 120(%rsp)
	movsd	%xmm6, 128(%rsp)
	pushq	136(%rsp)
	.cfi_def_cfa_offset 224
	pushq	136(%rsp)
	.cfi_def_cfa_offset 232
	pushq	136(%rsp)
	.cfi_def_cfa_offset 240
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movq	%rax, 100(%rsp)
	movl	%edx, 108(%rsp)
	testq	%rbx, %rbx
	je	.L5654
	movslq	(%rbx), %rcx
	testl	%ecx, %ecx
	js	.L5654
	movq	56(%rsp), %rsi
	movslq	100(%rsp), %r10
	movslq	%r12d, %rax
	movl	%edx, %edi
	movslq	104(%rsp), %r9
	movslq	%edx, %rdx
	movq	grid(%rip), %r8
	movq	(%rsi,%r15,8), %rsi
	salq	$3, %rdx
	salq	$3, %r10
	salq	$3, %r9
	leaq	(%rsi,%rax,8), %rsi
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L5660:
	movq	.LC2(%rip), %r14
	movq	%r14, %xmm0
	testl	%edi, %edi
	js	.L5659
	movq	24(%r8), %r11
	movq	(%r11,%rdx), %r11
	movq	(%r11), %r11
	movq	16(%r11), %r11
	movq	(%r11,%r10), %r11
	movq	(%r11,%r9), %r11
	movsd	8(%r11,%rcx,8), %xmm0
.L5659:
	movsd	%xmm0, (%rsi,%rax,2)
	addq	$4, %rax
	movslq	(%rbx,%rax), %rcx
	testl	%ecx, %ecx
	jns	.L5660
	addl	$1, %ebp
	addl	52(%rsp), %r12d
	cmpl	48(%rsp), %ebp
	jne	.L5661
	.p2align 4,,10
	.p2align 3
.L5662:
	leaq	1(%r15), %rax
	cmpq	%r15, 72(%rsp)
	je	.L5712
	movq	%rax, %r15
	jmp	.L5650
	.p2align 4,,10
	.p2align 3
.L5710:
	movl	(%rbx), %eax
	testl	%eax, %eax
	js	.L5654
	movq	56(%rsp), %rcx
	movslq	%r12d, %rdx
	movq	%rbx, %r13
	movq	(%rcx,%r15,8), %rcx
	leaq	(%rcx,%rdx,8), %r14
	.p2align 4,,10
	.p2align 3
.L5656:
	movsd	16(%rsp), %xmm3
	pxor	%xmm0, %xmm0
	addq	$4, %r13
	addq	$8, %r14
	movsd	8(%rsp), %xmm4
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 128(%rsp)
	movl	%eax, 112(%rsp)
	movsd	%xmm3, 120(%rsp)
	movsd	%xmm4, 128(%rsp)
	pushq	136(%rsp)
	.cfi_def_cfa_offset 216
	pushq	136(%rsp)
	.cfi_def_cfa_offset 224
	pushq	136(%rsp)
	.cfi_def_cfa_offset 232
	pushq	136(%rsp)
	.cfi_def_cfa_offset 240
	call	interpolate
	movl	0(%r13), %eax
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movsd	%xmm0, -8(%r14)
	testl	%eax, %eax
	jns	.L5656
	jmp	.L5654
.L5712:
	movq	88(%rsp), %rbp
	movl	$9, %edx
	movl	$1, %esi
	movl	$.LC222, %edi
	movl	52(%rsp), %r14d
	movq	%rbp, %rcx
	call	fwrite
	testq	%rbx, %rbx
	je	.L5706
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L5706
.L5679:
	movq	%rbx, %r13
	movl	$3, %r12d
	.p2align 4,,10
	.p2align 3
.L5665:
	leaq	(%rax,%rax,4), %rcx
	movl	%r12d, %edx
	movl	$.LC219, %esi
	movq	%rbp, %rdi
	leaq	(%rax,%rcx,2), %rax
	addq	$4, %r13
	addl	$1, %r12d
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rcx
	xorl	%eax, %eax
	call	fprintf
	movslq	0(%r13), %rax
	testl	%eax, %eax
	jns	.L5665
	movq	%rbp, %rsi
	movl	$10, %edi
	call	fputc
	movl	84(%rsp), %esi
	testl	%esi, %esi
	jle	.L5667
.L5663:
	movq	$0, 40(%rsp)
	movl	%r14d, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L5669:
	pxor	%xmm0, %xmm0
	movl	48(%rsp), %ecx
	xorl	%r13d, %r13d
	xorl	%r12d, %r12d
	cvtsi2sdl	40(%rsp), %xmm0
	mulsd	24(%rsp), %xmm0
	addsd	64(%rsp), %xmm0
	movsd	%xmm0, 8(%rsp)
	testl	%ecx, %ecx
	jg	.L5671
	jmp	.L5672
	.p2align 4,,10
	.p2align 3
.L5673:
	movq	%rbp, %rsi
	movl	$10, %edi
	addl	$1, %r12d
	call	fputc
	addl	16(%rsp), %r13d
	cmpl	48(%rsp), %r12d
	je	.L5672
.L5671:
	pxor	%xmm1, %xmm1
	movl	$.LC220, %esi
	movq	%rbp, %rdi
	movl	$2, %eax
	cvtsi2sdl	%r12d, %xmm1
	mulsd	24(%rsp), %xmm1
	movsd	8(%rsp), %xmm0
	addsd	32(%rsp), %xmm1
	call	fprintf
	testq	%rbx, %rbx
	je	.L5673
	movl	(%rbx), %edx
	testl	%edx, %edx
	js	.L5673
	movq	56(%rsp), %rdx
	movq	40(%rsp), %rdi
	movslq	%r13d, %rax
	movq	%rbx, %r14
	movq	(%rdx,%rdi,8), %rdx
	leaq	(%rdx,%rax,8), %r15
	.p2align 4,,10
	.p2align 3
.L5674:
	movsd	(%r15), %xmm0
	movq	%rbp, %rdi
	addq	$4, %r14
	addq	$8, %r15
	movl	$.LC221, %esi
	movl	$1, %eax
	call	fprintf
	movl	(%r14), %eax
	testl	%eax, %eax
	jns	.L5674
	jmp	.L5673
	.p2align 4,,10
	.p2align 3
.L5672:
	movq	%rbp, %rsi
	movl	$10, %edi
	call	fputc
	addq	$1, 40(%rsp)
	movq	40(%rsp), %rax
	subl	$1, %eax
	cmpl	%eax, 80(%rsp)
	jg	.L5669
.L5667:
	movq	%rbp, %rdi
	call	fflush
	movq	56(%rsp), %rbx
	movq	(%rbx), %rdi
	call	free
	addq	$152, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%rbx, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
.L5706:
	.cfi_restore_state
	movq	%rbp, %rsi
	movl	$10, %edi
	call	fputc
	jmp	.L5663
.L5709:
	movsd	X0(%rip), %xmm2
	movsd	L0(%rip), %xmm0
	movsd	Y0(%rip), %xmm7
	movsd	%xmm2, 64(%rsp)
	addsd	%xmm0, %xmm2
	movsd	%xmm7, 32(%rsp)
	addsd	%xmm7, %xmm0
	movapd	%xmm2, %xmm1
	jmp	.L5643
.L5644:
	divsd	%xmm2, %xmm1
	subsd	32(%rsp), %xmm0
	xorl	%r12d, %r12d
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	divsd	%xmm1, %xmm0
	movsd	%xmm1, 24(%rsp)
	addsd	.LC10(%rip), %xmm0
	cvttsd2sil	%xmm0, %eax
	movl	%eax, 48(%rsp)
	jmp	.L5645
.L5647:
	movq	%rbp, %rcx
	movl	$9, %edx
	movl	$1, %esi
	movl	$.LC222, %edi
	call	fwrite
	testq	%rbx, %rbx
	je	.L5705
	movslq	(%rbx), %rax
	testl	%eax, %eax
	jns	.L5679
.L5705:
	movq	%rbp, %rsi
	movl	$10, %edi
	call	fputc
	jmp	.L5667
.L5682:
	xorl	%r12d, %r12d
	xorl	%r13d, %r13d
	xorl	%r14d, %r14d
	jmp	.L5645
	.cfi_endproc
.LFE248:
	.size	output_field, .-output_field
	.section	.rodata.str1.1
.LC223:
	.string	"point.level >= 0"
	.text
	.p2align 4
	.globl	output_matrix
	.type	output_matrix, @function
output_matrix:
.LFB249:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	160(%rsp), %eax
	movq	152(%rsp), %r12
	movzbl	164(%rsp), %r13d
	movl	144(%rsp), %r15d
	testl	%eax, %eax
	cmove	N(%rip), %eax
	testq	%r12, %r12
	cmove	stdout(%rip), %r12
	movl	%eax, 12(%rsp)
	testb	%r13b, %r13b
	jne	.L5733
.L5716:
	movl	12(%rsp), %ebx
	pxor	%xmm0, %xmm0
	pxor	%xmm1, %xmm1
	movq	%r12, %rcx
	movl	$1, %edx
	movl	$4, %esi
	leaq	24(%rsp), %rdi
	cvtsd2ss	L0(%rip), %xmm1
	cvtsi2ssl	%ebx, %xmm0
	divss	%xmm0, %xmm1
	movss	%xmm0, 24(%rsp)
	movss	%xmm1, 8(%rsp)
	call	fwrite
	testl	%ebx, %ebx
	jle	.L5724
	pxor	%xmm0, %xmm0
	xorl	%r14d, %r14d
	leaq	48(%rsp), %rbx
	cvtss2sd	8(%rsp), %xmm0
	mulsd	.LC5(%rip), %xmm0
	movsd	%xmm0, (%rsp)
	.p2align 4,,10
	.p2align 3
.L5718:
	pxor	%xmm0, %xmm0
	movq	%r12, %rcx
	movl	$1, %edx
	movq	%rbx, %rdi
	cvtsi2ssl	%r14d, %xmm0
	mulss	8(%rsp), %xmm0
	movl	$4, %esi
	movl	%r14d, %ebp
	leal	1(%r14), %r14d
	cvtss2sd	%xmm0, %xmm0
	addsd	X0(%rip), %xmm0
	addsd	(%rsp), %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, 48(%rsp)
	call	fwrite
	cmpl	%r14d, 12(%rsp)
	jne	.L5718
	movl	$0, 12(%rsp)
	movslq	%r15d, %rax
	leaq	8(,%rax,8), %r14
	.p2align 4,,10
	.p2align 3
.L5723:
	pxor	%xmm0, %xmm0
	movq	%r12, %rcx
	movl	$1, %edx
	xorl	%ebx, %ebx
	cvtsi2ssl	12(%rsp), %xmm0
	movl	$4, %esi
	leaq	28(%rsp), %rdi
	mulss	8(%rsp), %xmm0
	cvtss2sd	%xmm0, %xmm0
	addsd	X0(%rip), %xmm0
	addsd	(%rsp), %xmm0
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, 28(%rsp)
	call	fwrite
	jmp	.L5722
	.p2align 4,,10
	.p2align 3
.L5719:
	movq	$0, 64(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	movsd	%xmm1, 56(%rsp)
	movsd	%xmm0, 64(%rsp)
	pushq	72(%rsp)
	.cfi_def_cfa_offset 160
	pushq	72(%rsp)
	.cfi_def_cfa_offset 168
	pushq	72(%rsp)
	.cfi_def_cfa_offset 176
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movq	%rax, %rdi
	movslq	%eax, %rsi
	movq	%rax, 36(%rsp)
	shrq	$32, %rdi
	movl	%edx, 44(%rsp)
	testl	%edx, %edx
	js	.L5734
	movq	grid(%rip), %rax
	movslq	%edx, %rdx
	movslq	%edi, %rcx
	pxor	%xmm0, %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rcx,8), %rax
	cvtsd2ss	(%rax,%r14), %xmm0
	movss	%xmm0, 32(%rsp)
.L5720:
	movq	%r12, %rcx
	movl	$1, %edx
	movl	$4, %esi
	leaq	32(%rsp), %rdi
	call	fwrite
	leal	1(%rbx), %eax
	cmpl	%ebp, %ebx
	je	.L5735
	movl	%eax, %ebx
.L5722:
	pxor	%xmm0, %xmm0
	pxor	%xmm1, %xmm1
	cvtsi2ssl	%ebx, %xmm0
	mulss	8(%rsp), %xmm0
	cvtss2sd	28(%rsp), %xmm1
	cvtss2sd	%xmm0, %xmm0
	addsd	Y0(%rip), %xmm0
	addsd	(%rsp), %xmm0
	cvtsd2ss	%xmm0, %xmm0
	cvtss2sd	%xmm0, %xmm0
	testb	%r13b, %r13b
	je	.L5719
	pxor	%xmm2, %xmm2
	movaps	%xmm2, 48(%rsp)
	movaps	%xmm2, 64(%rsp)
	movl	%r15d, 48(%rsp)
	movsd	%xmm1, 56(%rsp)
	movsd	%xmm0, 64(%rsp)
	pushq	72(%rsp)
	.cfi_def_cfa_offset 152
	pushq	72(%rsp)
	.cfi_def_cfa_offset 160
	pushq	72(%rsp)
	.cfi_def_cfa_offset 168
	pushq	72(%rsp)
	.cfi_def_cfa_offset 176
	call	interpolate
	cvtsd2ss	%xmm0, %xmm0
	movss	%xmm0, 64(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	jmp	.L5720
	.p2align 4,,10
	.p2align 3
.L5735:
	movl	12(%rsp), %ecx
	leal	1(%rcx), %eax
	cmpl	%ebp, %ecx
	je	.L5724
	movl	%eax, 12(%rsp)
	jmp	.L5723
.L5724:
	movq	%r12, %rdi
	call	fflush
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L5733:
	.cfi_restore_state
	leaq	48(%rsp), %rbx
	movl	$155, %edx
	movl	$.LC217, %esi
	movl	%r15d, 48(%rsp)
	movq	%rbx, %rdi
	movl	$-1, 52(%rsp)
	call	boundary_internal
	jmp	.L5716
.L5734:
	movl	$.LC223, %edx
	movl	$173, %esi
	movl	$.LC217, %edi
	call	qassert
	.cfi_endproc
.LFE249:
	.size	output_matrix, .-output_matrix
	.p2align 4
	.globl	cool_warm
	.type	cool_warm, @function
cool_warm:
.LFB251:
	.cfi_startproc
	xorl	%esi, %esi
	pxor	%xmm0, %xmm0
	movsd	.LC224(%rip), %xmm2
	movsd	.LC225(%rip), %xmm6
	cvtsi2sdl	%esi, %xmm0
	movsd	.LC226(%rip), %xmm4
	movq	%rdi, %rdx
	movsd	.LC227(%rip), %xmm3
	movsd	.LC10(%rip), %xmm5
	jmp	.L5738
	.p2align 4,,10
	.p2align 3
.L5739:
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%esi, %xmm0
	movapd	%xmm0, %xmm1
	mulsd	%xmm4, %xmm1
	divsd	%xmm3, %xmm1
	cvttsd2sil	%xmm1, %eax
	movslq	%eax, %rcx
	addl	$1, %eax
	cltq
	leaq	(%rcx,%rcx,2), %rcx
	movsd	basemap.66(,%rcx,8), %xmm6
	leaq	(%rax,%rax,2), %rax
	movsd	basemap.66(,%rax,8), %xmm2
.L5738:
	mulsd	%xmm4, %xmm0
	pxor	%xmm1, %xmm1
	addl	$1, %esi
	addq	$24, %rdx
	divsd	%xmm3, %xmm0
	cvttsd2sil	%xmm0, %eax
	cvtsi2sdl	%eax, %xmm1
	leal	1(%rax), %ecx
	cltq
	leaq	(%rax,%rax,2), %rax
	leaq	basemap.66(,%rax,8), %rdi
	movslq	%ecx, %rax
	leaq	(%rax,%rax,2), %rax
	subsd	%xmm1, %xmm0
	movapd	%xmm5, %xmm1
	leaq	basemap.66(,%rax,8), %rax
	subsd	%xmm0, %xmm1
	mulsd	%xmm0, %xmm2
	mulsd	%xmm1, %xmm6
	addsd	%xmm6, %xmm2
	movsd	8(%rax), %xmm6
	mulsd	%xmm0, %xmm6
	movsd	%xmm2, -24(%rdx)
	movsd	8(%rdi), %xmm2
	mulsd	16(%rax), %xmm0
	mulsd	%xmm1, %xmm2
	mulsd	16(%rdi), %xmm1
	addsd	%xmm6, %xmm2
	addsd	%xmm0, %xmm1
	movsd	%xmm2, -16(%rdx)
	movsd	%xmm1, -8(%rdx)
	cmpl	$127, %esi
	jne	.L5739
	ret
	.cfi_endproc
.LFE251:
	.size	cool_warm, .-cool_warm
	.p2align 4
	.globl	gray
	.type	gray, @function
gray:
.LFB252:
	.cfi_startproc
	movsd	.LC227(%rip), %xmm1
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L5741:
	pxor	%xmm0, %xmm0
	addq	$24, %rdi
	cvtsi2sdl	%eax, %xmm0
	addl	$1, %eax
	divsd	%xmm1, %xmm0
	movsd	%xmm0, -24(%rdi)
	movsd	%xmm0, -16(%rdi)
	movsd	%xmm0, -8(%rdi)
	cmpl	$127, %eax
	jne	.L5741
	ret
	.cfi_endproc
.LFE252:
	.size	gray, .-gray
	.p2align 4
	.globl	randomap
	.type	randomap, @function
randomap:
.LFB253:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	movq	%rdi, %rbp
	xorl	%edi, %edi
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	leaq	24(%rbp), %rbx
	addq	$3072, %rbp
	call	srand
	.p2align 4,,10
	.p2align 3
.L5744:
	leaq	-24(%rbx), %r12
.L5745:
	call	rand
	pxor	%xmm0, %xmm0
	addq	$8, %r12
	movsd	.LC10(%rip), %xmm1
	cvtsi2sdl	%eax, %xmm0
	addsd	%xmm0, %xmm0
	divsd	.LC228(%rip), %xmm0
	subsd	%xmm0, %xmm1
	movsd	.LC10(%rip), %xmm0
	addsd	%xmm1, %xmm0
	mulsd	.LC5(%rip), %xmm0
	movsd	%xmm0, -8(%r12)
	cmpq	%rbx, %r12
	jne	.L5745
	leaq	24(%r12), %rbx
	cmpq	%rbp, %rbx
	jne	.L5744
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE253:
	.size	randomap, .-randomap
	.p2align 4
	.globl	blue_white_red
	.type	blue_white_red, @function
blue_white_red:
.LFB254:
	.cfi_startproc
	movsd	.LC229(%rip), %xmm2
	movsd	.LC10(%rip), %xmm1
	movq	%rdi, %rax
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L5750:
	pxor	%xmm0, %xmm0
	movsd	%xmm1, 16(%rax)
	addq	$24, %rax
	cvtsi2sdl	%edx, %xmm0
	addl	$1, %edx
	divsd	%xmm2, %xmm0
	movsd	%xmm0, -24(%rax)
	movsd	%xmm0, -16(%rax)
	cmpl	$64, %edx
	jne	.L5750
	leaq	1536(%rdi), %rax
	leaq	1496(%rdi), %rdx
	leaq	3048(%rdi), %rcx
	.p2align 4,,10
	.p2align 3
.L5751:
	movsd	%xmm1, (%rax)
	movsd	(%rdx), %xmm0
	addq	$24, %rax
	subq	$24, %rdx
	movsd	%xmm0, -16(%rax)
	movsd	%xmm0, -8(%rax)
	cmpq	%rcx, %rax
	jne	.L5751
	ret
	.cfi_endproc
.LFE254:
	.size	blue_white_red, .-blue_white_red
	.section	.rodata.str1.1
.LC230:
	.string	"i < NCMAP - 1"
	.text
	.p2align 4
	.globl	colormap_color
	.type	colormap_color, @function
colormap_color:
.LFB255:
	.cfi_startproc
	subq	$24, %rsp
	.cfi_def_cfa_offset 32
	ucomisd	.LC2(%rip), %xmm0
	jp	.L5755
	je	.L5772
.L5755:
	ucomisd	%xmm1, %xmm2
	jp	.L5767
	jne	.L5767
	movsd	.LC10(%rip), %xmm3
	movq	%rdi, %rcx
	movl	$24, %eax
	pxor	%xmm1, %xmm1
.L5758:
	movsd	.LC231(%rip), %xmm4
	addq	%rax, %rdi
	xorl	%eax, %eax
.L5763:
	movsd	(%rcx,%rax,8), %xmm0
	movsd	(%rdi,%rax,8), %xmm2
	mulsd	%xmm3, %xmm0
	mulsd	%xmm1, %xmm2
	addsd	%xmm2, %xmm0
	mulsd	%xmm4, %xmm0
	cvttsd2sil	%xmm0, %edx
	movb	%dl, 13(%rsp,%rax)
	addq	$1, %rax
	cmpq	$3, %rax
	jne	.L5763
.L5757:
	movzbl	15(%rsp), %edx
	movzwl	13(%rsp), %eax
	addq	$24, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	salq	$16, %rdx
	orl	%edx, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L5767:
	.cfi_restore_state
	subsd	%xmm1, %xmm0
	subsd	%xmm1, %xmm2
	pxor	%xmm1, %xmm1
	divsd	%xmm2, %xmm0
	comisd	%xmm0, %xmm1
	jnb	.L5765
	movsd	.LC10(%rip), %xmm2
	comisd	%xmm2, %xmm0
	jb	.L5770
	movapd	%xmm1, %xmm3
	leaq	3000(%rdi), %rcx
	movl	$3024, %eax
	movapd	%xmm2, %xmm1
	jmp	.L5758
	.p2align 4,,10
	.p2align 3
.L5772:
	xorl	%eax, %eax
	movb	$0, 15(%rsp)
	movw	%ax, 13(%rsp)
	jmp	.L5757
	.p2align 4,,10
	.p2align 3
.L5770:
	mulsd	.LC227(%rip), %xmm0
	pxor	%xmm3, %xmm3
	cvttsd2sil	%xmm0, %eax
	movapd	%xmm0, %xmm1
	cvtsi2sdl	%eax, %xmm3
	subsd	%xmm3, %xmm1
	cmpl	$125, %eax
	jg	.L5762
	cltq
	movapd	%xmm2, %xmm3
	leaq	(%rax,%rax,2), %rax
	subsd	%xmm1, %xmm3
	salq	$3, %rax
	leaq	(%rdi,%rax), %rcx
	addq	$24, %rax
	jmp	.L5758
.L5762:
	movl	$.LC230, %edx
	movl	$321, %esi
	movl	$.LC217, %edi
	call	qassert
.L5765:
	movsd	.LC10(%rip), %xmm3
	movq	%rdi, %rcx
	movl	$24, %eax
	jmp	.L5758
	.cfi_endproc
.LFE255:
	.size	colormap_color, .-colormap_color
	.section	.rodata.str1.1
.LC232:
	.string	" "
.LC233:
	.string	" > "
.LC234:
	.string	"ffmpeg"
.LC235:
	.string	"avconv"
	.section	.rodata.str1.8
	.align 8
.LC236:
	.string	"open_image(): cannot find '%s' or 'ffmpeg'/'avconv'\n  falling back to raw PPM outputs\n"
	.section	.rodata.str1.1
.LC237:
	.string	"convert"
	.section	.rodata.str1.8
	.align 8
.LC238:
	.string	"open_image(): cannot find 'convert'\n  falling back to raw PPM outputs\n"
	.text
	.p2align 4
	.globl	open_image
	.type	open_image, @function
open_image:
.LFB262:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	movq	%rsi, %r14
	pushq	%r13
	pushq	%r12
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	movq	%rdi, %r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset 3, -56
	call	is_animation
	movq	%rax, -56(%rbp)
	testq	%rax, %rax
	je	.L5774
	movl	open_image_data+16(%rip), %eax
	movq	%rsp, -64(%rbp)
	movl	%eax, -72(%rbp)
	testl	%eax, %eax
	jle	.L5775
	movslq	%eax, %rbx
	movq	open_image_data+8(%rip), %r13
	xorl	%r15d, %r15d
	salq	$3, %rbx
	jmp	.L5778
	.p2align 4,,10
	.p2align 3
.L5776:
	addq	$8, %r15
	cmpq	%r15, %rbx
	je	.L5775
.L5778:
	movq	0(%r13,%r15), %rsi
	movq	%r12, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L5776
	movq	open_image_data(%rip), %rax
	movq	(%rax,%r15), %rax
	testq	%rax, %rax
	je	.L5775
.L5777:
	movq	-64(%rbp), %rsp
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L5775:
	.cfi_restore_state
	movq	%r12, %rdi
	call	strlen
	movq	%rax, %rbx
	xorl	%eax, %eax
	testq	%r14, %r14
	je	.L5779
	movq	%r14, %rdi
	call	strlen
.L5779:
	leal	11(%rax,%rbx), %eax
	cltq
	addq	$15, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movq	-56(%rbp), %rax
	movl	$846033008, (%rsp)
	leaq	4(%rsp), %rdi
	movq	%rsp, %rbx
	leaq	1(%rax), %rsi
	call	strcpy
	movl	has_ffmpeg.65(%rip), %edi
	testl	%edi, %edi
	js	.L5808
	je	.L5785
.L5783:
	cmpb	$0, added.64(%rip)
	je	.L5809
.L5786:
	movl	-72(%rbp), %eax
	movq	open_image_data+8(%rip), %rdi
	addl	$1, %eax
	movl	%eax, open_image_data+16(%rip)
	cltq
	leaq	0(,%rax,8), %r15
	movq	%r15, %rsi
	call	realloc
	leaq	-8(%r15), %rcx
	movq	%r12, %rdi
	leaq	(%rax,%rcx), %r13
	movq	%rax, open_image_data+8(%rip)
	movq	%rcx, -72(%rbp)
	call	strdup
	movq	%rax, 0(%r13)
	testq	%r14, %r14
	je	.L5787
	movq	%rbx, %rdi
	call	strlen
	movq	%r14, %rsi
	movb	$32, (%rbx,%rax)
	leaq	1(%rbx,%rax), %rdi
	call	strcpy
.L5787:
	movq	-56(%rbp), %rdi
	movl	$.LC51, %esi
	call	strcmp
	movl	$.LC232, %esi
	movq	%rbx, %rdi
	testl	%eax, %eax
	movl	$.LC233, %eax
	cmovne	%rax, %rsi
	call	strcat
	movq	%r12, %rsi
	movq	%rbx, %rdi
	call	strcat
	movq	open_image_data(%rip), %rdi
	movq	%r15, %rsi
	call	realloc
	movq	-72(%rbp), %r12
	movl	$.LC76, %esi
	movq	%rbx, %rdi
	movq	%rax, open_image_data(%rip)
	addq	%rax, %r12
	call	qpopen
	movq	%rax, (%r12)
	jmp	.L5777
	.p2align 4,,10
	.p2align 3
.L5774:
	movl	has_convert.63(%rip), %esi
	movq	%rsp, %rbx
	testl	%esi, %esi
	js	.L5810
	je	.L5793
.L5792:
	movq	%r12, %rdi
	call	strlen
	leal	16(%rax), %r13d
	testq	%r14, %r14
	je	.L5795
	movq	%r14, %rdi
	call	strlen
	movl	$8237, %edx
	movq	%r14, %rsi
	movq	%rax, %r15
	leal	0(%r13,%rax), %eax
	cltq
	addq	$15, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movabsq	$2338619886616342371, %rax
	movw	%dx, 12(%rsp)
	leaq	14(%rsp), %rdi
	movq	%r15, %rdx
	movq	%rsp, %r13
	movq	%rax, (%rsp)
	movl	$980250736, 8(%rsp)
	call	memcpy
	movl	$32, %ecx
	movw	%cx, 14(%rsp,%r15)
.L5796:
	movq	%r12, %rsi
	movq	%r13, %rdi
	call	strcat
	movl	$.LC76, %esi
	movq	%r13, %rdi
	call	qpopen
.L5794:
	movq	%rbx, %rsp
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
.L5791:
	.cfi_restore_state
	movl	$70, %edx
	movl	$1, %esi
	movl	$.LC238, %edi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$0, has_convert.63(%rip)
.L5793:
	movl	$.LC76, %esi
	movq	%r12, %rdi
	call	ppm_fallback
	jmp	.L5794
	.p2align 4,,10
	.p2align 3
.L5809:
	movl	$open_image_cleanup, %edi
	call	free_solver_func_add
	movb	$1, added.64(%rip)
	jmp	.L5786
.L5795:
	movslq	%r13d, %rax
	addq	$15, %rax
	andq	$-16, %rax
	subq	%rax, %rsp
	movabsq	$2338619886616342371, %rax
	movq	%rax, (%rsp)
	movl	$8237, %eax
	movq	%rsp, %r13
	movl	$980250736, 8(%rsp)
	movw	%ax, 12(%rsp)
	movb	$0, 14(%rsp)
	jmp	.L5796
	.p2align 4,,10
	.p2align 3
.L5808:
	movq	%rsp, %rdi
	call	which
	testb	%al, %al
	jne	.L5811
.L5781:
	movq	stderr(%rip), %rdi
	movq	%rbx, %rdx
	movl	$.LC236, %esi
	xorl	%eax, %eax
	call	fprintf
	movl	$0, has_ffmpeg.65(%rip)
.L5785:
	movl	$.LC116, %esi
	movq	%r12, %rdi
	call	ppm_fallback
	jmp	.L5777
	.p2align 4,,10
	.p2align 3
.L5810:
	movl	$.LC237, %edi
	call	which
	testb	%al, %al
	je	.L5791
	movl	$1, has_convert.63(%rip)
	jmp	.L5792
.L5811:
	movl	$.LC234, %edi
	call	which
	testb	%al, %al
	je	.L5782
.L5784:
	movl	$1, has_ffmpeg.65(%rip)
	movl	open_image_data+16(%rip), %eax
	movl	%eax, -72(%rbp)
	jmp	.L5783
.L5782:
	movl	$.LC235, %edi
	call	which
	testb	%al, %al
	jne	.L5784
	jmp	.L5781
	.cfi_endproc
.LFE262:
	.size	open_image, .-open_image
	.p2align 4
	.globl	close_image
	.type	close_image, @function
close_image:
.LFB263:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	movq	%rsi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	movq	%rdi, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	call	is_animation
	testq	%rax, %rax
	je	.L5813
	movslq	open_image_data+16(%rip), %rbp
	testl	%ebp, %ebp
	jle	.L5814
	movq	open_image_data+8(%rip), %r14
	salq	$3, %rbp
	xorl	%ebx, %ebx
	jmp	.L5817
	.p2align 4,,10
	.p2align 3
.L5815:
	addq	$8, %rbx
	cmpq	%rbp, %rbx
	je	.L5814
.L5817:
	movq	(%r14,%rbx), %rsi
	movq	%r12, %rdi
	call	strcmp
	testl	%eax, %eax
	jne	.L5815
	movq	open_image_data(%rip), %rax
	cmpq	$0, (%rax,%rbx)
	je	.L5814
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L5814:
	.cfi_restore_state
	popq	%rbx
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	movq	%r13, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	fclose
	.p2align 4,,10
	.p2align 3
.L5813:
	.cfi_restore_state
	movl	$.LC237, %edi
	call	which
	testb	%al, %al
	je	.L5814
	movq	qpopen_pipes(%rip), %rax
	testq	%rax, %rax
	jne	.L5818
	jmp	.L5821
	.p2align 4,,10
	.p2align 3
.L5819:
	addq	$8, %rax
.L5818:
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.L5821
	cmpq	%rdx, %r13
	jne	.L5819
	movq	$1, (%rax)
	jmp	.L5819
.L5821:
	popq	%rbx
	.cfi_def_cfa_offset 40
	movq	%r13, %rdi
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	jmp	pclose
	.cfi_endproc
.LFE263:
	.size	close_image, .-close_image
	.section	.rodata.str1.1
.LC240:
	.string	"P6\n%u %u 255\n"
	.text
	.p2align 4
	.globl	output_ppm
	.type	output_ppm, @function
output_ppm:
.LFB264:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pxor	%xmm5, %xmm5
	movl	$0, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$3288, %rsp
	.cfi_def_cfa_offset 3344
	movl	3344(%rsp), %eax
	movl	3448(%rsp), %ebp
	movl	3360(%rsp), %r12d
	movsd	3376(%rsp), %xmm2
	movl	%eax, 64(%rsp)
	movq	3352(%rsp), %rax
	movsd	3400(%rsp), %xmm3
	testl	%r12d, %r12d
	cmove	N(%rip), %r12d
	movsd	%xmm2, 40(%rsp)
	ucomisd	%xmm5, %xmm2
	movq	%rax, 104(%rsp)
	movq	3368(%rsp), %rax
	movsd	%xmm3, 24(%rsp)
	movsd	3416(%rsp), %xmm3
	movsd	3384(%rsp), %xmm7
	movq	%rax, 112(%rsp)
	movzbl	3408(%rsp), %r13d
	setnp	%al
	movsd	%xmm3, 32(%rsp)
	movsd	3424(%rsp), %xmm3
	movsd	3432(%rsp), %xmm1
	cmovne	%edx, %eax
	movq	3456(%rsp), %rbx
	movsd	3440(%rsp), %xmm0
	movsd	%xmm7, 48(%rsp)
	movsd	%xmm3, 88(%rsp)
	testb	%al, %al
	je	.L5831
	ucomisd	%xmm5, %xmm7
	setnp	%al
	cmovne	%edx, %eax
	testb	%al, %al
	jne	.L5890
.L5831:
	movsd	32(%rsp), %xmm2
	pxor	%xmm6, %xmm6
	movl	$0, %edx
	ucomisd	%xmm6, %xmm2
	movsd	88(%rsp), %xmm2
	setnp	%al
	cmovne	%edx, %eax
	ucomisd	%xmm6, %xmm2
	setnp	%cl
	cmovne	%edx, %ecx
	andl	%ecx, %eax
	ucomisd	%xmm6, %xmm1
	setnp	%cl
	cmovne	%edx, %ecx
	testb	%cl, %al
	je	.L5837
	ucomisd	%xmm6, %xmm0
	setnp	%al
	cmovne	%edx, %eax
	testb	%al, %al
	jne	.L5891
.L5837:
	testq	%rbx, %rbx
	movl	$jet, %eax
	cmove	%rax, %rbx
	testb	%r13b, %r13b
	je	.L5839
	movl	64(%rsp), %eax
	movsd	%xmm0, 8(%rsp)
	movsd	%xmm1, (%rsp)
	movl	%eax, 224(%rsp)
	testl	%ebp, %ebp
	je	.L5840
	movl	$608, %edx
	movl	$.LC217, %esi
	leaq	224(%rsp), %rdi
	movl	%ebp, 228(%rsp)
	movl	$-1, 232(%rsp)
	call	boundary_internal
	movsd	(%rsp), %xmm1
	movsd	8(%rsp), %xmm0
.L5839:
	pxor	%xmm2, %xmm2
	subsd	32(%rsp), %xmm1
	subsd	88(%rsp), %xmm0
	cvtsi2sdl	%r12d, %xmm2
	movapd	%xmm1, %xmm3
	divsd	%xmm2, %xmm3
	divsd	%xmm3, %xmm0
	movsd	%xmm3, 8(%rsp)
	cvttsd2sil	%xmm0, %r14d
	movl	%r14d, %eax
	andl	$1, %eax
	cmpl	$1, %eax
	sbbl	$-1, %r14d
	movslq	%r14d, %rdi
	movl	%r14d, 68(%rsp)
	salq	$3, %rdi
	call	malloc
	movq	%rax, 96(%rsp)
	movq	%rax, %r15
	movl	%r14d, %eax
	imull	%r12d, %eax
	cltq
	leaq	(%rax,%rax,2), %rdi
	movq	%rax, 120(%rsp)
	call	malloc
	testl	%r14d, %r14d
	jle	.L5842
	movslq	%r12d, %rdx
	leal	-1(%r14), %ecx
	leaq	(%rdx,%rdx,2), %rsi
	leaq	8(%r15,%rcx,8), %rcx
	movq	%r15, %rdx
	.p2align 4,,10
	.p2align 3
.L5843:
	movq	%rax, (%rdx)
	addq	$8, %rdx
	addq	%rsi, %rax
	cmpq	%rdx, %rcx
	jne	.L5843
	leaq	224(%rsp), %rdi
	movl	$1, %r14d
	call	*%rbx
	movslq	64(%rsp), %rax
	movsd	8(%rsp), %xmm7
	mulsd	.LC5(%rip), %xmm7
	leaq	8(,%rax,8), %rax
	movq	%rax, 56(%rsp)
	movslq	%ebp, %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 80(%rsp)
	movsd	%xmm7, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L5846:
	leal	-1(%r14), %eax
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	mulsd	8(%rsp), %xmm0
	addsd	88(%rsp), %xmm0
	addsd	16(%rsp), %xmm0
	movsd	%xmm0, (%rsp)
	testl	%r12d, %r12d
	jle	.L5856
	movl	68(%rsp), %eax
	movq	96(%rsp), %rbx
	subl	%r14d, %eax
	cltq
	movq	(%rbx,%rax,8), %r15
	xorl	%ebx, %ebx
	jmp	.L5855
	.p2align 4,,10
	.p2align 3
.L5893:
	testb	%r13b, %r13b
	jne	.L5892
	movsd	(%rsp), %xmm7
	movsd	24(%rsp), %xmm3
	subq	$8, %rsp
	.cfi_def_cfa_offset 3352
	movsd	%xmm1, 200(%rsp)
	movsd	%xmm7, 208(%rsp)
	movsd	%xmm3, 216(%rsp)
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3360
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3368
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3376
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 3344
	movsd	.LC2(%rip), %xmm0
	movq	%rax, %rsi
	movslq	%eax, %rdi
	movq	%rax, 136(%rsp)
	shrq	$32, %rsi
	movl	%edx, 144(%rsp)
	testl	%edx, %edx
	js	.L5851
	movq	grid(%rip), %rax
	movslq	%edx, %rdx
	movslq	%esi, %rsi
	pxor	%xmm2, %xmm2
	movq	24(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movq	80(%rsp), %rsi
	comisd	(%rax,%rsi), %xmm2
	ja	.L5851
	movq	56(%rsp), %rsi
	movsd	(%rax,%rsi), %xmm0
	.p2align 4,,10
	.p2align 3
.L5851:
	movsd	48(%rsp), %xmm2
	movsd	40(%rsp), %xmm1
	addl	$1, %ebx
	addq	$3, %r15
	leaq	224(%rsp), %rdi
	call	colormap_color
	cltq
	movzbl	%ah, %ecx
	movb	%al, -3(%r15)
	shrq	$16, %rax
	movb	%cl, -2(%r15)
	movb	%al, -1(%r15)
	cmpl	%ebx, %r12d
	je	.L5856
.L5855:
	pxor	%xmm1, %xmm1
	cvtsi2sdl	%ebx, %xmm1
	mulsd	8(%rsp), %xmm1
	addsd	32(%rsp), %xmm1
	addsd	16(%rsp), %xmm1
	testl	%ebp, %ebp
	jne	.L5893
	testb	%r13b, %r13b
	jne	.L5894
	movsd	(%rsp), %xmm7
	movsd	24(%rsp), %xmm3
	subq	$8, %rsp
	.cfi_def_cfa_offset 3352
	movsd	%xmm1, 200(%rsp)
	movsd	%xmm7, 208(%rsp)
	movsd	%xmm3, 216(%rsp)
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3360
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3368
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3376
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 3344
	movq	%rax, %rcx
	movslq	%eax, %rdi
	movq	%rax, 148(%rsp)
	movq	.LC2(%rip), %rax
	shrq	$32, %rcx
	movl	%edx, 156(%rsp)
	movq	%rax, %xmm0
	testl	%edx, %edx
	js	.L5851
	movq	grid(%rip), %rax
	movslq	%edx, %rdx
	movslq	%ecx, %rsi
	movq	56(%rsp), %rcx
	movq	24(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%rcx), %xmm0
	jmp	.L5851
	.p2align 4,,10
	.p2align 3
.L5892:
	movsd	(%rsp), %xmm7
	movsd	24(%rsp), %xmm3
	movl	%ebp, 160(%rsp)
	movsd	%xmm1, 168(%rsp)
	movsd	%xmm1, 72(%rsp)
	movsd	%xmm7, 176(%rsp)
	movsd	%xmm3, 184(%rsp)
	pushq	184(%rsp)
	.cfi_def_cfa_offset 3352
	pushq	184(%rsp)
	.cfi_def_cfa_offset 3360
	pushq	184(%rsp)
	.cfi_def_cfa_offset 3368
	pushq	184(%rsp)
	.cfi_def_cfa_offset 3376
	call	interpolate
	pxor	%xmm4, %xmm4
	addq	$32, %rsp
	.cfi_def_cfa_offset 3344
	movapd	%xmm0, %xmm2
	movsd	.LC2(%rip), %xmm0
	comisd	%xmm2, %xmm4
	ja	.L5851
	movl	64(%rsp), %eax
	movsd	72(%rsp), %xmm1
	movsd	(%rsp), %xmm7
	movsd	24(%rsp), %xmm3
	movl	%eax, 192(%rsp)
	movsd	%xmm1, 200(%rsp)
	movsd	%xmm7, 208(%rsp)
	movsd	%xmm3, 216(%rsp)
.L5889:
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3352
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3360
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3368
	pushq	216(%rsp)
	.cfi_def_cfa_offset 3376
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 3344
	jmp	.L5851
	.p2align 4,,10
	.p2align 3
.L5894:
	movl	64(%rsp), %eax
	movsd	(%rsp), %xmm2
	movsd	%xmm1, 200(%rsp)
	movsd	24(%rsp), %xmm7
	movl	%eax, 192(%rsp)
	movsd	%xmm2, 208(%rsp)
	movsd	%xmm7, 216(%rsp)
	jmp	.L5889
	.p2align 4,,10
	.p2align 3
.L5856:
	leal	1(%r14), %eax
	cmpl	%r14d, 68(%rsp)
	je	.L5847
	movl	%eax, %r14d
	jmp	.L5846
.L5842:
	leaq	224(%rsp), %rdi
	call	*%rbx
	.p2align 4,,10
	.p2align 3
.L5847:
	movq	104(%rsp), %rax
	movq	112(%rsp), %rbx
	testq	%rax, %rax
	cmove	stdout(%rip), %rax
	movq	%rax, 104(%rsp)
	testq	%rbx, %rbx
	je	.L5858
	movq	3464(%rsp), %rsi
	movq	%rbx, %rdi
	call	open_image
	movl	68(%rsp), %ecx
	movl	%r12d, %edx
	movl	$.LC240, %esi
	movq	%rax, %rbp
	movq	%rax, %rdi
	xorl	%eax, %eax
	call	fprintf
	movq	96(%rsp), %rax
	movq	120(%rsp), %rdx
	movq	%rbp, %rcx
	movl	$3, %esi
	movq	(%rax), %r12
	movq	%r12, %rdi
	call	fwrite
	movq	%rbp, %rsi
	movq	%rbx, %rdi
	call	close_image
.L5859:
	movq	%r12, %rdi
	call	free
	movq	96(%rsp), %rdi
	addq	$3288, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
.L5840:
	.cfi_restore_state
	movl	$610, %edx
	movl	$.LC217, %esi
	leaq	224(%rsp), %rdi
	movl	$-1, 228(%rsp)
	call	boundary_internal
	movsd	8(%rsp), %xmm0
	movsd	(%rsp), %xmm1
	jmp	.L5839
.L5858:
	movq	104(%rsp), %rbx
	movl	68(%rsp), %ecx
	movl	%r12d, %edx
	xorl	%eax, %eax
	movl	$.LC240, %esi
	movq	%rbx, %rdi
	call	fprintf
	movq	96(%rsp), %rax
	movq	120(%rsp), %rdx
	movq	%rbx, %rcx
	movl	$3, %esi
	movq	(%rax), %r12
	movq	%r12, %rdi
	call	fwrite
	movq	%rbx, %rdi
	call	fflush
	jmp	.L5859
.L5890:
	movsd	3392(%rsp), %xmm2
	movl	64(%rsp), %esi
	leaq	224(%rsp), %rdi
	movsd	%xmm0, 16(%rsp)
	movsd	%xmm1, 8(%rsp)
	movsd	%xmm2, (%rsp)
	call	statsf
	movsd	(%rsp), %xmm2
	pxor	%xmm3, %xmm3
	movsd	8(%rsp), %xmm1
	movsd	16(%rsp), %xmm0
	comisd	%xmm2, %xmm3
	ja	.L5895
	movsd	240(%rsp), %xmm3
	pxor	%xmm7, %xmm7
	divsd	256(%rsp), %xmm3
	ucomisd	%xmm7, %xmm2
	jp	.L5835
	movq	%xmm2, %rax
	cmove	.LC239(%rip), %rax
	movq	%rax, %xmm2
.L5835:
	mulsd	248(%rsp), %xmm2
	movapd	%xmm3, %xmm6
	subsd	%xmm2, %xmm6
	addsd	%xmm2, %xmm3
	movsd	%xmm6, 40(%rsp)
	movsd	%xmm3, 48(%rsp)
	jmp	.L5831
.L5891:
	movsd	X0(%rip), %xmm2
	movsd	L0(%rip), %xmm0
	movsd	Y0(%rip), %xmm6
	movsd	%xmm2, 32(%rsp)
	addsd	%xmm0, %xmm2
	movsd	%xmm6, 88(%rsp)
	addsd	%xmm6, %xmm0
	movapd	%xmm2, %xmm1
	jmp	.L5837
.L5895:
	movsd	224(%rsp), %xmm2
	movsd	%xmm2, 40(%rsp)
	movsd	232(%rsp), %xmm2
	movsd	%xmm2, 48(%rsp)
	jmp	.L5831
	.cfi_endproc
.LFE264:
	.size	output_ppm, .-output_ppm
	.section	.rodata.str1.1
.LC241:
	.string	"ncols          %d\n"
.LC242:
	.string	"nrows          %d\n"
.LC243:
	.string	"xllcorner      %g\n"
.LC244:
	.string	"yllcorner      %g\n"
.LC245:
	.string	"cellsize       %g\n"
.LC246:
	.string	"nodata_value   -9999\n"
.LC247:
	.string	"-9999 "
.LC248:
	.string	"%f "
	.text
	.p2align 4
	.globl	output_grd
	.type	output_grd, @function
output_grd:
.LFB265:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pxor	%xmm3, %xmm3
	movl	$0, %edx
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	movq	248(%rsp), %rbp
	movl	240(%rsp), %eax
	movsd	280(%rsp), %xmm7
	movsd	256(%rsp), %xmm2
	testq	%rbp, %rbp
	movl	%eax, 52(%rsp)
	cmove	stdout(%rip), %rbp
	ucomisd	%xmm3, %xmm7
	movsd	%xmm2, 8(%rsp)
	movsd	272(%rsp), %xmm2
	movsd	288(%rsp), %xmm0
	movzbl	264(%rsp), %r14d
	movl	304(%rsp), %r12d
	movsd	%xmm7, 72(%rsp)
	movsd	296(%rsp), %xmm1
	movsd	%xmm2, 32(%rsp)
	setnp	%al
	cmovne	%edx, %eax
	ucomisd	%xmm3, %xmm2
	setnp	%cl
	cmovne	%edx, %ecx
	andl	%ecx, %eax
	ucomisd	%xmm3, %xmm0
	setnp	%cl
	cmovne	%edx, %ecx
	testb	%cl, %al
	je	.L5898
	ucomisd	%xmm3, %xmm1
	setnp	%al
	cmovne	%edx, %eax
	testb	%al, %al
	jne	.L5938
.L5898:
	testb	%r14b, %r14b
	je	.L5900
	movl	52(%rsp), %eax
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm0, 16(%rsp)
	movl	%eax, 144(%rsp)
	testl	%r12d, %r12d
	je	.L5901
	movl	$733, %edx
	movl	$.LC217, %esi
	leaq	144(%rsp), %rdi
	movl	%r12d, 148(%rsp)
	movl	$-1, 152(%rsp)
	call	boundary_internal
	movsd	16(%rsp), %xmm0
	movsd	24(%rsp), %xmm1
.L5900:
	subsd	32(%rsp), %xmm0
	movl	$.LC241, %esi
	movq	%rbp, %rdi
	xorl	%eax, %eax
	movsd	8(%rsp), %xmm3
	subsd	72(%rsp), %xmm1
	divsd	%xmm3, %xmm0
	divsd	%xmm3, %xmm1
	cvttsd2sil	%xmm0, %r13d
	movl	%r13d, %edx
	cvttsd2sil	%xmm1, %r15d
	call	fprintf
	movl	$.LC242, %esi
	movq	%rbp, %rdi
	xorl	%eax, %eax
	movl	%r15d, %edx
	call	fprintf
	movsd	32(%rsp), %xmm0
	movl	$.LC243, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	72(%rsp), %xmm0
	movl	$.LC244, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	8(%rsp), %xmm0
	movl	$.LC245, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	call	fprintf
	movq	%rbp, %rcx
	movl	$21, %edx
	movl	$1, %esi
	movl	$.LC246, %edi
	call	fwrite
	subl	$1, %r15d
	js	.L5905
	movslq	52(%rsp), %rax
	movsd	8(%rsp), %xmm3
	mulsd	.LC5(%rip), %xmm3
	leaq	8(,%rax,8), %rax
	movq	%rax, 40(%rsp)
	movslq	%r12d, %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 64(%rsp)
	movsd	%xmm3, 24(%rsp)
	.p2align 4,,10
	.p2align 3
.L5904:
	pxor	%xmm0, %xmm0
	xorl	%ebx, %ebx
	cvtsi2sdl	%r15d, %xmm0
	mulsd	8(%rsp), %xmm0
	addsd	72(%rsp), %xmm0
	addsd	24(%rsp), %xmm0
	movsd	%xmm0, 16(%rsp)
	testl	%r13d, %r13d
	jg	.L5903
	jmp	.L5916
	.p2align 4,,10
	.p2align 3
.L5940:
	testb	%r14b, %r14b
	jne	.L5939
	movsd	16(%rsp), %xmm7
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movq	$0, 168(%rsp)
	movsd	%xmm1, 152(%rsp)
	movsd	%xmm7, 160(%rsp)
	pushq	168(%rsp)
	.cfi_def_cfa_offset 256
	pushq	168(%rsp)
	.cfi_def_cfa_offset 264
	pushq	168(%rsp)
	.cfi_def_cfa_offset 272
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movq	%rax, %rdi
	movslq	%eax, %rsi
	movq	%rax, 88(%rsp)
	movq	.LC2(%rip), %rax
	shrq	$32, %rdi
	movl	%edx, 96(%rsp)
	movq	%rax, %xmm0
	testl	%edx, %edx
	js	.L5909
	movq	grid(%rip), %rax
	movslq	%edx, %rdx
	movslq	%edi, %rcx
	pxor	%xmm2, %xmm2
	movq	24(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movq	64(%rsp), %rcx
	comisd	(%rax,%rcx), %xmm2
	ja	.L5909
	movq	40(%rsp), %rsi
	movsd	(%rax,%rsi), %xmm0
	.p2align 4,,10
	.p2align 3
.L5909:
	ucomisd	.LC2(%rip), %xmm0
	jp	.L5913
.L5942:
	jne	.L5913
	movq	%rbp, %rcx
	movl	$6, %edx
	movl	$1, %esi
	addl	$1, %ebx
	movl	$.LC247, %edi
	call	fwrite
	cmpl	%ebx, %r13d
	je	.L5916
.L5903:
	pxor	%xmm1, %xmm1
	cvtsi2sdl	%ebx, %xmm1
	mulsd	8(%rsp), %xmm1
	addsd	32(%rsp), %xmm1
	addsd	24(%rsp), %xmm1
	testl	%r12d, %r12d
	jne	.L5940
	testb	%r14b, %r14b
	jne	.L5941
	movsd	16(%rsp), %xmm3
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movq	$0, 168(%rsp)
	movsd	%xmm1, 152(%rsp)
	movsd	%xmm3, 160(%rsp)
	pushq	168(%rsp)
	.cfi_def_cfa_offset 256
	pushq	168(%rsp)
	.cfi_def_cfa_offset 264
	pushq	168(%rsp)
	.cfi_def_cfa_offset 272
	call	locate
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movq	%rax, %rdi
	movslq	%eax, %rsi
	movq	%rax, 100(%rsp)
	movq	.LC2(%rip), %rax
	shrq	$32, %rdi
	movl	%edx, 108(%rsp)
	movq	%rax, %xmm0
	testl	%edx, %edx
	js	.L5909
	movq	grid(%rip), %rax
	movslq	%edx, %rdx
	movslq	%edi, %rcx
	movq	24(%rax), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movq	40(%rsp), %rcx
	movsd	(%rax,%rcx), %xmm0
	ucomisd	.LC2(%rip), %xmm0
	jnp	.L5942
	.p2align 4,,10
	.p2align 3
.L5913:
	movl	$.LC248, %esi
	movq	%rbp, %rdi
	movl	$1, %eax
	addl	$1, %ebx
	call	fprintf
	cmpl	%ebx, %r13d
	jne	.L5903
.L5916:
	movq	%rbp, %rsi
	movl	$10, %edi
	call	fputc
	subl	$1, %r15d
	jnb	.L5904
.L5905:
	addq	$184, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%rbp, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fflush
	.p2align 4,,10
	.p2align 3
.L5939:
	.cfi_restore_state
	movsd	16(%rsp), %xmm7
	pxor	%xmm2, %xmm2
	movsd	%xmm1, 56(%rsp)
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm2, 128(%rsp)
	movl	%r12d, 112(%rsp)
	movsd	%xmm1, 120(%rsp)
	movsd	%xmm7, 128(%rsp)
	pushq	136(%rsp)
	.cfi_def_cfa_offset 248
	pushq	136(%rsp)
	.cfi_def_cfa_offset 256
	pushq	136(%rsp)
	.cfi_def_cfa_offset 264
	pushq	136(%rsp)
	.cfi_def_cfa_offset 272
	call	interpolate
	pxor	%xmm2, %xmm2
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movq	.LC2(%rip), %rax
	movapd	%xmm0, %xmm3
	comisd	%xmm3, %xmm2
	movq	%rax, %xmm0
	ja	.L5909
	movl	52(%rsp), %eax
	pxor	%xmm2, %xmm2
	movsd	56(%rsp), %xmm1
	movaps	%xmm2, 144(%rsp)
	movsd	16(%rsp), %xmm7
	movl	%eax, 144(%rsp)
	movaps	%xmm2, 160(%rsp)
	movsd	%xmm1, 152(%rsp)
	movsd	%xmm7, 160(%rsp)
.L5937:
	pushq	168(%rsp)
	.cfi_def_cfa_offset 248
	pushq	168(%rsp)
	.cfi_def_cfa_offset 256
	pushq	168(%rsp)
	.cfi_def_cfa_offset 264
	pushq	168(%rsp)
	.cfi_def_cfa_offset 272
	call	interpolate
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	jmp	.L5909
	.p2align 4,,10
	.p2align 3
.L5941:
	movl	52(%rsp), %eax
	movsd	16(%rsp), %xmm3
	pxor	%xmm0, %xmm0
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 160(%rsp)
	movl	%eax, 144(%rsp)
	movsd	%xmm1, 152(%rsp)
	movsd	%xmm3, 160(%rsp)
	jmp	.L5937
.L5901:
	movl	$735, %edx
	movl	$.LC217, %esi
	leaq	144(%rsp), %rdi
	movl	$-1, 148(%rsp)
	call	boundary_internal
	movsd	24(%rsp), %xmm1
	movsd	16(%rsp), %xmm0
	jmp	.L5900
.L5938:
	movsd	X0(%rip), %xmm7
	movsd	L0(%rip), %xmm2
	movsd	Y0(%rip), %xmm3
	movsd	%xmm7, 32(%rsp)
	addsd	%xmm2, %xmm7
	movsd	%xmm3, 72(%rsp)
	addsd	%xmm2, %xmm3
	movapd	%xmm7, %xmm0
	movsd	8(%rsp), %xmm7
	movapd	%xmm3, %xmm1
	pxor	%xmm3, %xmm3
	ucomisd	%xmm3, %xmm7
	jp	.L5898
	jne	.L5898
	pxor	%xmm3, %xmm3
	cvtsi2sdl	N(%rip), %xmm3
	divsd	%xmm3, %xmm2
	movsd	%xmm2, 8(%rsp)
	jmp	.L5898
	.cfi_endproc
.LFE265:
	.size	output_grd, .-output_grd
	.section	.rodata.str1.8
	.align 8
.LC250:
	.string	"1 0 GfsSimulation GfsBox GfsGEdge { binary = 1 x = %g y = %g "
	.section	.rodata.str1.1
.LC251:
	.string	"variables = %s"
.LC252:
	.string	",%s"
.LC253:
	.string	"} {\n"
.LC254:
	.string	"  Time { t = %g }\n"
.LC255:
	.string	"  PhysicalParams { L = %g }\n"
.LC256:
	.string	"  VariableTracerVOF f\n"
	.section	.rodata.str1.8
	.align 8
.LC257:
	.string	"}\nGfsBox { x = 0 y = 0 z = 0 } {\n"
	.text
	.p2align 4
	.globl	output_gfs
	.type	output_gfs, @function
output_gfs:
.LFB267:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$440, %rsp
	.cfi_def_cfa_offset 496
	movq	504(%rsp), %rax
	movq	496(%rsp), %r13
	movb	$0, 39(%rsp)
	movzbl	528(%rsp), %ebx
	movq	520(%rsp), %rbp
	movq	%rax, 8(%rsp)
	testq	%r13, %r13
	je	.L6027
.L5944:
	cmpq	$0, 8(%rsp)
	je	.L6028
.L5946:
	movq	8(%rsp), %r15
	movq	%r15, %rdi
	call	*restriction(%rip)
	movsd	L0(%rip), %xmm3
	movq	%r13, %rdi
	movsd	Y0(%rip), %xmm1
	movsd	X0(%rip), %xmm0
	movl	$.LC250, %esi
	movl	$2, %eax
	movsd	.LC5(%rip), %xmm2
	divsd	%xmm3, %xmm1
	divsd	%xmm3, %xmm0
	addsd	%xmm2, %xmm1
	addsd	%xmm2, %xmm0
	call	fprintf
.L5987:
	movslq	(%r15), %rax
	cmpl	$-1, %eax
	jne	.L6029
.L5950:
	movq	%r13, %rcx
	movl	$4, %edx
	movl	$1, %esi
	movl	$.LC253, %edi
	call	fwrite
	movsd	t(%rip), %xmm0
	movl	$.LC254, %esi
	movq	%r13, %rdi
	movl	$1, %eax
	call	fprintf
	movsd	L0(%rip), %xmm0
	ucomisd	.LC10(%rip), %xmm0
	jp	.L6000
	jne	.L6000
.L5956:
	movq	%r13, %rcx
	movl	$22, %edx
	movl	$1, %esi
	movl	$.LC256, %edi
	call	fwrite
	movq	%r13, %rcx
	movl	$33, %edx
	movl	$1, %esi
	movl	$.LC257, %edi
	movl	$2, %ebp
	call	fwrite
	xorl	%ecx, %ecx
	movl	$2, %r9d
	xorl	%r10d, %r10d
	movq	grid(%rip), %rsi
	xorl	%r11d, %r11d
	movq	%r15, 24(%rsp)
	movl	%r10d, %r14d
	movq	$2, 120(%rsp)
	movl	%r11d, %r15d
	movabsq	$8589934592, %rax
	movq	24(%rsi), %rdx
	movq	%rax, 112(%rsp)
	movl	%ecx, %eax
	movq	%r13, 16(%rsp)
	movl	%r9d, %r13d
	.p2align 4,,10
	.p2align 3
.L5984:
	movslq	%r14d, %r12
	leal	-1(%r15), %ebx
	movq	(%rdx,%r12,8), %rdi
	leaq	0(,%r12,8), %r9
	movq	(%rdi), %r11
	cmpl	%ebp, (%r11)
	jg	.L5958
	cmpl	%ebp, 4(%r11)
	jle	.L5958
	movq	16(%r11), %rdi
	movslq	%ebp, %r8
	leaq	0(,%r8,8), %r10
	movq	(%rdi,%r8,8), %rdi
	testq	%rdi, %rdi
	je	.L5958
	movq	8(%r11), %rcx
	addq	%r10, %rcx
	cmpl	%r13d, (%rcx)
	jg	.L5958
	cmpl	%r13d, 4(%rcx)
	jle	.L5958
	movslq	%r13d, %r11
	movq	(%rdi,%r11,8), %rdi
	leaq	0(,%r11,8), %rcx
	movq	%rcx, 40(%rsp)
	testq	%rdi, %rdi
	je	.L5958
	cmpl	$2, %eax
	je	.L5959
	jg	.L5960
	testl	%eax, %eax
	je	.L5961
	cmpl	$1, %eax
	jne	.L5958
	movslq	%r15d, %rax
	addl	$1, %r15d
	leal	-2(%rbp,%rbp), %r8d
	addl	$1, %r14d
	salq	$4, %rax
	movslq	%r15d, %rdi
	movl	$2, 124(%rsp,%rax)
	movq	%rdi, %rax
	salq	$4, %rax
	movl	%r8d, 116(%rsp,%rax)
	leal	-1(%r13,%r13), %r8d
	movl	%r14d, 112(%rsp,%rax)
	movl	%r8d, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
.L5981:
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L5988:
	salq	$4, %rdi
	movl	112(%rsp,%rdi), %r14d
	movl	116(%rsp,%rdi), %ebp
	movl	120(%rsp,%rdi), %r13d
	jmp	.L5984
	.p2align 4,,10
	.p2align 3
.L5961:
	xorl	%eax, %eax
	testl	%r14d, %r14d
	jne	.L6030
.L5964:
	movl	%eax, %edx
	movq	16(%rsp), %rcx
	movl	$4, %esi
	movq	%r11, 72(%rsp)
	orl	$16, %edx
	testb	$2, (%rdi)
	leaq	100(%rsp), %rdi
	movq	%r8, 64(%rsp)
	cmovne	%edx, %eax
	movl	$1, %edx
	movq	%r10, 56(%rsp)
	movq	%r9, 48(%rsp)
	movl	%eax, 100(%rsp)
	call	fwrite
	movq	16(%rsp), %rcx
	movl	$1, %edx
	movq	.LC23(%rip), %rax
	movl	$8, %esi
	leaq	104(%rsp), %rdi
	movq	%rax, 104(%rsp)
	call	fwrite
	cmpq	$0, 24(%rsp)
	movq	48(%rsp), %r9
	movq	56(%rsp), %r10
	movq	64(%rsp), %r8
	movq	72(%rsp), %r11
	jne	.L5967
.L5969:
	movq	grid(%rip), %rsi
	movq	24(%rsi), %rdx
	movq	(%rdx,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax,%r11,8), %rax
	testb	$2, (%rax)
	je	.L6024
	.p2align 4,,10
	.p2align 3
.L5958:
	cmpl	$-1, %ebx
	je	.L5983
.L5982:
	movslq	%ebx, %rdi
	movq	24(%rsi), %rdx
	movl	%ebx, %r15d
	movq	%rdi, %rax
	salq	$4, %rax
	movl	124(%rsp,%rax), %eax
	jmp	.L5988
	.p2align 4,,10
	.p2align 3
.L5960:
	cmpl	$3, %eax
	jne	.L5958
	movslq	%r15d, %rax
	leal	-1(%rbp,%rbp), %edx
	addl	$1, %r14d
	movl	%r15d, %ebx
	salq	$4, %rax
	movl	%edx, 116(%rsp,%rax)
	leal	-1(%r13,%r13), %edx
	movl	%r14d, 112(%rsp,%rax)
	movl	%edx, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
	jmp	.L5982
	.p2align 4,,10
	.p2align 3
.L5983:
	movq	16(%rsp), %r13
	movl	$2, %edx
	movl	$1, %esi
	movl	$.LC57, %edi
	movq	24(%rsp), %r15
	movq	%r13, %rcx
	call	fwrite
	movq	%r13, %rdi
	call	fflush
	cmpq	$0, 8(%rsp)
	je	.L6031
.L5985:
	cmpb	$0, 39(%rsp)
	jne	.L6032
	addq	$440, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6029:
	.cfi_restore_state
	leaq	(%rax,%rax,4), %rdx
	movl	%ebx, %esi
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdi
	call	replace.constprop.0
	movl	$.LC251, %esi
	movq	%r13, %rdi
	movq	%rax, %rbp
	movq	%rax, %rdx
	xorl	%eax, %eax
	call	fprintf
	movq	%rbp, %rdi
	movl	$1, %ebp
	call	free
	movl	(%r15), %ecx
	testl	%ecx, %ecx
	js	.L5953
	.p2align 4,,10
	.p2align 3
.L6033:
	movq	%r15, %rax
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L5954:
	movl	4(%rax), %r8d
	addq	$4, %rax
	addl	$1, %edx
	testl	%r8d, %r8d
	jns	.L5954
	cmpl	%ebp, %edx
	jle	.L5953
	movslq	(%r15,%rbp,4), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdi
	testq	%rdi, %rdi
	je	.L5952
	movl	%ebx, %esi
	call	replace.constprop.0
	movl	$.LC252, %esi
	movq	%r13, %rdi
	movq	%rax, %rdx
	movq	%rax, %r12
	xorl	%eax, %eax
	call	fprintf
	movq	%r12, %rdi
	call	free
	movl	(%r15), %ecx
.L5952:
	addq	$1, %rbp
	testl	%ecx, %ecx
	jns	.L6033
.L5953:
	movq	%r13, %rsi
	movl	$32, %edi
	call	fputc
	jmp	.L5950
	.p2align 4,,10
	.p2align 3
.L6032:
	addq	$440, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r13, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fclose
	.p2align 4,,10
	.p2align 3
.L6000:
	.cfi_restore_state
	movl	$.LC255, %esi
	movq	%r13, %rdi
	movl	$1, %eax
	call	fprintf
	jmp	.L5956
	.p2align 4,,10
	.p2align 3
.L6027:
	movq	stdout(%rip), %r13
	testq	%rbp, %rbp
	je	.L5944
	movl	$.LC76, %esi
	movq	%rbp, %rdi
	call	fopen
	movq	%rax, %r13
	testq	%rax, %rax
	je	.L6034
	cmpq	$0, 8(%rsp)
	movb	$1, 39(%rsp)
	jne	.L5946
.L6028:
	movq	all(%rip), %rbp
	testq	%rbp, %rbp
	je	.L5948
	movl	0(%rbp), %esi
	testl	%esi, %esi
	js	.L5948
	xorl	%edi, %edi
	.p2align 4,,10
	.p2align 3
.L5949:
	call	list_append
	movl	4(%rbp), %esi
	addq	$4, %rbp
	movq	%rax, %rdi
	testl	%esi, %esi
	jns	.L5949
	movq	%rax, %r15
	call	*restriction(%rip)
	movsd	L0(%rip), %xmm3
	movq	%r13, %rdi
	movsd	Y0(%rip), %xmm1
	movsd	X0(%rip), %xmm0
	movl	$.LC250, %esi
	movl	$2, %eax
	movsd	.LC5(%rip), %xmm2
	divsd	%xmm3, %xmm1
	divsd	%xmm3, %xmm0
	addsd	%xmm2, %xmm1
	addsd	%xmm2, %xmm0
	call	fprintf
	testq	%r15, %r15
	je	.L5950
	jmp	.L5987
	.p2align 4,,10
	.p2align 3
.L5959:
	movslq	%r15d, %rax
	addl	$1, %r15d
	leal	-1(%rbp,%rbp), %r8d
	addl	$1, %r14d
	salq	$4, %rax
	movslq	%r15d, %rdi
	movl	$3, 124(%rsp,%rax)
	movq	%rdi, %rax
	salq	$4, %rax
	movl	%r8d, 116(%rsp,%rax)
	leal	-2(%r13,%r13), %r8d
	movl	%r14d, 112(%rsp,%rax)
	movl	%r8d, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
	jmp	.L5981
.L6024:
	cmpl	%r14d, 16(%rsi)
	jle	.L5958
	movslq	%r15d, %rax
	addl	$1, %r15d
	leal	-2(%rbp,%rbp), %r8d
	addl	$1, %r14d
	salq	$4, %rax
	movslq	%r15d, %rdi
	movl	$1, 124(%rsp,%rax)
	movq	%rdi, %rax
	salq	$4, %rax
	movl	%r8d, 116(%rsp,%rax)
	leal	-2(%r13,%r13), %r8d
	movl	%r14d, 112(%rsp,%rax)
	movl	%r8d, 120(%rsp,%rax)
	movl	$0, 124(%rsp,%rax)
	jmp	.L5981
.L6030:
	leal	2(%rbp), %eax
	movl	%eax, %edx
	shrl	$31, %edx
	addl	%edx, %eax
	andl	$1, %eax
	subl	%edx, %eax
	leal	2(%r13), %edx
	movl	%edx, %esi
	leal	-1(%rax,%rax), %ecx
	shrl	$31, %esi
	addl	%esi, %edx
	andl	$1, %edx
	subl	%esi, %edx
	addl	%eax, %eax
	leal	-1(%rdx,%rdx), %edx
	je	.L6035
	cmpl	$1, %ecx
	sete	%al
	cmpl	$-1, %edx
	sete	%dl
	movzbl	%dl, %edx
	andl	%eax, %edx
	movl	$3, %eax
	subl	%edx, %eax
	jmp	.L5964
.L5967:
	movq	24(%rsp), %rax
	movl	(%rax), %esi
	testl	%esi, %esi
	js	.L5969
	movl	%ebx, 48(%rsp)
	movq	%r9, %rbx
	movl	%r15d, 56(%rsp)
	movq	%r10, %r15
	movl	%ebp, 64(%rsp)
	movq	40(%rsp), %rbp
	movq	%r12, 72(%rsp)
	movq	16(%rsp), %r12
	movl	%r13d, 40(%rsp)
	movq	%rax, %r13
	movq	%r8, 80(%rsp)
	movq	%r11, 88(%rsp)
	jmp	.L5980
	.p2align 4,,10
	.p2align 3
.L6039:
	movslq	52(%rax), %rax
	cmpl	%esi, %edi
	je	.L6036
	cmpl	%eax, %esi
	je	.L6037
.L5975:
	movq	%r12, %rcx
	movl	$1, %edx
	movl	$8, %esi
	leaq	104(%rsp), %rdi
	call	fwrite
.L5970:
	movl	4(%r13), %esi
	addq	$4, %r13
	testl	%esi, %esi
	js	.L6038
.L5980:
	movslq	%esi, %rdx
	leaq	(%rdx,%rdx,4), %rax
	leaq	(%rdx,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$0, 32(%rax)
	je	.L5970
	movslq	48(%rax), %rdi
	testl	%edi, %edi
	jns	.L6039
	movq	grid(%rip), %rax
	movsd	.LC249(%rip), %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15), %rax
	movq	(%rax,%rbp), %rax
	movl	4(%rax), %ecx
	testl	%ecx, %ecx
	jne	.L5978
	movsd	8(%rax,%rdx,8), %xmm0
	ucomisd	.LC2(%rip), %xmm0
	jp	.L5978
.L6026:
	movq	%xmm0, %rax
	cmove	.LC249(%rip), %rax
	movq	%rax, %xmm0
.L5978:
	movsd	%xmm0, 104(%rsp)
	jmp	.L5975
.L6031:
	movq	%r15, %rdi
	call	free
	jmp	.L5985
.L6036:
	movq	grid(%rip), %rdx
	movsd	.LC249(%rip), %xmm0
	movq	24(%rdx), %rdx
	movq	(%rdx,%rbx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%r15), %rdx
	movq	(%rdx,%rbp), %rdx
	movl	4(%rdx), %edi
	testl	%edi, %edi
	jne	.L5978
	movsd	8(%rdx,%rax,8), %xmm0
	ucomisd	.LC2(%rip), %xmm0
	jnp	.L6026
	jmp	.L5978
	.p2align 4,,10
	.p2align 3
.L6038:
	movl	48(%rsp), %ebx
	movl	56(%rsp), %r15d
	movq	%r12, 16(%rsp)
	movl	64(%rsp), %ebp
	movl	40(%rsp), %r13d
	movq	72(%rsp), %r12
	movq	80(%rsp), %r8
	movq	88(%rsp), %r11
	jmp	.L5969
.L6037:
	movq	grid(%rip), %rax
	movsd	.LC249(%rip), %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r15), %rax
	movq	(%rax,%rbp), %rax
	movl	4(%rax), %esi
	testl	%esi, %esi
	jne	.L5978
	movsd	8(%rax,%rdi,8), %xmm1
	ucomisd	.LC2(%rip), %xmm1
	jp	.L6001
	je	.L5978
.L6001:
	xorpd	.LC1(%rip), %xmm1
	movapd	%xmm1, %xmm0
	jmp	.L5978
.L5948:
	xorl	%edi, %edi
	xorl	%r15d, %r15d
	call	*restriction(%rip)
	movsd	L0(%rip), %xmm3
	movq	%r13, %rdi
	movsd	Y0(%rip), %xmm1
	movsd	X0(%rip), %xmm0
	movl	$.LC250, %esi
	movl	$2, %eax
	movsd	.LC5(%rip), %xmm2
	divsd	%xmm3, %xmm1
	divsd	%xmm3, %xmm0
	addsd	%xmm2, %xmm1
	addsd	%xmm2, %xmm0
	call	fprintf
	jmp	.L5950
.L6035:
	xorl	%eax, %eax
	cmpl	$-1, %edx
	je	.L5964
	xorl	%eax, %eax
	cmpl	$1, %edx
	setne	%al
	leal	1(%rax,%rax), %eax
	jmp	.L5964
.L6034:
	movq	%rbp, %rdi
	call	perror
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE267:
	.size	output_gfs, .-output_gfs
	.section	.rodata.str1.1
.LC258:
	.string	"size"
	.section	.rodata.str1.8
	.align 8
.LC259:
	.string	"dump(): error while writing header"
	.align 8
.LC260:
	.string	"dump(): error while writing len"
	.align 8
.LC261:
	.string	"dump(): error while writing s.name"
	.align 8
.LC262:
	.string	"dump(): error while writing coordinates"
	.align 8
.LC263:
	.string	"dump(): error while writing flags"
	.align 8
.LC264:
	.string	"dump(): error while writing scalars"
	.text
	.p2align 4
	.globl	dump
	.type	dump, @function
dump:
.LFB270:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$536, %rsp
	.cfi_def_cfa_offset 592
	movq	592(%rsp), %rax
	movzbl	616(%rsp), %esi
	movl	$1886221668, 131(%rsp)
	movb	$0, 135(%rsp)
	movq	600(%rsp), %rbp
	movq	%rax, 32(%rsp)
	movq	608(%rsp), %r13
	movb	%sil, 63(%rsp)
	testq	%rax, %rax
	je	.L6106
.L6041:
	movq	32(%rsp), %r14
	movq	%r14, %rdi
	call	strlen
	leaq	2(%rax), %rdi
	movq	%rax, %rbx
	call	malloc
	leaq	1(%rbx), %rdx
	movq	%r14, %rsi
	movq	%rax, %rdi
	movq	%rax, 48(%rsp)
	call	memcpy
	cmpb	$0, 63(%rsp)
	je	.L6107
.L6043:
	movq	48(%rsp), %rdi
	movl	$.LC76, %esi
	call	fopen
	movq	%rax, %r13
	testq	%rax, %rax
	je	.L6108
.L6042:
	testq	%rbp, %rbp
	cmove	all(%rip), %rbp
	movq	%rbp, %rdi
	call	dump_list
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC258, %edi
	movq	%rax, %rbp
	call	new_block_scalar
	movq	%rbp, %rsi
	leaq	136(%rsp), %rdi
	movl	$-1, 140(%rsp)
	movl	%eax, 56(%rsp)
	movl	%eax, 136(%rsp)
	call	list_concat
	movq	%rbp, %rdi
	movq	%rax, 24(%rsp)
	movq	%rax, %rbx
	call	free
	pxor	%xmm0, %xmm0
	movq	$0, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movsd	t(%rip), %xmm0
	movsd	%xmm0, 144(%rsp)
	testq	%rbx, %rbx
	je	.L6109
	movq	24(%rsp), %rax
	movl	(%rax), %esi
	testl	%esi, %esi
	js	.L6078
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L6046:
	movl	4(%rax), %ecx
	addq	$4, %rax
	addl	$1, %edx
	testl	%ecx, %ecx
	jns	.L6046
	movslq	%edx, %rdx
.L6045:
	movl	iter(%rip), %eax
	movq	%rdx, 152(%rsp)
	movq	%r13, %rcx
	movl	$1, %edx
	movl	$56, %esi
	leaq	144(%rsp), %rdi
	movl	%eax, 160(%rsp)
	movq	grid(%rip), %rax
	movl	16(%rax), %eax
	movl	%eax, 164(%rsp)
	movabsq	$734014205853697, %rax
	movq	%rax, 168(%rsp)
	call	fwrite
	testq	%rax, %rax
	je	.L6072
	movq	24(%rsp), %rbx
	leaq	208(%rsp), %r15
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L6052
	.p2align 4,,10
	.p2align 3
.L6047:
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rbp
	movq	_attribute(%rip), %rax
	salq	$4, %rbp
	movq	32(%rax,%rbp), %rdi
	call	strlen
	movq	%r13, %rcx
	movl	$1, %edx
	movq	%r15, %rdi
	movl	$4, %esi
	movl	%eax, 208(%rsp)
	call	fwrite
	testq	%rax, %rax
	je	.L6110
	movq	_attribute(%rip), %rax
	movl	208(%rsp), %edx
	movq	%r13, %rcx
	movl	$1, %esi
	movq	32(%rax,%rbp), %rdi
	call	fwrite
	movq	%rax, %r8
	movl	208(%rsp), %eax
	cmpq	%rax, %r8
	jb	.L6111
	movslq	4(%rbx), %rax
	addq	$4, %rbx
	testl	%eax, %eax
	jns	.L6047
.L6052:
	movq	%r13, %rcx
	movl	$4, %edx
	movl	$8, %esi
	movq	%r15, %rdi
	movsd	X0(%rip), %xmm0
	movsd	%xmm0, 208(%rsp)
	movsd	Y0(%rip), %xmm0
	movsd	%xmm0, 216(%rsp)
	movsd	Z0(%rip), %xmm0
	movsd	%xmm0, 224(%rsp)
	movsd	L0(%rip), %xmm0
	movsd	%xmm0, 232(%rsp)
	call	fwrite
	cmpq	$3, %rax
	jbe	.L6112
	movl	56(%rsp), %edi
	xorl	%esi, %esi
	movl	$2, %ebp
	xorl	%r14d, %r14d
	call	subtree_size
	movl	$2, %r9d
	xorl	%r10d, %r10d
	xorl	%ecx, %ecx
	movq	grid(%rip), %rsi
	movq	%r13, 40(%rsp)
	movl	%r10d, %r13d
	movabsq	$8589934592, %rax
	movq	%rax, 208(%rsp)
	movq	$2, 216(%rsp)
	movq	24(%rsi), %rdx
	movq	%r15, 64(%rsp)
	movl	%r9d, %r15d
	.p2align 4,,10
	.p2align 3
.L6069:
	movslq	%r13d, %r12
	leal	-1(%r14), %ebx
	movq	(%rdx,%r12,8), %rax
	leaq	0(,%r12,8), %r9
	movq	(%rax), %rax
	cmpl	%ebp, (%rax)
	jg	.L6053
	cmpl	%ebp, 4(%rax)
	jle	.L6053
	movq	16(%rax), %rdi
	movslq	%ebp, %r8
	leaq	0(,%r8,8), %r10
	movq	(%rdi,%r8,8), %rdi
	testq	%rdi, %rdi
	je	.L6053
	movq	8(%rax), %r11
	addq	%r10, %r11
	cmpl	%r15d, (%r11)
	jg	.L6053
	cmpl	%r15d, 4(%r11)
	jle	.L6053
	movslq	%r15d, %rax
	leaq	0(,%rax,8), %r11
	movq	%rax, 8(%rsp)
	movq	(%rdi,%rax,8), %rax
	movq	%r11, 16(%rsp)
	testq	%rax, %rax
	je	.L6053
	cmpl	$2, %ecx
	je	.L6054
	jg	.L6055
	testl	%ecx, %ecx
	je	.L6056
	cmpl	$1, %ecx
	jne	.L6053
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-2(%rbp,%rbp), %edi
	addl	$1, %r13d
	salq	$4, %rax
	movl	$2, 220(%rsp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edi, 212(%rsp,%rcx)
	leal	-1(%r15,%r15), %edi
	movl	%r13d, 208(%rsp,%rcx)
	movl	%edi, 216(%rsp,%rcx)
	movl	$0, 220(%rsp,%rcx)
.L6066:
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L6076:
	salq	$4, %rax
	movl	208(%rsp,%rax), %r13d
	movl	212(%rsp,%rax), %ebp
	movl	216(%rsp,%rax), %r15d
	jmp	.L6069
	.p2align 4,,10
	.p2align 3
.L6056:
	movzwl	(%rax), %eax
	movq	40(%rsp), %rcx
	movl	$1, %edx
	movl	$4, %esi
	leaq	124(%rsp), %rdi
	movq	%r8, 88(%rsp)
	andl	$2, %eax
	movq	%r10, 80(%rsp)
	movq	%r9, 72(%rsp)
	movl	%eax, 124(%rsp)
	call	fwrite
	movq	72(%rsp), %r9
	movq	80(%rsp), %r10
	testq	%rax, %rax
	movq	88(%rsp), %r8
	je	.L6113
	cmpq	$0, 24(%rsp)
	jne	.L6060
.L6063:
	movq	grid(%rip), %rsi
	movq	8(%rsp), %rcx
	movq	24(%rsi), %rdx
	movq	(%rdx,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r8,8), %rax
	movq	(%rax,%rcx,8), %rax
	testb	$2, (%rax)
	je	.L6100
	.p2align 4,,10
	.p2align 3
.L6053:
	cmpl	$-1, %ebx
	je	.L6068
.L6067:
	movslq	%ebx, %rax
	movl	%ebx, %r14d
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	220(%rsp,%rdx), %ecx
	movq	24(%rsi), %rdx
	jmp	.L6076
	.p2align 4,,10
	.p2align 3
.L6055:
	cmpl	$3, %ecx
	jne	.L6053
	movslq	%r14d, %rax
	leal	-1(%rbp,%rbp), %edx
	addl	$1, %r13d
	movl	%r14d, %ebx
	salq	$4, %rax
	movl	%edx, 212(%rsp,%rax)
	leal	-1(%r15,%r15), %edx
	movl	%r13d, 208(%rsp,%rax)
	movl	%edx, 216(%rsp,%rax)
	movl	$0, 220(%rsp,%rax)
	jmp	.L6067
	.p2align 4,,10
	.p2align 3
.L6068:
	movq	24(%rsp), %rdi
	movq	40(%rsp), %r13
	movq	64(%rsp), %r15
	call	free
	cmpq	$0, 32(%rsp)
	je	.L6070
	movq	%r13, %rdi
	call	fclose
	cmpb	$0, 63(%rsp)
	je	.L6114
.L6071:
	movq	48(%rsp), %rdi
	call	free
.L6070:
	movl	56(%rsp), %eax
	movq	%r15, %rdi
	movl	$-1, 212(%rsp)
	movl	%eax, 208(%rsp)
	call	delete
	addq	$536, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6054:
	.cfi_restore_state
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-1(%rbp,%rbp), %edi
	addl	$1, %r13d
	salq	$4, %rax
	movl	$3, 220(%rsp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edi, 212(%rsp,%rcx)
	leal	-2(%r15,%r15), %edi
	movl	%r13d, 208(%rsp,%rcx)
	movl	%edi, 216(%rsp,%rcx)
	movl	$0, 220(%rsp,%rcx)
	jmp	.L6066
	.p2align 4,,10
	.p2align 3
.L6100:
	cmpl	%r13d, 16(%rsi)
	jle	.L6053
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-2(%rbp,%rbp), %edi
	addl	$1, %r13d
	salq	$4, %rax
	movl	$1, 220(%rsp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edi, 212(%rsp,%rcx)
	leal	-2(%r15,%r15), %edi
	movl	%r13d, 208(%rsp,%rcx)
	movl	%edi, 216(%rsp,%rcx)
	movl	$0, 220(%rsp,%rcx)
	jmp	.L6066
	.p2align 4,,10
	.p2align 3
.L6060:
	movq	24(%rsp), %r11
	movslq	(%r11), %rax
	testl	%eax, %eax
	js	.L6063
	movq	%r8, 104(%rsp)
	movl	%r14d, 72(%rsp)
	movq	40(%rsp), %r14
	movl	%ebx, 80(%rsp)
	movq	%r9, %rbx
	movl	%r13d, 88(%rsp)
	movq	16(%rsp), %r13
	movq	%r12, 96(%rsp)
	movq	%r11, %r12
	movl	%ebp, 16(%rsp)
	movq	%r10, %rbp
	.p2align 4,,10
	.p2align 3
.L6065:
	movq	grid(%rip), %rdx
	movq	%r14, %rcx
	movl	$8, %esi
	movq	24(%rdx), %rdx
	movq	(%rdx,%rbx), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rbp), %rdx
	movq	(%rdx,%r13), %rdx
	leaq	8(%rdx,%rax,8), %rdi
	movl	$1, %edx
	call	fwrite
	testq	%rax, %rax
	je	.L6115
	movslq	4(%r12), %rax
	addq	$4, %r12
	testl	%eax, %eax
	jns	.L6065
	movl	72(%rsp), %r14d
	movl	80(%rsp), %ebx
	movl	88(%rsp), %r13d
	movl	16(%rsp), %ebp
	movq	96(%rsp), %r12
	movq	104(%rsp), %r8
	jmp	.L6063
.L6107:
	movq	48(%rsp), %rax
	movl	$126, %edi
	movw	%di, (%rax,%rbx)
	jmp	.L6043
	.p2align 4,,10
	.p2align 3
.L6106:
	movq	$0, 48(%rsp)
	testq	%r13, %r13
	jne	.L6042
	leaq	131(%rsp), %rax
	movq	%rax, 32(%rsp)
	jmp	.L6041
.L6114:
	movq	32(%rsp), %rsi
	movq	48(%rsp), %rdi
	call	rename
	jmp	.L6071
.L6109:
	movl	iter(%rip), %eax
	movq	%r13, %rcx
	movl	$1, %edx
	movl	$56, %esi
	leaq	144(%rsp), %rdi
	movq	$0, 152(%rsp)
	movl	%eax, 160(%rsp)
	movq	grid(%rip), %rax
	movl	16(%rax), %eax
	movl	%eax, 164(%rsp)
	movabsq	$734014205853697, %rax
	movq	%rax, 168(%rsp)
	call	fwrite
	testq	%rax, %rax
	je	.L6072
	leaq	208(%rsp), %r15
	jmp	.L6052
.L6078:
	xorl	%edx, %edx
	jmp	.L6045
.L6111:
	movl	$.LC261, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L6110:
	movl	$.LC260, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L6072:
	movl	$.LC259, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L6115:
	movl	$.LC264, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L6113:
	movl	$.LC263, %edi
	call	perror
	movl	$1, %edi
	call	exit
.L6108:
	movq	48(%rsp), %rdi
	call	perror
	movl	$1, %edi
	call	exit
.L6112:
	movl	$.LC262, %edi
	call	perror
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE270:
	.size	dump, .-dump
	.section	.rodata.str1.1
.LC265:
	.string	"dump"
	.section	.rodata.str1.8
	.align 8
.LC266:
	.string	"rising_intermediateGfs/snapshot-%2.1f.gfs"
	.align 8
.LC267:
	.string	"rising_intermediateBview/snapshot-%2.1f"
	.text
	.p2align 4
	.type	snapshot, @function
snapshot:
.LFB438:
	.cfi_startproc
	pushq	%rbx
	.cfi_def_cfa_offset 16
	.cfi_offset 3, -16
	pxor	%xmm1, %xmm1
	subq	$288, %rsp
	.cfi_def_cfa_offset 304
	movups	%xmm1, 24(%rsp)
	movq	$0, 40(%rsp)
	movq	$.LC265, 16(%rsp)
	movsd	%xmm0, 8(%rsp)
	pushq	40(%rsp)
	.cfi_def_cfa_offset 312
	pushq	40(%rsp)
	.cfi_def_cfa_offset 320
	pushq	40(%rsp)
	.cfi_def_cfa_offset 328
	pushq	40(%rsp)
	.cfi_def_cfa_offset 336
	call	dump
	addq	$32, %rsp
	.cfi_def_cfa_offset 304
	movsd	8(%rsp), %xmm0
	movl	$.LC266, %esi
	leaq	128(%rsp), %rbx
	movl	$1, %eax
	movq	%rbx, %rdi
	call	sprintf
	movsd	8(%rsp), %xmm2
	pxor	%xmm1, %xmm1
	movq	%rbx, 104(%rsp)
	movaps	%xmm1, 80(%rsp)
	movsd	%xmm2, 96(%rsp)
	movq	$0, 112(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 312
	pushq	120(%rsp)
	.cfi_def_cfa_offset 320
	pushq	120(%rsp)
	.cfi_def_cfa_offset 328
	pushq	120(%rsp)
	.cfi_def_cfa_offset 336
	pushq	120(%rsp)
	.cfi_def_cfa_offset 344
	pushq	120(%rsp)
	.cfi_def_cfa_offset 352
	call	output_gfs
	addq	$48, %rsp
	.cfi_def_cfa_offset 304
	movsd	8(%rsp), %xmm0
	movl	$.LC267, %esi
	leaq	208(%rsp), %rbx
	movl	$1, %eax
	movq	%rbx, %rdi
	call	sprintf
	pxor	%xmm1, %xmm1
	movq	%rbx, 48(%rsp)
	movq	$0, 72(%rsp)
	movups	%xmm1, 56(%rsp)
	pushq	72(%rsp)
	.cfi_def_cfa_offset 312
	pushq	72(%rsp)
	.cfi_def_cfa_offset 320
	pushq	72(%rsp)
	.cfi_def_cfa_offset 328
	pushq	72(%rsp)
	.cfi_def_cfa_offset 336
	call	dump
	addq	$320, %rsp
	.cfi_def_cfa_offset 16
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE438:
	.size	snapshot, .-snapshot
	.section	.rodata.str1.1
.LC268:
	.string	"fp"
	.section	.rodata.str1.8
	.align 8
.LC269:
	.string	"restore(): error: expecting header\n"
	.align 8
.LC270:
	.string	"restore(): error: the list lengths don't match: %ld (file) != %d (code)\n"
	.align 8
.LC271:
	.string	"restore(): error: file version mismatch: %d (file) != %d (code)\n"
	.align 8
.LC272:
	.string	"restore(): error: expecting len\n"
	.align 8
.LC273:
	.string	"restore(): error: expecting s.name\n"
	.section	.rodata.str1.1
.LC274:
	.string	"s"
	.section	.rodata.str1.8
	.align 8
.LC275:
	.string	"restore(): error: expecting coordinates\n"
	.align 8
.LC276:
	.string	"restore(): error: expecting 'flags'\n"
	.align 8
.LC277:
	.string	"restore(): error: expecting a scalar\n"
	.text
	.p2align 4
	.globl	restore
	.type	restore, @function
restore:
.LFB271:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$536, %rsp
	.cfi_offset 15, -24
	.cfi_offset 14, -32
	.cfi_offset 13, -40
	.cfi_offset 12, -48
	.cfi_offset 3, -56
	movq	24(%rbp), %rax
	movq	16(%rbp), %rdi
	movq	32(%rbp), %r15
	movq	%rax, -520(%rbp)
	movq	%rdi, -536(%rbp)
	testq	%rdi, %rdi
	je	.L6119
	movl	$.LC32, %esi
	call	fopen
	movq	%rax, %r15
	testq	%rax, %rax
	je	.L6249
.L6121:
	movq	%r15, %rcx
	movl	$1, %edx
	movl	$56, %esi
	leaq	-432(%rbp), %rdi
	call	fread
	testq	%rax, %rax
	je	.L6250
	movl	$1, %edi
	call	init_grid
	movq	grid(%rip), %r13
	xorl	%esi, %esi
	xorl	%edi, %edi
	xorl	%r10d, %r10d
	movl	$2, %r8d
	movl	$2, %ecx
	movabsq	$8589934592, %rax
	movq	%rax, -368(%rbp)
	movq	24(%r13), %rbx
	movq	$2, -360(%rbp)
	.p2align 4,,10
	.p2align 3
.L6132:
	movslq	%esi, %rax
	leal	-1(%rdi), %edx
	movq	(%rbx,%rax,8), %rax
	movq	(%rax), %rax
	cmpl	%ecx, (%rax)
	jg	.L6123
	cmpl	%ecx, 4(%rax)
	jle	.L6123
	movq	16(%rax), %r12
	movslq	%ecx, %r11
	leaq	0(,%r11,8), %r9
	movq	(%r12,%r11,8), %r11
	testq	%r11, %r11
	je	.L6123
	addq	8(%rax), %r9
	cmpl	%r8d, (%r9)
	jg	.L6123
	cmpl	%r8d, 4(%r9)
	jle	.L6123
	movslq	%r8d, %rax
	movq	(%r11,%rax,8), %rax
	testq	%rax, %rax
	je	.L6123
	cmpl	$2, %r10d
	je	.L6124
	jg	.L6125
	testl	%r10d, %r10d
	je	.L6126
	cmpl	$1, %r10d
	jne	.L6123
	movslq	%edi, %rax
	addl	$1, %edi
	leal	-2(%rcx,%rcx), %ecx
	addl	$1, %esi
	salq	$4, %rax
	movl	$2, -356(%rbp,%rax)
	movslq	%edi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, -364(%rbp,%rdx)
	leal	-1(%r8,%r8), %ecx
	movl	%esi, -368(%rbp,%rdx)
	movl	%ecx, -360(%rbp,%rdx)
	movl	$0, -356(%rbp,%rdx)
.L6129:
	xorl	%r10d, %r10d
	.p2align 4,,10
	.p2align 3
.L6192:
	salq	$4, %rax
	movl	-368(%rbp,%rax), %esi
	movl	-364(%rbp,%rax), %ecx
	movl	-360(%rbp,%rax), %r8d
	jmp	.L6132
	.p2align 4,,10
	.p2align 3
.L6126:
	orw	$1, (%rax)
	movl	$0, 4(%rax)
	cmpl	%esi, 16(%r13)
	jg	.L6251
	.p2align 4,,10
	.p2align 3
.L6123:
	cmpl	$-1, %edx
	je	.L6131
.L6130:
	movslq	%edx, %rax
	movl	%edx, %edi
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	-356(%rbp,%rcx), %r10d
	jmp	.L6192
	.p2align 4,,10
	.p2align 3
.L6125:
	cmpl	$3, %r10d
	jne	.L6123
	movslq	%edi, %rax
	leal	-1(%rcx,%rcx), %edx
	addl	$1, %esi
	salq	$4, %rax
	movl	%edx, -364(%rbp,%rax)
	leal	-1(%r8,%r8), %edx
	movl	%edx, -360(%rbp,%rax)
	movl	%edi, %edx
	movl	%esi, -368(%rbp,%rax)
	movl	$0, -356(%rbp,%rax)
	jmp	.L6130
	.p2align 4,,10
	.p2align 3
.L6131:
	movq	-520(%rbp), %rax
	movq	all(%rip), %rdi
	movb	$1, 128(%r13)
	testq	%rax, %rax
	movq	%rdi, -528(%rbp)
	cmovne	%rax, %rdi
	call	dump_list
	movl	-404(%rbp), %edx
	movq	%rax, -504(%rbp)
	cmpl	$161020, %edx
	je	.L6252
	cmpl	$170901, %edx
	jne	.L6141
	movq	$0, -512(%rbp)
	xorl	%ebx, %ebx
	cmpq	$0, -424(%rbp)
	jg	.L6142
	jmp	.L6143
	.p2align 4,,10
	.p2align 3
.L6147:
	movq	-520(%rbp), %rsi
	cmpq	%rsi, -528(%rbp)
	je	.L6253
	movq	-512(%rbp), %rdi
	movl	$2147483647, %esi
	call	list_append
	movq	%rax, -512(%rbp)
.L6146:
	addq	$1, %rbx
	movq	-496(%rbp), %rsp
	cmpq	%rbx, -424(%rbp)
	jle	.L6143
.L6142:
	movq	%r15, %rcx
	movl	$1, %edx
	movl	$4, %esi
	movq	%rsp, -496(%rbp)
	leaq	-368(%rbp), %rdi
	call	fread
	testq	%rax, %rax
	je	.L6254
	movl	-368(%rbp), %edx
	movq	%r15, %rcx
	movl	$1, %esi
	leal	1(%rdx), %eax
	addq	$15, %rax
	shrq	$4, %rax
	salq	$4, %rax
	subq	%rax, %rsp
	movq	%rsp, %rdi
	movq	%rsp, %r12
	call	fread
	testq	%rax, %rax
	je	.L6255
	movl	-368(%rbp), %eax
	movb	$0, (%rsp,%rax)
	testq	%rbx, %rbx
	je	.L6146
	movq	-504(%rbp), %r14
	testq	%r14, %r14
	je	.L6147
	movl	(%r14), %r13d
	testl	%r13d, %r13d
	js	.L6147
	movq	_attribute(%rip), %rax
	movq	%rax, -488(%rbp)
	jmp	.L6149
	.p2align 4,,10
	.p2align 3
.L6148:
	movl	4(%r14), %r13d
	addq	$4, %r14
	testl	%r13d, %r13d
	js	.L6147
.L6149:
	movslq	%r13d, %rax
	movq	-488(%rbp), %rsi
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movq	32(%rsi,%rax), %rdi
	movq	%r12, %rsi
	call	strcmp
	testl	%eax, %eax
	jne	.L6148
	movq	-512(%rbp), %rdi
	movl	%r13d, %esi
	call	list_append
	movq	%rax, -512(%rbp)
	jmp	.L6146
	.p2align 4,,10
	.p2align 3
.L6253:
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC274, %edi
	call	new_block_scalar
	movl	%eax, %esi
	cltq
	leaq	(%rax,%rax,4), %rdx
	movl	%esi, -488(%rbp)
	leaq	(%rax,%rdx,2), %r13
	salq	$4, %r13
	addq	_attribute(%rip), %r13
	movq	32(%r13), %rdi
	call	free
	movq	%r12, %rdi
	call	strdup
	movl	-488(%rbp), %esi
	movq	-512(%rbp), %rdi
	movq	%rax, 32(%r13)
	call	list_append
	movq	%rax, -512(%rbp)
	jmp	.L6146
	.p2align 4,,10
	.p2align 3
.L6143:
	movq	-504(%rbp), %rdi
	call	free
	movq	%r15, %rcx
	movl	$4, %edx
	movl	$8, %esi
	leaq	-368(%rbp), %rdi
	call	fread
	cmpq	$3, %rax
	jbe	.L6256
	movsd	-368(%rbp), %xmm0
	movq	-512(%rbp), %rax
	movsd	%xmm0, X0(%rip)
	movsd	-360(%rbp), %xmm0
	movq	%rax, -504(%rbp)
	movsd	%xmm0, Y0(%rip)
	movsd	-352(%rbp), %xmm0
	movsd	%xmm0, Z0(%rip)
	movsd	-344(%rbp), %xmm0
	movsd	%xmm0, L0(%rip)
.L6139:
	cmpl	$65535, cm(%rip)
	movq	$0, -528(%rbp)
	jle	.L6257
.L6152:
	movq	grid(%rip), %rsi
	xorl	%r11d, %r11d
	xorl	%ecx, %ecx
	xorl	%r14d, %r14d
	movabsq	$8589934592, %rax
	movl	$2, %r10d
	movq	$2, -360(%rbp)
	movl	$2, %r9d
	movq	%rax, -368(%rbp)
	movq	24(%rsi), %rdx
	movl	%r10d, %r12d
	movq	%r15, -520(%rbp)
	movl	%r11d, %r15d
	.p2align 4,,10
	.p2align 3
.L6171:
	movslq	%r15d, %r13
	leal	-1(%r14), %ebx
	movq	(%rdx,%r13,8), %rax
	leaq	0(,%r13,8), %r11
	movq	(%rax), %rax
	cmpl	%r12d, (%rax)
	jg	.L6153
	cmpl	%r12d, 4(%rax)
	jle	.L6153
	movq	16(%rax), %rdi
	movslq	%r12d, %r10
	leaq	0(,%r10,8), %r8
	movq	(%rdi,%r10,8), %rdi
	movq	%r8, -488(%rbp)
	testq	%rdi, %rdi
	je	.L6153
	addq	8(%rax), %r8
	cmpl	%r9d, (%r8)
	jg	.L6153
	cmpl	%r9d, 4(%r8)
	jle	.L6153
	movslq	%r9d, %rax
	leaq	0(,%rax,8), %r8
	cmpq	$0, (%rdi,%rax,8)
	movq	%rax, -496(%rbp)
	movq	%r8, -512(%rbp)
	je	.L6153
	cmpl	$2, %ecx
	je	.L6154
	jg	.L6155
	testl	%ecx, %ecx
	je	.L6156
	cmpl	$1, %ecx
	jne	.L6153
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-2(%r12,%r12), %edi
	addl	$1, %r15d
	salq	$4, %rax
	movl	$2, -356(%rbp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edi, -364(%rbp,%rcx)
	leal	-1(%r9,%r9), %edi
	movl	%r15d, -368(%rbp,%rcx)
	movl	%edi, -360(%rbp,%rcx)
	movl	$0, -356(%rbp,%rcx)
.L6168:
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L6191:
	salq	$4, %rax
	movl	-368(%rbp,%rax), %r15d
	movl	-364(%rbp,%rax), %r12d
	movl	-360(%rbp,%rax), %r9d
	jmp	.L6171
	.p2align 4,,10
	.p2align 3
.L6153:
	cmpl	$-1, %ebx
	je	.L6170
.L6169:
	movslq	%ebx, %rax
	movl	%ebx, %r14d
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	-356(%rbp,%rdx), %ecx
	movq	24(%rsi), %rdx
	jmp	.L6191
	.p2align 4,,10
	.p2align 3
.L6155:
	cmpl	$3, %ecx
	jne	.L6153
	movslq	%r14d, %rax
	leal	-1(%r12,%r12), %edx
	addl	$1, %r15d
	movl	%r14d, %ebx
	salq	$4, %rax
	movl	%edx, -364(%rbp,%rax)
	leal	-1(%r9,%r9), %edx
	movl	%r15d, -368(%rbp,%rax)
	movl	%edx, -360(%rbp,%rax)
	movl	$0, -356(%rbp,%rax)
	jmp	.L6169
	.p2align 4,,10
	.p2align 3
.L6170:
	movq	all(%rip), %rbx
	movq	-520(%rbp), %r15
	xorl	%r12d, %r12d
	testq	%rbx, %rbx
	je	.L6172
	movl	(%rbx), %esi
	testl	%esi, %esi
	js	.L6172
	movq	_attribute(%rip), %rdi
	movslq	%esi, %rax
	movq	%rbx, %rdx
	.p2align 4,,10
	.p2align 3
.L6173:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	movl	$1, 88(%rdi,%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6173
	xorl	%r12d, %r12d
	movq	-504(%rbp), %r13
	movq	%r12, %rdi
	movq	-528(%rbp), %r12
	.p2align 4,,10
	.p2align 3
.L6181:
	testq	%r13, %r13
	je	.L6174
	movl	0(%r13), %edx
	testl	%edx, %edx
	js	.L6174
	cmpl	%edx, %esi
	je	.L6175
	movq	%r13, %rdx
	jmp	.L6176
	.p2align 4,,10
	.p2align 3
.L6177:
	cmpl	%ecx, %esi
	je	.L6175
.L6176:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L6177
.L6174:
	testq	%r12, %r12
	je	.L6178
	movl	(%r12), %eax
	testl	%eax, %eax
	js	.L6178
	cmpl	%eax, %esi
	je	.L6175
	movq	%r12, %rdx
	jmp	.L6179
	.p2align 4,,10
	.p2align 3
.L6180:
	cmpl	%ecx, %esi
	je	.L6175
.L6179:
	movl	4(%rdx), %ecx
	addq	$4, %rdx
	testl	%ecx, %ecx
	jns	.L6180
.L6178:
	call	list_append
	movq	%rax, %rdi
.L6175:
	movl	4(%rbx), %esi
	addq	$4, %rbx
	testl	%esi, %esi
	jns	.L6181
	movq	%rdi, %r12
.L6172:
	pxor	%xmm0, %xmm0
	movq	%r12, %rdi
	call	reset
	movq	%r12, %rdi
	call	free
	movq	-504(%rbp), %rdi
	call	free
	cmpq	$0, -536(%rbp)
	je	.L6182
	movq	%r15, %rdi
	call	fclose
.L6182:
	movl	iter(%rip), %eax
	cmpl	%eax, -416(%rbp)
	jg	.L6183
	jmp	.L6186
	.p2align 4,,10
	.p2align 3
.L6187:
	movl	inext(%rip), %eax
	movl	%eax, iter(%rip)
	cmpl	-416(%rbp), %eax
	jge	.L6186
.L6183:
	xorl	%edi, %edi
	call	events
	testl	%eax, %eax
	jne	.L6187
.L6186:
	xorl	%edi, %edi
	call	events
	movsd	-432(%rbp), %xmm1
	comisd	t(%rip), %xmm1
	ja	.L6184
	jmp	.L6185
	.p2align 4,,10
	.p2align 3
.L6189:
	movsd	tnext(%rip), %xmm0
	movsd	-432(%rbp), %xmm1
	comisd	%xmm0, %xmm1
	movsd	%xmm0, t(%rip)
	jbe	.L6185
.L6184:
	xorl	%edi, %edi
	call	events
	testl	%eax, %eax
	jne	.L6189
	movsd	-432(%rbp), %xmm1
.L6185:
	xorl	%edi, %edi
	movsd	%xmm1, t(%rip)
	call	events
	movl	$1, %eax
.L6118:
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_remember_state
	.cfi_def_cfa 7, 8
	ret
	.p2align 4,,10
	.p2align 3
.L6154:
	.cfi_restore_state
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-1(%r12,%r12), %edi
	addl	$1, %r15d
	salq	$4, %rax
	movl	$3, -356(%rbp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rcx
	salq	$4, %rcx
	movl	%edi, -364(%rbp,%rcx)
	leal	-2(%r9,%r9), %edi
	movl	%r15d, -368(%rbp,%rcx)
	movl	%edi, -360(%rbp,%rcx)
	movl	$0, -356(%rbp,%rcx)
	jmp	.L6168
	.p2align 4,,10
	.p2align 3
.L6156:
	movq	-520(%rbp), %rcx
	movl	$1, %edx
	movl	$4, %esi
	leaq	-476(%rbp), %rdi
	movl	%r9d, -556(%rbp)
	movq	%r10, -552(%rbp)
	movq	%r11, -544(%rbp)
	call	fread
	movq	-544(%rbp), %r11
	movq	-552(%rbp), %r10
	cmpq	$1, %rax
	movl	-556(%rbp), %r9d
	jne	.L6258
	movq	-520(%rbp), %rdi
	movl	$1, %edx
	movl	$8, %esi
	movl	%r9d, -556(%rbp)
	movq	%r10, -552(%rbp)
	movq	%r11, -544(%rbp)
	call	fseek
	cmpq	$0, -504(%rbp)
	movq	-544(%rbp), %r11
	movq	-552(%rbp), %r10
	movl	-556(%rbp), %r9d
	jne	.L6160
.L6163:
	movq	grid(%rip), %rsi
	movq	-496(%rbp), %rdi
	movq	24(%rsi), %rax
	movq	(%rax,%r13,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r10,8), %rax
	movq	(%rax,%rdi,8), %rax
	movzwl	(%rax), %eax
	testb	$2, -476(%rbp)
	je	.L6161
.L6162:
	movq	24(%rsi), %rax
	movq	-496(%rbp), %rdi
	movq	(%rax,%r13,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r10,8), %rax
	movq	(%rax,%rdi,8), %rax
	testb	$2, (%rax)
	jne	.L6153
.L6167:
	cmpl	%r15d, 16(%rsi)
	jle	.L6153
	movslq	%r14d, %rax
	addl	$1, %r14d
	leal	-2(%r12,%r12), %ecx
	addl	$1, %r15d
	salq	$4, %rax
	movl	$1, -356(%rbp,%rax)
	movslq	%r14d, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, -364(%rbp,%rdx)
	leal	-2(%r9,%r9), %ecx
	movl	%r15d, -368(%rbp,%rdx)
	movl	%ecx, -360(%rbp,%rdx)
	movl	$0, -356(%rbp,%rdx)
	movq	24(%rsi), %rdx
	jmp	.L6168
	.p2align 4,,10
	.p2align 3
.L6257:
	movq	fm(%rip), %rax
	movq	$-1, -440(%rbp)
	movq	%rax, -448(%rbp)
	leaq	-448(%rbp), %rax
	movq	%rax, -528(%rbp)
	jmp	.L6152
.L6161:
	testb	$2, %al
	je	.L6167
	movl	%r9d, -456(%rbp)
	movl	%r15d, %esi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movl	%r12d, -460(%rbp)
	movq	-528(%rbp), %rdx
	movq	-460(%rbp), %rdi
	movq	%r10, -512(%rbp)
	movl	%r9d, -488(%rbp)
	movl	%r15d, -452(%rbp)
	call	refine_cell
	movq	grid(%rip), %rsi
	movq	-512(%rbp), %r10
	movl	-488(%rbp), %r9d
	jmp	.L6162
.L6160:
	movq	-504(%rbp), %rax
	movl	(%rax), %r8d
	testl	%r8d, %r8d
	js	.L6163
	movl	%r9d, -560(%rbp)
	movq	%r10, -576(%rbp)
	movl	%ebx, -552(%rbp)
	movq	-520(%rbp), %rbx
	movl	%r14d, -544(%rbp)
	movl	%r8d, %r14d
	movl	%r15d, -556(%rbp)
	movq	-512(%rbp), %r15
	movq	%r13, -568(%rbp)
	movq	%rax, %r13
	movl	%r12d, -512(%rbp)
	movq	%r11, %r12
	.p2align 4,,10
	.p2align 3
.L6166:
	movq	%rbx, %rcx
	movl	$1, %edx
	movl	$8, %esi
	leaq	-472(%rbp), %rdi
	call	fread
	cmpq	$1, %rax
	jne	.L6259
	cmpl	$2147483647, %r14d
	je	.L6165
	movq	grid(%rip), %rax
	movq	-488(%rbp), %rsi
	leal	1(%r14), %r8d
	movsd	-472(%rbp), %xmm0
	movslq	%r8d, %r8
	movq	24(%rax), %rax
	movq	(%rax,%r12), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi), %rax
	movq	(%rax,%r15), %rax
	movsd	%xmm0, (%rax,%r8,8)
.L6165:
	movl	4(%r13), %r14d
	addq	$4, %r13
	testl	%r14d, %r14d
	jns	.L6166
	movl	-544(%rbp), %r14d
	movl	-552(%rbp), %ebx
	movl	-556(%rbp), %r15d
	movl	-512(%rbp), %r12d
	movl	-560(%rbp), %r9d
	movq	-568(%rbp), %r13
	movq	-576(%rbp), %r10
	jmp	.L6163
	.p2align 4,,10
	.p2align 3
.L6119:
	testq	%r15, %r15
	jne	.L6121
	movl	$.LC268, %edx
	movl	$1229, %esi
	movl	$.LC217, %edi
	call	qassert
	.p2align 4,,10
	.p2align 3
.L6252:
	movq	-424(%rbp), %rax
	leaq	-1(%rax), %r8
	movq	-504(%rbp), %rax
	testq	%rax, %rax
	je	.L6136
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	js	.L6136
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L6137:
	movl	4(%rax), %esi
	addq	$4, %rax
	addl	$1, %edx
	testl	%esi, %esi
	jns	.L6137
	movslq	%edx, %rdx
	cmpq	%rdx, %r8
	je	.L6139
	xorl	%eax, %eax
	jmp	.L6138
.L6140:
	movq	-504(%rbp), %rbx
	movl	(%rbx,%rax,4), %ecx
.L6138:
	movl	%eax, %r9d
	addq	$1, %rax
	testl	%ecx, %ecx
	jns	.L6140
	jmp	.L6190
	.p2align 4,,10
	.p2align 3
.L6124:
	movslq	%edi, %rax
	addl	$1, %edi
	leal	-1(%rcx,%rcx), %ecx
	addl	$1, %esi
	salq	$4, %rax
	movl	$3, -356(%rbp,%rax)
	movslq	%edi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, -364(%rbp,%rdx)
	leal	-2(%r8,%r8), %ecx
	movl	%esi, -368(%rbp,%rdx)
	movl	%ecx, -360(%rbp,%rdx)
	movl	$0, -356(%rbp,%rdx)
	jmp	.L6129
.L6251:
	movslq	%edi, %rax
	addl	$1, %edi
	leal	-2(%rcx,%rcx), %ecx
	addl	$1, %esi
	salq	$4, %rax
	movl	$1, -356(%rbp,%rax)
	movslq	%edi, %rax
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	%ecx, -364(%rbp,%rdx)
	leal	-2(%r8,%r8), %ecx
	movl	%esi, -368(%rbp,%rdx)
	movl	%ecx, -360(%rbp,%rdx)
	movl	$0, -356(%rbp,%rdx)
	jmp	.L6129
.L6249:
	xorl	%eax, %eax
	jmp	.L6118
.L6136:
	testq	%r8, %r8
	je	.L6139
	xorl	%r9d, %r9d
.L6190:
	movq	stderr(%rip), %rdi
	movl	%r9d, %ecx
	movq	%r8, %rdx
	xorl	%eax, %eax
	movl	$.LC270, %esi
	call	fprintf
	movl	$1, %edi
	call	exit
	.p2align 4,,10
	.p2align 3
.L6254:
	movl	$.LC272, %edi
	movl	$32, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
.L6255:
	movl	$.LC273, %edi
	movl	$35, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
.L6259:
	movl	$.LC277, %edi
	movl	$37, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
.L6250:
	movl	$.LC269, %edi
	movl	$35, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
.L6141:
	movq	stderr(%rip), %rdi
	movl	$170901, %ecx
	movl	$.LC271, %esi
	xorl	%eax, %eax
	call	fprintf
	movl	$1, %edi
	call	exit
.L6256:
	movl	$.LC275, %edi
	movl	$40, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
.L6258:
	movl	$.LC276, %edi
	movl	$36, %edx
	movl	$1, %esi
	movq	stderr(%rip), %rcx
	call	fwrite
	movl	$1, %edi
	call	exit
	.cfi_endproc
.LFE271:
	.size	restore, .-restore
	.p2align 4
	.globl	run
	.type	run, @function
run:
.LFB272:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	.LC10(%rip), %rax
	movl	N(%rip), %edi
	movl	$0, iter(%rip)
	movq	$0x000000000, t(%rip)
	movq	%rax, dt(%rip)
	call	init_grid
	movq	$0, perf+8(%rip)
	movq	$0, perf(%rip)
	call	clock
	xorl	%esi, %esi
	leaq	8(%rsp), %rdi
	movq	%rax, (%rsp)
	call	gettimeofday
	movq	(%rsp), %rax
	movsd	24(%rsp), %xmm0
	movq	%rax, perf+32(%rip)
	movq	8(%rsp), %rax
	movsd	%xmm0, perf+56(%rip)
	movq	%rax, perf+40(%rip)
	movq	16(%rsp), %rax
	movq	%rax, perf+48(%rip)
	jmp	.L6261
	.p2align 4,,10
	.p2align 3
.L6262:
	xorl	%eax, %eax
	call	update_perf
	movl	inext(%rip), %eax
	movsd	tnext(%rip), %xmm0
	movl	%eax, iter(%rip)
	movsd	%xmm0, t(%rip)
.L6261:
	movl	$1, %edi
	call	events
	testl	%eax, %eax
	jne	.L6262
	pushq	perf+56(%rip)
	.cfi_def_cfa_offset 56
	movq	perf+8(%rip), %rsi
	movl	iter(%rip), %edi
	pushq	perf+48(%rip)
	.cfi_def_cfa_offset 64
	pushq	perf+40(%rip)
	.cfi_def_cfa_offset 72
	pushq	perf+32(%rip)
	.cfi_def_cfa_offset 80
	call	timer_print
	addq	$32, %rsp
	.cfi_def_cfa_offset 48
	cmpq	$0, grid(%rip)
	je	.L6260
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	jmp	free_grid.part.0
	.p2align 4,,10
	.p2align 3
.L6260:
	.cfi_restore_state
	addq	$40, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE272:
	.size	run, .-run
	.section	.rodata.str1.8
	.align 8
.LC278:
	.string	"/root/mnt/basilisk/src/timestep.h"
	.text
	.p2align 4
	.globl	timestep
	.type	timestep, @function
timestep:
.LFB277:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	movq	%rdi, %rbp
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	sarq	$32, %rbp
	movq	%rdi, %rbx
	subq	$32, %rsp
	.cfi_def_cfa_offset 80
	movq	baseblock(%rip), %rdx
	divsd	CFL(%rip), %xmm0
	testq	%rdx, %rdx
	je	.L6269
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6269
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6270:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6270
.L6269:
	movsd	%xmm0, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 28(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 36(%rsp)
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 96
	pushq	$7
	.cfi_def_cfa_offset 104
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	orl	$1, _loop.62+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$8
	.cfi_def_cfa_offset 104
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 96
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$13
	.cfi_def_cfa_offset 104
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 96
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$7
	.cfi_def_cfa_offset 104
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	orl	$2, _loop.62+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	pushq	$8
	.cfi_def_cfa_offset 104
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 88
	movl	cm(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 96
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$13
	.cfi_def_cfa_offset 104
	pushq	$.LC278
	.cfi_def_cfa_offset 112
	movq	52(%rsp), %rdi
	movl	60(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 80
	movl	$_loop.62, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movsd	(%rsp), %xmm0
	movl	$0, _loop.62+12(%rip)
	cmpl	$65535, %eax
	jg	.L6316
	movq	grid(%rip), %rdi
	cmpb	$0, 128(%rdi)
	jne	.L6317
.L6271:
	movl	56(%rdi), %edx
	testl	%edx, %edx
	jle	.L6272
	movslq	cm(%rip), %rax
	leal	-1(%rdx), %esi
	movslq	%ebx, %rbx
	movl	$1, %r8d
	movq	.LC17(%rip), %xmm6
	salq	$4, %rsi
	movsd	L0(%rip), %xmm4
	leaq	8(,%rbx,8), %r9
	leaq	8(,%rax,8), %r10
	movq	48(%rdi), %rax
	movsd	.LC10(%rip), %xmm2
	pxor	%xmm5, %xmm5
	leaq	8(,%rbp,8), %r11
	movapd	%xmm6, %xmm7
	leaq	16(%rax), %rdx
	addq	%rdx, %rsi
	jmp	.L6279
	.p2align 4,,10
	.p2align 3
.L6318:
	addq	$16, %rdx
.L6279:
	movslq	8(%rax), %rcx
	movl	%r8d, %r12d
	pxor	%xmm3, %xmm3
	movapd	%xmm2, %xmm1
	movslq	(%rax), %rbp
	movslq	4(%rax), %rbx
	sall	%cl, %r12d
	movl	12(%rax), %eax
	cvtsi2sdl	%r12d, %xmm3
	divsd	%xmm3, %xmm1
	mulsd	%xmm4, %xmm1
	testb	$1, %al
	je	.L6273
	movq	24(%rdi), %r13
	movslq	%ecx, %r12
	movq	0(%r13,%r12,8), %r12
	movslq	%ebp, %r13
	movq	(%r12), %r12
	movq	16(%r12), %r14
	movslq	%ebx, %r12
	movq	(%r14,%r13,8), %r13
	movq	0(%r13,%r12,8), %r12
	movsd	(%r12,%r9), %xmm3
	ucomisd	%xmm5, %xmm3
	jp	.L6290
	je	.L6273
.L6290:
	andpd	%xmm6, %xmm3
	movapd	%xmm1, %xmm8
	divsd	%xmm3, %xmm8
	mulsd	(%r12,%r10), %xmm8
	minsd	%xmm0, %xmm8
	movapd	%xmm8, %xmm0
.L6273:
	testb	$2, %al
	je	.L6276
	movq	24(%rdi), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbp,8), %rax
	movq	(%rax,%rbx,8), %rax
	movsd	(%rax,%r11), %xmm3
	ucomisd	%xmm5, %xmm3
	jp	.L6292
	je	.L6276
.L6292:
	andpd	%xmm7, %xmm3
	divsd	%xmm3, %xmm1
	mulsd	(%rax,%r10), %xmm1
	minsd	%xmm0, %xmm1
	movapd	%xmm1, %xmm0
.L6276:
	movq	%rdx, %rax
	cmpq	%rdx, %rsi
	jne	.L6318
.L6272:
	mulsd	CFL(%rip), %xmm0
	movsd	previous.61(%rip), %xmm1
	comisd	%xmm1, %xmm0
	jbe	.L6288
	mulsd	.LC22(%rip), %xmm0
	addsd	%xmm1, %xmm0
	divsd	.LC279(%rip), %xmm0
.L6288:
	movsd	%xmm0, previous.61(%rip)
	addq	$32, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6316:
	.cfi_restore_state
	movq	grid(%rip), %rdi
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm6
	cmpb	$0, 128(%rdi)
	jne	.L6319
.L6280:
	movl	56(%rdi), %edx
	testl	%edx, %edx
	jle	.L6272
	movq	48(%rdi), %rax
	leal	-1(%rdx), %esi
	movslq	%ebx, %rbx
	movl	$1, %r8d
	movq	.LC17(%rip), %xmm7
	salq	$4, %rsi
	movsd	L0(%rip), %xmm4
	leaq	8(,%rbx,8), %r9
	leaq	16(%rax), %rdx
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rbp,8), %r10
	pxor	%xmm5, %xmm5
	addq	%rdx, %rsi
	movapd	%xmm7, %xmm8
	jmp	.L6287
	.p2align 4,,10
	.p2align 3
.L6320:
	addq	$16, %rdx
.L6287:
	movslq	8(%rax), %rcx
	movl	%r8d, %ebp
	pxor	%xmm3, %xmm3
	movapd	%xmm2, %xmm1
	movslq	(%rax), %rbx
	movslq	4(%rax), %r11
	sall	%cl, %ebp
	movl	12(%rax), %eax
	cvtsi2sdl	%ebp, %xmm3
	divsd	%xmm3, %xmm1
	mulsd	%xmm4, %xmm1
	testb	$1, %al
	je	.L6281
	movq	24(%rdi), %r12
	movslq	%ecx, %rbp
	movq	(%r12,%rbp,8), %rbp
	movslq	%ebx, %r12
	movq	0(%rbp), %rbp
	movq	16(%rbp), %r13
	movslq	%r11d, %rbp
	movq	0(%r13,%r12,8), %r12
	movq	(%r12,%rbp,8), %rbp
	movsd	0(%rbp,%r9), %xmm3
	ucomisd	%xmm5, %xmm3
	jp	.L6294
	je	.L6281
.L6294:
	andpd	%xmm7, %xmm3
	movapd	%xmm1, %xmm9
	divsd	%xmm3, %xmm9
	mulsd	%xmm6, %xmm9
	minsd	%xmm0, %xmm9
	movapd	%xmm9, %xmm0
.L6281:
	testb	$2, %al
	je	.L6284
	movq	24(%rdi), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rbx,8), %rax
	movq	(%rax,%r11,8), %rax
	movsd	(%rax,%r10), %xmm3
	ucomisd	%xmm5, %xmm3
	jp	.L6296
	je	.L6284
.L6296:
	andpd	%xmm8, %xmm3
	divsd	%xmm3, %xmm1
	mulsd	%xmm6, %xmm1
	minsd	%xmm0, %xmm1
	movapd	%xmm1, %xmm0
.L6284:
	movq	%rdx, %rax
	cmpq	%rdx, %rsi
	jne	.L6320
	jmp	.L6272
	.p2align 4,,10
	.p2align 3
.L6317:
	movsd	%xmm0, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %rdi
	movsd	(%rsp), %xmm0
	jmp	.L6271
	.p2align 4,,10
	.p2align 3
.L6319:
	movsd	%xmm6, 8(%rsp)
	movsd	%xmm0, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm6
	movsd	(%rsp), %xmm0
	movq	grid(%rip), %rdi
	jmp	.L6280
	.cfi_endproc
.LFE277:
	.size	timestep, .-timestep
	.p2align 4
	.type	stability, @function
stability:
.LFB307:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	cmpb	$0, stokes(%rip)
	movsd	dtmax(%rip), %xmm0
	je	.L6339
.L6322:
	movsd	tnext(%rip), %xmm2
	ucomisd	.LC2(%rip), %xmm2
	movsd	t(%rip), %xmm1
	jp	.L6333
	jne	.L6333
.L6323:
	addsd	%xmm0, %xmm1
	movsd	%xmm0, dt(%rip)
	xorl	%eax, %eax
	movsd	%xmm1, tnext(%rip)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6333:
	.cfi_restore_state
	comisd	%xmm1, %xmm2
	jbe	.L6323
	subsd	%xmm1, %xmm2
	movapd	%xmm2, %xmm3
	divsd	%xmm0, %xmm3
	cvttsd2siq	%xmm3, %rax
	cmpl	$2147483646, %eax
	ja	.L6340
	testl	%eax, %eax
	je	.L6332
	pxor	%xmm4, %xmm4
	movapd	%xmm2, %xmm3
	cvtsi2sdl	%eax, %xmm4
	divsd	%xmm4, %xmm3
	movsd	.LC85(%rip), %xmm4
	addsd	%xmm0, %xmm4
	comisd	%xmm4, %xmm3
	jbe	.L6337
	addl	$1, %eax
	pxor	%xmm3, %xmm3
	cvtsi2sdl	%eax, %xmm3
	divsd	%xmm3, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L6323
	.p2align 4,,10
	.p2align 3
.L6339:
	movq	uf(%rip), %rdi
	call	timestep
	jmp	.L6322
	.p2align 4,,10
	.p2align 3
.L6332:
	movapd	%xmm2, %xmm0
	xorl	%eax, %eax
	movsd	%xmm0, dt(%rip)
	addq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6337:
	.cfi_restore_state
	minsd	%xmm0, %xmm3
	movapd	%xmm3, %xmm0
	jmp	.L6323
.L6340:
	movl	$.LC87, %edx
	movl	$245, %esi
	movl	$.LC82, %edi
	call	qassert
	.cfi_endproc
.LFE307:
	.size	stability, .-stability
	.section	.rodata.str1.1
.LC280:
	.string	"/root/mnt/basilisk/src/bcg.h"
	.text
	.p2align 4
	.globl	tracer_fluxes
	.type	tracer_fluxes, @function
tracer_fluxes:
.LFB278:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rsi, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	sarq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rsi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rdx, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movslq	%edi, %rbp
	movl	$.LC140, %edi
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%ecx, %rbx
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	movq	%rax, 32(%rsp)
	movq	%rdx, %rax
	sarq	$32, %rax
	movsd	%xmm0, 8(%rsp)
	movq	%rax, 40(%rsp)
	call	new_vector
	leaq	104(%rsp), %rdi
	movq	$-1, 120(%rsp)
	movq	%rax, %rsi
	movq	%rax, (%rsp)
	sarq	$32, %rax
	movl	%esi, 112(%rsp)
	leaq	112(%rsp), %rsi
	movq	%rax, 16(%rsp)
	movl	%eax, 116(%rsp)
	movl	%ebp, 104(%rsp)
	movl	$-1, 108(%rsp)
	call	gradients
	movq	baseblock(%rip), %rdx
	movsd	8(%rsp), %xmm0
	testq	%rdx, %rdx
	je	.L6345
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6345
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6346:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6346
.L6345:
	movsd	%xmm0, 8(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movq	$0, 136(%rsp)
	movl	$0, 144(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$36
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	orl	$1, _loop.60+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$36
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %ecx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movl	32(%rsp), %edx
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-1, %ecx
	movl	%ebx, %edx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %ecx
	movl	%ebp, %edx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movl	fm+4(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%r8d, %r8d
	movl	$-2, %ecx
	pushq	$44
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	fm+4(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$1, %r8d
	movl	$-2, %ecx
	pushq	$44
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	fm+4(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$1, %r8d
	movl	$-2, %ecx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	fm+4(%rip), %edx
	movl	$-2, %ecx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movl	168(%rsp), %esi
	movq	160(%rsp), %rdi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movq	%r13, %rsi
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	shrq	$32, %rsi
	movl	$1, %r8d
	movl	$-2, %ecx
	pushq	$45
	.cfi_def_cfa_offset 232
	movq	%rsi, %r14
	movl	%esi, %edx
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %ecx
	movl	%r14d, %edx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	%ebp, %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-1, %r8d
	movl	$-2, %ecx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %ecx
	movl	%ebp, %edx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %ecx
	movl	%ebp, %edx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movl	$-2, %ecx
	movl	%ebp, %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%r9d, %r9d
	movl	$1, %r8d
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$58
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC280
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$58
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$36
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	orl	$2, _loop.60+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$36
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	32(%rsp), %rax
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-1, %r8d
	movl	%ebx, %edx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	%ebp, %edx
	pushq	$38
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	fm(%rip), %edx
	movl	$-2, %r8d
	pushq	$44
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	fm(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$44
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	fm(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	fm(%rip), %edx
	movl	$-2, %r8d
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	%r13d, %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	%r13d, %edx
	pushq	$45
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	%ebp, %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	$-1, %ecx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	%ebp, %edx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	%ebp, %edx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	%ebp, %edx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$46
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movq	%r12, %rax
	xorl	%r9d, %r9d
	pushq	$58
	.cfi_def_cfa_offset 224
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC280
	.cfi_def_cfa_offset 232
	movq	%rax, %rdx
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$58
	.cfi_def_cfa_offset 232
	pushq	$.LC280
	.cfi_def_cfa_offset 240
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movl	$_loop.60, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.60+12(%rip)
	movsd	8(%rsp), %xmm0
	cmpl	$65535, %eax
	jle	.L6343
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %r9
	movsd	-524288(%rdx,%rax,8), %xmm7
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rdx,%rax,8), %xmm8
	movzbl	128(%r9), %eax
	cmpl	$65535, %ebx
	jg	.L6372
	testb	%al, %al
	jne	.L6523
.L6373:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L6371
	movslq	(%rsp), %rdx
	leal	1(%rbx), %r8d
	movslq	%r12d, %r12
	movq	48(%r9), %rdi
	movslq	%r13d, %r13
	movslq	%r8d, %r8
	pxor	%xmm5, %xmm5
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rdx,8), %rbx
	leal	-1(%rax), %edx
	salq	$3, %r8
	movsd	.LC3(%rip), %xmm11
	movq	%rbx, 56(%rsp)
	salq	$4, %rdx
	movq	32(%rsp), %rbx
	leaq	16(%rdi), %rax
	leaq	8(,%r13,8), %rcx
	movsd	.LC5(%rip), %xmm13
	movq	.LC1(%rip), %xmm14
	leaq	8(,%rbp,8), %r13
	leaq	8(,%rbx,8), %r15
	leaq	8(,%r12,8), %rbx
	movq	%rcx, 48(%rsp)
	movq	%rbx, 64(%rsp)
	movq	16(%rsp), %rbx
	movq	%r15, 32(%rsp)
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 72(%rsp)
	movq	40(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 40(%rsp)
	leaq	(%rdx,%rax), %rbx
	movq	%rbx, 8(%rsp)
	jmp	.L6392
	.p2align 4,,10
	.p2align 3
.L6526:
	movq	-8(%rbp,%r14), %rbx
	movapd	%xmm2, %xmm12
	movq	(%rbx,%r10,8), %r12
.L6377:
	movq	-8(%rbp,%r14), %rbp
	movapd	%xmm2, %xmm1
	movq	56(%rsp), %r14
	ucomisd	%xmm5, %xmm8
	subsd	%xmm6, %xmm1
	movsd	(%r12,%r13), %xmm10
	movq	0(%rbp,%r10,8), %r10
	mulsd	%xmm12, %xmm1
	movsd	(%r10,%r8), %xmm4
	addsd	(%r11,%r8), %xmm4
	mulsd	(%r12,%r14), %xmm1
	mulsd	%xmm0, %xmm4
	mulsd	%xmm3, %xmm1
	mulsd	%xmm11, %xmm4
	mulsd	%xmm13, %xmm1
	addsd	%xmm10, %xmm4
	addsd	%xmm4, %xmm1
	jp	.L6444
	je	.L6378
.L6444:
	movq	24(%rsp), %r14
	movapd	%xmm8, %xmm6
	addsd	%xmm8, %xmm6
	movq	8(%rbx,%r14), %r10
	movq	32(%rsp), %r14
	movsd	(%r12,%r14), %xmm4
	addsd	(%r10,%r14), %xmm4
	divsd	%xmm6, %xmm4
	comisd	%xmm4, %xmm5
	ja	.L6524
	movq	24(%rsp), %r14
	movapd	%xmm10, %xmm6
	movq	-8(%rbx,%r14), %r10
	subsd	(%r10,%r13), %xmm6
.L6382:
	mulsd	%xmm0, %xmm4
	addsd	%xmm3, %xmm3
	mulsd	%xmm6, %xmm4
	divsd	%xmm3, %xmm4
	subsd	%xmm4, %xmm1
.L6378:
	mulsd	%xmm9, %xmm1
	movq	64(%rsp), %rbx
	movsd	%xmm1, (%r11,%rbx)
	movsd	L0(%rip), %xmm3
	mulsd	%xmm15, %xmm3
.L6374:
	andl	$2, %edi
	je	.L6383
	movq	24(%r9), %rdi
	movq	32(%rsp), %rbx
	leaq	0(,%rsi,8), %r11
	movapd	%xmm3, %xmm1
	mulsd	%xmm8, %xmm1
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r10
	addsd	%xmm5, %xmm1
	movq	(%r10,%rsi,8), %rcx
	leaq	0(,%rdx,8), %rsi
	movq	(%rcx,%rdx,8), %rdx
	movsd	(%rdx,%rbx), %xmm4
	movapd	%xmm4, %xmm10
	mulsd	%xmm0, %xmm10
	divsd	%xmm1, %xmm10
	comisd	%xmm5, %xmm10
	jbe	.L6512
	movq	-8(%rcx,%rsi), %rdi
	leaq	-8(%rsi), %rbx
	movapd	%xmm2, %xmm12
.L6386:
	movq	-8(%rcx,%rsi), %rcx
	movapd	%xmm2, %xmm1
	movq	72(%rsp), %rsi
	ucomisd	%xmm5, %xmm7
	subsd	%xmm10, %xmm1
	movsd	(%rdi,%r13), %xmm6
	movsd	(%rcx,%r8), %xmm9
	addsd	(%rdx,%r8), %xmm9
	mulsd	%xmm12, %xmm1
	mulsd	%xmm0, %xmm9
	mulsd	(%rdi,%rsi), %xmm1
	mulsd	%xmm11, %xmm9
	mulsd	%xmm3, %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm6, %xmm9
	addsd	%xmm9, %xmm1
	jp	.L6447
	je	.L6387
.L6447:
	movq	8(%r10,%r11), %rcx
	movq	48(%rsp), %rsi
	movapd	%xmm7, %xmm10
	addsd	%xmm7, %xmm10
	movq	(%rcx,%rbx), %rcx
	movsd	(%rdi,%rsi), %xmm9
	addsd	(%rcx,%rsi), %xmm9
	divsd	%xmm10, %xmm9
	comisd	%xmm9, %xmm5
	ja	.L6525
	movq	-8(%r10,%r11), %rcx
	movq	(%rcx,%rbx), %rcx
	subsd	(%rcx,%r13), %xmm6
	movapd	%xmm6, %xmm10
.L6391:
	mulsd	%xmm0, %xmm9
	addsd	%xmm3, %xmm3
	mulsd	%xmm10, %xmm9
	divsd	%xmm3, %xmm9
	subsd	%xmm9, %xmm1
.L6387:
	mulsd	%xmm4, %xmm1
	movq	40(%rsp), %rbx
	movsd	%xmm1, (%rdx,%rbx)
.L6383:
	movq	%rax, %rdi
	cmpq	%rax, 8(%rsp)
	je	.L6371
	addq	$16, %rax
.L6392:
	movslq	8(%rdi), %rcx
	pxor	%xmm1, %xmm1
	movapd	%xmm2, %xmm15
	movslq	(%rdi), %rsi
	movl	$1, %r10d
	movslq	4(%rdi), %rdx
	movsd	L0(%rip), %xmm3
	sall	%cl, %r10d
	movl	12(%rdi), %edi
	cvtsi2sdl	%r10d, %xmm1
	divsd	%xmm1, %xmm15
	mulsd	%xmm15, %xmm3
	testb	$1, %dil
	je	.L6374
	movq	24(%r9), %r11
	movslq	%ecx, %r10
	movq	48(%rsp), %r12
	movapd	%xmm3, %xmm1
	mulsd	%xmm7, %xmm1
	movq	(%r11,%r10,8), %r10
	movq	(%r10), %r10
	movq	16(%r10), %rbp
	movslq	%esi, %r10
	addsd	%xmm5, %xmm1
	leaq	0(,%r10,8), %r14
	movq	0(%rbp,%r10,8), %rbx
	movslq	%edx, %r10
	leaq	0(,%r10,8), %r11
	movq	%r11, 24(%rsp)
	movq	(%rbx,%r10,8), %r11
	movsd	(%r11,%r12), %xmm9
	movapd	%xmm9, %xmm6
	mulsd	%xmm0, %xmm6
	divsd	%xmm1, %xmm6
	comisd	%xmm5, %xmm6
	ja	.L6526
	movq	.LC23(%rip), %r15
	xorpd	%xmm14, %xmm6
	movq	%r11, %r12
	movq	%r15, %xmm12
	jmp	.L6377
	.p2align 4,,10
	.p2align 3
.L6372:
	movsd	-524288(%rdx,%rbx,8), %xmm9
	testb	%al, %al
	jne	.L6527
.L6415:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L6371
	movslq	(%rsp), %rdx
	movslq	%r12d, %r12
	movq	48(%r9), %rdi
	movslq	%r13d, %r13
	leaq	8(,%r12,8), %rcx
	movl	$1, %r14d
	movsd	.LC10(%rip), %xmm2
	movsd	.LC5(%rip), %xmm11
	leaq	8(,%rdx,8), %rsi
	leal	-1(%rax), %edx
	movq	%rcx, 56(%rsp)
	movsd	.LC3(%rip), %xmm12
	movq	%rsi, 48(%rsp)
	movq	32(%rsp), %rsi
	salq	$4, %rdx
	leaq	16(%rdi), %rax
	addq	%rax, %rdx
	leaq	8(,%r13,8), %r13
	pxor	%xmm4, %xmm4
	movq	.LC1(%rip), %xmm13
	leaq	8(,%rsi,8), %r15
	movq	16(%rsp), %rsi
	movq	%rdx, 8(%rsp)
	leaq	8(,%rbp,8), %rbx
	leaq	8(,%rsi,8), %rcx
	movq	40(%rsp), %rsi
	movq	%rcx, 32(%rsp)
	leaq	8(,%rsi,8), %rcx
	movq	%rcx, 40(%rsp)
	jmp	.L6434
	.p2align 4,,10
	.p2align 3
.L6530:
	movq	24(%rsp), %r8
	movapd	%xmm2, %xmm15
	movq	-8(%rbp,%r8), %r8
	movq	(%r8,%r10,8), %r10
.L6419:
	movapd	%xmm2, %xmm1
	movq	48(%rsp), %rbp
	movsd	(%r10,%rbx), %xmm10
	ucomisd	%xmm4, %xmm8
	subsd	%xmm5, %xmm1
	movapd	%xmm9, %xmm5
	addsd	%xmm9, %xmm5
	mulsd	%xmm15, %xmm1
	mulsd	(%r10,%rbp), %xmm1
	mulsd	%xmm0, %xmm5
	mulsd	%xmm3, %xmm1
	mulsd	%xmm12, %xmm5
	mulsd	%xmm11, %xmm1
	addsd	%xmm10, %xmm5
	addsd	%xmm5, %xmm1
	jp	.L6458
	je	.L6420
.L6458:
	movq	8(%r8,%r12), %rbp
	movapd	%xmm8, %xmm15
	movsd	(%r10,%r15), %xmm5
	addsd	%xmm8, %xmm15
	addsd	0(%rbp,%r15), %xmm5
	divsd	%xmm15, %xmm5
	comisd	%xmm5, %xmm4
	ja	.L6528
	movq	-8(%r8,%r12), %r8
	movapd	%xmm10, %xmm15
	subsd	(%r8,%rbx), %xmm15
.L6424:
	mulsd	%xmm0, %xmm5
	addsd	%xmm3, %xmm3
	mulsd	%xmm15, %xmm5
	divsd	%xmm3, %xmm5
	subsd	%xmm5, %xmm1
.L6420:
	mulsd	%xmm6, %xmm1
	movq	56(%rsp), %r10
	movsd	%xmm1, (%r11,%r10)
	movsd	L0(%rip), %xmm3
	mulsd	%xmm14, %xmm3
.L6416:
	andl	$2, %edi
	je	.L6425
	movq	24(%r9), %rdi
	leaq	0(,%rsi,8), %r8
	movapd	%xmm3, %xmm6
	mulsd	%xmm8, %xmm6
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	addsd	%xmm4, %xmm6
	leaq	0(,%rdx,8), %rcx
	movq	(%rdi,%rsi,8), %r10
	movq	(%r10,%rdx,8), %rsi
	movsd	(%rsi,%r15), %xmm5
	movapd	%xmm5, %xmm1
	mulsd	%xmm0, %xmm1
	divsd	%xmm6, %xmm1
	comisd	%xmm4, %xmm1
	jbe	.L6520
	subq	$8, %rcx
	movapd	%xmm2, %xmm15
	movq	(%r10,%rcx), %rdx
.L6428:
	movapd	%xmm2, %xmm10
	movq	32(%rsp), %r11
	movsd	(%rdx,%rbx), %xmm6
	ucomisd	%xmm4, %xmm7
	subsd	%xmm1, %xmm10
	movapd	%xmm9, %xmm1
	addsd	%xmm9, %xmm1
	mulsd	%xmm15, %xmm10
	mulsd	(%rdx,%r11), %xmm10
	mulsd	%xmm0, %xmm1
	mulsd	.LC3(%rip), %xmm1
	mulsd	%xmm3, %xmm10
	addsd	%xmm6, %xmm1
	mulsd	%xmm11, %xmm10
	addsd	%xmm10, %xmm1
	jp	.L6461
	je	.L6429
.L6461:
	movq	8(%rdi,%r8), %r10
	movapd	%xmm7, %xmm15
	movsd	(%rdx,%r13), %xmm10
	addsd	%xmm7, %xmm15
	movq	(%r10,%rcx), %r10
	addsd	(%r10,%r13), %xmm10
	divsd	%xmm15, %xmm10
	comisd	%xmm10, %xmm4
	ja	.L6529
	movq	-8(%rdi,%r8), %rdx
	movq	(%rdx,%rcx), %rdx
	subsd	(%rdx,%rbx), %xmm6
	movapd	%xmm6, %xmm15
.L6433:
	mulsd	%xmm0, %xmm10
	addsd	%xmm3, %xmm3
	mulsd	%xmm15, %xmm10
	divsd	%xmm3, %xmm10
	subsd	%xmm10, %xmm1
.L6429:
	mulsd	%xmm5, %xmm1
	movq	40(%rsp), %rdx
	movsd	%xmm1, (%rsi,%rdx)
.L6425:
	movq	%rax, %rdi
	cmpq	%rax, 8(%rsp)
	je	.L6371
	addq	$16, %rax
.L6434:
	movslq	8(%rdi), %rcx
	movl	%r14d, %r8d
	pxor	%xmm1, %xmm1
	movapd	%xmm2, %xmm14
	movslq	(%rdi), %rsi
	movslq	4(%rdi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm3
	movl	12(%rdi), %edi
	cvtsi2sdl	%r8d, %xmm1
	divsd	%xmm1, %xmm14
	mulsd	%xmm14, %xmm3
	testb	$1, %dil
	je	.L6416
	movq	24(%r9), %r10
	movslq	%ecx, %r8
	movapd	%xmm3, %xmm1
	mulsd	%xmm7, %xmm1
	movq	(%r10,%r8,8), %r8
	movslq	%edx, %r10
	leaq	0(,%r10,8), %r12
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%esi, %r8
	addsd	%xmm4, %xmm1
	leaq	0(,%r8,8), %r11
	movq	0(%rbp,%r8,8), %r8
	movq	%r11, 24(%rsp)
	movq	(%r8,%r10,8), %r11
	movsd	(%r11,%r13), %xmm6
	movapd	%xmm6, %xmm5
	mulsd	%xmm0, %xmm5
	divsd	%xmm1, %xmm5
	comisd	%xmm4, %xmm5
	ja	.L6530
	movq	.LC23(%rip), %rbp
	xorpd	%xmm13, %xmm5
	movq	%r11, %r10
	movq	%rbp, %xmm15
	jmp	.L6419
	.p2align 4,,10
	.p2align 3
.L6371:
	movl	(%rsp), %eax
	leaq	128(%rsp), %rdi
	movq	$-1, 136(%rsp)
	movl	%eax, 128(%rsp)
	movl	16(%rsp), %eax
	movl	%eax, 132(%rsp)
	call	delete
	addq	$152, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6520:
	.cfi_restore_state
	xorpd	.LC1(%rip), %xmm1
	movq	%rsi, %rdx
	movsd	.LC23(%rip), %xmm15
	jmp	.L6428
	.p2align 4,,10
	.p2align 3
.L6343:
	movq	grid(%rip), %r9
	movzbl	128(%r9), %eax
	cmpl	$65535, %ebx
	jle	.L6531
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rbx,8), %xmm6
	testb	%al, %al
	jne	.L6532
.L6393:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L6371
	movslq	%r13d, %r13
	movslq	%r12d, %r12
	movq	48(%r9), %rdi
	pxor	%xmm4, %xmm4
	movslq	fm(%rip), %rdx
	leaq	8(,%r13,8), %rbx
	leaq	8(,%r12,8), %rsi
	movq	.LC1(%rip), %xmm9
	movq	%rsi, 72(%rsp)
	movq	40(%rsp), %rsi
	leaq	8(,%rdx,8), %r10
	movslq	(%rsp), %rdx
	movq	%rbx, 48(%rsp)
	leaq	8(,%rbp,8), %rbx
	movsd	.LC10(%rip), %xmm2
	movsd	.LC5(%rip), %xmm7
	movapd	%xmm9, %xmm10
	leaq	8(,%rdx,8), %rdx
	movsd	.LC3(%rip), %xmm8
	movq	%rdx, 56(%rsp)
	movslq	fm+4(%rip), %rdx
	leaq	8(,%rdx,8), %r13
	movq	32(%rsp), %rdx
	leaq	8(,%rdx,8), %rcx
	movq	16(%rsp), %rdx
	movq	%rcx, 32(%rsp)
	leaq	8(,%rdx,8), %rcx
	leaq	8(,%rsi,8), %rdx
	movq	%rdx, 40(%rsp)
	leal	-1(%rax), %edx
	leaq	16(%rdi), %rax
	salq	$4, %rdx
	movq	%rcx, 64(%rsp)
	leaq	(%rdx,%rax), %r15
	movq	%r15, %r12
	movq	%rbx, %r15
	jmp	.L6414
	.p2align 4,,10
	.p2align 3
.L6535:
	movq	24(%rsp), %r14
	movapd	%xmm2, %xmm14
	movq	-8(%rbp,%r14), %r11
	movq	(%r11,%rbx,8), %rbx
.L6397:
	movapd	%xmm2, %xmm13
	movq	56(%rsp), %r14
	movsd	(%rbx,%r15), %xmm12
	subsd	%xmm1, %xmm13
	movapd	%xmm6, %xmm1
	addsd	%xmm6, %xmm1
	mulsd	%xmm14, %xmm13
	mulsd	(%rbx,%r14), %xmm13
	mulsd	%xmm0, %xmm1
	mulsd	%xmm3, %xmm13
	mulsd	%xmm8, %xmm1
	mulsd	%xmm7, %xmm13
	addsd	%xmm12, %xmm1
	addsd	%xmm13, %xmm1
	movsd	(%rbx,%r13), %xmm13
	ucomisd	%xmm4, %xmm13
	jp	.L6450
	je	.L6398
.L6450:
	movq	8(%rsp), %r14
	movq	8(%r11,%r14), %rbp
	movsd	0(%rbp,%r13), %xmm15
	ucomisd	%xmm4, %xmm15
	jp	.L6451
	je	.L6398
.L6451:
	movq	32(%rsp), %r14
	addsd	%xmm15, %xmm13
	movsd	(%rbx,%r14), %xmm14
	addsd	0(%rbp,%r14), %xmm14
	divsd	%xmm13, %xmm14
	comisd	%xmm14, %xmm4
	ja	.L6533
	movq	8(%rsp), %rbx
	movapd	%xmm12, %xmm13
	movq	-8(%r11,%rbx), %r11
	subsd	(%r11,%r15), %xmm13
.L6403:
	mulsd	%xmm0, %xmm14
	addsd	%xmm3, %xmm3
	mulsd	%xmm13, %xmm14
	divsd	%xmm3, %xmm14
	subsd	%xmm14, %xmm1
.L6398:
	mulsd	%xmm11, %xmm1
	movq	72(%rsp), %rbx
	movsd	%xmm1, (%r8,%rbx)
	mulsd	L0(%rip), %xmm5
	movapd	%xmm5, %xmm3
.L6394:
	andl	$2, %edi
	je	.L6404
	movq	24(%r9), %rdi
	leaq	0(,%rsi,8), %r8
	movq	32(%rsp), %rbx
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	movq	(%rdi,%rsi,8), %rcx
	leaq	0(,%rdx,8), %rsi
	movq	(%rcx,%rdx,8), %rdx
	movsd	(%rdx,%r13), %xmm1
	movsd	(%rdx,%rbx), %xmm5
	mulsd	%xmm3, %xmm1
	movapd	%xmm5, %xmm12
	mulsd	%xmm0, %xmm12
	addsd	%xmm4, %xmm1
	divsd	%xmm1, %xmm12
	comisd	%xmm4, %xmm12
	jbe	.L6516
	subq	$8, %rsi
	movapd	%xmm2, %xmm13
	movq	(%rcx,%rsi), %rcx
.L6407:
	movapd	%xmm2, %xmm1
	movq	64(%rsp), %rbx
	movsd	(%rcx,%r15), %xmm11
	subsd	%xmm12, %xmm1
	movapd	%xmm6, %xmm12
	addsd	%xmm6, %xmm12
	mulsd	%xmm13, %xmm1
	movsd	(%rcx,%r10), %xmm13
	mulsd	(%rcx,%rbx), %xmm1
	mulsd	%xmm0, %xmm12
	ucomisd	%xmm4, %xmm13
	mulsd	.LC3(%rip), %xmm12
	mulsd	%xmm3, %xmm1
	addsd	%xmm11, %xmm12
	mulsd	%xmm7, %xmm1
	addsd	%xmm12, %xmm1
	jp	.L6454
	je	.L6408
.L6454:
	movq	8(%rdi,%r8), %r11
	movq	(%r11,%rsi), %r11
	movsd	(%r11,%r10), %xmm14
	ucomisd	%xmm4, %xmm14
	jp	.L6455
	je	.L6408
.L6455:
	movq	48(%rsp), %rbx
	addsd	%xmm14, %xmm13
	movsd	(%rcx,%rbx), %xmm12
	addsd	(%r11,%rbx), %xmm12
	divsd	%xmm13, %xmm12
	comisd	%xmm12, %xmm4
	ja	.L6534
	movq	-8(%rdi,%r8), %rcx
	movq	(%rcx,%rsi), %rcx
	subsd	(%rcx,%r15), %xmm11
	movapd	%xmm11, %xmm13
.L6413:
	mulsd	%xmm0, %xmm12
	addsd	%xmm3, %xmm3
	mulsd	%xmm13, %xmm12
	divsd	%xmm3, %xmm12
	subsd	%xmm12, %xmm1
.L6408:
	mulsd	%xmm5, %xmm1
	movq	40(%rsp), %rbx
	movsd	%xmm1, (%rdx,%rbx)
.L6404:
	movq	%rax, %rdi
	cmpq	%rax, %r12
	je	.L6371
	addq	$16, %rax
.L6414:
	movslq	8(%rdi), %rcx
	pxor	%xmm1, %xmm1
	movapd	%xmm2, %xmm5
	movslq	(%rdi), %rsi
	movl	$1, %r8d
	movslq	4(%rdi), %rdx
	movsd	L0(%rip), %xmm3
	sall	%cl, %r8d
	movl	12(%rdi), %edi
	cvtsi2sdl	%r8d, %xmm1
	divsd	%xmm1, %xmm5
	mulsd	%xmm5, %xmm3
	testb	$1, %dil
	je	.L6394
	movq	24(%r9), %r11
	movslq	%ecx, %r8
	movq	48(%rsp), %r14
	movq	(%r11,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%esi, %r8
	leaq	0(,%r8,8), %rbx
	movq	0(%rbp,%r8,8), %r11
	movq	%rbx, 24(%rsp)
	movslq	%edx, %rbx
	leaq	0(,%rbx,8), %r8
	movq	%r8, 8(%rsp)
	movq	(%r11,%rbx,8), %r8
	movsd	(%r8,%r10), %xmm12
	movsd	(%r8,%r14), %xmm11
	mulsd	%xmm3, %xmm12
	movapd	%xmm11, %xmm1
	mulsd	%xmm0, %xmm1
	addsd	%xmm4, %xmm12
	divsd	%xmm12, %xmm1
	comisd	%xmm4, %xmm1
	ja	.L6535
	movq	.LC23(%rip), %r14
	xorpd	%xmm9, %xmm1
	movq	%r8, %rbx
	movq	%r14, %xmm14
	jmp	.L6397
	.p2align 4,,10
	.p2align 3
.L6529:
	movsd	(%r10,%rbx), %xmm15
	subsd	%xmm6, %xmm15
	jmp	.L6433
	.p2align 4,,10
	.p2align 3
.L6528:
	movsd	0(%rbp,%rbx), %xmm15
	subsd	%xmm10, %xmm15
	jmp	.L6424
	.p2align 4,,10
	.p2align 3
.L6531:
	testb	%al, %al
	jne	.L6536
.L6348:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L6371
	leal	1(%rbx), %r10d
	movslq	%r12d, %r12
	movslq	%r13d, %r13
	movq	48(%r9), %rdi
	movslq	fm(%rip), %rdx
	leaq	8(,%r13,8), %rsi
	movslq	%r10d, %r10
	movq	.LC1(%rip), %xmm7
	movq	%rsi, 48(%rsp)
	leaq	8(,%rbp,8), %rsi
	movsd	.LC10(%rip), %xmm2
	salq	$3, %r10
	movq	%rsi, 24(%rsp)
	leaq	8(,%rdx,8), %rcx
	movslq	(%rsp), %rdx
	pxor	%xmm4, %xmm4
	movq	%rcx, 8(%rsp)
	movsd	.LC3(%rip), %xmm5
	movapd	%xmm7, %xmm8
	leaq	8(,%rdx,8), %rbx
	movslq	fm+4(%rip), %rdx
	movsd	.LC5(%rip), %xmm6
	movq	%rbx, 64(%rsp)
	movq	32(%rsp), %rbx
	leaq	8(,%rdx,8), %r13
	leal	-1(%rax), %edx
	leaq	8(,%rbx,8), %rbx
	salq	$4, %rdx
	leaq	16(%rdi), %rax
	movq	%r13, %r14
	movq	%rbx, 56(%rsp)
	leaq	8(,%r12,8), %rbx
	movq	%rbx, 72(%rsp)
	movq	16(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 80(%rsp)
	movq	40(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 88(%rsp)
	leaq	(%rdx,%rax), %rbx
	movq	%rbx, 32(%rsp)
	.p2align 4,,10
	.p2align 3
.L6370:
	movslq	8(%rdi), %rcx
	pxor	%xmm1, %xmm1
	movapd	%xmm2, %xmm9
	movslq	(%rdi), %rsi
	movl	$1, %r8d
	movslq	4(%rdi), %rdx
	movsd	L0(%rip), %xmm3
	sall	%cl, %r8d
	movl	12(%rdi), %edi
	cvtsi2sdl	%r8d, %xmm1
	divsd	%xmm1, %xmm9
	mulsd	%xmm9, %xmm3
	testb	$1, %dil
	je	.L6350
	movq	24(%r9), %r11
	movslq	%ecx, %r8
	movq	(%r11,%r8,8), %r8
	movslq	%edx, %r11
	leaq	0(,%r11,8), %rbx
	movq	(%r8), %r8
	movq	%rbx, 40(%rsp)
	movq	48(%rsp), %rbx
	movq	16(%r8), %r12
	movslq	%esi, %r8
	leaq	0(,%r8,8), %r13
	movq	(%r12,%r8,8), %rbp
	movq	0(%rbp,%r11,8), %r8
	movsd	(%r8,%rbx), %xmm10
	movq	8(%rsp), %rbx
	movsd	(%r8,%rbx), %xmm1
	movapd	%xmm10, %xmm13
	mulsd	%xmm0, %xmm13
	mulsd	%xmm3, %xmm1
	addsd	%xmm4, %xmm1
	divsd	%xmm1, %xmm13
	comisd	%xmm4, %xmm13
	jbe	.L6506
	movq	-8(%r12,%r13), %rbp
	movapd	%xmm2, %xmm14
	movq	0(%rbp,%r11,8), %rbx
.L6353:
	movq	-8(%r12,%r13), %r12
	movapd	%xmm2, %xmm1
	movq	24(%rsp), %r15
	subsd	%xmm13, %xmm1
	movsd	(%rbx,%r14), %xmm13
	movq	(%r12,%r11,8), %r11
	movsd	(%rbx,%r15), %xmm11
	movq	64(%rsp), %r15
	ucomisd	%xmm4, %xmm13
	mulsd	%xmm14, %xmm1
	movsd	(%r11,%r10), %xmm12
	addsd	(%r8,%r10), %xmm12
	mulsd	(%rbx,%r15), %xmm1
	mulsd	%xmm0, %xmm12
	mulsd	%xmm3, %xmm1
	mulsd	%xmm5, %xmm12
	mulsd	%xmm6, %xmm1
	addsd	%xmm11, %xmm12
	addsd	%xmm12, %xmm1
	jp	.L6436
	je	.L6354
.L6436:
	movq	40(%rsp), %r15
	movq	8(%rbp,%r15), %r11
	movsd	(%r11,%r14), %xmm14
	ucomisd	%xmm4, %xmm14
	jp	.L6437
	je	.L6354
.L6437:
	movq	56(%rsp), %r15
	addsd	%xmm14, %xmm13
	movsd	(%rbx,%r15), %xmm12
	addsd	(%r11,%r15), %xmm12
	divsd	%xmm13, %xmm12
	comisd	%xmm12, %xmm4
	ja	.L6537
	movq	40(%rsp), %rbx
	movq	-8(%rbp,%rbx), %r11
	movq	24(%rsp), %rbx
	subsd	(%r11,%rbx), %xmm11
	movapd	%xmm11, %xmm13
.L6359:
	mulsd	%xmm0, %xmm12
	addsd	%xmm3, %xmm3
	mulsd	%xmm13, %xmm12
	divsd	%xmm3, %xmm12
	subsd	%xmm12, %xmm1
.L6354:
	mulsd	%xmm10, %xmm1
	movq	72(%rsp), %rbx
	movsd	%xmm1, (%r8,%rbx)
	movsd	L0(%rip), %xmm3
	mulsd	%xmm9, %xmm3
.L6350:
	andl	$2, %edi
	je	.L6360
	movq	24(%r9), %rdi
	leaq	0(,%rsi,8), %r11
	movq	56(%rsp), %rbx
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r8
	movq	(%r8,%rsi,8), %rdi
	leaq	0(,%rdx,8), %rsi
	movq	(%rdi,%rdx,8), %rdx
	movsd	(%rdx,%r14), %xmm1
	movsd	(%rdx,%rbx), %xmm9
	mulsd	%xmm3, %xmm1
	movapd	%xmm9, %xmm12
	mulsd	%xmm0, %xmm12
	addsd	%xmm4, %xmm1
	divsd	%xmm1, %xmm12
	comisd	%xmm4, %xmm12
	jbe	.L6508
	movq	-8(%rdi,%rsi), %rcx
	leaq	-8(%rsi), %rbx
	movapd	%xmm2, %xmm13
.L6363:
	movq	-8(%rdi,%rsi), %rsi
	movapd	%xmm2, %xmm1
	movq	24(%rsp), %r15
	subsd	%xmm12, %xmm1
	movsd	(%rsi,%r10), %xmm11
	addsd	(%rdx,%r10), %xmm11
	movq	80(%rsp), %rsi
	movsd	(%rcx,%r15), %xmm10
	mulsd	%xmm13, %xmm1
	mulsd	%xmm0, %xmm11
	mulsd	(%rcx,%rsi), %xmm1
	movq	8(%rsp), %rsi
	movsd	(%rcx,%rsi), %xmm12
	mulsd	%xmm5, %xmm11
	ucomisd	%xmm4, %xmm12
	mulsd	%xmm3, %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm10, %xmm11
	addsd	%xmm11, %xmm1
	jp	.L6440
	je	.L6364
.L6440:
	movq	8(%r8,%r11), %rsi
	movq	8(%rsp), %rdi
	movq	(%rsi,%rbx), %rsi
	movsd	(%rsi,%rdi), %xmm13
	ucomisd	%xmm4, %xmm13
	jp	.L6441
	je	.L6364
.L6441:
	movq	48(%rsp), %rdi
	addsd	%xmm13, %xmm12
	movsd	(%rcx,%rdi), %xmm11
	addsd	(%rsi,%rdi), %xmm11
	divsd	%xmm12, %xmm11
	comisd	%xmm11, %xmm4
	ja	.L6538
	movq	-8(%r8,%r11), %rcx
	movapd	%xmm10, %xmm12
	movq	(%rcx,%rbx), %rcx
	movq	24(%rsp), %rbx
	subsd	(%rcx,%rbx), %xmm12
.L6369:
	mulsd	%xmm0, %xmm11
	addsd	%xmm3, %xmm3
	mulsd	%xmm12, %xmm11
	divsd	%xmm3, %xmm11
	subsd	%xmm11, %xmm1
.L6364:
	mulsd	%xmm9, %xmm1
	movq	88(%rsp), %rbx
	movsd	%xmm1, (%rdx,%rbx)
.L6360:
	movq	%rax, %rdi
	cmpq	32(%rsp), %rax
	je	.L6371
	addq	$16, %rax
	jmp	.L6370
	.p2align 4,,10
	.p2align 3
.L6508:
	movsd	.LC23(%rip), %xmm13
	xorpd	%xmm8, %xmm12
	movq	%rdx, %rcx
	movq	%rsi, %rbx
	jmp	.L6363
	.p2align 4,,10
	.p2align 3
.L6506:
	movq	.LC23(%rip), %r15
	xorpd	%xmm7, %xmm13
	movq	%r8, %rbx
	movq	%r15, %xmm14
	jmp	.L6353
	.p2align 4,,10
	.p2align 3
.L6538:
	movq	24(%rsp), %rbx
	movsd	(%rsi,%rbx), %xmm12
	subsd	%xmm10, %xmm12
	jmp	.L6369
	.p2align 4,,10
	.p2align 3
.L6537:
	movq	24(%rsp), %rbx
	movsd	(%r11,%rbx), %xmm13
	subsd	%xmm11, %xmm13
	jmp	.L6359
	.p2align 4,,10
	.p2align 3
.L6536:
	movsd	%xmm0, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	8(%rsp), %xmm0
	jmp	.L6348
	.p2align 4,,10
	.p2align 3
.L6512:
	xorpd	.LC1(%rip), %xmm10
	movq	%rdx, %rdi
	movq	%rsi, %rbx
	movsd	.LC23(%rip), %xmm12
	jmp	.L6386
	.p2align 4,,10
	.p2align 3
.L6516:
	movsd	.LC23(%rip), %xmm13
	xorpd	%xmm10, %xmm12
	movq	%rdx, %rcx
	jmp	.L6407
	.p2align 4,,10
	.p2align 3
.L6524:
	movsd	(%r10,%r13), %xmm6
	subsd	%xmm10, %xmm6
	jmp	.L6382
	.p2align 4,,10
	.p2align 3
.L6525:
	movsd	(%rcx,%r13), %xmm10
	subsd	%xmm6, %xmm10
	jmp	.L6391
	.p2align 4,,10
	.p2align 3
.L6527:
	movsd	%xmm0, 56(%rsp)
	movsd	%xmm8, 48(%rsp)
	movsd	%xmm7, 24(%rsp)
	movsd	%xmm9, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	56(%rsp), %xmm0
	movsd	48(%rsp), %xmm8
	movsd	24(%rsp), %xmm7
	movsd	8(%rsp), %xmm9
	jmp	.L6415
.L6523:
	movsd	%xmm0, 48(%rsp)
	movsd	%xmm8, 24(%rsp)
	movsd	%xmm7, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	48(%rsp), %xmm0
	movsd	24(%rsp), %xmm8
	movsd	8(%rsp), %xmm7
	jmp	.L6373
.L6533:
	movsd	0(%rbp,%r15), %xmm13
	subsd	%xmm12, %xmm13
	jmp	.L6403
.L6534:
	movsd	(%r11,%r15), %xmm13
	subsd	%xmm11, %xmm13
	jmp	.L6413
.L6532:
	movsd	%xmm0, 24(%rsp)
	movsd	%xmm6, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	24(%rsp), %xmm0
	movsd	8(%rsp), %xmm6
	jmp	.L6393
	.cfi_endproc
.LFE278:
	.size	tracer_fluxes, .-tracer_fluxes
	.section	.rodata.str1.8
	.align 8
.LC281:
	.string	"list_len(p.tracers) == list_len(lsrc)"
	.section	.rodata.str1.1
.LC282:
	.string	"flux"
	.text
	.p2align 4
	.globl	advection
	.type	advection, @function
advection:
.LFB279:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movq	144(%rsp), %rax
	movsd	160(%rsp), %xmm2
	movq	%rax, 8(%rsp)
	movq	168(%rsp), %rax
	movq	%rax, 56(%rsp)
	testq	%rax, %rax
	je	.L6601
	movq	56(%rsp), %rax
	cmpq	$0, 8(%rsp)
	movq	%rax, 48(%rsp)
	je	.L6602
	movq	8(%rsp), %rax
	movl	(%rax), %ecx
	testl	%ecx, %ecx
	js	.L6603
.L6568:
	movq	8(%rsp), %rax
	xorl	%edx, %edx
	.p2align 4,,10
	.p2align 3
.L6548:
	movl	4(%rax), %r10d
	addq	$4, %rax
	addl	$1, %edx
	testl	%r10d, %r10d
	jns	.L6548
	movq	48(%rsp), %rax
	testq	%rax, %rax
	je	.L6551
	movl	(%rax), %r9d
	testl	%r9d, %r9d
	js	.L6551
.L6545:
	movq	48(%rsp), %rax
	xorl	%ecx, %ecx
	.p2align 4,,10
	.p2align 3
.L6552:
	movl	4(%rax), %r8d
	addq	$4, %rax
	addl	$1, %ecx
	testl	%r8d, %r8d
	jns	.L6552
	cmpl	%ecx, %edx
	jne	.L6551
	movq	48(%rsp), %rax
	movq	8(%rsp), %rbx
	movsd	%xmm2, 32(%rsp)
	movl	(%rax), %r12d
	movslq	(%rbx), %rbp
	movq	%rax, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L6561:
	movl	$.LC282, %edi
	call	new_face_vector
	movsd	32(%rsp), %xmm0
	movl	%r12d, %ecx
	movl	%ebp, %edi
	movq	%rax, %rbx
	movq	152(%rsp), %rsi
	sarq	$32, %rax
	movq	%rbx, %rdx
	movq	%rax, 24(%rsp)
	call	tracer_fluxes
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	jne	.L6554
.L6557:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%esi, %esi
	movl	%ebp, %edx
	pushq	$93
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	pushq	$.LC280
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$93
	.cfi_def_cfa_offset 168
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %ecx
	movl	%ebx, %edx
	pushq	$93
	.cfi_def_cfa_offset 168
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$93
	.cfi_def_cfa_offset 168
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$93
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$.LC280
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$93
	.cfi_def_cfa_offset 168
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	$1, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r9d, %r9d
	movl	%r12d, %edx
	pushq	$93
	.cfi_def_cfa_offset 168
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$93
	.cfi_def_cfa_offset 168
	pushq	$.LC280
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.59, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.59+12(%rip)
	cmpl	$65535, %eax
	jg	.L6604
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L6605
.L6559:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6564
	movq	24(%rax), %r14
	movq	32(%rax), %rax
	movslq	%ebx, %rcx
	subl	$1, %edx
	movq	24(%rsp), %rdi
	salq	$4, %rdx
	leaq	8(,%rcx,8), %r11
	movslq	cm(%rip), %rcx
	leaq	16(%rax), %rsi
	movq	%rbx, 40(%rsp)
	leaq	8(,%rbp,8), %r13
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rdi,8), %r10
	leaq	(%rdx,%rsi), %rdi
	movsd	32(%rsp), %xmm2
	movl	$1, %ebp
	leaq	8(,%rcx,8), %r12
	movq	%rdi, %rbx
	jmp	.L6563
	.p2align 4,,10
	.p2align 3
.L6606:
	addq	$16, %rsi
.L6563:
	movslq	8(%rax), %rcx
	movl	%ebp, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm3
	movslq	(%rax), %r15
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	(%r14,%rcx,8), %rdx
	movslq	4(%rax), %rcx
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm3
	movq	16(%rdx), %r9
	movq	(%r9,%r15,8), %r8
	movq	8(%r9,%r15,8), %r9
	movq	(%r8,%rcx,8), %rax
	movq	(%r9,%rcx,8), %r9
	movq	8(%r8,%rcx,8), %rcx
	movsd	(%rax,%r11), %xmm0
	leaq	(%rax,%r12), %rdi
	subsd	(%r9,%r11), %xmm0
	movsd	(%rdi), %xmm1
	leaq	(%rax,%r13), %rdx
	mulsd	%xmm2, %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm0
	addsd	(%rdx), %xmm0
	movsd	%xmm0, (%rdx)
	movsd	(%rax,%r10), %xmm1
	subsd	(%rcx,%r10), %xmm1
	movq	%rsi, %rax
	mulsd	(%rdi), %xmm3
	mulsd	%xmm2, %xmm1
	divsd	%xmm3, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%rdx)
	cmpq	%rsi, %rbx
	jne	.L6606
.L6598:
	movq	40(%rsp), %rbx
.L6564:
	movl	24(%rsp), %eax
	leaq	64(%rsp), %rdi
	movl	%ebx, 64(%rsp)
	movq	$-1, 72(%rsp)
	movl	%eax, 68(%rsp)
	call	delete
	addq	$4, 16(%rsp)
	movq	16(%rsp), %rax
	addq	$4, 8(%rsp)
	movq	8(%rsp), %rbx
	movl	(%rax), %r12d
	movslq	(%rbx), %rbp
	testl	%r12d, %r12d
	jns	.L6561
	cmpq	$0, 56(%rsp)
	je	.L6607
.L6539:
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6604:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm4
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L6608
.L6565:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6564
	movq	24(%rsp), %rdi
	movq	24(%rax), %r15
	leal	-1(%rdx), %r12d
	movslq	%ebx, %rcx
	movq	32(%rax), %rax
	salq	$4, %r12
	movq	%rbx, 40(%rsp)
	leaq	8(,%rbp,8), %r14
	leaq	8(,%rdi,8), %r11
	movsd	32(%rsp), %xmm2
	leaq	8(,%rcx,8), %rbp
	movl	$1, %r13d
	leaq	16(%rax), %rdi
	addq	%rdi, %r12
	jmp	.L6566
	.p2align 4,,10
	.p2align 3
.L6609:
	addq	$16, %rdi
.L6566:
	movslq	8(%rax), %rdx
	movl	%r13d, %ebx
	pxor	%xmm0, %xmm0
	movslq	(%rax), %r10
	movsd	.LC10(%rip), %xmm3
	movslq	4(%rax), %rsi
	movq	%rdx, %rcx
	movq	(%r15,%rdx,8), %rdx
	sall	%cl, %ebx
	cvtsi2sdl	%ebx, %xmm0
	movq	(%rdx), %rdx
	movq	16(%rdx), %r9
	divsd	%xmm0, %xmm3
	movq	(%r9,%r10,8), %r8
	movq	8(%r9,%r10,8), %rcx
	movq	(%r8,%rsi,8), %rdx
	movq	(%rcx,%rsi,8), %rcx
	movsd	(%rdx,%rbp), %xmm0
	subsd	(%rcx,%rbp), %xmm0
	leaq	(%rdx,%r14), %rax
	movq	8(%r8,%rsi,8), %rcx
	mulsd	%xmm2, %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm4, %xmm3
	divsd	%xmm3, %xmm0
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
	movsd	(%rdx,%r11), %xmm1
	subsd	(%rcx,%r11), %xmm1
	mulsd	%xmm2, %xmm1
	divsd	%xmm3, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax)
	movq	%rdi, %rax
	cmpq	%rdi, %r12
	jne	.L6609
	jmp	.L6598
	.p2align 4,,10
	.p2align 3
.L6554:
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6557
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6558:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6558
	jmp	.L6557
	.p2align 4,,10
	.p2align 3
.L6605:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L6559
	.p2align 4,,10
	.p2align 3
.L6608:
	movsd	%xmm4, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	40(%rsp), %xmm4
	jmp	.L6565
	.p2align 4,,10
	.p2align 3
.L6601:
	movq	8(%rsp), %rbx
	testq	%rbx, %rbx
	je	.L6541
	movl	(%rbx), %r13d
	testl	%r13d, %r13d
	js	.L6572
	movl	zeroc(%rip), %ebp
	xorl	%edi, %edi
	movsd	%xmm2, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L6542:
	movl	%ebp, %esi
	addq	$4, %rbx
	call	list_append
	movl	(%rbx), %r12d
	movq	%rax, %rdi
	testl	%r12d, %r12d
	jns	.L6542
	movq	%rax, 48(%rsp)
	movq	8(%rsp), %rax
	movsd	16(%rsp), %xmm2
	movl	(%rax), %r11d
	testl	%r11d, %r11d
	jns	.L6568
	cmpq	$0, 48(%rsp)
	je	.L6572
	movq	48(%rsp), %rax
	movl	(%rax), %edx
	testl	%edx, %edx
	js	.L6610
	xorl	%edx, %edx
	jmp	.L6545
	.p2align 4,,10
	.p2align 3
.L6551:
	movl	$.LC281, %edx
	movl	$84, %esi
	movl	$.LC280, %edi
	call	qassert
.L6603:
	movq	56(%rsp), %rax
	xorl	%edx, %edx
	movl	(%rax), %eax
	testl	%eax, %eax
	jns	.L6545
	jmp	.L6539
.L6607:
	movq	48(%rsp), %rax
	movq	%rax, 8(%rsp)
.L6541:
	movq	8(%rsp), %rdi
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	free
.L6602:
	.cfi_restore_state
	movl	(%rax), %ebx
	xorl	%edx, %edx
	testl	%ebx, %ebx
	jns	.L6545
	jmp	.L6539
.L6572:
	movq	$0, 8(%rsp)
	jmp	.L6541
.L6610:
	movq	%rax, 8(%rsp)
	jmp	.L6541
	.cfi_endproc
.LFE279:
	.size	advection, .-advection
	.p2align 4
	.globl	mg_cycle
	.type	mg_cycle, @function
mg_cycle:
.LFB280:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%r8, %r15
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	movq	%rsi, %r13
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rcx, %r12
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rdx, %rbx
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	144(%rsp), %ebp
	movq	%rdi, 56(%rsp)
	movq	%rsi, %rdi
	movl	%r9d, 4(%rsp)
	call	*restriction(%rip)
	cmpl	%ebp, 152(%rsp)
	cmovle	152(%rsp), %ebp
	movslq	%ebp, %rax
	movl	%eax, 24(%rsp)
	movq	%rax, %r14
	salq	$3, %rax
	movq	%rax, 8(%rsp)
	.p2align 4,,10
	.p2align 3
.L6629:
	cmpl	%r14d, 24(%rsp)
	je	.L6667
	movq	grid(%rip), %r11
	cmpl	%r14d, 16(%r11)
	jge	.L6668
.L6617:
	movl	%r14d, %esi
	movq	%rbx, %rdi
	xorl	%ebp, %ebp
	call	*boundary_level(%rip)
	movl	4(%rsp), %esi
	testl	%esi, %esi
	jle	.L6615
	.p2align 4,,10
	.p2align 3
.L6614:
	movq	%r15, %rcx
	movl	%r14d, %edx
	movq	%r13, %rsi
	movq	%rbx, %rdi
	call	*%r12
	addl	$1, %ebp
	movl	%r14d, %esi
	movq	%rbx, %rdi
	call	*boundary_level(%rip)
	cmpl	%ebp, 4(%rsp)
	jne	.L6614
.L6615:
	addq	$8, 8(%rsp)
	addl	$1, %r14d
	cmpl	%r14d, 152(%rsp)
	jge	.L6629
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L6634
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6634
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6635:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6635
.L6634:
	movq	$0, 68(%rsp)
	movl	$0, 76(%rsp)
	testq	%rbx, %rbx
	je	.L6633
	movq	56(%rsp), %r12
	movl	(%rbx), %r13d
	movl	(%r12), %edx
	testl	%r13d, %r13d
	js	.L6633
	movq	%rbx, %rbp
	.p2align 4,,10
	.p2align 3
.L6638:
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$88
	.cfi_def_cfa_offset 160
	addq	$4, %rbp
	addq	$4, %r12
	pushq	$.LC141
	.cfi_def_cfa_offset 168
	pushq	$1
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%r13d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$88
	.cfi_def_cfa_offset 168
	pushq	$.LC141
	.cfi_def_cfa_offset 176
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	movl	0(%rbp), %r13d
	movl	(%r12), %edx
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	testl	%r13d, %r13d
	jns	.L6638
.L6633:
	movl	$_loop.58, %edi
	call	end_stencil
	movq	grid(%rip), %r9
	movl	$0, _loop.58+12(%rip)
	cmpb	$0, 128(%r9)
	jne	.L6669
.L6637:
	movl	40(%r9), %eax
	testl	%eax, %eax
	jle	.L6611
	movq	32(%r9), %rcx
	leal	-1(%rax), %r8d
	movq	56(%rsp), %r10
	salq	$4, %r8
	leaq	16(%rcx), %rdi
	addq	%rdi, %r8
	jmp	.L6641
	.p2align 4,,10
	.p2align 3
.L6643:
	movq	%rdi, %rcx
	cmpq	%r8, %rdi
	je	.L6611
.L6670:
	addq	$16, %rdi
.L6641:
	testq	%rbx, %rbx
	je	.L6643
	movslq	(%rbx), %rax
	movslq	(%r10), %rdx
	testl	%eax, %eax
	js	.L6643
	movslq	8(%rcx), %r11
	movq	24(%r9), %rsi
	movslq	(%rcx), %rbp
	movq	(%rsi,%r11,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %r11
	movslq	4(%rcx), %rsi
	movq	(%r11,%rbp,8), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movl	$4, %ecx
	.p2align 4,,10
	.p2align 3
.L6644:
	leaq	8(%rsi,%rdx,8), %rdx
	movsd	(%rdx), %xmm0
	addsd	8(%rsi,%rax,8), %xmm0
	movslq	(%rbx,%rcx), %rax
	addq	$4, %rcx
	movsd	%xmm0, (%rdx)
	movslq	-4(%r10,%rcx), %rdx
	testl	%eax, %eax
	jns	.L6644
	movq	%rdi, %rcx
	cmpq	%r8, %rdi
	jne	.L6670
.L6611:
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6668:
	.cfi_restore_state
	cmpb	$0, 128(%r11)
	jne	.L6671
.L6624:
	movq	96(%r11), %rax
	movq	8(%rsp), %rdi
	leaq	(%rax,%rdi,2), %rax
	movq	(%rax), %rcx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L6617
	subl	$1, %eax
	leaq	-8(%rdi), %rsi
	movl	%r14d, 28(%rsp)
	leaq	8(%rcx,%rax,8), %rax
	movq	%r15, 48(%rsp)
	movq	%rdi, %r15
	movq	%rsi, 16(%rsp)
	movq	%rax, %r14
	movq	%r13, 32(%rsp)
	movq	%r12, 40(%rsp)
	jmp	.L6626
	.p2align 4,,10
	.p2align 3
.L6627:
	addq	$8, %rcx
	cmpq	%rcx, %r14
	je	.L6672
.L6626:
	testq	%rbx, %rbx
	je	.L6627
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L6627
	movslq	4(%rcx), %r10
	movslq	(%rcx), %r12
	leal	2(%r10), %esi
	leal	2(%r12), %edx
	movl	%esi, %edi
	movl	%esi, %r9d
	movl	%edx, %r8d
	movl	%edx, %r13d
	shrl	$31, %r9d
	shrl	$31, %edi
	shrl	$31, %r13d
	addl	%esi, %edi
	addl	%r9d, %esi
	shrl	$31, %r8d
	andl	$1, %esi
	sarl	%edi
	addl	%edx, %r8d
	addl	%r13d, %edx
	subl	%r9d, %esi
	movslq	%edi, %rbp
	andl	$1, %edx
	sarl	%r8d
	leal	-1(%rdi,%rsi,2), %r9d
	movq	24(%r11), %rsi
	subl	%r13d, %edx
	leal	-1(%r8,%rdx,2), %edx
	movslq	%r9d, %r9
	movq	(%rsi,%r15), %rdi
	movslq	%edx, %rdx
	movq	(%rdi), %rdi
	movq	16(%rdi), %rdi
	movq	(%rdi,%r12,8), %rdi
	movq	(%rdi,%r10,8), %rdi
	movq	16(%rsp), %r10
	movq	(%rsi,%r10), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %r12
	movslq	%r8d, %rsi
	movq	(%r12,%rdx,8), %rdx
	movq	(%r12,%rsi,8), %r10
	movq	(%rdx,%rbp,8), %r8
	movq	(%r10,%rbp,8), %rsi
	movq	(%r10,%r9,8), %r10
	movq	(%rdx,%r9,8), %r9
	movq	%rbx, %rdx
	.p2align 4,,10
	.p2align 3
.L6628:
	addq	$1, %rax
	movsd	.LC7(%rip), %xmm1
	addq	$4, %rdx
	mulsd	(%rsi,%rax,8), %xmm1
	movsd	(%r8,%rax,8), %xmm0
	addsd	(%r10,%rax,8), %xmm0
	mulsd	.LC6(%rip), %xmm0
	addsd	%xmm1, %xmm0
	addsd	(%r9,%rax,8), %xmm0
	mulsd	.LC8(%rip), %xmm0
	movsd	%xmm0, (%rdi,%rax,8)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6628
	addq	$8, %rcx
	cmpq	%rcx, %r14
	jne	.L6626
.L6672:
	movl	28(%rsp), %r14d
	movq	32(%rsp), %r13
	movq	40(%rsp), %r12
	movq	48(%rsp), %r15
	jmp	.L6617
	.p2align 4,,10
	.p2align 3
.L6667:
	movl	24(%rsp), %eax
	movq	8(%rsp), %r11
	movq	grid(%rip), %r8
	movl	%eax, %ebp
	testl	%eax, %eax
	js	.L6617
	movq	%r15, %rdi
	movq	%r12, %r15
	movq	%rbx, %r12
	movq	%r11, %rbx
	jmp	.L6613
	.p2align 4,,10
	.p2align 3
.L6619:
	subl	$1, %ebp
	subq	$8, %rbx
	cmpl	$-1, %ebp
	je	.L6673
.L6613:
	cmpl	%ebp, 16(%r8)
	jl	.L6619
	cmpb	$0, 128(%r8)
	jne	.L6674
.L6618:
	movq	96(%r8), %rax
	leaq	(%rax,%rbx,2), %rax
	movq	(%rax), %rcx
	movl	8(%rax), %eax
	testl	%eax, %eax
	jle	.L6619
	subl	$1, %eax
	leaq	8(%rcx,%rax,8), %rsi
	jmp	.L6621
	.p2align 4,,10
	.p2align 3
.L6622:
	addq	$8, %rcx
	cmpq	%rcx, %rsi
	je	.L6619
.L6621:
	movslq	(%rcx), %r9
	movslq	4(%rcx), %rdx
	cmpl	%r14d, %ebp
	je	.L6620
	movq	24(%r8), %rax
	movslq	%r9d, %r10
	movq	(%rax,%rbx), %rax
	movq	(%rax), %rax
	movq	16(%rax), %r11
	movslq	%edx, %rax
	movq	(%r11,%r10,8), %r10
	movq	(%r10,%rax,8), %rax
	testb	$2, (%rax)
	je	.L6622
.L6620:
	testq	%r12, %r12
	je	.L6622
	movslq	(%r12), %rax
	testl	%eax, %eax
	js	.L6622
	movq	24(%r8), %r10
	movq	(%r10,%rbx), %r10
	movq	(%r10), %r10
	movq	16(%r10), %r10
	movq	(%r10,%r9,8), %r9
	movq	(%r9,%rdx,8), %r9
	movq	%r12, %rdx
	.p2align 4,,10
	.p2align 3
.L6623:
	movq	$0x000000000, 8(%r9,%rax,8)
	movslq	4(%rdx), %rax
	addq	$4, %rdx
	testl	%eax, %eax
	jns	.L6623
	jmp	.L6622
.L6673:
	movq	%r12, %rbx
	movq	%r15, %r12
	movq	%rdi, %r15
	jmp	.L6617
.L6671:
	call	update_cache_f
	movq	grid(%rip), %r11
	jmp	.L6624
.L6674:
	movq	%rdi, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r8
	movq	16(%rsp), %rdi
	jmp	.L6618
.L6669:
	call	update_cache_f
	movq	grid(%rip), %r9
	jmp	.L6637
	.cfi_endproc
.LFE280:
	.size	mg_cycle, .-mg_cycle
	.section	.rodata.str1.8
	.align 8
.LC284:
	.string	"WARNING: convergence for %s not reached after %d iterations\n  res: %g sum: %g nrelax: %d\n"
	.text
	.p2align 4
	.globl	mg_solve
	.type	mg_solve, @function
mg_solve:
.LFB281:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movq	176(%rsp), %rax
	movq	%rdi, 64(%rsp)
	movq	160(%rsp), %r13
	movq	208(%rsp), %r14
	movq	%rax, 32(%rsp)
	movl	216(%rsp), %eax
	movq	%r13, %rdi
	movq	%r14, 56(%rsp)
	movsd	224(%rsp), %xmm7
	movl	%eax, 44(%rsp)
	movq	168(%rsp), %rbx
	movq	192(%rsp), %r15
	movl	200(%rsp), %r12d
	movsd	%xmm7, 8(%rsp)
	call	list_clone
	movq	%rax, %rbp
	testq	%r14, %r14
	je	.L6740
.L6676:
	movslq	nboundary(%rip), %rdi
	testl	%edi, %edi
	jle	.L6682
	movq	_attribute(%rip), %rsi
	salq	$3, %rdi
	xorl	%ecx, %ecx
	jmp	.L6681
	.p2align 4,,10
	.p2align 3
.L6683:
	addq	$8, %rcx
	cmpq	%rcx, %rdi
	je	.L6682
.L6681:
	testq	%rbp, %rbp
	je	.L6683
	movslq	0(%rbp), %rax
	testl	%eax, %eax
	js	.L6683
	movq	%rbp, %rdx
	.p2align 4,,10
	.p2align 3
.L6684:
	leaq	(%rax,%rax,4), %r8
	addq	$4, %rdx
	leaq	(%rax,%r8,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movq	8(%rax), %r8
	movq	(%rax), %rax
	movq	(%r8,%rcx), %r8
	movq	%r8, (%rax,%rcx)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6684
	addq	$8, %rcx
	cmpq	%rcx, %rdi
	jne	.L6681
.L6682:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L6679
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6679
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6687:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6687
.L6679:
	movq	$0, 84(%rsp)
	movl	$0, 92(%rsp)
	testq	%rbx, %rbx
	je	.L6686
	movl	(%rbx), %edx
	testl	%edx, %edx
	js	.L6686
	movq	%rbx, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L6690:
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 176
	addq	$4, %rbx
	pushq	$166
	.cfi_def_cfa_offset 184
	pushq	$.LC141
	.cfi_def_cfa_offset 192
	movq	116(%rsp), %rdi
	movl	124(%rsp), %esi
	call	stencil_val
	movl	(%rbx), %edx
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	testl	%edx, %edx
	jns	.L6690
	movq	16(%rsp), %rbx
.L6686:
	movl	$_loop.57, %edi
	call	end_stencil
	movq	grid(%rip), %r8
	movl	$0, _loop.57+12(%rip)
	cmpb	$0, 128(%r8)
	jne	.L6741
	movl	40(%r8), %edx
	testl	%edx, %edx
	jle	.L6708
.L6747:
	movq	32(%r8), %rax
	leal	-1(%rdx), %edi
	pxor	%xmm2, %xmm2
	salq	$4, %rdi
	movapd	%xmm2, %xmm1
	leaq	16(%rax), %rsi
	addq	%rsi, %rdi
	jmp	.L6694
	.p2align 4,,10
	.p2align 3
.L6692:
	movq	%rsi, %rax
	cmpq	%rsi, %rdi
	je	.L6691
.L6742:
	addq	$16, %rsi
.L6694:
	movslq	(%rax), %rcx
	movslq	4(%rax), %rdx
	movslq	8(%rax), %r9
	testq	%rbx, %rbx
	je	.L6692
	movslq	(%rbx), %rax
	testl	%eax, %eax
	js	.L6692
	movq	24(%r8), %r10
	movq	(%r10,%r9,8), %r9
	movq	(%r9), %r9
	movq	16(%r9), %r9
	movq	(%r9,%rcx,8), %rcx
	movq	(%rcx,%rdx,8), %rcx
	movq	%rbx, %rdx
	.p2align 4,,10
	.p2align 3
.L6693:
	addq	$4, %rdx
	addsd	8(%rcx,%rax,8), %xmm1
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6693
	movq	%rsi, %rax
	cmpq	%rsi, %rdi
	jne	.L6742
.L6691:
	testl	%r12d, %r12d
	movl	$4, %eax
	movq	%r15, %rcx
	movq	%r14, %rdx
	cmovle	%eax, %r12d
	movsd	%xmm2, 24(%rsp)
	movq	%rbx, %rsi
	movq	%r13, %rdi
	movsd	%xmm1, 16(%rsp)
	movq	32(%rsp), %rax
	call	*%rax
	movsd	8(%rsp), %xmm6
	movsd	24(%rsp), %xmm2
	movsd	16(%rsp), %xmm1
	movsd	%xmm0, 48(%rsp)
	ucomisd	%xmm2, %xmm6
	jp	.L6696
	movq	%xmm6, %rax
	cmove	TOLERANCE(%rip), %rax
	movq	%rax, 8(%rsp)
.L6696:
	movl	NITERMAX(%rip), %ecx
	movsd	48(%rsp), %xmm2
	xorl	%r10d, %r10d
	testl	%ecx, %ecx
	jle	.L6739
	movl	%r12d, %r9d
	movsd	%xmm1, 72(%rsp)
	movq	%rbp, %r12
	movl	%r10d, %ebp
	jmp	.L6698
	.p2align 4,,10
	.p2align 3
.L6702:
	cmpl	$2, %r9d
	jle	.L6700
	comisd	.LC15(%rip), %xmm2
	seta	%al
	cmpb	$1, %al
	adcl	$-1, %r9d
.L6700:
	addl	$1, %ebp
	cmpl	NITERMAX(%rip), %ebp
	jge	.L6737
.L6744:
	movapd	%xmm0, %xmm2
.L6698:
	cmpl	%ebp, NITERMIN(%rip)
	jg	.L6703
	comisd	8(%rsp), %xmm2
	jbe	.L6743
.L6703:
	movq	grid(%rip), %rax
	movq	%r15, %r8
	movq	%r12, %rdx
	movq	%r14, %rsi
	movsd	%xmm2, 24(%rsp)
	movq	%r13, %rdi
	movl	20(%rax), %eax
	pushq	%rax
	.cfi_def_cfa_offset 168
	movl	52(%rsp), %eax
	pushq	%rax
	.cfi_def_cfa_offset 176
	movq	200(%rsp), %rcx
	movl	%r9d, 32(%rsp)
	call	mg_cycle
	movq	48(%rsp), %rax
	movq	%r14, %rdx
	movq	%r15, %rcx
	movq	%rbx, %rsi
	movq	%r13, %rdi
	call	*%rax
	popq	%rax
	.cfi_def_cfa_offset 168
	popq	%rdx
	.cfi_def_cfa_offset 160
	comisd	8(%rsp), %xmm0
	movl	16(%rsp), %r9d
	jbe	.L6700
	movsd	24(%rsp), %xmm2
	movsd	.LC283(%rip), %xmm5
	divsd	%xmm0, %xmm2
	comisd	%xmm2, %xmm5
	jbe	.L6702
	cmpl	$99, %r9d
	jg	.L6702
	addl	$1, %r9d
	addl	$1, %ebp
	cmpl	NITERMAX(%rip), %ebp
	jl	.L6744
	.p2align 4,,10
	.p2align 3
.L6737:
	comisd	8(%rsp), %xmm0
	movl	%ebp, %r10d
	movsd	72(%rsp), %xmm1
	movq	%r12, %rbp
	movl	%r9d, %r12d
	ja	.L6745
.L6704:
	cmpq	$0, 56(%rsp)
	je	.L6746
.L6706:
	movq	%rbp, %rdi
	movl	%r10d, 16(%rsp)
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm0, 8(%rsp)
	call	delete
	movq	%rbp, %rdi
	call	free
	movq	64(%rsp), %rax
	movl	44(%rsp), %ebx
	movl	16(%rsp), %r10d
	movsd	48(%rsp), %xmm7
	movsd	8(%rsp), %xmm0
	movsd	24(%rsp), %xmm1
	movl	%r12d, 32(%rax)
	movl	%r10d, (%rax)
	movl	%ebx, 36(%rax)
	movsd	%xmm7, 8(%rax)
	movsd	%xmm0, 16(%rax)
	movsd	%xmm1, 24(%rax)
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6743:
	.cfi_restore_state
	movsd	72(%rsp), %xmm1
	movl	%ebp, %r10d
	movq	%r12, %rbp
	movl	%r9d, %r12d
.L6739:
	movapd	%xmm2, %xmm0
	comisd	8(%rsp), %xmm0
	jbe	.L6704
.L6745:
	movslq	0(%r13), %rax
	movl	%r10d, %ecx
	movl	%r12d, %r8d
	movl	$.LC284, %esi
	movq	stderr(%rip), %rdi
	movl	%r10d, 8(%rsp)
	leaq	(%rax,%rax,4), %rdx
	movsd	%xmm1, 24(%rsp)
	leaq	(%rax,%rdx,2), %rax
	movsd	%xmm0, 16(%rsp)
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	32(%rax), %rdx
	movl	$2, %eax
	call	fprintf
	movq	stderr(%rip), %rdi
	call	fflush
	cmpq	$0, 56(%rsp)
	movsd	24(%rsp), %xmm1
	movsd	16(%rsp), %xmm0
	movl	8(%rsp), %r10d
	jne	.L6706
.L6746:
	movq	%r14, %rdi
	movl	%r10d, 16(%rsp)
	movsd	%xmm1, 24(%rsp)
	movsd	%xmm0, 8(%rsp)
	call	delete
	movq	%r14, %rdi
	call	free
	movsd	24(%rsp), %xmm1
	movl	16(%rsp), %r10d
	movsd	8(%rsp), %xmm0
	jmp	.L6706
.L6741:
	call	update_cache_f
	movq	grid(%rip), %r8
	movl	40(%r8), %edx
	testl	%edx, %edx
	jg	.L6747
.L6708:
	pxor	%xmm2, %xmm2
	movapd	%xmm2, %xmm1
	jmp	.L6691
.L6740:
	movq	%rbx, %rdi
	call	list_clone
	movq	%rax, %r14
	jmp	.L6676
	.cfi_endproc
.LFE281:
	.size	mg_solve, .-mg_solve
	.p2align 4
	.globl	poisson
	.type	poisson, @function
poisson:
.LFB284:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rdi, %r12
	pushq	%rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	subq	$168, %rsp
	.cfi_def_cfa_offset 192
	movl	200(%rsp), %edx
	testl	%edx, %edx
	je	.L6749
	movl	204(%rsp), %ecx
.L6750:
	movl	208(%rsp), %eax
	testl	%eax, %eax
	jne	.L6751
	movl	$65541, 208(%rsp)
	movl	$65541, %eax
.L6751:
	movl	%edx, 16(%rsp)
	leaq	16(%rsp), %rdi
	movl	%ecx, 20(%rsp)
	movl	%eax, 24(%rsp)
	movl	$-1, 28(%rsp)
	call	*restriction(%rip)
	pxor	%xmm2, %xmm2
	movsd	216(%rsp), %xmm0
	movsd	TOLERANCE(%rip), %xmm1
	ucomisd	%xmm2, %xmm0
	movq	%xmm1, %rbx
	jp	.L6756
	jne	.L6756
.L6752:
	movl	192(%rsp), %eax
	pxor	%xmm0, %xmm0
	movl	$1, %ecx
	movl	$-1, 4(%rsp)
	movups	%xmm0, 120(%rsp)
	movq	%rsp, %rdx
	movl	%eax, (%rsp)
	movl	196(%rsp), %eax
	movups	%xmm0, 136(%rsp)
	movl	%eax, 8(%rsp)
	leaq	8(%rsp), %rax
	movq	%rax, 88(%rsp)
	leaq	192(%rsp), %rax
	movq	%rax, 112(%rsp)
	movl	224(%rsp), %eax
	movl	$-1, 12(%rsp)
	movl	%eax, 120(%rsp)
	movq	232(%rsp), %rax
	movq	$residual, 96(%rsp)
	movq	%rax, 128(%rsp)
	movl	228(%rsp), %eax
	movq	$relax, 104(%rsp)
	testl	%eax, %eax
	cmovle	%ecx, %eax
	subq	$8, %rsp
	.cfi_def_cfa_offset 200
	movl	%eax, 144(%rsp)
	pushq	152(%rsp)
	.cfi_def_cfa_offset 208
	pushq	152(%rsp)
	.cfi_def_cfa_offset 216
	pushq	152(%rsp)
	.cfi_def_cfa_offset 224
	pushq	152(%rsp)
	.cfi_def_cfa_offset 232
	pushq	152(%rsp)
	.cfi_def_cfa_offset 240
	pushq	152(%rsp)
	.cfi_def_cfa_offset 248
	pushq	152(%rsp)
	.cfi_def_cfa_offset 256
	pushq	152(%rsp)
	.cfi_def_cfa_offset 264
	pushq	%rdx
	.cfi_def_cfa_offset 272
	leaq	112(%rsp), %rdi
	call	mg_solve
	addq	$80, %rsp
	.cfi_def_cfa_offset 192
	pxor	%xmm3, %xmm3
	ucomisd	216(%rsp), %xmm3
	jp	.L6757
	jne	.L6757
.L6754:
	movq	64(%rsp), %rax
	movdqa	32(%rsp), %xmm4
	movdqa	48(%rsp), %xmm5
	movq	%rax, 32(%r12)
	movq	%r12, %rax
	movups	%xmm4, (%r12)
	movups	%xmm5, 16(%r12)
	addq	$168, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6749:
	.cfi_restore_state
	movabsq	$281487861678082, %rax
	movl	$65539, %ecx
	movl	$65538, %edx
	movq	%rax, 200(%rsp)
	jmp	.L6750
	.p2align 4,,10
	.p2align 3
.L6757:
	movq	%rbx, TOLERANCE(%rip)
	jmp	.L6754
	.p2align 4,,10
	.p2align 3
.L6756:
	movsd	%xmm0, TOLERANCE(%rip)
	jmp	.L6752
	.cfi_endproc
.LFE284:
	.size	poisson, .-poisson
	.section	.rodata.str1.1
.LC285:
	.string	"div"
	.text
	.p2align 4
	.globl	project
	.type	project, @function
project:
.LFB285:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	movl	244(%rsp), %eax
	movl	240(%rsp), %edx
	movq	%rdi, 32(%rsp)
	movl	272(%rsp), %esi
	movl	252(%rsp), %ebx
	movl	%eax, 48(%rsp)
	salq	$32, %rax
	movsd	264(%rsp), %xmm3
	movl	%edx, 52(%rsp)
	orq	%rax, %rdx
	movslq	248(%rsp), %rbp
	movl	%esi, 16(%rsp)
	movq	%rdx, 40(%rsp)
	testl	%ebx, %ebx
	je	.L6787
	movl	256(%rsp), %eax
	movl	%eax, 24(%rsp)
.L6760:
	pxor	%xmm5, %xmm5
	ucomisd	%xmm5, %xmm3
	jp	.L6761
	movq	%xmm3, %rax
	cmove	.LC10(%rip), %rax
	movq	%rax, %xmm3
.L6761:
	movl	16(%rsp), %edi
	movl	$4, %eax
	movl	$1, %edx
	movl	$.LC90, %esi
	movsd	%xmm3, 56(%rsp)
	testl	%edi, %edi
	cmovne	%edi, %eax
	movl	$.LC285, %edi
	movl	%eax, 16(%rsp)
	call	new_block_scalar
	movq	baseblock(%rip), %rdx
	movsd	56(%rsp), %xmm3
	movl	%eax, 12(%rsp)
	testq	%rdx, %rdx
	je	.L6767
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6767
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6768:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6768
.L6767:
	movsd	%xmm3, 56(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 136(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 144(%rsp)
	pushq	$485
	.cfi_def_cfa_offset 256
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movl	44(%rsp), %r14d
	movl	%r14d, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$487
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %ecx
	pushq	$487
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	72(%rsp), %r15
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	movl	%r15d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	shrq	$32, %r15
	pushq	$487
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$487
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %r8d
	movl	%r15d, %edx
	pushq	$487
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r15d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$487
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$488
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	160(%rsp), %rdi
	movl	168(%rsp), %esi
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	$_loop.54, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movsd	56(%rsp), %xmm3
	movl	$0, _loop.54+12(%rip)
	pxor	%xmm5, %xmm5
	cmpb	$0, 128(%rax)
	jne	.L6811
.L6766:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6773
	movslq	12(%rsp), %rcx
	movq	24(%rax), %r14
	leal	-1(%rdx), %r11d
	movl	$1, %r12d
	movq	32(%rax), %rax
	salq	$4, %r11
	movsd	.LC10(%rip), %xmm4
	leaq	8(,%rcx,8), %r13
	movslq	52(%rsp), %rcx
	leaq	16(%rax), %rsi
	leaq	8(,%rcx,8), %r10
	movslq	48(%rsp), %rcx
	addq	%rsi, %r11
	leaq	8(,%rcx,8), %r9
	jmp	.L6772
	.p2align 4,,10
	.p2align 3
.L6812:
	addq	$16, %rsi
.L6772:
	movslq	8(%rax), %rcx
	movl	%r12d, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm2
	movslq	(%rax), %r8
	movslq	4(%rax), %r15
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	(%r14,%rcx,8), %rdx
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm2
	movq	16(%rdx), %rdi
	movq	(%rdi,%r8,8), %rcx
	movq	8(%rdi,%r8,8), %rdi
	movq	(%rcx,%r15,8), %rdx
	movq	(%rdi,%r15,8), %rdi
	movq	8(%rcx,%r15,8), %rcx
	leaq	(%rdx,%r13), %rax
	mulsd	L0(%rip), %xmm2
	movq	$0x000000000, (%rax)
	movsd	(%rdi,%r10), %xmm1
	subsd	(%rdx,%r10), %xmm1
	addsd	%xmm5, %xmm1
	mulsd	%xmm3, %xmm2
	movsd	%xmm1, (%rax)
	movsd	(%rcx,%r9), %xmm0
	subsd	(%rdx,%r9), %xmm0
	addsd	%xmm1, %xmm0
	divsd	%xmm2, %xmm0
	movsd	%xmm0, (%rax)
	movq	%rsi, %rax
	cmpq	%rsi, %r11
	jne	.L6812
.L6773:
	movapd	%xmm3, %xmm1
	pxor	%xmm0, %xmm0
	movl	12(%rsp), %eax
	movl	%ebp, 128(%rsp)
	mulsd	%xmm3, %xmm1
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 160(%rsp)
	movsd	TOLERANCE(%rip), %xmm0
	movl	%eax, 132(%rsp)
	movl	24(%rsp), %eax
	movl	%ebx, 136(%rsp)
	movl	%eax, 140(%rsp)
	movl	16(%rsp), %eax
	divsd	%xmm1, %xmm0
	movsd	%xmm3, 56(%rsp)
	movl	%eax, 160(%rsp)
	movsd	%xmm0, 152(%rsp)
	pushq	168(%rsp)
	.cfi_def_cfa_offset 248
	pushq	168(%rsp)
	.cfi_def_cfa_offset 256
	pushq	168(%rsp)
	.cfi_def_cfa_offset 264
	pushq	168(%rsp)
	.cfi_def_cfa_offset 272
	pushq	168(%rsp)
	.cfi_def_cfa_offset 280
	pushq	168(%rsp)
	.cfi_def_cfa_offset 288
	leaq	128(%rsp), %rdi
	call	poisson
	movq	baseblock(%rip), %rdx
	addq	$48, %rsp
	.cfi_def_cfa_offset 240
	movsd	56(%rsp), %xmm3
	testq	%rdx, %rdx
	je	.L6771
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6771
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6776:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6776
.L6771:
	movsd	%xmm3, 16(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 76(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 84(%rsp)
	pushq	$507
	.cfi_def_cfa_offset 256
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	72(%rsp), %r14
	orl	$1, _loop.53+16(%rip)
	movl	%r14d, %edx
	shrq	$32, %r14
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %ecx
	movl	%ebp, %edx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$507
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movq	%r14, %rdx
	pushq	$.LC141
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	orl	$2, _loop.53+16(%rip)
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movl	56(%rsp), %edx
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %r8d
	movl	%ebp, %edx
	pushq	$507
	.cfi_def_cfa_offset 264
	pushq	$.LC141
	.cfi_def_cfa_offset 272
	movq	100(%rsp), %rdi
	movl	108(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	$_loop.53, %edi
	call	end_stencil
	cmpl	$65535, %ebx
	movl	$0, _loop.53+12(%rip)
	movsd	16(%rsp), %xmm3
	jg	.L6813
	movq	grid(%rip), %r10
	cmpb	$0, 128(%r10)
	jne	.L6814
	movl	56(%r10), %eax
	testl	%eax, %eax
	jle	.L6782
.L6819:
	movslq	52(%rsp), %rdx
	addl	$1, %ebx
	movq	48(%r10), %rsi
	leaq	8(,%rbp,8), %r9
	movslq	%ebx, %rbx
	movsd	.LC10(%rip), %xmm4
	movl	$1, %r13d
	leaq	8(,%rdx,8), %r15
	movslq	48(%rsp), %rdx
	salq	$3, %rbx
	movq	%rbx, 16(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	24(%rsp), %rdx
	movq	%rbx, 40(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 24(%rsp)
	leal	-1(%rax), %ebx
	leaq	16(%rsi), %rax
	salq	$4, %rbx
	addq	%rax, %rbx
	jmp	.L6781
	.p2align 4,,10
	.p2align 3
.L6815:
	addq	$16, %rax
.L6781:
	movslq	8(%rsi), %rcx
	movl	%r13d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm2
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm2
	testb	$1, %sil
	je	.L6779
	movq	24(%r10), %r11
	movslq	%ecx, %r8
	movslq	%edi, %r14
	movq	(%r11,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %r12
	movslq	%edx, %r8
	movq	(%r12,%r14,8), %r11
	movq	-8(%r12,%r14,8), %r12
	movq	16(%rsp), %r14
	movq	(%r11,%r8,8), %r11
	movq	(%r12,%r8,8), %r8
	movsd	(%r11,%r9), %xmm0
	subsd	(%r8,%r9), %xmm0
	leaq	(%r11,%r15), %rbp
	divsd	%xmm2, %xmm0
	movsd	(%r11,%r14), %xmm2
	mulsd	%xmm3, %xmm2
	mulsd	%xmm2, %xmm0
	movsd	0(%rbp), %xmm2
	subsd	%xmm0, %xmm2
	movsd	%xmm2, 0(%rbp)
	mulsd	L0(%rip), %xmm1
	movapd	%xmm1, %xmm2
.L6779:
	andl	$2, %esi
	je	.L6780
	movq	24(%r10), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	40(%rsp), %rsi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rdi
	movq	(%rdi,%rdx,8), %rcx
	movq	-8(%rdi,%rdx,8), %rdx
	movq	24(%rsp), %rdi
	movsd	(%rcx,%r9), %xmm0
	subsd	(%rdx,%r9), %xmm0
	addq	%rcx, %rsi
	movsd	(%rcx,%rdi), %xmm1
	divsd	%xmm2, %xmm0
	mulsd	%xmm3, %xmm1
	mulsd	%xmm1, %xmm0
	movsd	(%rsi), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rsi)
.L6780:
	movq	%rax, %rsi
	cmpq	%rbx, %rax
	jne	.L6815
.L6782:
	movl	12(%rsp), %eax
	leaq	68(%rsp), %rdi
	movl	$-1, 72(%rsp)
	movl	%eax, 68(%rsp)
	call	delete
	movq	32(%rsp), %rbx
	movdqa	80(%rsp), %xmm7
	movq	112(%rsp), %rax
	movups	%xmm7, (%rbx)
	movdqa	96(%rsp), %xmm7
	movq	%rax, 32(%rbx)
	movq	%rbx, %rax
	movups	%xmm7, 16(%rbx)
	addq	$184, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6813:
	.cfi_restore_state
	movq	grid(%rip), %r11
	movq	_constant(%rip), %rdx
	movslq	%ebx, %rbx
	movslq	24(%rsp), %rax
	cmpb	$0, 128(%r11)
	movsd	-524288(%rdx,%rbx,8), %xmm5
	movsd	-524288(%rdx,%rax,8), %xmm6
	jne	.L6816
	movl	56(%r11), %edx
	testl	%edx, %edx
	jle	.L6782
.L6818:
	movslq	52(%rsp), %rax
	movq	48(%r11), %rsi
	leal	-1(%rdx), %r10d
	leaq	8(,%rbp,8), %r9
	salq	$4, %r10
	movsd	.LC10(%rip), %xmm4
	movl	$1, %r14d
	leaq	8(,%rax,8), %r13
	movslq	48(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	leaq	16(%rsi), %rax
	addq	%rax, %r10
	jmp	.L6786
	.p2align 4,,10
	.p2align 3
.L6817:
	addq	$16, %rax
.L6786:
	movslq	8(%rsi), %rcx
	movl	%r14d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm4, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm2
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm2
	testb	$1, %sil
	je	.L6784
	movq	24(%r11), %rbx
	movslq	%ecx, %r8
	movslq	%edi, %r15
	movq	(%rbx,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %r12
	movslq	%edx, %r8
	movq	(%r12,%r15,8), %rbx
	movq	-8(%r12,%r15,8), %r12
	movq	(%rbx,%r8,8), %rbp
	movq	(%r12,%r8,8), %r8
	movsd	0(%rbp,%r9), %xmm0
	subsd	(%r8,%r9), %xmm0
	leaq	0(%rbp,%r13), %rbx
	divsd	%xmm2, %xmm0
	movapd	%xmm5, %xmm2
	mulsd	%xmm3, %xmm2
	mulsd	%xmm2, %xmm0
	movsd	(%rbx), %xmm2
	subsd	%xmm0, %xmm2
	movsd	%xmm2, (%rbx)
	mulsd	L0(%rip), %xmm1
	movapd	%xmm1, %xmm2
.L6784:
	andl	$2, %esi
	je	.L6785
	movq	24(%r11), %rsi
	movapd	%xmm6, %xmm1
	movq	16(%rsp), %rbx
	mulsd	%xmm3, %xmm1
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rdi
	movq	(%rdi,%rdx,8), %rsi
	movq	-8(%rdi,%rdx,8), %rdx
	movsd	(%rsi,%r9), %xmm0
	subsd	(%rdx,%r9), %xmm0
	leaq	(%rsi,%rbx), %rcx
	divsd	%xmm2, %xmm0
	mulsd	%xmm1, %xmm0
	movsd	(%rcx), %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx)
.L6785:
	movq	%rax, %rsi
	cmpq	%rax, %r10
	jne	.L6817
	jmp	.L6782
	.p2align 4,,10
	.p2align 3
.L6787:
	movl	$65539, 24(%rsp)
	movl	$65538, %ebx
	jmp	.L6760
	.p2align 4,,10
	.p2align 3
.L6811:
	movsd	%xmm3, 56(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	56(%rsp), %xmm3
	pxor	%xmm5, %xmm5
	jmp	.L6766
	.p2align 4,,10
	.p2align 3
.L6816:
	movsd	%xmm6, 40(%rsp)
	movsd	%xmm5, 24(%rsp)
	movsd	%xmm3, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r11
	movsd	40(%rsp), %xmm6
	movsd	24(%rsp), %xmm5
	movsd	16(%rsp), %xmm3
	movl	56(%r11), %edx
	testl	%edx, %edx
	jg	.L6818
	jmp	.L6782
	.p2align 4,,10
	.p2align 3
.L6814:
	movsd	%xmm3, 16(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r10
	movsd	16(%rsp), %xmm3
	movl	56(%r10), %eax
	testl	%eax, %eax
	jg	.L6819
	jmp	.L6782
	.cfi_endproc
.LFE285:
	.size	project, .-project
	.p2align 4
	.globl	viscosity
	.type	viscosity, @function
viscosity:
.LFB288:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movq	%rdi, %r12
	movl	$.LC32, %edi
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$200, %rsp
	.cfi_def_cfa_offset 256
	movq	256(%rsp), %rbp
	movl	256(%rsp), %r14d
	movl	260(%rsp), %r13d
	call	new_vector
	movq	baseblock(%rip), %rdx
	movq	%rax, %rbx
	testq	%rdx, %rdx
	je	.L6824
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6824
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6825:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6825
.L6824:
	movq	$0, 112(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 120(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 264
	xorl	%esi, %esi
	movl	%ebx, %edx
	pushq	$170
	.cfi_def_cfa_offset 272
	xorl	%r8d, %r8d
	pushq	$.LC142
	.cfi_def_cfa_offset 280
	pushq	$0
	.cfi_def_cfa_offset 288
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 264
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 272
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	shrq	$32, %rbp
	pushq	$170
	.cfi_def_cfa_offset 280
	pushq	$.LC142
	.cfi_def_cfa_offset 288
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 264
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$170
	.cfi_def_cfa_offset 272
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC142
	.cfi_def_cfa_offset 280
	movq	%rax, %rdx
	pushq	$0
	.cfi_def_cfa_offset 288
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 264
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 272
	xorl	%ecx, %ecx
	movq	%rbp, %rdx
	pushq	$170
	.cfi_def_cfa_offset 280
	pushq	$.LC142
	.cfi_def_cfa_offset 288
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 256
	movl	$_loop.52, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.52+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L6833
.L6823:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6828
	movslq	%r14d, %rcx
	movq	24(%rax), %r11
	movq	32(%rax), %rax
	leal	-1(%rdx), %esi
	leaq	8(,%rcx,8), %r10
	movslq	%ebx, %rcx
	salq	$4, %rsi
	leaq	8(,%rcx,8), %r9
	movslq	%r13d, %rcx
	leaq	16(%rax), %rdx
	leaq	8(,%rcx,8), %r8
	movq	%rbx, %rcx
	addq	%rdx, %rsi
	sarq	$32, %rcx
	leaq	8(,%rcx,8), %rdi
	jmp	.L6827
	.p2align 4,,10
	.p2align 3
.L6834:
	addq	$16, %rdx
.L6827:
	movslq	8(%rax), %rcx
	movslq	(%rax), %r15
	movq	(%r11,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rbp
	movslq	4(%rax), %rcx
	movq	0(%rbp,%r15,8), %rax
	movq	(%rax,%rcx,8), %rax
	movsd	(%rax,%r10), %xmm0
	movsd	%xmm0, (%rax,%r9)
	movsd	(%rax,%r8), %xmm0
	movsd	%xmm0, (%rax,%rdi)
	movq	%rdx, %rax
	cmpq	%rsi, %rdx
	jne	.L6834
.L6828:
	movq	264(%rsp), %rax
	movl	$-1, 12(%rsp)
	movq	%rsp, %rdi
	movq	%rax, (%rsp)
	movl	272(%rsp), %eax
	movl	%eax, 8(%rsp)
	call	*restriction(%rip)
	leaq	32(%rsp), %rdx
	pxor	%xmm0, %xmm0
	leaq	16(%rsp), %rax
	movq	%rdx, 120(%rsp)
	movl	288(%rsp), %edx
	leaq	256(%rsp), %rdi
	subq	$8, %rsp
	.cfi_def_cfa_offset 264
	movups	%xmm0, 160(%rsp)
	movl	%edx, 160(%rsp)
	movq	304(%rsp), %rdx
	movups	%xmm0, 176(%rsp)
	movl	%r14d, 24(%rsp)
	movl	%r13d, 28(%rsp)
	movq	%rax, 120(%rsp)
	movq	%rbx, 40(%rsp)
	movq	%rdx, 168(%rsp)
	movq	$-1, 32(%rsp)
	movq	$-1, 48(%rsp)
	movq	$residual_viscosity, 136(%rsp)
	movq	$relax_viscosity, 144(%rsp)
	movq	%rdi, 152(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 272
	pushq	$0
	.cfi_def_cfa_offset 280
	pushq	184(%rsp)
	.cfi_def_cfa_offset 288
	pushq	184(%rsp)
	.cfi_def_cfa_offset 296
	pushq	184(%rsp)
	.cfi_def_cfa_offset 304
	pushq	184(%rsp)
	.cfi_def_cfa_offset 312
	pushq	184(%rsp)
	.cfi_def_cfa_offset 320
	pushq	184(%rsp)
	.cfi_def_cfa_offset 328
	pushq	%rax
	.cfi_def_cfa_offset 336
	leaq	144(%rsp), %rdi
	call	mg_solve
	movq	%rbx, 128(%rsp)
	movq	$-1, 136(%rsp)
	addq	$80, %rsp
	.cfi_def_cfa_offset 256
	leaq	48(%rsp), %rdi
	call	delete
	movq	96(%rsp), %rax
	movdqa	64(%rsp), %xmm1
	movdqa	80(%rsp), %xmm2
	movq	%rax, 32(%r12)
	movq	%r12, %rax
	movups	%xmm1, (%r12)
	movups	%xmm2, 16(%r12)
	addq	$200, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6833:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L6823
	.cfi_endproc
.LFE288:
	.size	viscosity, .-viscosity
	.p2align 4
	.type	viscous_term, @function
viscous_term:
.LFB321:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	pushq	%rbp
	.cfi_def_cfa_offset 24
	.cfi_offset 6, -24
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	subq	$96, %rsp
	.cfi_def_cfa_offset 128
	movslq	mu(%rip), %rax
	cmpl	$65535, %eax
	jle	.L6836
	movq	_constant(%rip), %rdx
	pxor	%xmm0, %xmm0
	ucomisd	-524288(%rdx,%rax,8), %xmm0
	jp	.L6836
	jne	.L6836
.L6837:
	movl	a(%rip), %ebp
	cmpl	$65535, %ebp
	jg	.L6851
	movq	baseblock(%rip), %rdx
	movq	a(%rip), %r12
	movslq	a+4(%rip), %rbx
	testq	%rdx, %rdx
	je	.L6843
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6843
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6844:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6844
.L6843:
	movq	$0, 48(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 56(%rsp)
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 136
	orl	$1, _loop.13+16(%rip)
	shrq	$32, %r12
	pushq	$352
	.cfi_def_cfa_offset 144
	pushq	$.LC147
	.cfi_def_cfa_offset 152
	pushq	$0
	.cfi_def_cfa_offset 160
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 136
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$352
	.cfi_def_cfa_offset 144
	xorl	%ecx, %ecx
	movq	%r12, %rdx
	pushq	$.LC147
	.cfi_def_cfa_offset 152
	pushq	$0
	.cfi_def_cfa_offset 160
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	orl	$2, _loop.13+16(%rip)
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 128
	movl	$_loop.13, %edi
	call	end_stencil
	movq	grid(%rip), %r11
	movl	$0, _loop.13+12(%rip)
	cmpb	$0, 128(%r11)
	jne	.L6859
	movl	56(%r11), %edx
	testl	%edx, %edx
	jle	.L6851
.L6861:
	movq	48(%r11), %rax
	leal	-1(%rdx), %r10d
	leal	1(%rbp), %r9d
	movslq	%r9d, %r9
	salq	$4, %r10
	leaq	8(,%rbx,8), %rbx
	leaq	16(%rax), %rdx
	salq	$3, %r9
	addq	%rdx, %r10
	jmp	.L6848
	.p2align 4,,10
	.p2align 3
.L6860:
	addq	$16, %rdx
.L6848:
	movslq	(%rax), %rsi
	movslq	4(%rax), %rcx
	movslq	8(%rax), %rdi
	movl	12(%rax), %eax
	testb	$1, %al
	je	.L6846
	movq	24(%r11), %rbp
	movslq	%edi, %r8
	movq	0(%rbp,%r8,8), %r8
	movslq	%esi, %rbp
	movq	(%r8), %r8
	movq	16(%r8), %r12
	movslq	%ecx, %r8
	movq	(%r12,%rbp,8), %rbp
	movq	0(%rbp,%r8,8), %r8
	movq	$0x000000000, (%r8,%r9)
.L6846:
	testb	$2, %al
	je	.L6847
	movq	24(%r11), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rcx,8), %rax
	movq	$0x000000000, (%rax,%rbx)
.L6847:
	movq	%rdx, %rax
	cmpq	%r10, %rdx
	jne	.L6860
.L6851:
	addq	$96, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 32
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%rbp
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6836:
	.cfi_restore_state
	movsd	dt(%rip), %xmm0
	call	correction
	movq	u(%rip), %rax
	pxor	%xmm0, %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	%rax, 48(%rsp)
	movq	mu(%rip), %rax
	movaps	%xmm0, 80(%rsp)
	movsd	dt(%rip), %xmm0
	movq	%rax, 56(%rsp)
	movl	rho(%rip), %eax
	movsd	%xmm0, 72(%rsp)
	movl	%eax, 64(%rsp)
	movl	mgu+32(%rip), %eax
	movl	%eax, 80(%rsp)
	pushq	88(%rsp)
	.cfi_def_cfa_offset 136
	pushq	88(%rsp)
	.cfi_def_cfa_offset 144
	pushq	88(%rsp)
	.cfi_def_cfa_offset 152
	pushq	88(%rsp)
	.cfi_def_cfa_offset 160
	pushq	88(%rsp)
	.cfi_def_cfa_offset 168
	pushq	88(%rsp)
	.cfi_def_cfa_offset 176
	leaq	48(%rsp), %rdi
	call	viscosity
	movdqu	48(%rsp), %xmm1
	movdqu	64(%rsp), %xmm2
	movq	80(%rsp), %rax
	movsd	dt(%rip), %xmm0
	addq	$48, %rsp
	.cfi_def_cfa_offset 128
	xorpd	.LC1(%rip), %xmm0
	movaps	%xmm1, mgu(%rip)
	movq	%rax, mgu+32(%rip)
	movaps	%xmm2, mgu+16(%rip)
	call	correction
	jmp	.L6837
	.p2align 4,,10
	.p2align 3
.L6859:
	call	update_cache_f
	movq	grid(%rip), %r11
	movl	56(%r11), %edx
	testl	%edx, %edx
	jg	.L6861
	jmp	.L6851
	.cfi_endproc
.LFE321:
	.size	viscous_term, .-viscous_term
	.p2align 4
	.globl	viscosity_explicit
	.type	viscosity_explicit, @function
viscosity_explicit:
.LFB289:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	movq	%rdi, %r14
	movl	$.LC32, %edi
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$72, %rsp
	.cfi_def_cfa_offset 128
	movslq	128(%rsp), %r12
	movslq	132(%rsp), %rbp
	movq	128(%rsp), %r13
	call	new_vector
	leaq	32(%rsp), %rdx
	leaq	16(%rsp), %rsi
	movq	%rsp, %rdi
	leaq	128(%rsp), %rcx
	movq	%rax, 32(%rsp)
	movq	%rax, %rbx
	movq	$-1, 40(%rsp)
	movl	%r12d, 16(%rsp)
	movl	%ebp, 20(%rsp)
	movq	$-1, 24(%rsp)
	movl	%r12d, (%rsp)
	movl	%ebp, 4(%rsp)
	movq	$-1, 8(%rsp)
	call	residual_viscosity
	movq	baseblock(%rip), %rdx
	movq	%xmm0, %r15
	testq	%rdx, %rdx
	je	.L6866
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6866
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6867:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6867
.L6866:
	movq	$0, 48(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 56(%rsp)
	xorl	%r8d, %r8d
	movl	%r13d, %edx
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 136
	shrq	$32, %r13
	pushq	$188
	.cfi_def_cfa_offset 144
	pushq	$.LC142
	.cfi_def_cfa_offset 152
	pushq	$1
	.cfi_def_cfa_offset 160
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 136
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 144
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$188
	.cfi_def_cfa_offset 152
	pushq	$.LC142
	.cfi_def_cfa_offset 160
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 136
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$188
	.cfi_def_cfa_offset 144
	xorl	%ecx, %ecx
	movq	%r13, %rdx
	pushq	$.LC142
	.cfi_def_cfa_offset 152
	pushq	$1
	.cfi_def_cfa_offset 160
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 136
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 144
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$188
	.cfi_def_cfa_offset 152
	movq	%rax, %rdx
	pushq	$.LC142
	.cfi_def_cfa_offset 160
	movq	80(%rsp), %rdi
	movl	88(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 128
	movl	$_loop.45, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.45+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L6875
.L6865:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6870
	movslq	%ebx, %rcx
	movq	24(%rax), %r9
	movq	32(%rax), %rax
	leal	-1(%rdx), %esi
	leaq	8(,%rcx,8), %r8
	movq	%rbx, %rcx
	salq	$4, %rsi
	leaq	8(,%r12,8), %r10
	sarq	$32, %rcx
	leaq	16(%rax), %rdx
	leaq	8(,%rbp,8), %r11
	leaq	8(,%rcx,8), %rdi
	addq	%rdx, %rsi
	jmp	.L6869
	.p2align 4,,10
	.p2align 3
.L6876:
	addq	$16, %rdx
.L6869:
	movslq	8(%rax), %rcx
	movslq	(%rax), %r12
	movq	(%r9,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rbp
	movslq	4(%rax), %rcx
	movq	0(%rbp,%r12,8), %rax
	movq	(%rax,%rcx,8), %rax
	leaq	(%rax,%r10), %rcx
	movsd	(%rcx), %xmm0
	addsd	(%rax,%r8), %xmm0
	movsd	%xmm0, (%rcx)
	leaq	(%rax,%r11), %rcx
	movsd	(%rcx), %xmm0
	addsd	(%rax,%rdi), %xmm0
	movq	%rdx, %rax
	movsd	%xmm0, (%rcx)
	cmpq	%rsi, %rdx
	jne	.L6876
.L6870:
	leaq	48(%rsp), %rdi
	movq	%rbx, 48(%rsp)
	movq	$-1, 56(%rsp)
	call	delete
	movq	%r15, 8(%r14)
	movq	%r14, %rax
	movl	$0, (%r14)
	movq	$0x000000000, 16(%r14)
	movq	$0x000000000, 24(%r14)
	movq	$0, 32(%r14)
	addq	$72, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6875:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L6865
	.cfi_endproc
.LFE289:
	.size	viscosity_explicit, .-viscosity_explicit
	.p2align 4
	.globl	prediction
	.type	prediction, @function
prediction:
.LFB316:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC274, %edi
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	call	new_block_scalar
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC274, %edi
	movl	%eax, 32(%rsp)
	call	new_block_scalar
	movq	_attribute(%rip), %rsi
	movl	%eax, 36(%rsp)
	movslq	u(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	movq	baseblock(%rip), %rdx
	salq	$4, %rax
	cmpq	$0, 16(%rsi,%rax)
	je	.L6878
	testq	%rdx, %rdx
	je	.L6882
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6882
	.p2align 4,,10
	.p2align 3
.L6883:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r9d, %r9d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r9w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6883
.L6882:
	movl	32(%rsp), %ebx
	movl	$0, 104(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movq	%rbx, 56(%rsp)
	movl	%ebx, %edx
	movq	$0, 104(%rsp)
	pushq	$263
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-1, %ecx
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$1, %ecx
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movl	136(%rsp), %esi
	movq	128(%rsp), %rdi
	call	stencil_val
	movl	68(%rsp), %esi
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movq	%rsi, 88(%rsp)
	salq	$32, %rdx
	orq	%rdx, %rbx
	shrq	$32, %rdx
	movq	%rbx, 72(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	pushq	$263
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$1, %r8d
	pushq	$263
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.44, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.44+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L6986
.L6881:
	movl	40(%rax), %r8d
	testl	%r8d, %r8d
	jle	.L6888
	movslq	32(%rsp), %rdx
	xorl	%ebp, %ebp
	movq	24(%rax), %rsi
	movq	%rax, %rcx
	movsd	.LC10(%rip), %xmm3
	movq	%rbp, %r15
	leaq	8(,%rdx,8), %r13
	movslq	36(%rsp), %rdx
	movsd	%xmm3, 24(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 16(%rsp)
	.p2align 4,,10
	.p2align 3
.L6887:
	movq	%r15, %rax
	movl	$1, %edi
	pxor	%xmm1, %xmm1
	movsd	24(%rsp), %xmm0
	salq	$4, %rax
	addq	32(%rcx), %rax
	addq	$1, %r15
	movslq	8(%rax), %r12
	movslq	4(%rax), %rbx
	movq	%r12, %rcx
	leaq	0(,%rbx,8), %r14
	sall	%cl, %edi
	movq	(%rsi,%r12,8), %rcx
	cvtsi2sdl	%edi, %xmm1
	movslq	u(%rip), %rdi
	movq	(%rcx), %rcx
	leaq	1(%rdi), %rsi
	movq	16(%rcx), %r10
	movslq	(%rax), %rcx
	divsd	%xmm1, %xmm0
	addq	$1, %rcx
	movq	(%r10,%rcx,8), %rax
	leaq	0(,%rcx,8), %rbp
	movq	(%rax,%rbx,8), %r9
	movq	-8(%r10,%rbp), %rax
	movq	(%rax,%rbx,8), %rcx
	movq	-16(%r10,%rbp), %rax
	movsd	(%r9,%rsi,8), %xmm2
	movq	(%rax,%rbx,8), %rax
	movsd	(%rcx,%rsi,8), %xmm1
	mulsd	L0(%rip), %xmm0
	movsd	%xmm0, 8(%rsp)
	movsd	(%rax,%rsi,8), %xmm0
	leaq	(%rdi,%rdi,4), %rax
	leaq	(%rdi,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*16(%rax)
	movq	grid(%rip), %rax
	divsd	8(%rsp), %xmm0
	movq	24(%rax), %rax
	movq	(%rax,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-8(%rax,%rbp), %r9
	movslq	u+4(%rip), %rax
	movq	(%r9,%rbx,8), %rsi
	movq	-8(%r9,%r14), %r8
	leaq	1(%rax), %rcx
	movq	8(%r9,%r14), %rdi
	movsd	%xmm0, (%rsi,%r13)
	movsd	(%r8,%rcx,8), %xmm0
	leaq	(%rax,%rax,4), %r8
	movsd	(%rsi,%rcx,8), %xmm1
	leaq	(%rax,%r8,2), %rax
	movsd	(%rdi,%rcx,8), %xmm2
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	call	*16(%rax)
	movq	grid(%rip), %rcx
	divsd	8(%rsp), %xmm0
	movq	24(%rcx), %rsi
	movq	(%rsi,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	-8(%rax,%rbp), %rax
	movq	(%rax,%rbx,8), %rax
	movq	16(%rsp), %rbx
	movsd	%xmm0, (%rax,%rbx)
	cmpl	%r15d, 40(%rcx)
	jg	.L6887
.L6888:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L6886
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6886
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L6897:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6897
.L6886:
	movq	$0, 96(%rsp)
	xorl	%r9d, %r9d
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 104(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	movl	u(%rip), %edx
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %ecx
	pushq	$278
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	orl	$1, _loop.42+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$278
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$280
	.cfi_def_cfa_offset 192
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-2, %ecx
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	g(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	g(%rip), %edx
	movl	$-1, %ecx
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	movl	$-2, %ecx
	movabsq	$-4294967296, %rdx
	andq	72(%rsp), %rdx
	orq	80(%rsp), %rdx
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm+4(%rip), %edx
	movl	$-2, %ecx
	pushq	$282
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	fm+4(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %r8d
	movl	$-2, %ecx
	pushq	$282
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	u(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %r8d
	movl	$-2, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-2, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-2, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	u(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %r8d
	movl	$-2, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-2, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$284
	.cfi_def_cfa_offset 192
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$1
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-2, %ecx
	pushq	$284
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$293
	.cfi_def_cfa_offset 192
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$1
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$293
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$278
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	orl	$2, _loop.42+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$278
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$280
	.cfi_def_cfa_offset 192
	movl	uf+4(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-2, %r8d
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	g+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	g+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-2, %r8d
	pushq	$280
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	88(%rsp), %rdx
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm(%rip), %edx
	movl	$-2, %r8d
	pushq	$282
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	fm(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$282
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	u+4(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-2, %r8d
	movl	$-1, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-2, %r8d
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-2, %r8d
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	movl	u+4(%rip), %edx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-2, %r8d
	movl	$1, %ecx
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-2, %r8d
	pushq	$283
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$284
	.cfi_def_cfa_offset 192
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$1
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-2, %r8d
	pushq	$284
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$293
	.cfi_def_cfa_offset 192
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$1
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$293
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.42, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.42+12(%rip)
	cmpl	$65535, %eax
	jg	.L6987
	movq	grid(%rip), %r12
	cmpb	$0, 128(%r12)
	jne	.L6988
.L6898:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L6921
	movslq	u(%rip), %rdx
	movq	48(%r12), %rdi
	movq	%r12, 40(%rsp)
	pxor	%xmm2, %xmm2
	movq	.LC1(%rip), %xmm6
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rdx,8), %rbp
	movslq	g(%rip), %rdx
	movsd	.LC3(%rip), %xmm4
	movsd	.LC5(%rip), %xmm5
	movapd	%xmm6, %xmm7
	leaq	8(,%rdx,8), %rbx
	movslq	32(%rsp), %rdx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	uf(%rip), %rdx
	movq	%rbx, 56(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	fm+4(%rip), %rdx
	movq	%rbx, 72(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	u+4(%rip), %rdx
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	fm(%rip), %rdx
	leaq	8(,%rdx,8), %rsi
	movslq	g+4(%rip), %rdx
	movq	%rsi, 16(%rsp)
	leaq	8(,%rdx,8), %r14
	movslq	36(%rsp), %rdx
	leaq	8(,%rdx,8), %rsi
	movslq	uf+4(%rip), %rdx
	movq	%rsi, 80(%rsp)
	leaq	8(,%rdx,8), %rsi
	leal	-1(%rax), %edx
	salq	$4, %rdx
	leaq	16(%rdi), %rax
	movq	%rsi, 88(%rsp)
	leaq	(%rdx,%rax), %rsi
	movq	%rsi, 24(%rsp)
	jmp	.L6920
	.p2align 4,,10
	.p2align 3
.L6991:
	leal	-1(%rdx), %r10d
	movapd	%xmm3, %xmm12
	movslq	%r10d, %r10
	movq	(%r15,%r10,8), %r10
	movq	(%r10,%r9,8), %r9
	leaq	(%r9,%rbp), %r11
	movsd	(%r11), %xmm13
.L6903:
	movq	64(%rsp), %r12
	movq	72(%rsp), %r15
	movsd	(%r8,%r12), %xmm1
	addsd	0(%r13,%r12), %xmm1
	addq	%r8, %r15
	movq	56(%rsp), %r13
	movapd	%xmm1, %xmm0
	movapd	%xmm3, %xmm1
	subsd	%xmm11, %xmm1
	mulsd	%xmm14, %xmm0
	mulsd	%xmm12, %xmm1
	mulsd	(%r9,%r13), %xmm1
	movq	8(%rsp), %r13
	mulsd	%xmm4, %xmm0
	mulsd	%xmm10, %xmm1
	addsd	%xmm13, %xmm0
	mulsd	%xmm5, %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%r15)
	ucomisd	(%r9,%r13), %xmm2
	jp	.L6943
	je	.L6904
.L6943:
	movq	48(%rsp), %r13
	movq	8(%rsp), %r12
	movq	8(%r10,%r13), %r13
	ucomisd	0(%r13,%r12), %xmm2
	jp	.L6944
	je	.L6904
.L6944:
	movsd	(%r9,%rbx), %xmm1
	movsd	(%r11), %xmm11
	comisd	%xmm1, %xmm2
	ja	.L6989
	movq	48(%rsp), %r11
	movapd	%xmm11, %xmm10
	movq	-8(%r10,%r11), %r9
	subsd	(%r9,%rbp), %xmm10
.L6909:
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm10, %xmm1
	divsd	%xmm9, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%r15)
.L6904:
	movq	16(%rsp), %r11
	mulsd	(%r8,%r11), %xmm0
	movsd	%xmm0, (%r15)
	mulsd	L0(%rip), %xmm8
	movapd	%xmm8, %xmm10
.L6900:
	andl	$2, %edi
	je	.L6910
	movq	40(%rsp), %rdi
	leaq	0(,%rdx,8), %r11
	movapd	%xmm10, %xmm9
	movsd	dt(%rip), %xmm13
	addsd	%xmm10, %xmm9
	movq	24(%rdi), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r10
	movq	(%r10,%rdx,8), %rcx
	movslq	%esi, %rdx
	leaq	0(,%rdx,8), %r8
	movq	(%rcx,%rdx,8), %rdx
	movq	-8(%rcx,%r8), %r9
	leaq	(%rdx,%rbx), %rdi
	movsd	(%r9,%rbx), %xmm11
	movsd	(%rdi), %xmm8
	addsd	%xmm8, %xmm11
	mulsd	%xmm13, %xmm11
	divsd	%xmm9, %xmm11
	comisd	%xmm2, %xmm11
	jbe	.L6979
	subl	$1, %esi
	movapd	%xmm3, %xmm12
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	leaq	0(,%rsi,8), %r8
	leaq	(%rcx,%rbx), %rdi
	movsd	(%rdi), %xmm8
.L6913:
	movsd	(%rdx,%r14), %xmm1
	addsd	(%r9,%r14), %xmm1
	movq	80(%rsp), %r15
	movq	88(%rsp), %rsi
	movapd	%xmm1, %xmm0
	addq	%rdx, %rsi
	mulsd	%xmm13, %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm8, %xmm0
	movapd	%xmm3, %xmm8
	subsd	%xmm11, %xmm8
	movapd	%xmm8, %xmm1
	mulsd	%xmm12, %xmm1
	mulsd	(%rcx,%r15), %xmm1
	movq	16(%rsp), %r15
	mulsd	%xmm10, %xmm1
	mulsd	.LC5(%rip), %xmm1
	addsd	%xmm1, %xmm0
	movsd	%xmm0, (%rsi)
	ucomisd	(%rcx,%r15), %xmm2
	jp	.L6947
	je	.L6914
.L6947:
	movq	8(%r10,%r11), %r9
	movq	16(%rsp), %r15
	movq	(%r9,%r8), %r9
	ucomisd	(%r9,%r15), %xmm2
	jp	.L6948
	je	.L6914
.L6948:
	movsd	(%rcx,%rbp), %xmm1
	movsd	(%rdi), %xmm10
	comisd	%xmm1, %xmm2
	ja	.L6990
	movq	-8(%r10,%r11), %rcx
	movapd	%xmm10, %xmm8
	movq	(%rcx,%r8), %rcx
	subsd	(%rcx,%rbx), %xmm8
.L6919:
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm8, %xmm1
	divsd	%xmm9, %xmm1
	subsd	%xmm1, %xmm0
	movsd	%xmm0, (%rsi)
.L6914:
	movq	8(%rsp), %rdi
	mulsd	(%rdx,%rdi), %xmm0
	movsd	%xmm0, (%rsi)
.L6910:
	movq	%rax, %rdi
	cmpq	24(%rsp), %rax
	je	.L6921
	addq	$16, %rax
.L6920:
	movslq	8(%rdi), %rcx
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm8
	movslq	(%rdi), %rdx
	movl	$1, %r8d
	movl	4(%rdi), %esi
	movl	12(%rdi), %edi
	movsd	L0(%rip), %xmm10
	sall	%cl, %r8d
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm8
	mulsd	%xmm8, %xmm10
	testb	$1, %dil
	je	.L6900
	movq	40(%rsp), %r11
	movslq	%ecx, %r8
	movslq	%edx, %r13
	movapd	%xmm10, %xmm9
	movsd	dt(%rip), %xmm14
	addsd	%xmm10, %xmm9
	movq	24(%r11), %r9
	movq	(%r9,%r8,8), %r8
	movslq	%esi, %r9
	leaq	0(,%r9,8), %r11
	movq	(%r8), %r8
	movq	%r11, 48(%rsp)
	movq	16(%r8), %r15
	movq	(%r15,%r13,8), %r10
	movq	-8(%r15,%r13,8), %r13
	movq	(%r10,%r9,8), %r8
	movq	0(%r13,%r9,8), %r13
	leaq	(%r8,%rbp), %r11
	movsd	0(%r13,%rbp), %xmm11
	movsd	(%r11), %xmm13
	addsd	%xmm13, %xmm11
	mulsd	%xmm14, %xmm11
	divsd	%xmm9, %xmm11
	comisd	%xmm2, %xmm11
	ja	.L6991
	movq	.LC23(%rip), %r15
	xorpd	%xmm6, %xmm11
	movq	%r8, %r9
	movq	%r15, %xmm12
	jmp	.L6903
	.p2align 4,,10
	.p2align 3
.L6986:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L6881
	.p2align 4,,10
	.p2align 3
.L6921:
	movl	32(%rsp), %eax
	leaq	96(%rsp), %rdi
	movq	$-1, 104(%rsp)
	movl	%eax, 96(%rsp)
	movl	36(%rsp), %eax
	movl	%eax, 100(%rsp)
	call	delete
	addq	$120, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L6979:
	.cfi_restore_state
	movsd	.LC23(%rip), %xmm12
	xorpd	%xmm7, %xmm11
	movq	%rdx, %rcx
	jmp	.L6913
	.p2align 4,,10
	.p2align 3
.L6987:
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %r13
	movsd	-524288(%rdx,%rax,8), %xmm4
	movslq	fm+4(%rip), %rax
	cmpb	$0, 128(%r13)
	movsd	-524288(%rdx,%rax,8), %xmm5
	jne	.L6992
.L6922:
	movl	56(%r13), %eax
	testl	%eax, %eax
	jle	.L6921
	movslq	u(%rip), %rdx
	movq	48(%r13), %rdi
	movq	%r13, 16(%rsp)
	pxor	%xmm2, %xmm2
	movsd	.LC10(%rip), %xmm3
	movsd	.LC3(%rip), %xmm6
	leaq	8(,%rdx,8), %r11
	movslq	g(%rip), %rdx
	movq	.LC1(%rip), %xmm8
	movsd	.LC5(%rip), %xmm7
	leaq	8(,%rdx,8), %rbx
	movslq	32(%rsp), %rdx
	movapd	%xmm8, %xmm9
	movq	%rbx, 64(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	uf(%rip), %rdx
	movq	%rbx, 40(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	u+4(%rip), %rdx
	movq	%rbx, 48(%rsp)
	leaq	8(,%rdx,8), %r10
	movslq	g+4(%rip), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	36(%rsp), %rdx
	leaq	8(,%rdx,8), %rbx
	movslq	uf+4(%rip), %rdx
	movq	%rbx, 56(%rsp)
	leaq	8(,%rdx,8), %rbx
	leal	-1(%rax), %edx
	salq	$4, %rdx
	leaq	16(%rdi), %rax
	movq	%rbx, 72(%rsp)
	leaq	(%rdx,%rax), %rbx
	movq	%rbx, 8(%rsp)
	jmp	.L6941
	.p2align 4,,10
	.p2align 3
.L6995:
	leal	-1(%rdx), %ebx
	movapd	%xmm3, %xmm1
	movslq	%ebx, %rbx
	movq	(%r12,%rbx,8), %rbx
	movq	(%rbx,%r8,8), %r8
	leaq	(%r8,%r11), %rbp
	movsd	0(%rbp), %xmm10
.L6926:
	movq	48(%rsp), %r13
	ucomisd	%xmm2, %xmm5
	leaq	(%r9,%r13), %r12
	movq	64(%rsp), %r13
	movsd	(%r9,%r13), %xmm11
	addsd	(%r14,%r13), %xmm11
	movq	40(%rsp), %r14
	mulsd	%xmm15, %xmm11
	mulsd	%xmm6, %xmm11
	addsd	%xmm10, %xmm11
	movapd	%xmm3, %xmm10
	subsd	%xmm0, %xmm10
	mulsd	%xmm10, %xmm1
	mulsd	(%r8,%r14), %xmm1
	mulsd	%xmm12, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm7, %xmm0
	addsd	%xmm11, %xmm0
	movsd	%xmm0, (%r12)
	jp	.L6951
	je	.L6927
.L6951:
	movsd	(%r8,%r10), %xmm1
	movsd	0(%rbp), %xmm11
	movq	24(%rsp), %r14
	comisd	%xmm1, %xmm2
	ja	.L6993
	movq	-8(%rbx,%r14), %r8
	movapd	%xmm11, %xmm10
	subsd	(%r8,%r11), %xmm10
.L6931:
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm10, %xmm1
	divsd	%xmm14, %xmm1
	subsd	%xmm1, %xmm0
.L6927:
	mulsd	%xmm4, %xmm0
	movsd	%xmm0, (%r12)
	mulsd	L0(%rip), %xmm13
	movapd	%xmm13, %xmm12
.L6923:
	andl	$2, %edi
	je	.L6932
	movq	16(%rsp), %rbx
	leaq	0(,%rdx,8), %rbp
	movapd	%xmm12, %xmm10
	movsd	dt(%rip), %xmm14
	addsd	%xmm12, %xmm10
	movq	24(%rbx), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rbx
	movq	(%rbx,%rdx,8), %rdi
	movslq	%esi, %rdx
	leaq	0(,%rdx,8), %r8
	movq	(%rdi,%rdx,8), %rdx
	movq	-8(%rdi,%r8), %r9
	leaq	(%rdx,%r10), %rcx
	movsd	(%r9,%r10), %xmm0
	movsd	(%rcx), %xmm1
	addsd	%xmm1, %xmm0
	mulsd	%xmm14, %xmm0
	divsd	%xmm10, %xmm0
	comisd	%xmm2, %xmm0
	jbe	.L6983
	subl	$1, %esi
	movapd	%xmm3, %xmm13
	movslq	%esi, %rsi
	leaq	0(,%rsi,8), %r8
	movq	(%rdi,%rsi,8), %rsi
	leaq	(%rsi,%r10), %rcx
	movsd	(%rcx), %xmm1
.L6935:
	movsd	(%rdx,%r15), %xmm11
	addsd	(%r9,%r15), %xmm11
	movq	72(%rsp), %rdi
	mulsd	%xmm14, %xmm11
	addq	%rdx, %rdi
	movq	56(%rsp), %rdx
	ucomisd	%xmm2, %xmm4
	mulsd	%xmm6, %xmm11
	addsd	%xmm1, %xmm11
	movapd	%xmm3, %xmm1
	subsd	%xmm0, %xmm1
	mulsd	%xmm13, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	(%rsi,%rdx), %xmm0
	mulsd	%xmm12, %xmm0
	mulsd	.LC5(%rip), %xmm0
	addsd	%xmm11, %xmm0
	movsd	%xmm0, (%rdi)
	jp	.L6954
	je	.L6936
.L6954:
	movsd	(%rsi,%r11), %xmm1
	movsd	(%rcx), %xmm12
	comisd	%xmm1, %xmm2
	ja	.L6994
	movq	-8(%rbx,%rbp), %rdx
	movq	(%rdx,%r8), %rdx
	subsd	(%rdx,%r10), %xmm12
	movapd	%xmm12, %xmm11
.L6940:
	mulsd	dt(%rip), %xmm1
	mulsd	%xmm11, %xmm1
	divsd	%xmm10, %xmm1
	subsd	%xmm1, %xmm0
.L6936:
	mulsd	%xmm5, %xmm0
	movsd	%xmm0, (%rdi)
.L6932:
	movq	%rax, %rdi
	cmpq	%rax, 8(%rsp)
	je	.L6921
	addq	$16, %rax
.L6941:
	movslq	8(%rdi), %rcx
	pxor	%xmm0, %xmm0
	movapd	%xmm3, %xmm13
	movslq	(%rdi), %rdx
	movl	$1, %r8d
	movl	4(%rdi), %esi
	movl	12(%rdi), %edi
	movsd	L0(%rip), %xmm12
	sall	%cl, %r8d
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm13
	mulsd	%xmm13, %xmm12
	testb	$1, %dil
	je	.L6923
	movq	16(%rsp), %rbx
	movslq	%ecx, %r8
	movslq	%edx, %r14
	movapd	%xmm12, %xmm14
	movsd	dt(%rip), %xmm15
	addsd	%xmm12, %xmm14
	movq	24(%rbx), %r9
	movq	(%r9,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %r12
	movslq	%esi, %r8
	leaq	0(,%r8,8), %r9
	movq	(%r12,%r14,8), %rbx
	movq	-8(%r12,%r14,8), %r14
	movq	%r9, 24(%rsp)
	movq	(%rbx,%r8,8), %r9
	movq	(%r14,%r8,8), %r14
	leaq	(%r9,%r11), %rbp
	movsd	(%r14,%r11), %xmm0
	movsd	0(%rbp), %xmm10
	addsd	%xmm10, %xmm0
	mulsd	%xmm15, %xmm0
	divsd	%xmm14, %xmm0
	comisd	%xmm2, %xmm0
	ja	.L6995
	movq	.LC23(%rip), %r13
	xorpd	%xmm8, %xmm0
	movq	%r9, %r8
	movq	%r13, %xmm1
	jmp	.L6926
	.p2align 4,,10
	.p2align 3
.L6983:
	movsd	.LC23(%rip), %xmm13
	xorpd	%xmm9, %xmm0
	movq	%rdx, %rsi
	jmp	.L6935
	.p2align 4,,10
	.p2align 3
.L6994:
	movq	8(%rbx,%rbp), %rdx
	movq	(%rdx,%r8), %rdx
	movsd	(%rdx,%r10), %xmm11
	subsd	%xmm12, %xmm11
	jmp	.L6940
	.p2align 4,,10
	.p2align 3
.L6993:
	movq	8(%rbx,%r14), %r8
	movsd	(%r8,%r11), %xmm10
	subsd	%xmm11, %xmm10
	jmp	.L6931
	.p2align 4,,10
	.p2align 3
.L6878:
	testq	%rdx, %rdx
	je	.L6892
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L6892
	.p2align 4,,10
	.p2align 3
.L6893:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L6893
.L6892:
	movl	32(%rsp), %ebx
	movl	$0, 104(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movq	%rbx, 56(%rsp)
	movl	%ebx, %edx
	movq	$0, 104(%rsp)
	pushq	$273
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$1, %ecx
	pushq	$273
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u(%rip), %edx
	movl	$-1, %ecx
	pushq	$273
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movl	136(%rsp), %esi
	movq	128(%rsp), %rdi
	call	stencil_val
	movl	68(%rsp), %esi
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rsi, %rdx
	movq	%rsi, 88(%rsp)
	salq	$32, %rdx
	orq	%rdx, %rbx
	shrq	$32, %rdx
	movq	%rbx, 72(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	pushq	$273
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$1, %r8d
	pushq	$273
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	u+4(%rip), %edx
	movl	$-1, %r8d
	pushq	$273
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.43, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.43+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L6996
.L6891:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L6888
	movslq	u(%rip), %rcx
	movq	24(%rax), %r14
	leal	-1(%rdx), %ebx
	movl	$1, %ebp
	movq	32(%rax), %rax
	salq	$4, %rbx
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rcx,8), %r11
	movslq	32(%rsp), %rcx
	leaq	16(%rax), %rsi
	leaq	8(,%rcx,8), %r13
	movslq	u+4(%rip), %rcx
	addq	%rsi, %rbx
	leaq	8(,%rcx,8), %r10
	movslq	36(%rsp), %rcx
	leaq	8(,%rcx,8), %r12
	jmp	.L6894
	.p2align 4,,10
	.p2align 3
.L6997:
	addq	$16, %rsi
.L6894:
	movslq	8(%rax), %rdx
	movl	%ebp, %r15d
	pxor	%xmm1, %xmm1
	movapd	%xmm3, %xmm0
	movq	%rdx, %rcx
	movq	(%r14,%rdx,8), %rdx
	sall	%cl, %r15d
	cvtsi2sdl	%r15d, %xmm1
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	movslq	(%rax), %rdx
	movslq	4(%rax), %rax
	divsd	%xmm1, %xmm0
	addq	$1, %rdx
	leaq	0(,%rdx,8), %r9
	movq	(%rdi,%rdx,8), %rdx
	leaq	0(,%rax,8), %r8
	movq	-8(%rdi,%r9), %r15
	movq	-16(%rdi,%r9), %rdi
	movq	(%rdx,%rax,8), %rdx
	movq	(%r15,%rax,8), %rcx
	movq	(%rdi,%rax,8), %rax
	movsd	(%rdx,%r11), %xmm1
	movq	8(%r15,%r8), %rdx
	subsd	(%rax,%r11), %xmm1
	movq	-8(%r15,%r8), %rax
	mulsd	L0(%rip), %xmm0
	addsd	%xmm0, %xmm0
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%r13)
	movsd	(%rdx,%r10), %xmm1
	subsd	(%rax,%r10), %xmm1
	movq	%rsi, %rax
	divsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%r12)
	cmpq	%rsi, %rbx
	jne	.L6997
	jmp	.L6888
	.p2align 4,,10
	.p2align 3
.L6989:
	movsd	0(%r13,%rbp), %xmm10
	subsd	%xmm11, %xmm10
	jmp	.L6909
	.p2align 4,,10
	.p2align 3
.L6990:
	movsd	(%r9,%rbx), %xmm8
	subsd	%xmm10, %xmm8
	jmp	.L6919
	.p2align 4,,10
	.p2align 3
.L6988:
	call	update_cache_f
	movq	grid(%rip), %r12
	jmp	.L6898
	.p2align 4,,10
	.p2align 3
.L6992:
	movsd	%xmm5, 16(%rsp)
	movsd	%xmm4, 8(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r13
	movsd	16(%rsp), %xmm5
	movsd	8(%rsp), %xmm4
	jmp	.L6922
	.p2align 4,,10
	.p2align 3
.L6996:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L6891
	.cfi_endproc
.LFE316:
	.size	prediction, .-prediction
	.p2align 4
	.type	advection_term, @function
advection_term:
.LFB318:
	.cfi_startproc
	cmpb	$0, stokes(%rip)
	je	.L7004
	xorl	%eax, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L7004:
	subq	$168, %rsp
	.cfi_def_cfa_offset 176
	xorl	%eax, %eax
	call	prediction
	movl	pf(%rip), %eax
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	movsd	.LC5(%rip), %xmm0
	mulsd	dt(%rip), %xmm0
	movl	%eax, 128(%rsp)
	movq	alpha(%rip), %rax
	movq	%rax, 132(%rsp)
	movl	mgpf+32(%rip), %eax
	movsd	%xmm0, 144(%rsp)
	movl	%eax, 152(%rsp)
	pushq	152(%rsp)
	.cfi_def_cfa_offset 192
	pushq	152(%rsp)
	.cfi_def_cfa_offset 200
	pushq	152(%rsp)
	.cfi_def_cfa_offset 208
	pushq	152(%rsp)
	.cfi_def_cfa_offset 216
	pushq	uf(%rip)
	.cfi_def_cfa_offset 224
	leaq	48(%rsp), %rdi
	call	project
	movq	80(%rsp), %rax
	movsd	dt(%rip), %xmm0
	movq	$-1, 104(%rsp)
	movdqu	48(%rsp), %xmm1
	movdqu	64(%rsp), %xmm2
	movq	$-1, 120(%rsp)
	movq	%rax, mgpf+32(%rip)
	movq	u(%rip), %rax
	movsd	%xmm0, 144(%rsp)
	movq	%rax, 96(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movq	uf(%rip), %rax
	movaps	%xmm1, mgpf(%rip)
	movq	%rax, 136(%rsp)
	movq	g(%rip), %rax
	movaps	%xmm2, mgpf+16(%rip)
	movq	%rax, 112(%rsp)
	leaq	112(%rsp), %rax
	movq	%rax, 152(%rsp)
	addq	$48, %rsp
	.cfi_def_cfa_offset 176
	pushq	104(%rsp)
	.cfi_def_cfa_offset 184
	pushq	104(%rsp)
	.cfi_def_cfa_offset 192
	pushq	104(%rsp)
	.cfi_def_cfa_offset 200
	pushq	104(%rsp)
	.cfi_def_cfa_offset 208
	call	advection
	xorl	%eax, %eax
	addq	$200, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE318:
	.size	advection_term, .-advection_term
	.section	.rodata.str1.1
.LC286:
	.string	"gf"
	.text
	.p2align 4
	.globl	centered_gradient
	.type	centered_gradient, @function
centered_gradient:
.LFB324:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movq	%rsi, %rax
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	sarq	$32, %rax
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%edi, %rbx
	movl	$.LC286, %edi
	subq	$120, %rsp
	.cfi_def_cfa_offset 176
	movq	%rsi, 24(%rsp)
	movq	%rax, 32(%rsp)
	call	new_face_vector
	movq	baseblock(%rip), %rdx
	movq	%rax, 8(%rsp)
	sarq	$32, %rax
	movq	%rax, 16(%rsp)
	testq	%rdx, %rdx
	je	.L7009
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7009
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7010:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7010
.L7009:
	movq	$0, 96(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	orl	$1, _loop.41+16(%rip)
	movl	$0, 112(%rsp)
	pushq	$396
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	40(%rsp), %r15
	movl	%r15d, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	a(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	alpha(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %ecx
	movl	%ebx, %edx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	orl	$2, _loop.41+16(%rip)
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	movq	%r15, %rax
	pushq	$396
	.cfi_def_cfa_offset 192
	shrq	$32, %rax
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	movq	%rax, %rdx
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	a+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	alpha+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$-1, %r8d
	movl	%ebx, %edx
	pushq	$396
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.41, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.41+12(%rip)
	cmpl	$65535, %eax
	jle	.L7007
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %r9
	movslq	a(%rip), %rsi
	movslq	alpha(%rip), %rcx
	movsd	-524288(%rdx,%rax,8), %xmm3
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rdx,%rax,8), %xmm4
	movzbl	128(%r9), %eax
	cmpl	$65535, %esi
	jle	.L7148
	movsd	-524288(%rdx,%rsi,8), %xmm5
	movslq	a+4(%rip), %rsi
	movsd	-524288(%rdx,%rsi,8), %xmm6
	cmpl	$65535, %ecx
	jg	.L7149
	testb	%al, %al
	jne	.L7150
.L7031:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L7020
	movslq	alpha(%rip), %rdx
	leaq	8(,%rbx,8), %r10
	movq	48(%r9), %rdi
	movl	$1, %r12d
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rdx,8), %r14
	movslq	8(%rsp), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	alpha+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 40(%rsp)
	movq	16(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 48(%rsp)
	leal	-1(%rax), %ebx
	leaq	16(%rdi), %rax
	salq	$4, %rbx
	addq	%rax, %rbx
	jmp	.L7034
	.p2align 4,,10
	.p2align 3
.L7151:
	addq	$16, %rax
.L7034:
	movslq	8(%rdi), %rcx
	movl	%r12d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm7
	movslq	(%rdi), %rsi
	movslq	4(%rdi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm1
	movl	12(%rdi), %edi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm7
	mulsd	%xmm7, %xmm1
	testb	$1, %dil
	je	.L7032
	movq	24(%r9), %r11
	movslq	%ecx, %r8
	movslq	%esi, %r13
	movq	(%r11,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%edx, %r8
	movq	0(%rbp,%r13,8), %r11
	movq	-8(%rbp,%r13,8), %rbp
	movq	(%r11,%r8,8), %r11
	movq	0(%rbp,%r8,8), %r8
	movsd	(%r11,%r10), %xmm0
	subsd	(%r8,%r10), %xmm0
	mulsd	(%r11,%r14), %xmm0
	divsd	%xmm1, %xmm0
	movapd	%xmm5, %xmm1
	mulsd	%xmm3, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r11,%r15)
	mulsd	L0(%rip), %xmm7
	movapd	%xmm7, %xmm1
.L7032:
	andl	$2, %edi
	je	.L7033
	movq	24(%r9), %rdi
	movq	(%rdi,%rcx,8), %rcx
	movq	40(%rsp), %rdi
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rsi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%r10), %xmm0
	subsd	(%rdx,%r10), %xmm0
	mulsd	(%rcx,%rdi), %xmm0
	movq	48(%rsp), %rdi
	divsd	%xmm1, %xmm0
	movapd	%xmm6, %xmm1
	mulsd	%xmm4, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rdi)
.L7033:
	movq	%rax, %rdi
	cmpq	%rax, %rbx
	jne	.L7151
	.p2align 4,,10
	.p2align 3
.L7020:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7016
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7016
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7050:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7050
.L7016:
	movq	$0, 96(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 104(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	pushq	$405
	.cfi_def_cfa_offset 192
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	56(%rsp), %rbx
	movl	%ebx, %edx
	shrq	$32, %rbx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%ecx, %ecx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	40(%rsp), %r15
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	movl	%r15d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	%r15d, %edx
	movl	$1, %ecx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm(%rip), %edx
	movl	$1, %ecx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$405
	.cfi_def_cfa_offset 192
	xorl	%r9d, %r9d
	movq	%rbx, %rdx
	pushq	$.LC147
	.cfi_def_cfa_offset 200
	pushq	$0
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	shrq	$32, %r15
	pushq	$0
	.cfi_def_cfa_offset 192
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	$1, %r8d
	movl	%r15d, %edx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 184
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 192
	movl	fm+4(%rip), %edx
	movl	$1, %r8d
	pushq	$405
	.cfi_def_cfa_offset 200
	pushq	$.LC147
	.cfi_def_cfa_offset 208
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 176
	movl	$_loop.40, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.40+12(%rip)
	cmpl	$65535, %eax
	jg	.L7152
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L7153
.L7051:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7054
	movslq	8(%rsp), %rcx
	movq	24(%rax), %r13
	leal	-1(%rdx), %ebp
	pxor	%xmm2, %xmm2
	movq	16(%rsp), %rdi
	movq	32(%rax), %rax
	salq	$4, %rbp
	leaq	8(,%rcx,8), %rbx
	movslq	fm(%rip), %rcx
	leaq	8(,%rdi,8), %r10
	movq	32(%rsp), %rdi
	leaq	8(,%rcx,8), %r11
	movslq	24(%rsp), %rcx
	leaq	8(,%rdi,8), %r12
	leaq	8(,%rcx,8), %r14
	movslq	fm+4(%rip), %rcx
	leaq	8(,%rcx,8), %r9
	leaq	16(%rax), %rcx
	addq	%rcx, %rbp
	jmp	.L7053
	.p2align 4,,10
	.p2align 3
.L7154:
	addq	$16, %rcx
.L7053:
	movslq	8(%rax), %rdx
	movslq	(%rax), %r8
	movq	0(%r13,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	movslq	4(%rax), %rdx
	movq	(%rdi,%r8,8), %rsi
	movq	8(%rdi,%r8,8), %rdi
	movq	(%rsi,%rdx,8), %rax
	movq	(%rdi,%rdx,8), %rdi
	movq	8(%rsi,%rdx,8), %rdx
	movsd	(%rax,%r11), %xmm1
	addsd	(%rdi,%r11), %xmm1
	movsd	(%rax,%rbx), %xmm0
	addsd	(%rdi,%rbx), %xmm0
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r14)
	movsd	(%rax,%r9), %xmm1
	addsd	(%rdx,%r9), %xmm1
	movsd	(%rax,%r10), %xmm0
	addsd	(%rdx,%r10), %xmm0
	addsd	%xmm2, %xmm1
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r12)
	movq	%rcx, %rax
	cmpq	%rcx, %rbp
	jne	.L7154
.L7054:
	movl	8(%rsp), %eax
	leaq	96(%rsp), %rdi
	movq	$-1, 104(%rsp)
	movl	%eax, 96(%rsp)
	movl	16(%rsp), %eax
	movl	%eax, 100(%rsp)
	call	delete
	addq	$120, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7007:
	.cfi_restore_state
	movq	grid(%rip), %rax
	movslq	a(%rip), %rcx
	movslq	alpha(%rip), %rdx
	movzbl	128(%rax), %esi
	cmpl	$65535, %ecx
	jle	.L7155
	movq	_constant(%rip), %rdi
	movsd	-524288(%rdi,%rcx,8), %xmm4
	movslq	a+4(%rip), %rcx
	movsd	-524288(%rdi,%rcx,8), %xmm5
	cmpl	$65535, %edx
	jg	.L7156
	testb	%sil, %sil
	jne	.L7157
.L7027:
	movl	56(%rax), %edx
	testl	%edx, %edx
	jle	.L7020
	movslq	fm(%rip), %rcx
	leaq	8(,%rbx,8), %r11
	movq	48(%rax), %rdi
	movl	$1, %r12d
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rcx,8), %r14
	movslq	alpha(%rip), %rcx
	leaq	8(,%rcx,8), %r15
	movslq	8(%rsp), %rcx
	leaq	8(,%rcx,8), %rbx
	movslq	fm+4(%rip), %rcx
	movq	%rbx, 40(%rsp)
	leaq	8(,%rcx,8), %rbx
	movslq	alpha+4(%rip), %rcx
	movq	%rbx, 48(%rsp)
	leaq	8(,%rcx,8), %rbx
	movq	%rbx, 56(%rsp)
	movq	16(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 64(%rsp)
	leal	-1(%rdx), %ebx
	leaq	16(%rdi), %rdx
	salq	$4, %rbx
	addq	%rdx, %rbx
	jmp	.L7030
	.p2align 4,,10
	.p2align 3
.L7158:
	addq	$16, %rdx
.L7030:
	movslq	8(%rdi), %rcx
	movl	%r12d, %r9d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm1
	movslq	(%rdi), %r8
	movslq	4(%rdi), %rsi
	sall	%cl, %r9d
	movsd	L0(%rip), %xmm3
	movl	12(%rdi), %edi
	cvtsi2sdl	%r9d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm3
	testb	$1, %dil
	je	.L7028
	movq	24(%rax), %r10
	movslq	%ecx, %r9
	movslq	%r8d, %r13
	movq	(%r10,%r9,8), %r9
	movslq	%esi, %r10
	movq	(%r9), %r9
	movq	16(%r9), %rbp
	movq	0(%rbp,%r13,8), %r9
	movq	-8(%rbp,%r13,8), %rbp
	movq	(%r9,%r10,8), %r9
	movq	0(%rbp,%r10,8), %r10
	movsd	(%r9,%r11), %xmm0
	subsd	(%r10,%r11), %xmm0
	mulsd	(%r9,%r15), %xmm0
	movsd	(%r9,%r14), %xmm6
	movq	40(%rsp), %r10
	mulsd	%xmm4, %xmm6
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm6
	movsd	%xmm6, (%r9,%r10)
	movsd	L0(%rip), %xmm3
	mulsd	%xmm1, %xmm3
.L7028:
	andl	$2, %edi
	je	.L7029
	movq	24(%rax), %rdi
	movq	48(%rsp), %r10
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r8,8), %rdi
	movq	(%rdi,%rsi,8), %rcx
	movq	-8(%rdi,%rsi,8), %rsi
	movq	56(%rsp), %rdi
	movsd	(%rcx,%r11), %xmm0
	subsd	(%rsi,%r11), %xmm0
	mulsd	(%rcx,%rdi), %xmm0
	movsd	(%rcx,%r10), %xmm1
	movq	64(%rsp), %rdi
	mulsd	%xmm5, %xmm1
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rdi)
.L7029:
	movq	%rdx, %rdi
	cmpq	%rdx, %rbx
	jne	.L7158
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7155:
	cmpl	$65535, %edx
	jg	.L7012
	testb	%sil, %sil
	jne	.L7159
.L7013:
	movl	56(%rax), %edx
	testl	%edx, %edx
	jle	.L7020
	movslq	fm(%rip), %rcx
	leaq	8(,%rbx,8), %r11
	movq	48(%rax), %r8
	movl	$1, %ebp
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rcx,8), %r13
	movslq	a(%rip), %rcx
	leaq	8(,%rcx,8), %rdi
	movslq	alpha(%rip), %rcx
	movq	%rdi, 48(%rsp)
	leaq	8(,%rcx,8), %rdi
	movslq	8(%rsp), %rcx
	movq	%rdi, 40(%rsp)
	leaq	8(,%rcx,8), %rbx
	movslq	fm+4(%rip), %rcx
	movq	%rbx, 56(%rsp)
	leaq	8(,%rcx,8), %r12
	movslq	a+4(%rip), %rcx
	movq	%r12, 88(%rsp)
	leaq	8(,%rcx,8), %rbx
	movslq	alpha+4(%rip), %rcx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rcx,8), %rbx
	leal	-1(%rdx), %ecx
	movq	%rbx, 72(%rsp)
	movq	16(%rsp), %rbx
	salq	$4, %rcx
	leaq	16(%r8), %rdx
	leaq	(%rcx,%rdx), %r15
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 80(%rsp)
	jmp	.L7019
	.p2align 4,,10
	.p2align 3
.L7160:
	addq	$16, %rdx
.L7019:
	movslq	8(%r8), %rcx
	movl	%ebp, %r9d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm4
	movslq	(%r8), %rdi
	movslq	4(%r8), %rsi
	sall	%cl, %r9d
	movsd	L0(%rip), %xmm3
	movl	12(%r8), %r8d
	cvtsi2sdl	%r9d, %xmm0
	divsd	%xmm0, %xmm4
	mulsd	%xmm4, %xmm3
	testb	$1, %r8b
	je	.L7017
	movq	24(%rax), %r10
	movslq	%ecx, %r9
	movslq	%edi, %r14
	movq	48(%rsp), %r12
	movq	(%r10,%r9,8), %r9
	movslq	%esi, %r10
	movq	(%r9), %r9
	movq	16(%r9), %rbx
	movq	(%rbx,%r14,8), %r9
	movq	-8(%rbx,%r14,8), %rbx
	movq	(%r9,%r10,8), %r9
	movq	(%rbx,%r10,8), %r10
	movq	40(%rsp), %rbx
	movsd	(%r9,%r13), %xmm0
	movsd	(%r9,%r12), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	(%r9,%r11), %xmm0
	subsd	(%r10,%r11), %xmm0
	mulsd	(%r9,%rbx), %xmm0
	movq	56(%rsp), %rbx
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r9,%rbx)
	mulsd	L0(%rip), %xmm4
	movapd	%xmm4, %xmm3
.L7017:
	andl	$2, %r8d
	je	.L7018
	movq	24(%rax), %r8
	movq	88(%rsp), %rbx
	movq	(%r8,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movq	(%rcx,%rsi,8), %rdi
	movq	-8(%rcx,%rsi,8), %rcx
	movsd	(%rdi,%rbx), %xmm0
	movq	64(%rsp), %rbx
	movsd	(%rdi,%rbx), %xmm1
	movq	72(%rsp), %rbx
	mulsd	%xmm0, %xmm1
	movsd	(%rdi,%r11), %xmm0
	subsd	(%rcx,%r11), %xmm0
	mulsd	(%rdi,%rbx), %xmm0
	movq	80(%rsp), %rbx
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rdi,%rbx)
.L7018:
	movq	%rdx, %r8
	cmpq	%rdx, %r15
	jne	.L7160
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7148:
	cmpl	$65535, %ecx
	jg	.L7022
	testb	%al, %al
	jne	.L7161
.L7023:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L7020
	movslq	a(%rip), %rdx
	leaq	8(,%rbx,8), %r11
	movq	48(%r9), %rsi
	movl	$1, %r12d
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rdx,8), %r14
	movslq	alpha(%rip), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	8(%rsp), %rdx
	leaq	8(,%rdx,8), %rbx
	movslq	a+4(%rip), %rdx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	alpha+4(%rip), %rdx
	movq	%rbx, 40(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 48(%rsp)
	movq	16(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 56(%rsp)
	leal	-1(%rax), %ebx
	leaq	16(%rsi), %rax
	salq	$4, %rbx
	addq	%rax, %rbx
	jmp	.L7026
	.p2align 4,,10
	.p2align 3
.L7162:
	addq	$16, %rax
.L7026:
	movslq	8(%rsi), %rcx
	movl	%r12d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm5
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm5
	testb	$1, %sil
	je	.L7024
	movq	24(%r9), %r10
	movslq	%ecx, %r8
	movslq	%edi, %r13
	movq	(%r10,%r8,8), %r8
	movslq	%edx, %r10
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movq	0(%rbp,%r13,8), %r8
	movq	-8(%rbp,%r13,8), %rbp
	movq	(%r8,%r10,8), %r8
	movq	0(%rbp,%r10,8), %r10
	movsd	(%r8,%r11), %xmm0
	subsd	(%r10,%r11), %xmm0
	mulsd	(%r8,%r15), %xmm0
	movsd	(%r8,%r14), %xmm6
	movq	64(%rsp), %r10
	mulsd	%xmm3, %xmm6
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm6
	movsd	%xmm6, (%r8,%r10)
	movsd	L0(%rip), %xmm5
	mulsd	%xmm1, %xmm5
.L7024:
	andl	$2, %esi
	je	.L7025
	movq	24(%r9), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rsi
	movq	40(%rsp), %rdi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%rdi), %xmm1
	movq	48(%rsp), %rdi
	movsd	(%rcx,%r11), %xmm0
	subsd	(%rdx,%r11), %xmm0
	mulsd	(%rcx,%rdi), %xmm0
	movq	56(%rsp), %rdi
	mulsd	%xmm4, %xmm1
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rdi)
.L7025:
	movq	%rax, %rsi
	cmpq	%rax, %rbx
	jne	.L7162
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7012:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rdx,8), %xmm3
	movslq	alpha+4(%rip), %rdx
	movsd	-524288(%rcx,%rdx,8), %xmm4
	testb	%sil, %sil
	jne	.L7163
.L7060:
	movl	56(%rax), %edx
	testl	%edx, %edx
	jle	.L7020
	movslq	fm(%rip), %rcx
	leaq	8(,%rbx,8), %r11
	movsd	.LC10(%rip), %xmm2
	movl	$1, %r14d
	leaq	8(,%rcx,8), %rbp
	movslq	a(%rip), %rcx
	movq	%rbp, 72(%rsp)
	leaq	8(,%rcx,8), %rdi
	movslq	8(%rsp), %rcx
	movq	%rdi, 40(%rsp)
	movq	48(%rax), %rdi
	leaq	8(,%rcx,8), %rbx
	movslq	fm+4(%rip), %rcx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rcx,8), %r12
	movslq	a+4(%rip), %rcx
	leaq	8(,%rcx,8), %rbx
	leal	-1(%rdx), %ecx
	movq	%rbx, 48(%rsp)
	movq	16(%rsp), %rbx
	salq	$4, %rcx
	leaq	16(%rdi), %rdx
	leaq	(%rcx,%rdx), %r15
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 56(%rsp)
	jmp	.L7037
	.p2align 4,,10
	.p2align 3
.L7164:
	addq	$16, %rdx
.L7037:
	movslq	8(%rdi), %rcx
	movl	%r14d, %r9d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm6
	movslq	(%rdi), %r8
	movslq	4(%rdi), %rsi
	sall	%cl, %r9d
	movsd	L0(%rip), %xmm5
	movl	12(%rdi), %edi
	cvtsi2sdl	%r9d, %xmm0
	divsd	%xmm0, %xmm6
	mulsd	%xmm6, %xmm5
	testb	$1, %dil
	je	.L7035
	movq	24(%rax), %r10
	movslq	%ecx, %r9
	movslq	%r8d, %r13
	movq	72(%rsp), %rbp
	movq	(%r10,%r9,8), %r9
	movslq	%esi, %r10
	movq	(%r9), %r9
	movq	16(%r9), %rbx
	movq	(%rbx,%r13,8), %r9
	movq	-8(%rbx,%r13,8), %rbx
	movq	(%r9,%r10,8), %r9
	movq	(%rbx,%r10,8), %r10
	movq	64(%rsp), %rbx
	movsd	(%r9,%rbp), %xmm0
	movq	40(%rsp), %rbp
	movsd	(%r9,%rbp), %xmm1
	mulsd	%xmm0, %xmm1
	movsd	(%r9,%r11), %xmm0
	subsd	(%r10,%r11), %xmm0
	mulsd	%xmm3, %xmm0
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r9,%rbx)
	mulsd	L0(%rip), %xmm6
	movapd	%xmm6, %xmm5
.L7035:
	andl	$2, %edi
	je	.L7036
	movq	24(%rax), %rdi
	movq	48(%rsp), %rbx
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r8,8), %rdi
	movq	(%rdi,%rsi,8), %rcx
	movq	-8(%rdi,%rsi,8), %rsi
	movsd	(%rcx,%r12), %xmm0
	movsd	(%rcx,%rbx), %xmm1
	movq	56(%rsp), %rbx
	mulsd	%xmm0, %xmm1
	movsd	(%rcx,%r11), %xmm0
	subsd	(%rsi,%r11), %xmm0
	mulsd	%xmm4, %xmm0
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rbx)
.L7036:
	movq	%rdx, %rdi
	cmpq	%rdx, %r15
	jne	.L7164
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7022:
	movsd	-524288(%rdx,%rcx,8), %xmm6
	movslq	alpha+4(%rip), %rcx
	movsd	-524288(%rdx,%rcx,8), %xmm7
	testb	%al, %al
	jne	.L7165
.L7064:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L7020
	movslq	a(%rip), %rdx
	leaq	8(,%rbx,8), %r10
	movq	48(%r9), %rsi
	movl	$1, %r12d
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rdx,8), %r14
	movslq	8(%rsp), %rdx
	leaq	8(,%rdx,8), %r15
	movslq	a+4(%rip), %rdx
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 40(%rsp)
	movq	16(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 48(%rsp)
	leal	-1(%rax), %ebx
	leaq	16(%rsi), %rax
	salq	$4, %rbx
	addq	%rax, %rbx
	jmp	.L7040
	.p2align 4,,10
	.p2align 3
.L7166:
	addq	$16, %rax
.L7040:
	movslq	8(%rsi), %rcx
	movl	%r12d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm1
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm5
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm5
	testb	$1, %sil
	je	.L7038
	movq	24(%r9), %r11
	movslq	%ecx, %r8
	movslq	%edi, %r13
	movq	(%r11,%r8,8), %r8
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movslq	%edx, %r8
	movq	0(%rbp,%r13,8), %r11
	movq	-8(%rbp,%r13,8), %rbp
	movq	(%r11,%r8,8), %r11
	movq	0(%rbp,%r8,8), %r8
	movsd	(%r11,%r10), %xmm0
	subsd	(%r8,%r10), %xmm0
	movsd	(%r11,%r14), %xmm8
	mulsd	%xmm6, %xmm0
	mulsd	%xmm3, %xmm8
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm8
	movsd	%xmm8, (%r11,%r15)
	movsd	L0(%rip), %xmm5
	mulsd	%xmm1, %xmm5
.L7038:
	andl	$2, %esi
	je	.L7039
	movq	24(%r9), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rsi
	movq	40(%rsp), %rdi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%r10), %xmm0
	subsd	(%rdx,%r10), %xmm0
	movsd	(%rcx,%rdi), %xmm1
	movq	48(%rsp), %rdi
	mulsd	%xmm7, %xmm0
	mulsd	%xmm4, %xmm1
	divsd	%xmm5, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rdi)
.L7039:
	movq	%rax, %rsi
	cmpq	%rax, %rbx
	jne	.L7166
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7152:
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm2
	movslq	fm+4(%rip), %rax
	movsd	-524288(%rdx,%rax,8), %xmm1
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L7167
.L7055:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7054
	movslq	8(%rsp), %rcx
	addsd	%xmm2, %xmm2
	movq	24(%rax), %r8
	leal	-1(%rdx), %edi
	addsd	%xmm1, %xmm1
	movq	32(%rax), %rax
	pxor	%xmm0, %xmm0
	salq	$4, %rdi
	movq	16(%rsp), %rbx
	leaq	8(,%rcx,8), %rsi
	movslq	24(%rsp), %rcx
	leaq	16(%rax), %rdx
	addsd	%xmm0, %xmm2
	leaq	8(,%rcx,8), %r9
	addsd	%xmm0, %xmm1
	addq	%rdx, %rdi
	leaq	8(,%rbx,8), %rcx
	movq	32(%rsp), %rbx
	leaq	8(,%rbx,8), %r10
	jmp	.L7056
	.p2align 4,,10
	.p2align 3
.L7168:
	addq	$16, %rdx
.L7056:
	movslq	8(%rax), %r11
	movslq	(%rax), %r12
	movq	(%r8,%r11,8), %r11
	movq	(%r11), %r11
	movq	16(%r11), %rbp
	movslq	4(%rax), %r11
	movq	0(%rbp,%r12,8), %rbx
	movq	8(%rbp,%r12,8), %rbp
	movq	(%rbx,%r11,8), %rax
	movq	0(%rbp,%r11,8), %rbp
	movq	8(%rbx,%r11,8), %r11
	movsd	0(%rbp,%rsi), %xmm0
	addsd	(%rax,%rsi), %xmm0
	divsd	%xmm2, %xmm0
	movsd	%xmm0, (%rax,%r9)
	movsd	(%r11,%rcx), %xmm0
	addsd	(%rax,%rcx), %xmm0
	divsd	%xmm1, %xmm0
	movsd	%xmm0, (%rax,%r10)
	movq	%rdx, %rax
	cmpq	%rdx, %rdi
	jne	.L7168
	jmp	.L7054
	.p2align 4,,10
	.p2align 3
.L7149:
	movsd	-524288(%rdx,%rcx,8), %xmm7
	movslq	alpha+4(%rip), %rcx
	movsd	-524288(%rdx,%rcx,8), %xmm8
	testb	%al, %al
	jne	.L7169
.L7044:
	movl	56(%r9), %eax
	testl	%eax, %eax
	jle	.L7020
	movq	48(%r9), %rsi
	leal	-1(%rax), %r11d
	movslq	8(%rsp), %rdx
	leaq	8(,%rbx,8), %r10
	movq	16(%rsp), %rbx
	salq	$4, %r11
	movsd	.LC10(%rip), %xmm2
	movl	$1, %r12d
	leaq	16(%rsi), %rax
	leaq	8(,%rdx,8), %r14
	leaq	8(,%rbx,8), %r13
	addq	%rax, %r11
	jmp	.L7047
	.p2align 4,,10
	.p2align 3
.L7170:
	addq	$16, %rax
.L7047:
	movslq	8(%rsi), %rcx
	movl	%r12d, %r8d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm9
	movslq	(%rsi), %rdi
	movslq	4(%rsi), %rdx
	sall	%cl, %r8d
	movsd	L0(%rip), %xmm1
	movl	12(%rsi), %esi
	cvtsi2sdl	%r8d, %xmm0
	divsd	%xmm0, %xmm9
	mulsd	%xmm9, %xmm1
	testb	$1, %sil
	je	.L7045
	movq	24(%r9), %rbx
	movslq	%ecx, %r8
	movslq	%edi, %r15
	movq	(%rbx,%r8,8), %r8
	movslq	%edx, %rbx
	movq	(%r8), %r8
	movq	16(%r8), %rbp
	movq	0(%rbp,%r15,8), %r8
	movq	-8(%rbp,%r15,8), %rbp
	movq	(%r8,%rbx,8), %r8
	movq	0(%rbp,%rbx,8), %rbx
	movsd	(%r8,%r10), %xmm0
	subsd	(%rbx,%r10), %xmm0
	mulsd	%xmm7, %xmm0
	divsd	%xmm1, %xmm0
	movapd	%xmm5, %xmm1
	mulsd	%xmm3, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%r8,%r14)
	movsd	L0(%rip), %xmm1
	mulsd	%xmm9, %xmm1
.L7045:
	andl	$2, %esi
	je	.L7046
	movq	24(%r9), %rsi
	movq	(%rsi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%rdi,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	-8(%rsi,%rdx,8), %rdx
	movsd	(%rcx,%r10), %xmm0
	subsd	(%rdx,%r10), %xmm0
	mulsd	%xmm8, %xmm0
	divsd	%xmm1, %xmm0
	movapd	%xmm6, %xmm1
	mulsd	%xmm4, %xmm1
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%r13)
.L7046:
	movq	%rax, %rsi
	cmpq	%rax, %r11
	jne	.L7170
	jmp	.L7020
	.p2align 4,,10
	.p2align 3
.L7153:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L7051
	.p2align 4,,10
	.p2align 3
.L7167:
	movsd	%xmm1, 48(%rsp)
	movsd	%xmm2, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	48(%rsp), %xmm1
	movsd	40(%rsp), %xmm2
	jmp	.L7055
	.p2align 4,,10
	.p2align 3
.L7169:
	movsd	%xmm4, 80(%rsp)
	movsd	%xmm3, 72(%rsp)
	movsd	%xmm6, 64(%rsp)
	movsd	%xmm5, 56(%rsp)
	movsd	%xmm8, 48(%rsp)
	movsd	%xmm7, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	80(%rsp), %xmm4
	movsd	72(%rsp), %xmm3
	movsd	64(%rsp), %xmm6
	movsd	56(%rsp), %xmm5
	movsd	48(%rsp), %xmm8
	movsd	40(%rsp), %xmm7
	jmp	.L7044
	.p2align 4,,10
	.p2align 3
.L7156:
	movsd	-524288(%rdi,%rdx,8), %xmm6
	movslq	alpha+4(%rip), %rdx
	movsd	-524288(%rdi,%rdx,8), %xmm7
	testb	%sil, %sil
	jne	.L7171
.L7058:
	movl	56(%rax), %edx
	testl	%edx, %edx
	jle	.L7020
	movslq	fm(%rip), %rcx
	leaq	8(,%rbx,8), %r10
	movq	48(%rax), %rdi
	movl	$1, %ebp
	movsd	.LC10(%rip), %xmm2
	leaq	8(,%rcx,8), %r14
	movslq	8(%rsp), %rcx
	leaq	8(,%rcx,8), %r15
	movslq	fm+4(%rip), %rcx
	leaq	8(,%rcx,8), %rbx
	leal	-1(%rdx), %ecx
	movq	%rbx, 40(%rsp)
	movq	16(%rsp), %rbx
	salq	$4, %rcx
	leaq	16(%rdi), %rdx
	leaq	(%rcx,%rdx), %r13
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 48(%rsp)
	jmp	.L7043
	.p2align 4,,10
	.p2align 3
.L7172:
	addq	$16, %rdx
.L7043:
	movslq	8(%rdi), %rcx
	movl	%ebp, %r9d
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm1
	movslq	(%rdi), %r8
	movslq	4(%rdi), %rsi
	sall	%cl, %r9d
	movsd	L0(%rip), %xmm3
	movl	12(%rdi), %edi
	cvtsi2sdl	%r9d, %xmm0
	divsd	%xmm0, %xmm1
	mulsd	%xmm1, %xmm3
	testb	$1, %dil
	je	.L7041
	movq	24(%rax), %r11
	movslq	%ecx, %r9
	movslq	%r8d, %r12
	movq	(%r11,%r9,8), %r9
	movq	(%r9), %r9
	movq	16(%r9), %rbx
	movslq	%esi, %r9
	movq	(%rbx,%r12,8), %r11
	movq	-8(%rbx,%r12,8), %rbx
	movq	(%r11,%r9,8), %r11
	movq	(%rbx,%r9,8), %r9
	movsd	(%r11,%r10), %xmm0
	subsd	(%r9,%r10), %xmm0
	movsd	(%r11,%r14), %xmm8
	mulsd	%xmm6, %xmm0
	mulsd	%xmm4, %xmm8
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm8
	movsd	%xmm8, (%r11,%r15)
	movsd	L0(%rip), %xmm3
	mulsd	%xmm1, %xmm3
.L7041:
	andl	$2, %edi
	je	.L7042
	movq	24(%rax), %rdi
	movq	40(%rsp), %rbx
	movq	(%rdi,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	movq	(%rcx,%r8,8), %rdi
	movq	(%rdi,%rsi,8), %rcx
	movq	-8(%rdi,%rsi,8), %rsi
	movsd	(%rcx,%r10), %xmm0
	subsd	(%rsi,%r10), %xmm0
	movsd	(%rcx,%rbx), %xmm1
	movq	48(%rsp), %rbx
	mulsd	%xmm7, %xmm0
	mulsd	%xmm5, %xmm1
	divsd	%xmm3, %xmm0
	subsd	%xmm0, %xmm1
	movsd	%xmm1, (%rcx,%rbx)
.L7042:
	movq	%rdx, %rdi
	cmpq	%rdx, %r13
	jne	.L7172
	jmp	.L7020
.L7159:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L7013
.L7161:
	movsd	%xmm4, 48(%rsp)
	movsd	%xmm3, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	48(%rsp), %xmm4
	movsd	40(%rsp), %xmm3
	jmp	.L7023
.L7157:
	movsd	%xmm5, 48(%rsp)
	movsd	%xmm4, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	48(%rsp), %xmm5
	movsd	40(%rsp), %xmm4
	jmp	.L7027
.L7150:
	movsd	%xmm4, 64(%rsp)
	movsd	%xmm3, 56(%rsp)
	movsd	%xmm6, 48(%rsp)
	movsd	%xmm5, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	64(%rsp), %xmm4
	movsd	56(%rsp), %xmm3
	movsd	48(%rsp), %xmm6
	movsd	40(%rsp), %xmm5
	jmp	.L7031
.L7163:
	movsd	%xmm4, 48(%rsp)
	movsd	%xmm3, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	48(%rsp), %xmm4
	movsd	40(%rsp), %xmm3
	jmp	.L7060
.L7165:
	movsd	%xmm4, 64(%rsp)
	movsd	%xmm3, 56(%rsp)
	movsd	%xmm7, 48(%rsp)
	movsd	%xmm6, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r9
	movsd	64(%rsp), %xmm4
	movsd	56(%rsp), %xmm3
	movsd	48(%rsp), %xmm7
	movsd	40(%rsp), %xmm6
	jmp	.L7064
.L7171:
	movsd	%xmm5, 64(%rsp)
	movsd	%xmm4, 56(%rsp)
	movsd	%xmm7, 48(%rsp)
	movsd	%xmm6, 40(%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	64(%rsp), %xmm5
	movsd	56(%rsp), %xmm4
	movsd	48(%rsp), %xmm7
	movsd	40(%rsp), %xmm6
	jmp	.L7058
	.cfi_endproc
.LFE324:
	.size	centered_gradient, .-centered_gradient
	.p2align 4
	.type	projection, @function
projection:
.LFB326:
	.cfi_startproc
	subq	$112, %rsp
	.cfi_def_cfa_offset 120
	movl	p(%rip), %eax
	movsd	dt(%rip), %xmm0
	movl	%eax, 64(%rsp)
	movq	alpha(%rip), %rax
	movsd	%xmm0, 80(%rsp)
	movq	%rax, 68(%rsp)
	movl	mgp+32(%rip), %eax
	movl	%eax, 88(%rsp)
	pushq	88(%rsp)
	.cfi_def_cfa_offset 128
	pushq	88(%rsp)
	.cfi_def_cfa_offset 136
	pushq	88(%rsp)
	.cfi_def_cfa_offset 144
	pushq	88(%rsp)
	.cfi_def_cfa_offset 152
	pushq	uf(%rip)
	.cfi_def_cfa_offset 160
	leaq	48(%rsp), %rdi
	call	project
	movq	80(%rsp), %rax
	movdqu	48(%rsp), %xmm1
	movdqu	64(%rsp), %xmm2
	movl	p(%rip), %edi
	addq	$48, %rsp
	.cfi_def_cfa_offset 112
	movq	g(%rip), %rsi
	movq	%rax, mgp+32(%rip)
	movaps	%xmm1, mgp(%rip)
	movaps	%xmm2, mgp+16(%rip)
	call	centered_gradient
	movsd	dt(%rip), %xmm0
	call	correction
	xorl	%eax, %eax
	addq	$104, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE326:
	.size	projection, .-projection
	.p2align 4
	.globl	line_alpha
	.type	line_alpha, @function
line_alpha:
.LFB331:
	.cfi_startproc
	subq	$40, %rsp
	.cfi_def_cfa_offset 48
	movq	.LC17(%rip), %xmm4
	movapd	%xmm0, %xmm2
	movsd	48(%rsp), %xmm3
	movsd	56(%rsp), %xmm8
	movapd	%xmm3, %xmm5
	andpd	%xmm4, %xmm5
	andpd	%xmm8, %xmm4
	comisd	%xmm4, %xmm5
	jbe	.L7176
	movq	%xmm5, %rax
	movapd	%xmm4, %xmm5
	movq	%rax, %xmm4
.L7176:
	pxor	%xmm6, %xmm6
	comisd	%xmm2, %xmm6
	ja	.L7193
	movsd	.LC10(%rip), %xmm0
	minsd	%xmm2, %xmm0
	movapd	%xmm0, %xmm2
.L7178:
	movsd	.LC5(%rip), %xmm7
	movapd	%xmm5, %xmm1
	mulsd	%xmm7, %xmm1
	movapd	%xmm1, %xmm0
	divsd	%xmm4, %xmm0
	comisd	%xmm2, %xmm0
	jnb	.L7207
	movsd	.LC10(%rip), %xmm9
	movapd	%xmm9, %xmm10
	subsd	%xmm0, %xmm10
	comisd	%xmm2, %xmm10
	jb	.L7204
	mulsd	%xmm2, %xmm4
	movapd	%xmm4, %xmm0
	addsd	%xmm1, %xmm0
.L7183:
	comisd	%xmm3, %xmm6
	jbe	.L7189
	addsd	%xmm3, %xmm0
.L7189:
	comisd	%xmm8, %xmm6
	jbe	.L7191
	addsd	%xmm8, %xmm0
.L7191:
	addsd	%xmm8, %xmm3
	addq	$40, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 8
	mulsd	%xmm7, %xmm3
	subsd	%xmm3, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L7204:
	.cfi_restore_state
	movapd	%xmm5, %xmm1
	addsd	%xmm5, %xmm5
	subsd	%xmm2, %xmm9
	addsd	%xmm4, %xmm1
	mulsd	%xmm4, %xmm5
	mulsd	%xmm9, %xmm5
	ucomisd	%xmm5, %xmm6
	ja	.L7205
	sqrtsd	%xmm5, %xmm5
.L7188:
	subsd	%xmm5, %xmm1
	movapd	%xmm1, %xmm0
	jmp	.L7183
	.p2align 4,,10
	.p2align 3
.L7193:
	movapd	%xmm6, %xmm2
	jmp	.L7178
	.p2align 4,,10
	.p2align 3
.L7207:
	addsd	%xmm2, %xmm2
	movapd	%xmm2, %xmm0
	mulsd	%xmm5, %xmm0
	mulsd	%xmm4, %xmm0
	ucomisd	%xmm0, %xmm6
	ja	.L7203
	sqrtsd	%xmm0, %xmm0
	jmp	.L7183
.L7203:
	movsd	%xmm8, 16(%rsp)
	movsd	%xmm3, 8(%rsp)
	call	sqrt
	movq	.LC5(%rip), %rax
	movsd	8(%rsp), %xmm3
	pxor	%xmm6, %xmm6
	movsd	16(%rsp), %xmm8
	movq	%rax, %xmm7
	jmp	.L7183
.L7205:
	movapd	%xmm5, %xmm0
	movsd	%xmm8, 24(%rsp)
	movsd	%xmm3, 16(%rsp)
	movsd	%xmm1, 8(%rsp)
	call	sqrt
	movq	.LC5(%rip), %rax
	pxor	%xmm6, %xmm6
	movsd	24(%rsp), %xmm8
	movsd	16(%rsp), %xmm3
	movsd	8(%rsp), %xmm1
	movapd	%xmm0, %xmm5
	movq	%rax, %xmm7
	jmp	.L7188
	.cfi_endproc
.LFE331:
	.size	line_alpha, .-line_alpha
	.p2align 4
	.globl	line_area
	.type	line_area, @function
line_area:
.LFB332:
	.cfi_startproc
	movapd	%xmm0, %xmm3
	addsd	%xmm1, %xmm0
	pxor	%xmm4, %xmm4
	mulsd	.LC5(%rip), %xmm0
	comisd	%xmm3, %xmm4
	addsd	%xmm0, %xmm2
	jbe	.L7209
	subsd	%xmm3, %xmm2
	xorpd	.LC1(%rip), %xmm3
.L7209:
	comisd	%xmm1, %xmm4
	jbe	.L7211
	subsd	%xmm1, %xmm2
	xorpd	.LC1(%rip), %xmm1
.L7211:
	comisd	%xmm2, %xmm4
	movapd	%xmm4, %xmm0
	jnb	.L7208
	movapd	%xmm3, %xmm5
	movsd	.LC10(%rip), %xmm0
	addsd	%xmm1, %xmm5
	comisd	%xmm5, %xmm2
	jnb	.L7208
	movsd	.LC64(%rip), %xmm0
	comisd	%xmm3, %xmm0
	jbe	.L7233
	divsd	%xmm1, %xmm2
	movapd	%xmm2, %xmm0
.L7216:
	comisd	%xmm0, %xmm4
	ja	.L7225
	movsd	.LC10(%rip), %xmm1
	minsd	%xmm0, %xmm1
	movapd	%xmm1, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L7225:
	movapd	%xmm4, %xmm0
.L7208:
	ret
	.p2align 4,,10
	.p2align 3
.L7233:
	comisd	%xmm1, %xmm0
	ja	.L7235
	movapd	%xmm2, %xmm5
	movapd	%xmm2, %xmm0
	subsd	%xmm3, %xmm5
	mulsd	%xmm2, %xmm0
	comisd	%xmm4, %xmm5
	jbe	.L7219
	mulsd	%xmm5, %xmm5
	subsd	%xmm5, %xmm0
.L7219:
	subsd	%xmm1, %xmm2
	comisd	%xmm4, %xmm2
	jbe	.L7221
	mulsd	%xmm2, %xmm2
	subsd	%xmm2, %xmm0
.L7221:
	addsd	%xmm3, %xmm3
	mulsd	%xmm1, %xmm3
	divsd	%xmm3, %xmm0
	jmp	.L7216
	.p2align 4,,10
	.p2align 3
.L7235:
	divsd	%xmm3, %xmm2
	movapd	%xmm2, %xmm0
	jmp	.L7216
	.cfi_endproc
.LFE332:
	.size	line_area, .-line_area
	.p2align 4
	.globl	rectangle_fraction
	.type	rectangle_fraction, @function
rectangle_fraction:
.LFB333:
	.cfi_startproc
	movsd	32(%rsp), %xmm6
	movsd	56(%rsp), %xmm3
	movapd	%xmm0, %xmm2
	movsd	8(%rsp), %xmm0
	movsd	40(%rsp), %xmm7
	movapd	%xmm6, %xmm4
	movsd	64(%rsp), %xmm5
	movsd	.LC5(%rip), %xmm8
	addsd	%xmm3, %xmm4
	movsd	16(%rsp), %xmm1
	subsd	%xmm6, %xmm3
	mulsd	%xmm0, %xmm4
	mulsd	%xmm3, %xmm0
	mulsd	%xmm8, %xmm4
	subsd	%xmm4, %xmm2
	movapd	%xmm7, %xmm4
	addsd	%xmm5, %xmm4
	subsd	%xmm7, %xmm5
	mulsd	%xmm1, %xmm4
	mulsd	%xmm5, %xmm1
	mulsd	%xmm8, %xmm4
	subsd	%xmm4, %xmm2
	jmp	line_area
	.cfi_endproc
.LFE333:
	.size	rectangle_fraction, .-rectangle_fraction
	.p2align 4
	.globl	facets
	.type	facets, @function
facets:
.LFB334:
	.cfi_startproc
	movsd	16(%rsp), %xmm8
	movq	.LC17(%rip), %xmm1
	movsd	8(%rsp), %xmm7
	movq	.LC75(%rip), %rax
	movapd	%xmm8, %xmm5
	movsd	.LC287(%rip), %xmm3
	movsd	.LC5(%rip), %xmm4
	andpd	%xmm1, %xmm5
	movsd	.LC10(%rip), %xmm6
	andpd	%xmm7, %xmm1
	movapd	%xmm1, %xmm2
	movq	%rax, %xmm1
	xorl	%eax, %eax
.L7255:
	comisd	%xmm3, %xmm5
	jbe	.L7238
	cmpl	$2, %eax
	je	.L7273
	movapd	%xmm7, %xmm10
	movapd	%xmm0, %xmm9
	mulsd	%xmm1, %xmm10
	subsd	%xmm10, %xmm9
	divsd	%xmm8, %xmm9
	comisd	.LC75(%rip), %xmm9
	jb	.L7241
	comisd	%xmm9, %xmm4
	jb	.L7241
	movslq	%eax, %rdx
	addl	$1, %eax
	leaq	(%rdx,%rdx,2), %rdx
	leaq	(%rdi,%rdx,8), %rdx
	movsd	%xmm1, (%rdx)
	movsd	%xmm9, 8(%rdx)
	.p2align 4,,10
	.p2align 3
.L7238:
	comisd	%xmm3, %xmm2
	movapd	%xmm1, %xmm9
	addsd	%xmm6, %xmm9
	jbe	.L7275
	cmpl	$2, %eax
	je	.L7249
.L7261:
	movapd	%xmm1, %xmm10
	movapd	%xmm8, %xmm11
	movapd	%xmm9, %xmm1
	mulsd	%xmm10, %xmm11
	movapd	%xmm0, %xmm9
	subsd	%xmm11, %xmm9
	divsd	%xmm7, %xmm9
	comisd	.LC75(%rip), %xmm9
	jb	.L7244
	comisd	%xmm9, %xmm4
	jb	.L7244
	movslq	%eax, %rdx
	addl	$1, %eax
	leaq	(%rdx,%rdx,2), %rdx
	leaq	(%rdi,%rdx,8), %rdx
	movsd	%xmm10, 8(%rdx)
	movsd	%xmm9, (%rdx)
	jmp	.L7244
	.p2align 4,,10
	.p2align 3
.L7280:
	comisd	%xmm3, %xmm5
	movl	$2, %eax
	jbe	.L7238
.L7273:
	addsd	%xmm6, %xmm1
	comisd	%xmm1, %xmm4
	jnb	.L7280
	movl	$2, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L7241:
	comisd	%xmm3, %xmm2
	movapd	%xmm1, %xmm9
	addsd	%xmm6, %xmm9
	ja	.L7261
.L7275:
	movapd	%xmm9, %xmm1
.L7244:
	comisd	%xmm1, %xmm4
	jnb	.L7255
	ret
	.p2align 4,,10
	.p2align 3
.L7247:
	comisd	%xmm3, %xmm5
	ja	.L7260
	addsd	%xmm6, %xmm9
.L7249:
	comisd	%xmm9, %xmm4
	jnb	.L7247
	movl	$2, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L7260:
	movapd	%xmm9, %xmm1
	jmp	.L7273
	.cfi_endproc
.LFE334:
	.size	facets, .-facets
	.p2align 4
	.globl	line_length_center
	.type	line_length_center, @function
line_length_center:
.LFB335:
	.cfi_startproc
	movsd	8(%rsp), %xmm3
	movsd	16(%rsp), %xmm2
	movsd	.LC5(%rip), %xmm4
	movapd	%xmm3, %xmm1
	movapd	%xmm3, %xmm10
	addsd	%xmm2, %xmm1
	mulsd	%xmm4, %xmm1
	addsd	%xmm0, %xmm1
	pxor	%xmm0, %xmm0
	comisd	%xmm3, %xmm0
	jbe	.L7282
	xorpd	.LC1(%rip), %xmm10
	subsd	%xmm3, %xmm1
.L7282:
	comisd	%xmm2, %xmm0
	movapd	%xmm2, %xmm11
	jbe	.L7284
	xorpd	.LC1(%rip), %xmm11
	subsd	%xmm2, %xmm1
.L7284:
	comisd	%xmm1, %xmm0
	movq	$0x000000000, 16(%rdi)
	movq	$0x000000000, 8(%rdi)
	movq	$0x000000000, (%rdi)
	jnb	.L7281
	movapd	%xmm10, %xmm5
	addsd	%xmm11, %xmm5
	comisd	%xmm5, %xmm1
	jnb	.L7281
	movsd	.LC287(%rip), %xmm5
	comisd	%xmm10, %xmm5
	ja	.L7335
	comisd	%xmm11, %xmm5
	ja	.L7336
	comisd	%xmm10, %xmm1
	jnb	.L7337
	movapd	%xmm1, %xmm8
	comisd	%xmm11, %xmm1
	movapd	%xmm0, %xmm6
	divsd	%xmm10, %xmm8
	addsd	%xmm0, %xmm8
	movsd	%xmm8, (%rdi)
	jb	.L7333
.L7338:
	subsd	%xmm11, %xmm1
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm5
	addsd	%xmm7, %xmm5
	subsd	%xmm7, %xmm6
	movapd	%xmm1, %xmm7
	divsd	%xmm10, %xmm7
	movapd	%xmm6, %xmm9
	movsd	%xmm5, 8(%rdi)
	movapd	%xmm7, %xmm6
	addsd	%xmm8, %xmm6
	subsd	%xmm7, %xmm8
.L7300:
	mulsd	%xmm4, %xmm6
	comisd	%xmm6, %xmm0
	ja	.L7313
	movsd	.LC10(%rip), %xmm1
	minsd	%xmm6, %xmm1
	movapd	%xmm1, %xmm6
.L7301:
	comisd	%xmm3, %xmm0
	jbe	.L7302
	movsd	.LC10(%rip), %xmm1
	subsd	%xmm6, %xmm1
	movapd	%xmm1, %xmm6
.L7302:
	mulsd	%xmm4, %xmm5
	subsd	%xmm4, %xmm6
	movsd	%xmm6, (%rdi)
	comisd	%xmm5, %xmm0
	ja	.L7315
	movsd	.LC10(%rip), %xmm1
	minsd	%xmm5, %xmm1
	movapd	%xmm1, %xmm3
.L7304:
	comisd	%xmm2, %xmm0
	jbe	.L7305
	movsd	.LC10(%rip), %xmm1
	subsd	%xmm3, %xmm1
	movapd	%xmm1, %xmm3
.L7305:
	movapd	%xmm8, %xmm1
	movapd	%xmm9, %xmm2
	subsd	%xmm4, %xmm3
	mulsd	%xmm8, %xmm1
	mulsd	%xmm9, %xmm2
	movsd	%xmm3, 8(%rdi)
	addsd	%xmm2, %xmm1
	ucomisd	%xmm1, %xmm0
	movapd	%xmm1, %xmm0
	ja	.L7334
	sqrtsd	%xmm0, %xmm0
	ret
	.p2align 4,,10
	.p2align 3
.L7281:
	ret
	.p2align 4,,10
	.p2align 3
.L7337:
	movapd	%xmm1, %xmm6
	comisd	%xmm11, %xmm1
	movsd	.LC10(%rip), %xmm8
	subsd	%xmm10, %xmm6
	movsd	%xmm8, (%rdi)
	divsd	%xmm11, %xmm6
	addsd	%xmm0, %xmm6
	jnb	.L7338
.L7333:
	divsd	%xmm11, %xmm1
	movapd	%xmm1, %xmm5
	addsd	%xmm6, %xmm5
	subsd	%xmm1, %xmm6
	movsd	%xmm5, 8(%rdi)
	movapd	%xmm6, %xmm9
	movapd	%xmm8, %xmm6
	jmp	.L7300
	.p2align 4,,10
	.p2align 3
.L7335:
	comisd	%xmm2, %xmm0
	movsd	.LC10(%rip), %xmm0
	jbe	.L7289
	movapd	%xmm0, %xmm7
	subsd	%xmm1, %xmm7
	movapd	%xmm7, %xmm1
.L7289:
	subsd	%xmm4, %xmm1
	movsd	%xmm1, 8(%rdi)
	ret
	.p2align 4,,10
	.p2align 3
.L7336:
	comisd	%xmm3, %xmm0
	movsd	.LC10(%rip), %xmm0
	jbe	.L7293
	movapd	%xmm0, %xmm7
	subsd	%xmm1, %xmm7
	movapd	%xmm7, %xmm1
.L7293:
	subsd	%xmm4, %xmm1
	movsd	%xmm1, (%rdi)
	ret
	.p2align 4,,10
	.p2align 3
.L7315:
	movapd	%xmm0, %xmm3
	jmp	.L7304
	.p2align 4,,10
	.p2align 3
.L7313:
	movapd	%xmm0, %xmm6
	jmp	.L7301
.L7334:
	jmp	sqrt
	.cfi_endproc
.LFE335:
	.size	line_length_center, .-line_length_center
	.p2align 4
	.globl	line_center
	.type	line_center, @function
line_center:
.LFB336:
	.cfi_startproc
	movsd	8(%rsp), %xmm5
	movapd	%xmm0, %xmm2
	movq	%rdi, %rax
	movsd	16(%rsp), %xmm4
	movsd	.LC5(%rip), %xmm8
	movapd	%xmm5, %xmm0
	movapd	%xmm5, %xmm6
	addsd	%xmm4, %xmm0
	mulsd	%xmm8, %xmm0
	addsd	%xmm2, %xmm0
	pxor	%xmm2, %xmm2
	comisd	%xmm5, %xmm2
	jbe	.L7340
	subsd	%xmm5, %xmm0
	xorpd	.LC1(%rip), %xmm6
.L7340:
	comisd	%xmm4, %xmm2
	movapd	%xmm4, %xmm3
	jbe	.L7342
	subsd	%xmm4, %xmm0
	xorpd	.LC1(%rip), %xmm3
.L7342:
	comisd	%xmm0, %xmm2
	movq	$0x000000000, 16(%rax)
	jnb	.L7380
	movapd	%xmm6, %xmm7
	addsd	%xmm3, %xmm7
	comisd	%xmm7, %xmm0
	jnb	.L7381
	movsd	.LC287(%rip), %xmm7
	comisd	%xmm6, %xmm7
	ja	.L7382
	comisd	%xmm3, %xmm7
	ja	.L7383
	movapd	%xmm0, %xmm7
	movapd	%xmm0, %xmm10
	mulsd	%xmm0, %xmm7
	subsd	%xmm6, %xmm10
	comisd	%xmm2, %xmm10
	mulsd	%xmm0, %xmm7
	movsd	%xmm7, 8(%rax)
	jbe	.L7384
	movapd	%xmm6, %xmm11
	movapd	%xmm10, %xmm12
	movapd	%xmm7, %xmm9
	addsd	%xmm6, %xmm11
	mulsd	%xmm10, %xmm12
	addsd	%xmm0, %xmm11
	mulsd	%xmm12, %xmm11
	mulsd	%xmm10, %xmm12
	subsd	%xmm11, %xmm9
	subsd	%xmm12, %xmm7
	movsd	%xmm9, (%rax)
.L7356:
	movapd	%xmm0, %xmm10
	subsd	%xmm3, %xmm10
	comisd	%xmm2, %xmm10
	jbe	.L7357
	movapd	%xmm3, %xmm11
	movapd	%xmm10, %xmm12
	addsd	%xmm3, %xmm11
	mulsd	%xmm10, %xmm12
	addsd	%xmm11, %xmm0
	mulsd	%xmm12, %xmm0
	mulsd	%xmm10, %xmm12
	subsd	%xmm0, %xmm7
	subsd	%xmm12, %xmm9
.L7357:
	movapd	%xmm6, %xmm0
	comisd	%xmm2, %xmm5
	movsd	.LC288(%rip), %xmm10
	mulsd	%xmm6, %xmm0
	mulsd	%xmm10, %xmm0
	mulsd	%xmm3, %xmm0
	mulsd	%xmm1, %xmm0
	divsd	%xmm0, %xmm9
	movsd	.LC10(%rip), %xmm0
	ja	.L7359
	movsd	.LC23(%rip), %xmm0
.L7359:
	mulsd	%xmm3, %xmm3
	comisd	%xmm2, %xmm4
	subsd	%xmm8, %xmm9
	mulsd	%xmm0, %xmm9
	movapd	%xmm3, %xmm0
	mulsd	%xmm10, %xmm0
	movsd	%xmm9, (%rax)
	mulsd	%xmm6, %xmm0
	mulsd	%xmm0, %xmm1
	movsd	.LC10(%rip), %xmm0
	divsd	%xmm1, %xmm7
	ja	.L7360
	movsd	.LC23(%rip), %xmm0
.L7360:
	subsd	%xmm8, %xmm7
	mulsd	%xmm0, %xmm7
	movsd	%xmm7, 8(%rax)
	ret
	.p2align 4,,10
	.p2align 3
.L7381:
	movq	$0x000000000, 8(%rax)
	movq	$0x000000000, (%rax)
	ret
	.p2align 4,,10
	.p2align 3
.L7380:
	movsd	.LC75(%rip), %xmm0
	movsd	%xmm0, 8(%rax)
	movsd	%xmm0, (%rax)
	ret
	.p2align 4,,10
	.p2align 3
.L7384:
	movsd	%xmm7, (%rax)
	movapd	%xmm7, %xmm9
	jmp	.L7356
	.p2align 4,,10
	.p2align 3
.L7382:
	comisd	%xmm2, %xmm4
	movq	$0x000000000, (%rax)
	movsd	.LC10(%rip), %xmm0
	ja	.L7351
	movsd	.LC23(%rip), %xmm0
.L7351:
	mulsd	%xmm8, %xmm1
	subsd	%xmm8, %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, 8(%rax)
	ret
	.p2align 4,,10
	.p2align 3
.L7383:
	comisd	%xmm2, %xmm5
	movq	$0x000000000, 8(%rax)
	movsd	.LC10(%rip), %xmm0
	ja	.L7354
	movsd	.LC23(%rip), %xmm0
.L7354:
	mulsd	%xmm8, %xmm1
	subsd	%xmm8, %xmm1
	mulsd	%xmm0, %xmm1
	movsd	%xmm1, (%rax)
	ret
	.cfi_endproc
.LFE336:
	.size	line_center, .-line_center
	.p2align 4
	.globl	mycs
	.type	mycs, @function
mycs:
.LFB337:
	.cfi_startproc
	movq	grid(%rip), %rax
	movslq	%esi, %r11
	movl	%ecx, %r9d
	movq	%rdi, %r8
	movl	%edx, -8(%rsp)
	movslq	%edx, %rdx
	leaq	0(,%r11,8), %r10
	movsd	.LC5(%rip), %xmm11
	movq	24(%rax), %rax
	movq	%rsi, -16(%rsp)
	sarq	$32, %rsi
	movq	(%rax,%rdx,8), %rax
	leaq	1(%rsi), %rdx
	leaq	0(,%rdx,8), %rsi
	movq	(%rax), %rax
	movq	16(%rax), %rcx
	movslq	%r9d, %rax
	addq	$1, %rax
	movq	-8(%rcx,%r10), %rdi
	movq	(%rdi,%rdx,8), %r9
	movsd	(%r9,%rax,8), %xmm6
	movq	(%rcx,%r11,8), %r9
	movq	8(%rcx,%r10), %rcx
	movq	(%r9,%rdx,8), %r11
	movq	(%rcx,%rdx,8), %rdx
	movsd	(%r11,%rax,8), %xmm3
	movsd	(%rdx,%rax,8), %xmm5
	movq	-16(%rdi,%rsi), %rdx
	movsd	(%rdx,%rax,8), %xmm9
	movq	-16(%r9,%rsi), %rdx
	movsd	(%rdx,%rax,8), %xmm0
	movq	-16(%rcx,%rsi), %rdx
	movapd	%xmm9, %xmm2
	movsd	(%rdx,%rax,8), %xmm8
	movq	-8(%rcx,%rsi), %rdx
	movsd	(%rdx,%rax,8), %xmm7
	movq	-8(%rdi,%rsi), %rdx
	movapd	%xmm8, %xmm4
	movsd	(%rdx,%rax,8), %xmm1
	addsd	%xmm7, %xmm4
	addsd	%xmm1, %xmm2
	addsd	%xmm5, %xmm4
	addsd	%xmm6, %xmm2
	subsd	%xmm4, %xmm2
	movapd	%xmm6, %xmm4
	addsd	%xmm3, %xmm4
	mulsd	%xmm11, %xmm2
	addsd	%xmm5, %xmm4
	movapd	%xmm2, %xmm10
	movapd	%xmm9, %xmm2
	addsd	%xmm0, %xmm2
	addsd	%xmm8, %xmm2
	subsd	%xmm4, %xmm2
	movq	.LC17(%rip), %xmm4
	mulsd	%xmm11, %xmm2
	movapd	%xmm10, %xmm11
	andpd	%xmm4, %xmm11
	movapd	%xmm2, %xmm12
	andpd	%xmm4, %xmm12
	comisd	%xmm11, %xmm12
	jb	.L7394
	comisd	.LC0(%rip), %xmm2
	jbe	.L7395
	movsd	.LC10(%rip), %xmm2
	movl	$1, %eax
	jmp	.L7388
	.p2align 4,,10
	.p2align 3
.L7394:
	comisd	.LC0(%rip), %xmm10
	jbe	.L7396
	movsd	.LC10(%rip), %xmm10
	xorl	%eax, %eax
.L7388:
	addsd	%xmm1, %xmm1
	addsd	%xmm7, %xmm7
	addsd	%xmm0, %xmm0
	addsd	%xmm3, %xmm3
	addsd	%xmm9, %xmm1
	addsd	%xmm8, %xmm7
	addsd	%xmm9, %xmm0
	addsd	%xmm6, %xmm3
	addsd	%xmm5, %xmm7
	addsd	%xmm6, %xmm1
	addsd	%xmm5, %xmm3
	addsd	%xmm8, %xmm0
	subsd	%xmm7, %xmm1
	movsd	.LC4(%rip), %xmm7
	subsd	%xmm3, %xmm0
	addsd	%xmm7, %xmm1
	addsd	%xmm7, %xmm0
	movapd	%xmm1, %xmm3
	movapd	%xmm0, %xmm5
	andpd	%xmm4, %xmm3
	andpd	%xmm4, %xmm5
	testl	%eax, %eax
	je	.L7389
	movapd	%xmm3, %xmm7
	movapd	%xmm10, %xmm6
	divsd	%xmm5, %xmm7
	andpd	%xmm4, %xmm6
	comisd	%xmm6, %xmm7
	ja	.L7390
	andpd	%xmm2, %xmm4
	movapd	%xmm6, %xmm3
	movapd	%xmm2, %xmm0
	movapd	%xmm4, %xmm5
	movapd	%xmm10, %xmm1
.L7390:
	addsd	%xmm5, %xmm3
	movq	$0x000000000, 16(%r8)
	movq	%r8, %rax
	divsd	%xmm3, %xmm1
	divsd	%xmm3, %xmm0
	movsd	%xmm1, (%r8)
	movsd	%xmm0, 8(%r8)
	ret
	.p2align 4,,10
	.p2align 3
.L7396:
	movsd	.LC23(%rip), %xmm10
	xorl	%eax, %eax
	jmp	.L7388
	.p2align 4,,10
	.p2align 3
.L7395:
	movsd	.LC23(%rip), %xmm2
	movl	$1, %eax
	jmp	.L7388
	.p2align 4,,10
	.p2align 3
.L7389:
	movapd	%xmm5, %xmm7
	movapd	%xmm2, %xmm6
	divsd	%xmm3, %xmm7
	andpd	%xmm4, %xmm6
	comisd	%xmm6, %xmm7
	ja	.L7390
	andpd	%xmm10, %xmm4
	movapd	%xmm6, %xmm5
	movapd	%xmm2, %xmm0
	movapd	%xmm4, %xmm3
	movapd	%xmm10, %xmm1
	jmp	.L7390
	.cfi_endproc
.LFE337:
	.size	mycs, .-mycs
	.p2align 4
	.globl	fraction_refine
	.type	fraction_refine, @function
fraction_refine:
.LFB339:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movq	%rdi, %rax
	movl	%edx, %ecx
	movq	%rdi, %r8
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	shrq	$32, %rax
	movslq	%edi, %r12
	movslq	%esi, %r10
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	movq	%rax, %rdx
	pxor	%xmm0, %xmm0
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	movslq	%edx, %rbx
	subq	$56, %rsp
	.cfi_def_cfa_offset 96
	movq	grid(%rip), %rax
	movq	%rdi, (%rsp)
	movq	24(%rax), %rdi
	movslq	%ecx, %rax
	movl	%r10d, 8(%rsp)
	addq	$1, %rax
	movq	(%rdi,%r10,8), %r11
	leaq	0(,%rax,8), %rbp
	movq	(%r11), %r11
	movq	16(%r11), %r11
	movq	(%r11,%r12,8), %r11
	leal	-2(%r12,%r12), %r12d
	movq	(%r11,%rbx,8), %r11
	leal	-2(%rdx,%rdx), %ebx
	movsd	(%r11,%rax,8), %xmm13
	movq	8(%rdi,%r10,8), %rax
	comisd	%xmm13, %xmm0
	movq	(%rax), %rax
	movq	16(%rax), %r13
	jnb	.L7398
	comisd	.LC10(%rip), %xmm13
	jb	.L7408
.L7398:
	movslq	%ebx, %rcx
	addl	$1, %ebx
	movslq	%r12d, %r12
	xorl	%edx, %edx
	movslq	%ebx, %rbx
	leaq	0(%r13,%r12,8), %rdi
	salq	$3, %rcx
	salq	$3, %rbx
.L7401:
	movq	(%rdi,%rdx,8), %rax
	movq	(%rax,%rcx), %rsi
	movq	(%rax,%rbx), %rax
	movsd	%xmm13, (%rsi,%rbp)
	movsd	%xmm13, (%rax,%rbp)
	cmpq	$1, %rdx
	je	.L7397
	movl	$1, %edx
	jmp	.L7401
	.p2align 4,,10
	.p2align 3
.L7397:
	addq	$56, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 40
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7408:
	.cfi_restore_state
	movq	%r8, %rsi
	leaq	16(%rsp), %rdi
	movl	%r10d, %edx
	call	mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 104
	movapd	%xmm13, %xmm0
	pushq	40(%rsp)
	.cfi_def_cfa_offset 112
	pushq	40(%rsp)
	.cfi_def_cfa_offset 120
	pushq	40(%rsp)
	.cfi_def_cfa_offset 128
	call	line_alpha
	movslq	%r12d, %rax
	movslq	%ebx, %rcx
	xorl	%edx, %edx
	movsd	48(%rsp), %xmm10
	movsd	56(%rsp), %xmm8
	movapd	%xmm0, %xmm9
	leaq	0(%r13,%rax,8), %rsi
	movsd	.LC5(%rip), %xmm7
	salq	$3, %rcx
	addq	$32, %rsp
	.cfi_def_cfa_offset 96
	leal	2(%r12), %edi
	leal	2(%rbx), %r8d
.L7404:
	movl	%edi, %r9d
	pxor	%xmm6, %xmm6
	movapd	%xmm9, %xmm11
	movq	(%rsi,%rdx,8), %rbx
	shrl	$31, %r9d
	xorl	%r10d, %r10d
	leal	(%r9,%rdx), %eax
	addq	%rcx, %rbx
	andl	$1, %eax
	subl	%r9d, %eax
	leal	-1(%rax,%rax), %eax
	cvtsi2sdl	%eax, %xmm6
	mulsd	%xmm10, %xmm6
	mulsd	%xmm7, %xmm6
	movapd	%xmm6, %xmm0
	mulsd	%xmm7, %xmm0
	subsd	%xmm0, %xmm11
.L7403:
	movl	%r8d, %r9d
	pxor	%xmm1, %xmm1
	movapd	%xmm11, %xmm2
	movq	(%rbx,%r10,8), %r11
	shrl	$31, %r9d
	leal	(%r9,%r10), %eax
	addq	%rbp, %r11
	andl	$1, %eax
	subl	%r9d, %eax
	leal	-1(%rax,%rax), %eax
	cvtsi2sdl	%eax, %xmm1
	mulsd	%xmm8, %xmm1
	mulsd	%xmm7, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm7, %xmm0
	subsd	%xmm0, %xmm2
	movapd	%xmm6, %xmm0
	call	line_area
	movsd	%xmm0, (%r11)
	cmpq	$1, %r10
	jne	.L7406
	cmpq	$1, %rdx
	je	.L7397
	movl	$1, %edx
	jmp	.L7404
	.p2align 4,,10
	.p2align 3
.L7406:
	movl	$1, %r10d
	jmp	.L7403
	.cfi_endproc
.LFE339:
	.size	fraction_refine, .-fraction_refine
	.section	.rodata.str1.8
	.align 8
.LC289:
	.string	"/root/mnt/basilisk/src/fractions.h"
	.text
	.p2align 4
	.globl	fractions
	.type	fractions, @function
fractions:
.LFB341:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movl	152(%rsp), %eax
	movslq	144(%rsp), %rbx
	movslq	148(%rsp), %rbp
	movl	%eax, 56(%rsp)
	testl	%eax, %eax
	je	.L7411
	movl	156(%rsp), %edx
	movl	%eax, 4(%rsp)
	movl	%edx, 8(%rsp)
.L7412:
	movsd	160(%rsp), %xmm4
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7416
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7416
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7417:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7417
.L7416:
	movsd	%xmm4, 48(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 72(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 80(%rsp)
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$161
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	orl	$2, _loop.37+16(%rip)
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %ecx
	movl	%ebx, %edx
	pushq	$161
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movl	40(%rsp), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rdx, 56(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%edx, %r12d
	pushq	$168
	.cfi_def_cfa_offset 160
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %ecx
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$169
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$170
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$170
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$181
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$181
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %ecx
	movl	%ebx, %edx
	pushq	$181
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%ebx, %edx
	pushq	$161
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	orl	$1, _loop.37+16(%rip)
	xorl	%ecx, %ecx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$161
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movl	36(%rsp), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	%rdx, %rax
	movq	%rdx, 48(%rsp)
	salq	$32, %rax
	orq	%rax, %r12
	movq	%r12, 72(%rsp)
	movq	%r12, %rax
	movq	%r12, 64(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	shrq	$32, %rax
	pushq	$168
	.cfi_def_cfa_offset 160
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$168
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$169
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$170
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$170
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$181
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$181
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$181
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.37, %edi
	call	end_stencil
	movq	grid(%rip), %r12
	movl	$0, _loop.37+12(%rip)
	movsd	48(%rsp), %xmm4
	cmpb	$0, 128(%r12)
	jne	.L7502
.L7415:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L7436
	movslq	%ebx, %rdx
	movq	48(%r12), %rdi
	leal	-1(%rax), %r11d
	movl	%ebx, 48(%rsp)
	leaq	8(,%rdx,8), %r10
	salq	$4, %r11
	movslq	8(%rsp), %rdx
	movl	%ebp, 60(%rsp)
	leaq	16(%rdi), %rax
	movsd	.LC10(%rip), %xmm6
	pxor	%xmm5, %xmm5
	leaq	8(,%rdx,8), %rsi
	movslq	4(%rsp), %rdx
	addq	%rax, %r11
	movq	%rsi, %rbx
	leaq	8(,%rdx,8), %rdx
	movq	%rdx, %rbp
	jmp	.L7432
	.p2align 4,,10
	.p2align 3
.L7496:
	comisd	%xmm4, %xmm1
	movapd	%xmm6, %xmm0
	ja	.L7424
	xorl	%r9d, %r9d
	comisd	%xmm4, %xmm3
	pxor	%xmm0, %xmm0
	seta	%r9b
	cvtsi2sdl	%r9d, %xmm0
.L7424:
	movsd	%xmm0, (%r8)
.L7419:
	andl	$1, %edi
	je	.L7426
	movq	24(%r12), %rdi
	movq	(%rdi,%rsi,8), %rsi
	movq	(%rsi), %rsi
	movq	16(%rsi), %rsi
	movq	(%rsi,%rcx,8), %rsi
	movq	(%rsi,%rdx,8), %rcx
	movq	8(%rsi,%rdx,8), %rdx
	leaq	(%rcx,%r10), %rdi
	movsd	(%rdx,%r10), %xmm3
	addq	%rbp, %rcx
	movsd	(%rdi), %xmm1
	movapd	%xmm3, %xmm0
	movapd	%xmm1, %xmm2
	subsd	%xmm4, %xmm0
	subsd	%xmm4, %xmm2
	mulsd	%xmm2, %xmm0
	comisd	%xmm0, %xmm5
	ja	.L7503
	comisd	%xmm4, %xmm1
	movapd	%xmm6, %xmm0
	ja	.L7431
	xorl	%edx, %edx
	comisd	%xmm4, %xmm3
	pxor	%xmm0, %xmm0
	seta	%dl
	cvtsi2sdl	%edx, %xmm0
.L7431:
	movsd	%xmm0, (%rcx)
.L7426:
	movq	%rax, %rdi
	cmpq	%rax, %r11
	je	.L7500
.L7504:
	addq	$16, %rax
.L7432:
	movslq	(%rdi), %rcx
	movslq	4(%rdi), %rdx
	movslq	8(%rdi), %rsi
	movl	12(%rdi), %edi
	testb	$2, %dil
	je	.L7419
	movq	24(%r12), %r9
	movslq	%esi, %r8
	movslq	%ecx, %r14
	movq	(%r9,%r8,8), %r8
	movslq	%edx, %r9
	movq	(%r8), %r8
	movq	16(%r8), %r13
	movq	0(%r13,%r14,8), %r8
	movq	8(%r13,%r14,8), %r13
	movq	(%r8,%r9,8), %r8
	movq	0(%r13,%r9,8), %r9
	leaq	(%r8,%r10), %r15
	movsd	(%r9,%r10), %xmm3
	addq	%rbx, %r8
	movsd	(%r15), %xmm1
	movapd	%xmm3, %xmm0
	movapd	%xmm1, %xmm2
	subsd	%xmm4, %xmm0
	subsd	%xmm4, %xmm2
	mulsd	%xmm2, %xmm0
	comisd	%xmm0, %xmm5
	jbe	.L7496
	subsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm2
	movsd	%xmm2, (%r8)
	comisd	(%r15), %xmm4
	jbe	.L7419
	movapd	%xmm6, %xmm0
	subsd	%xmm2, %xmm0
	movsd	%xmm0, (%r8)
	jmp	.L7419
	.p2align 4,,10
	.p2align 3
.L7503:
	subsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm2
	movsd	%xmm2, (%rcx)
	comisd	(%rdi), %xmm4
	jbe	.L7426
	movapd	%xmm6, %xmm0
	movq	%rax, %rdi
	subsd	%xmm2, %xmm0
	movsd	%xmm0, (%rcx)
	cmpq	%rax, %r11
	jne	.L7504
	.p2align 4,,10
	.p2align 3
.L7500:
	movslq	48(%rsp), %rbx
	movslq	60(%rsp), %rbp
.L7436:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7434
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7434
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7438:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7438
.L7434:
	movsd	%xmm4, 48(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 72(%rsp)
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 80(%rsp)
	movabsq	$-4294967296, %r13
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$243
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	72(%rsp), %r14
	movq	%r14, %rax
	shrq	$32, %rax
	movl	%eax, %edx
	movq	%rax, %r12
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r12d, %edx
	movl	$1, %ecx
	pushq	$243
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$243
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	$1, %r8d
	movl	%r14d, %edx
	pushq	$243
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$252
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$252
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movsd	80(%rsp), %xmm4
	movq	64(%rsp), %r15
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	xorl	%r12d, %r12d
	movsd	%xmm4, 40(%rsp)
.L7437:
	movq	24(%rsp), %r14
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	andq	%r13, %r15
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r12d, %r8d
	pushq	$270
	.cfi_def_cfa_offset 168
	orq	%r15, %r14
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	%r14d, %edx
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r14d, %edx
	movl	%r12d, %r8d
	pushq	$270
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r14d, %edx
	movl	%r12d, %r8d
	pushq	$271
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r12d, %r8d
	movl	%ebx, %edx
	pushq	$271
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movq	48(%rsp), %rax
	movl	%r14d, %r10d
	xorl	%r9d, %r9d
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	movq	%r10, %r15
	xorl	%r8d, %r8d
	movl	%r12d, %ecx
	pushq	$0
	.cfi_def_cfa_offset 160
	salq	$32, %rax
	pushq	$270
	.cfi_def_cfa_offset 168
	orq	%rax, %r15
	shrq	$32, %rax
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	%eax, %edx
	movq	%rax, %r14
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r12d, %ecx
	movl	%r14d, %edx
	pushq	$270
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r12d, %ecx
	movl	%r14d, %edx
	pushq	$271
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	movl	%r12d, %ecx
	movl	%ebx, %edx
	pushq	$271
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	cmpl	$1, %r12d
	jne	.L7469
	movsd	40(%rsp), %xmm4
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	movsd	%xmm4, 24(%rsp)
	pushq	$284
	.cfi_def_cfa_offset 160
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$284
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$284
	.cfi_def_cfa_offset 168
	pushq	$.LC289
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$286
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$291
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	movl	$_loop.36, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.36+12(%rip)
	movsd	16(%rsp), %xmm4
	cmpb	$0, 128(%rax)
	jne	.L7505
.L7439:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7466
	movslq	4(%rsp), %rcx
	movq	24(%rax), %r11
	leal	-1(%rdx), %r10d
	leaq	8(,%rbx,8), %rbx
	movq	32(%rax), %rax
	salq	$4, %r10
	pxor	%xmm6, %xmm6
	movq	.LC17(%rip), %xmm8
	leaq	8(,%rcx,8), %r9
	movslq	8(%rsp), %rcx
	movsd	.LC14(%rip), %xmm7
	leaq	8(,%rbp,8), %rbp
	movsd	.LC10(%rip), %xmm9
	leaq	16(%rax), %rdx
	leaq	8(,%rcx,8), %r8
	addq	%rdx, %r10
	jmp	.L7462
	.p2align 4,,10
	.p2align 3
.L7440:
	movsd	%xmm3, (%rsi)
	movq	%rdx, %rax
	cmpq	%r10, %rdx
	je	.L7466
.L7510:
	addq	$16, %rdx
.L7462:
	movslq	8(%rax), %rcx
	movslq	(%rax), %r12
	movq	(%r11,%rcx,8), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rdi
	movslq	4(%rax), %rcx
	movq	(%rdi,%r12,8), %rsi
	movq	8(%rdi,%r12,8), %rdi
	movq	(%rsi,%rcx,8), %rax
	movq	(%rdi,%rcx,8), %rdi
	movq	8(%rsi,%rcx,8), %rcx
	movsd	(%rax,%r9), %xmm10
	movsd	(%rdi,%r9), %xmm5
	leaq	(%rax,%rbp), %rsi
	movsd	(%rax,%r8), %xmm3
	movsd	(%rcx,%r8), %xmm12
	movapd	%xmm10, %xmm11
	subsd	%xmm5, %xmm11
	movapd	%xmm3, %xmm1
	subsd	%xmm12, %xmm1
	movapd	%xmm11, %xmm2
	andpd	%xmm8, %xmm2
	movapd	%xmm1, %xmm0
	addsd	%xmm6, %xmm2
	andpd	%xmm8, %xmm0
	addsd	%xmm2, %xmm0
	ucomisd	%xmm6, %xmm0
	jp	.L7481
	je	.L7440
.L7481:
	divsd	%xmm0, %xmm11
	comisd	%xmm6, %xmm3
	divsd	%xmm0, %xmm1
	jbe	.L7499
	comisd	%xmm3, %xmm9
	ja	.L7506
.L7499:
	movapd	%xmm6, %xmm0
	movapd	%xmm6, %xmm2
.L7442:
	comisd	%xmm6, %xmm10
	jbe	.L7446
	comisd	%xmm10, %xmm9
	ja	.L7507
.L7446:
	comisd	%xmm6, %xmm12
	jbe	.L7450
	comisd	%xmm12, %xmm9
	ja	.L7508
.L7450:
	comisd	%xmm6, %xmm5
	jbe	.L7454
	comisd	%xmm5, %xmm9
	ja	.L7509
.L7454:
	ucomisd	%xmm6, %xmm0
	jp	.L7458
	jne	.L7458
	maxsd	%xmm10, %xmm3
	movq	%rdx, %rax
	movsd	%xmm3, (%rsi)
	cmpq	%r10, %rdx
	jne	.L7510
	.p2align 4,,10
	.p2align 3
.L7466:
	movl	56(%rsp), %eax
	testl	%eax, %eax
	je	.L7511
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7458:
	.cfi_restore_state
	ucomisd	%xmm7, %xmm0
	jp	.L7491
	movapd	%xmm6, %xmm3
	je	.L7440
.L7491:
	divsd	%xmm0, %xmm2
	movapd	%xmm11, %xmm0
	movsd	%xmm4, 16(%rsp)
	call	line_area
	movsd	16(%rsp), %xmm4
	movapd	%xmm0, %xmm3
	jmp	.L7440
	.p2align 4,,10
	.p2align 3
.L7469:
	movl	$1, %r12d
	jmp	.L7437
	.p2align 4,,10
	.p2align 3
.L7506:
	movsd	(%rax,%rbx), %xmm0
	movapd	%xmm9, %xmm13
	subsd	%xmm4, %xmm0
	comisd	%xmm6, %xmm0
	jbe	.L7512
.L7445:
	movapd	%xmm3, %xmm2
	subsd	.LC5(%rip), %xmm2
	movsd	.LC75(%rip), %xmm0
	mulsd	%xmm1, %xmm0
	mulsd	%xmm13, %xmm2
	mulsd	%xmm11, %xmm2
	addsd	%xmm0, %xmm2
	movapd	%xmm9, %xmm0
	addsd	%xmm6, %xmm2
	jmp	.L7442
	.p2align 4,,10
	.p2align 3
.L7509:
	movsd	(%rdi,%rbx), %xmm12
	movapd	%xmm9, %xmm13
	subsd	%xmm4, %xmm12
	comisd	%xmm6, %xmm12
	jbe	.L7513
.L7457:
	subsd	.LC5(%rip), %xmm5
	addsd	%xmm9, %xmm0
	movsd	.LC5(%rip), %xmm12
	mulsd	%xmm11, %xmm12
	mulsd	%xmm13, %xmm5
	mulsd	%xmm1, %xmm5
	addsd	%xmm12, %xmm5
	addsd	%xmm5, %xmm2
	jmp	.L7454
	.p2align 4,,10
	.p2align 3
.L7507:
	movsd	(%rax,%rbx), %xmm13
	movapd	%xmm9, %xmm14
	subsd	%xmm4, %xmm13
	comisd	%xmm6, %xmm13
	jbe	.L7514
.L7449:
	movapd	%xmm10, %xmm13
	addsd	%xmm9, %xmm0
	subsd	.LC5(%rip), %xmm13
	mulsd	%xmm14, %xmm13
	movsd	.LC75(%rip), %xmm14
	mulsd	%xmm11, %xmm14
	mulsd	%xmm1, %xmm13
	addsd	%xmm14, %xmm13
	addsd	%xmm13, %xmm2
	jmp	.L7446
	.p2align 4,,10
	.p2align 3
.L7508:
	movsd	(%rcx,%rbx), %xmm13
	movapd	%xmm9, %xmm14
	subsd	%xmm4, %xmm13
	comisd	%xmm6, %xmm13
	jbe	.L7515
.L7453:
	movsd	.LC5(%rip), %xmm13
	addsd	%xmm9, %xmm0
	subsd	%xmm13, %xmm12
	mulsd	%xmm1, %xmm13
	mulsd	%xmm14, %xmm12
	mulsd	%xmm11, %xmm12
	addsd	%xmm13, %xmm12
	addsd	%xmm12, %xmm2
	jmp	.L7450
	.p2align 4,,10
	.p2align 3
.L7515:
	movsd	.LC23(%rip), %xmm14
	jmp	.L7453
	.p2align 4,,10
	.p2align 3
.L7514:
	movsd	.LC23(%rip), %xmm14
	jmp	.L7449
	.p2align 4,,10
	.p2align 3
.L7513:
	movsd	.LC23(%rip), %xmm13
	jmp	.L7457
	.p2align 4,,10
	.p2align 3
.L7512:
	movsd	.LC23(%rip), %xmm13
	jmp	.L7445
	.p2align 4,,10
	.p2align 3
.L7511:
	movl	4(%rsp), %eax
	leaq	64(%rsp), %rdi
	movq	$-1, 72(%rsp)
	movl	%eax, 64(%rsp)
	movl	8(%rsp), %eax
	movl	%eax, 68(%rsp)
	call	delete
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7505:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	16(%rsp), %xmm4
	jmp	.L7439
	.p2align 4,,10
	.p2align 3
.L7502:
	movsd	%xmm4, 48(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r12
	movsd	48(%rsp), %xmm4
	jmp	.L7415
	.p2align 4,,10
	.p2align 3
.L7411:
	movl	$.LC274, %edi
	call	new_face_vector
	movl	%eax, 4(%rsp)
	shrq	$32, %rax
	movq	%rax, 8(%rsp)
	jmp	.L7412
	.cfi_endproc
.LFE341:
	.size	fractions, .-fractions
	.section	.rodata.str1.1
.LC290:
	.string	"phi"
	.text
	.p2align 4
	.type	init_0, @function
init_0:
.LFB419:
	.cfi_startproc
	pushq	%r14
	.cfi_def_cfa_offset 16
	.cfi_offset 14, -16
	xorl	%r10d, %r10d
	movl	$2, %r8d
	movl	$2, %edx
	movabsq	$8589934592, %rax
	pushq	%r13
	.cfi_def_cfa_offset 24
	.cfi_offset 13, -24
	xorl	%ecx, %ecx
	xorl	%esi, %esi
	pushq	%r12
	.cfi_def_cfa_offset 32
	.cfi_offset 12, -32
	pushq	%rbp
	.cfi_def_cfa_offset 40
	.cfi_offset 6, -40
	pushq	%rbx
	.cfi_def_cfa_offset 48
	.cfi_offset 3, -48
	subq	$352, %rsp
	.cfi_def_cfa_offset 400
	movq	grid(%rip), %r9
	movq	%rax, 32(%rsp)
	movq	$2, 40(%rsp)
	movq	24(%r9), %rdi
	.p2align 4,,10
	.p2align 3
.L7533:
	movslq	%ecx, %rax
	leal	-1(%rsi), %ebx
	leaq	0(,%rax,8), %r12
	movq	(%rdi,%rax,8), %rax
	movq	(%rax), %rax
	cmpl	%edx, (%rax)
	jg	.L7517
	cmpl	%edx, 4(%rax)
	jle	.L7517
	movq	16(%rax), %r13
	movslq	%edx, %rbp
	leaq	0(,%rbp,8), %r11
	movq	0(%r13,%rbp,8), %rbp
	testq	%rbp, %rbp
	je	.L7517
	addq	8(%rax), %r11
	cmpl	%r8d, (%r11)
	jg	.L7517
	cmpl	%r8d, 4(%r11)
	jle	.L7517
	movslq	%r8d, %rax
	movq	0(%rbp,%rax,8), %rax
	testq	%rax, %rax
	je	.L7517
	cmpl	$2, %r10d
	je	.L7518
	jg	.L7519
	testl	%r10d, %r10d
	je	.L7520
	cmpl	$1, %r10d
	jne	.L7522
	movslq	%esi, %r10
	salq	$4, %r10
	movl	$2, 44(%rsp,%r10)
	testb	$2, (%rax)
	jne	.L7525
	addl	$1, %esi
	leal	-2(%rdx,%rdx), %edx
	addl	$1, %ecx
	movslq	%esi, %rax
	movq	%rax, %r10
	salq	$4, %r10
	movl	%edx, 36(%rsp,%r10)
	leal	-1(%r8,%r8), %edx
	movl	%ecx, 32(%rsp,%r10)
	movl	%edx, 40(%rsp,%r10)
	movl	$0, 44(%rsp,%r10)
	jmp	.L7526
	.p2align 4,,10
	.p2align 3
.L7522:
	movsd	L0(%rip), %xmm4
	movsd	Y0(%rip), %xmm1
	testb	$2, (%rax)
	je	.L7527
	subl	$2, %r8d
	pxor	%xmm0, %xmm0
	pxor	%xmm3, %xmm3
	movl	$1, %edx
	cvtsi2sdl	%r8d, %xmm0
	sall	%cl, %edx
	movsd	.LC10(%rip), %xmm5
	movsd	.LC5(%rip), %xmm2
	addsd	%xmm3, %xmm0
	pxor	%xmm3, %xmm3
	cvtsi2sdl	%edx, %xmm3
	addsd	%xmm2, %xmm0
	divsd	%xmm3, %xmm5
	mulsd	%xmm4, %xmm5
	mulsd	%xmm0, %xmm5
	addsd	%xmm1, %xmm5
	comisd	%xmm2, %xmm5
	jbe	.L7517
	movl	$-3, 4(%rax)
	.p2align 4,,10
	.p2align 3
.L7517:
	cmpl	$-1, %ebx
	je	.L7532
.L7543:
	movslq	%ebx, %rax
	movq	24(%r9), %rdi
	movl	%ebx, %esi
	movq	%rax, %rdx
	salq	$4, %rdx
	movl	44(%rsp,%rdx), %r10d
.L7542:
	salq	$4, %rax
	movl	32(%rsp,%rax), %ecx
	movl	36(%rsp,%rax), %edx
	movl	40(%rsp,%rax), %r8d
	jmp	.L7533
	.p2align 4,,10
	.p2align 3
.L7519:
	cmpl	$3, %r10d
	jne	.L7522
	movslq	%esi, %r10
	salq	$4, %r10
	movl	$4, 44(%rsp,%r10)
	testb	$2, (%rax)
	jne	.L7525
	addl	$1, %esi
	leal	-1(%rdx,%rdx), %edx
	addl	$1, %ecx
	movslq	%esi, %rax
	movq	%rax, %r10
	salq	$4, %r10
	movl	%edx, 36(%rsp,%r10)
	leal	-1(%r8,%r8), %edx
	movl	%ecx, 32(%rsp,%r10)
	movl	%edx, 40(%rsp,%r10)
	movl	$0, 44(%rsp,%r10)
	jmp	.L7526
	.p2align 4,,10
	.p2align 3
.L7532:
	movl	$1, %edx
	movl	$.LC90, %esi
	movb	$1, 128(%r9)
	movl	$.LC290, %edi
	movq	init_vertex_scalar(%rip), %rbx
	call	new_block_scalar
	movl	$.LC290, %esi
	movl	%eax, %edi
	call	*%rbx
	movq	baseblock(%rip), %rdx
	movl	%eax, %ebx
	testq	%rdx, %rdx
	je	.L7537
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7537
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7538:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7538
.L7537:
	movq	$0, 32(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 40(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 408
	xorl	%esi, %esi
	movl	%ebx, %edx
	pushq	$98
	.cfi_def_cfa_offset 416
	xorl	%r8d, %r8d
	pushq	$.LC133
	.cfi_def_cfa_offset 424
	pushq	$0
	.cfi_def_cfa_offset 432
	movb	$1, _loop.3+20(%rip)
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 400
	movl	$_loop.3, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.3+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L7556
.L7536:
	movl	72(%rax), %edx
	testl	%edx, %edx
	jle	.L7541
	movslq	%ebx, %rcx
	subl	$1, %edx
	movq	24(%rax), %r8
	pxor	%xmm3, %xmm3
	leaq	8(,%rcx,8), %rdi
	movq	64(%rax), %rcx
	salq	$4, %rdx
	movsd	.LC5(%rip), %xmm2
	movsd	.LC10(%rip), %xmm5
	movsd	.LC8(%rip), %xmm4
	movl	$1, %esi
	leaq	16(%rcx), %rax
	addq	%rax, %rdx
	jmp	.L7540
	.p2align 4,,10
	.p2align 3
.L7557:
	addq	$16, %rax
.L7540:
	movslq	(%rcx), %r10
	movslq	4(%rcx), %r9
	movl	%esi, %r11d
	pxor	%xmm0, %xmm0
	movslq	8(%rcx), %rcx
	movapd	%xmm5, %xmm6
	pxor	%xmm1, %xmm1
	sall	%cl, %r11d
	movq	(%r8,%rcx,8), %rcx
	cvtsi2sdl	%r11d, %xmm0
	leal	-2(%r10), %r11d
	movq	(%rcx), %rcx
	movq	16(%rcx), %rcx
	divsd	%xmm0, %xmm6
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%r11d, %xmm0
	leal	-2(%r9), %r11d
	movq	(%rcx,%r10,8), %rcx
	cvtsi2sdl	%r11d, %xmm1
	movq	(%rcx,%r9,8), %rcx
	addsd	%xmm3, %xmm0
	addsd	%xmm3, %xmm1
	addsd	%xmm2, %xmm0
	addsd	%xmm2, %xmm1
	mulsd	L0(%rip), %xmm6
	mulsd	%xmm6, %xmm0
	mulsd	%xmm6, %xmm1
	addsd	X0(%rip), %xmm0
	mulsd	%xmm2, %xmm6
	addsd	Y0(%rip), %xmm1
	subsd	%xmm6, %xmm0
	subsd	%xmm6, %xmm1
	subsd	%xmm2, %xmm0
	mulsd	%xmm1, %xmm1
	mulsd	%xmm0, %xmm0
	addsd	%xmm1, %xmm0
	subsd	%xmm4, %xmm0
	movsd	%xmm0, (%rcx,%rdi)
	movq	%rax, %rcx
	cmpq	%rax, %rdx
	jne	.L7557
.L7541:
	movl	f(%rip), %eax
	pxor	%xmm0, %xmm0
	movl	%ebx, 32(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 408
	movups	%xmm0, 48(%rsp)
	movl	%eax, 44(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 416
	pushq	$0
	.cfi_def_cfa_offset 424
	pushq	56(%rsp)
	.cfi_def_cfa_offset 432
	call	fractions
	movl	%ebx, 44(%rsp)
	movl	$-1, 48(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 400
	leaq	12(%rsp), %rdi
	call	delete
	addq	$352, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 48
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 40
	popq	%rbp
	.cfi_def_cfa_offset 32
	popq	%r12
	.cfi_def_cfa_offset 24
	popq	%r13
	.cfi_def_cfa_offset 16
	popq	%r14
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7518:
	.cfi_restore_state
	movslq	%esi, %r10
	salq	$4, %r10
	movl	$3, 44(%rsp,%r10)
	testb	$2, (%rax)
	je	.L7558
.L7525:
	movl	%esi, %ebx
	jmp	.L7543
	.p2align 4,,10
	.p2align 3
.L7556:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L7536
	.p2align 4,,10
	.p2align 3
.L7520:
	cmpl	%ecx, 16(%r9)
	je	.L7559
	movslq	%esi, %r10
	salq	$4, %r10
	movl	$1, 44(%rsp,%r10)
	testb	$2, (%rax)
	jne	.L7525
	addl	$1, %esi
	leal	-2(%rdx,%rdx), %edx
	addl	$1, %ecx
	movslq	%esi, %rax
	movq	%rax, %r10
	salq	$4, %r10
	movl	%edx, 36(%rsp,%r10)
	leal	-2(%r8,%r8), %edx
	movl	%ecx, 32(%rsp,%r10)
	movl	%edx, 40(%rsp,%r10)
	movl	$0, 44(%rsp,%r10)
	.p2align 4,,10
	.p2align 3
.L7526:
	xorl	%r10d, %r10d
	jmp	.L7542
	.p2align 4,,10
	.p2align 3
.L7558:
	addl	$1, %esi
	leal	-1(%rdx,%rdx), %edx
	addl	$1, %ecx
	movslq	%esi, %rax
	movq	%rax, %r10
	salq	$4, %r10
	movl	%edx, 36(%rsp,%r10)
	leal	-2(%r8,%r8), %edx
	movl	%ecx, 32(%rsp,%r10)
	movl	%edx, 40(%rsp,%r10)
	movl	$0, 44(%rsp,%r10)
	jmp	.L7526
.L7559:
	movslq	%esi, %rax
	movl	%esi, %ebx
	salq	$4, %rax
	movl	$8, 44(%rsp,%rax)
	jmp	.L7543
.L7527:
	movq	8(%rdi,%r12), %rax
	leal	-2(%r8,%r8), %esi
	leal	-2(%rdx,%rdx), %r10d
	xorl	%r11d, %r11d
	leal	1(%rsi), %edi
	movslq	%r10d, %rdx
	movslq	%esi, %rbp
	movq	(%rax), %rax
	movslq	%edi, %rdi
	salq	$3, %rbp
	salq	$3, %rdi
	movq	16(%rax), %rax
	leaq	(%rax,%rdx,8), %r12
	movl	$-1, %eax
.L7531:
	movq	(%r12,%r11,8), %r8
	movl	%eax, %r14d
	notl	%r14d
	movq	(%r8,%rbp), %rdx
	movl	4(%rdx), %edx
	testl	%edx, %r14d
	cmovs	%eax, %edx
	movq	(%r8,%rdi), %rax
	movl	%edx, %r8d
	movl	4(%rax), %eax
	notl	%r8d
	testl	%eax, %r8d
	cmovs	%edx, %eax
	cmpq	$1, %r11
	jne	.L7544
	addl	$2, %r10d
	addl	$2, %esi
	sarl	%r10d
	sarl	%esi
	movslq	%r10d, %rdx
	movslq	%esi, %rdi
	movq	0(%r13,%rdx,8), %rdx
	movq	(%rdx,%rdi,8), %rdx
	movl	%eax, 4(%rdx)
	testl	%eax, %eax
	jns	.L7517
	orw	$2, (%rdx)
	movl	%esi, 24(%rsp)
	movl	%ecx, %esi
	movl	%r10d, 20(%rsp)
	movq	20(%rsp), %rdi
	movl	%ecx, 28(%rsp)
	call	decrement_neighbors
	movq	grid(%rip), %r9
	jmp	.L7517
.L7544:
	movl	$1, %r11d
	jmp	.L7531
	.cfi_endproc
.LFE419:
	.size	init_0, .-init_0
	.p2align 4
	.globl	youngs_normal
	.type	youngs_normal, @function
youngs_normal:
.LFB342:
	.cfi_startproc
	movl	%ecx, %r8d
	movq	grid(%rip), %rcx
	movslq	%esi, %r9
	movq	%rdi, %rax
	movl	%edx, -8(%rsp)
	movslq	%edx, %rdx
	pxor	%xmm5, %xmm5
	leaq	0(,%r9,8), %r11
	movq	24(%rcx), %rcx
	movq	%rsi, -16(%rsp)
	sarq	$32, %rsi
	movq	.LC17(%rip), %xmm3
	movq	(%rcx,%rdx,8), %rdx
	leaq	1(%rsi), %rcx
	leaq	0(,%rcx,8), %rsi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	movslq	%r8d, %rdx
	addq	$1, %rdx
	movq	-8(%rdi,%r11), %r10
	movq	(%r10,%rcx,8), %r8
	movsd	(%r8,%rdx,8), %xmm4
	movq	-16(%r10,%rsi), %r8
	movq	-8(%r10,%rsi), %r10
	movsd	(%r8,%rdx,8), %xmm1
	movq	8(%rdi,%r11), %r8
	movsd	(%r10,%rdx,8), %xmm0
	movq	(%rdi,%r9,8), %rdi
	movq	(%r8,%rcx,8), %r11
	addsd	%xmm0, %xmm0
	movq	(%rdi,%rcx,8), %rcx
	movsd	(%r11,%rdx,8), %xmm6
	movq	-16(%r8,%rsi), %r11
	movq	-8(%r8,%rsi), %r8
	movq	-16(%rdi,%rsi), %rsi
	addsd	%xmm4, %xmm0
	movsd	(%r11,%rdx,8), %xmm8
	movsd	(%r8,%rdx,8), %xmm2
	addsd	%xmm1, %xmm0
	addsd	%xmm2, %xmm2
	subsd	%xmm6, %xmm0
	subsd	%xmm2, %xmm0
	movsd	(%rsi,%rdx,8), %xmm2
	addsd	%xmm2, %xmm2
	subsd	%xmm8, %xmm0
	addsd	%xmm8, %xmm2
	movapd	%xmm0, %xmm7
	andpd	%xmm3, %xmm7
	addsd	%xmm2, %xmm1
	movsd	(%rcx,%rdx,8), %xmm2
	addsd	%xmm5, %xmm7
	addsd	%xmm2, %xmm2
	subsd	%xmm6, %xmm1
	subsd	%xmm2, %xmm1
	subsd	%xmm4, %xmm1
	andpd	%xmm1, %xmm3
	movapd	%xmm3, %xmm2
	addsd	%xmm7, %xmm2
	comisd	%xmm5, %xmm2
	jbe	.L7565
	divsd	%xmm2, %xmm0
	divsd	%xmm2, %xmm1
.L7561:
	movq	$0x000000000, 16(%rax)
	movsd	%xmm0, (%rax)
	movsd	%xmm1, 8(%rax)
	ret
	.p2align 4,,10
	.p2align 3
.L7565:
	movsd	.LC10(%rip), %xmm0
	jmp	.L7561
	.cfi_endproc
.LFE342:
	.size	youngs_normal, .-youngs_normal
	.p2align 4
	.globl	facet_normal
	.type	facet_normal, @function
facet_normal:
.LFB343:
	.cfi_startproc
	pushq	%r12
	.cfi_def_cfa_offset 16
	.cfi_offset 12, -16
	movq	%rsi, %rax
	movq	%r8, %r9
	movq	%rdi, %r12
	shrq	$32, %rax
	sarq	$32, %r9
	subq	$16, %rsp
	.cfi_def_cfa_offset 32
	movq	%rsi, (%rsp)
	movl	%edx, 8(%rsp)
	testl	%r8d, %r8d
	jns	.L7575
	call	mycs
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	movq	%r12, %rax
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7575:
	.cfi_restore_state
	movq	grid(%rip), %rcx
	movslq	%edx, %rdx
	movslq	%esi, %rdi
	cltq
	movslq	%r8d, %r8
	movq	.LC17(%rip), %xmm0
	pxor	%xmm4, %xmm4
	movq	24(%rcx), %rcx
	movq	(%rcx,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rsi
	movq	(%rsi,%rdi,8), %rcx
	movq	8(%rsi,%rdi,8), %rsi
	movq	(%rcx,%rax,8), %rdx
	movq	(%rsi,%rax,8), %rsi
	movq	8(%rcx,%rax,8), %rax
	movsd	8(%rdx,%r8,8), %xmm2
	subsd	8(%rsi,%r8,8), %xmm2
	movsd	8(%rdx,%r9,8), %xmm1
	subsd	8(%rax,%r9,8), %xmm1
	movapd	%xmm2, %xmm3
	andpd	%xmm0, %xmm3
	andpd	%xmm1, %xmm0
	addsd	%xmm4, %xmm3
	addsd	%xmm3, %xmm0
	comisd	%xmm4, %xmm0
	jbe	.L7573
	divsd	%xmm0, %xmm2
	divsd	%xmm0, %xmm1
.L7568:
	movq	$0x000000000, 16(%r12)
	movq	%r12, %rax
	movsd	%xmm2, (%r12)
	movsd	%xmm1, 8(%r12)
	addq	$16, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 16
	popq	%r12
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7573:
	.cfi_restore_state
	movsd	.LC5(%rip), %xmm1
	movapd	%xmm1, %xmm2
	jmp	.L7568
	.cfi_endproc
.LFE343:
	.size	facet_normal, .-facet_normal
	.p2align 4
	.globl	reconstruction
	.type	reconstruction, @function
reconstruction:
.LFB345:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	movl	%edi, %r15d
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edx, %ebx
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	movq	baseblock(%rip), %rdx
	movq	%rsi, 8(%rsp)
	sarq	$32, %rsi
	movq	%rsi, 16(%rsp)
	testq	%rdx, %rdx
	je	.L7580
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7580
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7581:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7581
.L7580:
	movq	$0, 112(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 120(%rsp)
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	movl	%r15d, %edx
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$450
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$450
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$451
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$453
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	40(%rsp), %r14
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	movl	%r14d, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movq	%r14, %rax
	xorl	%r9d, %r9d
	pushq	$453
	.cfi_def_cfa_offset 224
	shrq	$32, %rax
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	movl	%eax, %edx
	movq	%rax, %r12
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	movq	144(%rsp), %rdi
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movl	120(%rsp), %esi
	movl	%r15d, %edx
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	movl	%r14d, %edx
	pushq	$464
	.cfi_def_cfa_offset 224
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$464
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$465
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC289
	.cfi_def_cfa_offset 232
	pushq	$0
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$465
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movl	$_loop.35, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.35+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L7594
.L7579:
	movslq	8(%rsp), %rax
	movl	40(%rdx), %ecx
	movq	%rax, 24(%rsp)
	movslq	16(%rsp), %rax
	movq	%rax, 32(%rsp)
	movslq	%ebx, %rax
	movq	%rax, 40(%rsp)
	testl	%ecx, %ecx
	jle	.L7588
	movslq	%r15d, %rax
	subl	$1, %ecx
	movsd	.LC10(%rip), %xmm2
	pxor	%xmm1, %xmm1
	leaq	8(,%rax,8), %r11
	movq	24(%rsp), %rax
	salq	$4, %rcx
	leaq	8(,%rax,8), %r10
	movq	32(%rsp), %rax
	leaq	8(,%rax,8), %r9
	movq	40(%rsp), %rax
	leaq	8(,%rax,8), %r8
	movq	24(%rdx), %rax
	movq	32(%rdx), %rdx
	leaq	16(%rdx), %rbp
	leaq	(%rcx,%rbp), %rsi
	movl	%r15d, %ecx
	movq	%r8, %r15
	movq	%rsi, %r8
	jmp	.L7587
	.p2align 4,,10
	.p2align 3
.L7583:
	movq	$0x000000000, (%rbx)
	movq	%rbp, %rdx
	movq	$0x000000000, (%r14)
	movq	$0x000000000, 0(%r13)
	cmpq	%r8, %rbp
	je	.L7588
.L7595:
	addq	$16, %rbp
.L7587:
	movslq	8(%rdx), %rbx
	movslq	(%rdx), %r13
	movslq	4(%rdx), %r12
	movq	%rbx, %rdx
	movq	(%rax,%rbx,8), %rbx
	movq	%r13, %rdi
	movq	%r12, %rsi
	movq	(%rbx), %rbx
	movq	16(%rbx), %rbx
	movq	(%rbx,%r13,8), %rbx
	movq	(%rbx,%r12,8), %rbx
	leaq	(%rbx,%r11), %r12
	leaq	(%rbx,%r10), %r14
	movsd	(%r12), %xmm0
	leaq	(%rbx,%r9), %r13
	addq	%r15, %rbx
	comisd	%xmm0, %xmm1
	jnb	.L7583
	comisd	%xmm2, %xmm0
	jnb	.L7583
	movl	%edi, 100(%rsp)
	leaq	112(%rsp), %rdi
	movl	%esi, 104(%rsp)
	movq	100(%rsp), %rsi
	movl	%edx, 108(%rsp)
	movq	%rax, 88(%rsp)
	movq	%r8, 80(%rsp)
	movq	%r9, 72(%rsp)
	movq	%r10, 64(%rsp)
	movq	%r11, 56(%rsp)
	movl	%ecx, 52(%rsp)
	call	mycs
	movsd	112(%rsp), %xmm0
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	movsd	%xmm0, (%r14)
	movsd	128(%rsp), %xmm0
	movsd	%xmm0, 0(%r13)
	pushq	136(%rsp)
	.cfi_def_cfa_offset 224
	pushq	136(%rsp)
	.cfi_def_cfa_offset 232
	pushq	136(%rsp)
	.cfi_def_cfa_offset 240
	movsd	(%r12), %xmm0
	call	line_alpha
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	pxor	%xmm1, %xmm1
	movq	%rbp, %rdx
	movq	.LC10(%rip), %rdi
	movq	80(%rsp), %r8
	movsd	%xmm0, (%rbx)
	movq	88(%rsp), %rax
	movq	72(%rsp), %r9
	movq	%rdi, %xmm2
	movq	64(%rsp), %r10
	movq	56(%rsp), %r11
	movl	52(%rsp), %ecx
	cmpq	%r8, %rbp
	jne	.L7595
.L7588:
	movq	24(%rsp), %rcx
	movq	32(%rsp), %rdi
	leaq	(%rcx,%rcx,4), %rax
	leaq	(%rcx,%rax,2), %rax
	movq	40(%rsp), %rcx
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$refine_injection, 96(%rax)
	movq	$refine_injection, 112(%rax)
	leaq	(%rdi,%rdi,4), %rax
	leaq	(%rdi,%rax,2), %rax
	movl	8(%rsp), %edi
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$refine_injection, 96(%rax)
	movq	$refine_injection, 112(%rax)
	leaq	(%rcx,%rcx,4), %rax
	leaq	(%rcx,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	%edi, 144(%rax)
	movl	16(%rsp), %edi
	movq	$alpha_refine, 96(%rax)
	movl	%edi, 148(%rax)
	movq	$alpha_refine, 112(%rax)
	addq	$152, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7594:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L7579
	.cfi_endproc
.LFE345:
	.size	reconstruction, .-reconstruction
	.section	.rodata.str1.1
.LC291:
	.string	"n"
.LC292:
	.string	"alpha"
	.section	.rodata.str1.8
	.align 8
.LC294:
	.string	"WARNING: CFL must be <= 0.5 for VOF (cfl - 0.5 = %g)\n"
	.text
	.p2align 4
	.type	sweep_y, @function
sweep_y:
.LFB360:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%edi, %rbx
	movl	$.LC291, %edi
	movq	%rbx, %r13
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	movl	%esi, 120(%rsp)
	movq	%rdx, 88(%rsp)
	call	new_vector
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC292, %edi
	movq	%rax, 56(%rsp)
	sarq	$32, %rax
	movq	%rax, 72(%rsp)
	call	new_block_scalar
	movl	$.LC90, %esi
	movl	$1, %edx
	movl	$.LC282, %edi
	movl	%eax, 52(%rsp)
	call	new_block_scalar
	movq	_attribute(%rip), %rsi
	movq	%rbx, 80(%rsp)
	movl	%eax, 48(%rsp)
	leaq	(%rbx,%rbx,4), %rax
	leaq	(%rbx,%rax,2), %rax
	salq	$4, %rax
	movq	128(%rsi,%rax), %r15
	testq	%r15, %r15
	je	.L7706
	movl	(%r15), %ebx
	testl	%ebx, %ebx
	js	.L7598
	movl	%r13d, (%rsp)
	movq	%r15, %rbx
	xorl	%r14d, %r14d
	xorl	%ebp, %ebp
	movq	%r15, %r13
	.p2align 4,,10
	.p2align 3
.L7599:
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC286, %edi
	addq	$4, %r13
	call	new_block_scalar
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC282, %edi
	movl	%eax, %r15d
	call	new_block_scalar
	movq	%rbp, %rdi
	movl	%r15d, %esi
	movl	%eax, %r12d
	call	list_append
	movq	%r14, %rdi
	movl	%r12d, %esi
	movq	%rax, %rbp
	call	list_append
	movl	0(%r13), %r11d
	movq	%rax, %r14
	testl	%r11d, %r11d
	jns	.L7599
	movq	baseblock(%rip), %rdx
	movl	(%rsp), %r13d
	movq	%rbp, 40(%rsp)
	movq	%rbx, %r15
	testq	%rdx, %rdx
	je	.L7600
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7600
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7601:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r10d, %r10d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r10w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7601
.L7600:
	movl	$0, 140(%rsp)
	movq	40(%rsp), %rbp
	movq	$0, 132(%rsp)
	testq	%rbp, %rbp
	je	.L7602
	movl	0(%rbp), %edx
	movl	(%r15), %r12d
	testl	%edx, %edx
	js	.L7602
	movl	$4, %ebx
	jmp	.L7605
	.p2align 4,,10
	.p2align 3
.L7809:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	movl	$-1, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	movl	$1, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
.L7808:
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%r12d, %edx
	xorl	%ecx, %ecx
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movl	$1, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$70
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$70
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$73
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %r8d
	xorl	%ecx, %ecx
	pushq	$73
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movl	0(%rbp,%rbx), %edx
	movl	(%r15,%rbx), %r12d
	addq	$4, %rbx
	movl	-4(%rbp,%rbx), %r9d
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testl	%r9d, %r9d
	js	.L7602
.L7605:
	subq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$185
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movq	164(%rsp), %rdi
	movl	172(%rsp), %esi
	call	stencil_val_a
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movl	$1, %r8d
	movq	164(%rsp), %rdi
	movl	172(%rsp), %esi
	movl	%r13d, %edx
	movq	%rdi, 176(%rsp)
	movl	%esi, 184(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r13d, %edx
	movl	$-1, %r8d
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movslq	%r12d, %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$0, 16(%rax)
	jne	.L7809
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	movl	$1, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	pushq	$67
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	movl	$-1, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$67
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	jmp	.L7808
.L7723:
	.cfi_restore_state
	movq	$0, 40(%rsp)
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L7602:
	movl	$_loop.31, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.31+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L7810
.L7606:
	movl	40(%rdx), %r8d
	testl	%r8d, %r8d
	jle	.L7597
	movq	$0, 32(%rsp)
	movq	%r14, 96(%rsp)
	movq	%r15, 64(%rsp)
	jmp	.L7608
	.p2align 4,,10
	.p2align 3
.L7609:
	addq	$1, 32(%rsp)
	movq	32(%rsp), %rax
	cmpl	%eax, 40(%rdx)
	jle	.L7811
.L7608:
	cmpq	$0, 40(%rsp)
	je	.L7609
	movq	32(%rsp), %rax
	movq	40(%rsp), %rsi
	movq	64(%rsp), %r11
	salq	$4, %rax
	addq	32(%rdx), %rax
	movl	4(%rax), %edi
	movl	(%rax), %r15d
	movl	8(%rax), %r14d
	movslq	(%rsi), %rax
	movl	%edi, (%rsp)
	movl	(%r11), %ecx
	testl	%eax, %eax
	js	.L7609
	movslq	%r14d, %r12
	movslq	%r15d, %rbp
	leaq	0(,%r12,8), %rbx
	movq	%r11, %r12
	movq	%rbx, 8(%rsp)
	leaq	0(,%rbp,8), %rbx
	movq	%rsi, %rbp
	movq	%rbx, 16(%rsp)
	movslq	%edi, %rbx
	salq	$3, %rbx
	movq	%rbx, 24(%rsp)
	movl	%r14d, %ebx
	.p2align 4,,10
	.p2align 3
.L7610:
	movq	8(%rsp), %rdi
	movq	24(%rdx), %rdx
	addq	$4, %rbp
	movl	%r15d, 132(%rsp)
	movq	24(%rsp), %rsi
	movl	%ebx, 140(%rsp)
	addq	$4, %r12
	movq	(%rdx,%rdi), %rdx
	movq	16(%rsp), %rdi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi), %rdx
	movq	(%rdx,%rsi), %rdx
	movl	%ebx, %esi
	leaq	8(%rdx,%rax,8), %r14
	movl	(%rsp), %eax
	movl	%r13d, %edx
	movl	%eax, 136(%rsp)
	movq	132(%rsp), %rdi
	call	vof_concentration_gradient_y
	movslq	0(%rbp), %rax
	movl	(%r12), %ecx
	movq	grid(%rip), %rdx
	movsd	%xmm0, (%r14)
	testl	%eax, %eax
	jns	.L7610
	addq	$1, 32(%rsp)
	movq	32(%rsp), %rax
	cmpl	%eax, 40(%rdx)
	jg	.L7608
.L7811:
	movq	96(%rsp), %r14
	movq	64(%rsp), %r15
.L7597:
	movl	52(%rsp), %edx
	movq	56(%rsp), %rsi
	movl	%r13d, %edi
	call	reconstruction
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7614
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7614
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7615:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7615
.L7614:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movl	fm+4(%rip), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	orl	$2, _loop.30+16(%rip)
	movq	$0, 152(%rsp)
	movl	$0, 160(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$202
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$202
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$211
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$211
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	fm+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$212
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$212
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	pushq	$226
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	84(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	pushq	$226
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	88(%rsp), %rbx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	$1, _stencil_nop(%rip)
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movq	%rbx, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	shrq	$32, %rax
	xorl	%ecx, %ecx
	movl	$-2, %r8d
	pushq	$226
	.cfi_def_cfa_offset 264
	movq	%rax, %rdx
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$234
	.cfi_def_cfa_offset 256
	xorl	%r9d, %r9d
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movl	80(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	uf+4(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$234
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testq	%r14, %r14
	je	.L7613
	movq	40(%rsp), %rax
	movl	(%r14), %r12d
	movl	(%r15), %ebp
	movl	(%rax), %r10d
	testl	%r12d, %r12d
	js	.L7613
	movq	%r15, (%rsp)
	movl	$4, %ebx
	movl	%r10d, %r15d
	.p2align 4,,10
	.p2align 3
.L7618:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	movl	$-2, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r13d, %edx
	pushq	$243
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r15d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	xorl	%ecx, %ecx
	pushq	$247
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%ebp, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %r8d
	xorl	%ecx, %ecx
	pushq	$247
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$248
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$248
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$251
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movl	184(%rsp), %esi
	movq	176(%rsp), %rdi
	call	stencil_val_a
	movq	72(%rsp), %rax
	movl	(%r14,%rbx), %r12d
	movl	(%rax,%rbx), %r15d
	movq	32(%rsp), %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	(%rax,%rbx), %ebp
	addq	$4, %rbx
	movl	-4(%r14,%rbx), %esi
	testl	%esi, %esi
	jns	.L7618
	movq	%rax, %r15
.L7613:
	movl	$_loop.30, %edi
	call	end_stencil
	cmpl	$65535, fm+4(%rip)
	movl	$0, _loop.30+12(%rip)
	jle	.L7616
	movslq	fm(%rip), %rcx
	movq	_constant(%rip), %rdx
	movq	grid(%rip), %r12
	movslq	cm(%rip), %rax
	movsd	-524288(%rdx,%rcx,8), %xmm4
	movzbl	128(%r12), %ecx
	cmpl	$65535, %eax
	jg	.L7637
	testb	%cl, %cl
	jne	.L7812
.L7638:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L7621
	movq	80(%rsp), %rbx
	movslq	52(%rsp), %rdx
	subl	$1, %eax
	pxor	%xmm6, %xmm6
	salq	$4, %rax
	movl	%r13d, 96(%rsp)
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rbx,8), %rbx
	movq	40(%rsp), %r11
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	%rbx, 16(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 64(%rsp)
	movq	72(%rsp), %rbx
	movq	.LC1(%rip), %xmm10
	movslq	56(%rsp), %rdx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 24(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	48(%rsp), %rdx
	movq	%rbx, 32(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	48(%r12), %rdx
	movq	%rbx, 8(%rsp)
	leaq	16(%rdx), %rbp
	addq	%rbp, %rax
	movq	%rax, (%rsp)
	jmp	.L7652
	.p2align 4,,10
	.p2align 3
.L7639:
	movq	%rbp, %rdx
	cmpq	%rbp, (%rsp)
	je	.L7802
	addq	$16, %rbp
.L7652:
	testb	$2, 12(%rdx)
	je	.L7639
	movslq	8(%rdx), %rcx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm11
	movsd	dt(%rip), %xmm8
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm0
	movq	24(%r12), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	(%rdx), %rcx
	divsd	%xmm0, %xmm11
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	4(%rdx), %rcx
	movq	(%rax,%rcx,8), %r8
	leaq	0(,%rcx,8), %rdx
	movslq	uf+4(%rip), %rcx
	leaq	8(%r8,%rcx,8), %r13
	movsd	0(%r13), %xmm14
	mulsd	%xmm14, %xmm8
	mulsd	L0(%rip), %xmm11
	movapd	%xmm11, %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm0
	divsd	%xmm0, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L7792
	movq	-8(%rax,%rdx), %r9
	movapd	%xmm7, %xmm9
.L7640:
	movapd	%xmm8, %xmm0
	movslq	cm(%rip), %rax
	mulsd	%xmm4, %xmm0
	movsd	8(%r8,%rax,8), %xmm1
	movq	16(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r9,%rax), %r10
	movsd	(%r10), %xmm2
	mulsd	%xmm9, %xmm0
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7644
	comisd	%xmm7, %xmm2
	jnb	.L7644
	movsd	%xmm0, 104(%rsp)
	movapd	%xmm9, %xmm0
	movq	24(%rsp), %rax
	movapd	%xmm9, %xmm15
	mulsd	%xmm8, %xmm0
	xorpd	%xmm10, %xmm15
	movsd	%xmm4, 112(%rsp)
	mulsd	(%r9,%rax), %xmm15
	movq	32(%rsp), %rax
	movsd	(%r9,%rax), %xmm1
	movq	64(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r9,%rax), %xmm2
	movapd	%xmm0, %xmm5
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm5
	mulsd	%xmm15, %xmm0
	mulsd	%xmm15, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	movapd	%xmm1, %xmm5
	mulsd	%xmm6, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	call	line_area
	movsd	112(%rsp), %xmm4
	movsd	104(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7644:
	mulsd	%xmm2, %xmm14
	movq	8(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7639
	movslq	(%r14), %rdx
	movslq	(%r11), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7639
	movq	_attribute(%rip), %rbx
	movl	$4, %ecx
	jmp	.L7651
	.p2align 4,,10
	.p2align 3
.L7813:
	movapd	%xmm9, %xmm1
	movsd	8(%r9,%rax,8), %xmm14
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm14
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7650
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7650:
	mulsd	8(%r9,%rdi,8), %xmm1
	mulsd	%xmm11, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm14, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm5, %xmm0
	mulsd	0(%r13), %xmm0
.L7648:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%r11,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7639
.L7651:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r10), %xmm0
	movapd	%xmm2, %xmm5
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbx,%rsi)
	je	.L7647
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm5
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm5
	movapd	%xmm1, %xmm0
.L7647:
	comisd	%xmm12, %xmm0
	leaq	8(%r8,%rdx,8), %rdx
	ja	.L7813
	movapd	%xmm6, %xmm0
	jmp	.L7648
	.p2align 4,,10
	.p2align 3
.L7616:
	movq	grid(%rip), %r12
	movslq	cm(%rip), %rax
	movzbl	128(%r12), %edx
	cmpl	$65535, %eax
	jg	.L7619
	testb	%dl, %dl
	jne	.L7814
.L7620:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L7621
	movq	80(%rsp), %rbx
	movslq	52(%rsp), %rdx
	subl	$1, %eax
	pxor	%xmm6, %xmm6
	salq	$4, %rax
	movl	%r13d, 104(%rsp)
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rbx,8), %rbx
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	.LC1(%rip), %xmm10
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 32(%rsp)
	movq	72(%rsp), %rbx
	movslq	56(%rsp), %rdx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	48(%rsp), %rdx
	movq	%rbx, 96(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	48(%r12), %rdx
	movq	%rbx, 16(%rsp)
	movq	40(%rsp), %rbx
	leaq	16(%rdx), %r9
	addq	%r9, %rax
	movq	%rax, (%rsp)
	jmp	.L7635
	.p2align 4,,10
	.p2align 3
.L7622:
	movq	%r9, %rdx
	cmpq	%r9, (%rsp)
	je	.L7800
.L7815:
	addq	$16, %r9
.L7635:
	testb	$2, 12(%rdx)
	je	.L7622
	movslq	8(%rdx), %rcx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm11
	movsd	dt(%rip), %xmm8
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm0
	movq	24(%r12), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	(%rdx), %rcx
	movslq	4(%rdx), %rdx
	divsd	%xmm0, %xmm11
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	leaq	0(,%rdx,8), %rcx
	movq	(%rax,%rdx,8), %r8
	movslq	uf+4(%rip), %rdx
	leaq	8(%r8,%rdx,8), %r13
	movslq	fm+4(%rip), %rdx
	movsd	0(%r13), %xmm14
	movsd	8(%r8,%rdx,8), %xmm0
	mulsd	%xmm14, %xmm8
	movapd	%xmm0, %xmm1
	mulsd	L0(%rip), %xmm11
	mulsd	%xmm11, %xmm1
	addsd	%xmm6, %xmm1
	divsd	%xmm1, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L7790
	movq	-8(%rax,%rcx), %r10
	movapd	%xmm7, %xmm9
.L7623:
	mulsd	%xmm8, %xmm0
	movslq	cm(%rip), %rax
	movsd	8(%r8,%rax,8), %xmm1
	movq	8(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r10,%rax), %r11
	mulsd	%xmm9, %xmm0
	movsd	(%r11), %xmm2
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7627
	comisd	%xmm7, %xmm2
	jnb	.L7627
	movsd	%xmm0, 24(%rsp)
	movapd	%xmm9, %xmm0
	movq	64(%rsp), %rax
	movapd	%xmm9, %xmm5
	mulsd	%xmm8, %xmm0
	xorpd	%xmm10, %xmm5
	mulsd	(%r10,%rax), %xmm5
	movq	96(%rsp), %rax
	movsd	(%r10,%rax), %xmm1
	movq	32(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r10,%rax), %xmm2
	movapd	%xmm0, %xmm4
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm4
	mulsd	%xmm5, %xmm0
	mulsd	%xmm5, %xmm4
	mulsd	%xmm13, %xmm4
	subsd	%xmm4, %xmm2
	movapd	%xmm1, %xmm4
	mulsd	%xmm6, %xmm4
	mulsd	%xmm13, %xmm4
	subsd	%xmm4, %xmm2
	call	line_area
	movsd	24(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7627:
	mulsd	%xmm2, %xmm14
	movq	16(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7622
	movslq	(%r14), %rdx
	movslq	(%rbx), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7622
	movq	_attribute(%rip), %rbp
	movl	$4, %ecx
	.p2align 4,,10
	.p2align 3
.L7634:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r11), %xmm1
	movapd	%xmm2, %xmm4
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbp,%rsi)
	je	.L7630
	movapd	%xmm7, %xmm5
	movapd	%xmm7, %xmm4
	subsd	%xmm1, %xmm5
	subsd	%xmm2, %xmm4
	movapd	%xmm5, %xmm1
.L7630:
	comisd	%xmm12, %xmm1
	leaq	8(%r8,%rdx,8), %rdx
	movapd	%xmm6, %xmm0
	jbe	.L7631
	movsd	8(%r10,%rax,8), %xmm0
	movapd	%xmm7, %xmm5
	divsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	mulsd	%xmm8, %xmm1
	subsd	%xmm1, %xmm5
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm5
	ja	.L7633
	mulsd	%xmm9, %xmm5
	movapd	%xmm5, %xmm1
.L7633:
	mulsd	8(%r10,%rdi,8), %xmm1
	mulsd	%xmm11, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm1, %xmm0
	mulsd	%xmm4, %xmm0
	mulsd	0(%r13), %xmm0
.L7631:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%rbx,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	jns	.L7634
	movq	%r9, %rdx
	cmpq	%r9, (%rsp)
	jne	.L7815
.L7800:
	movl	104(%rsp), %r13d
	jmp	.L7636
	.p2align 4,,10
	.p2align 3
.L7619:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm4
	testb	%dl, %dl
	jne	.L7816
.L7653:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L7621
	movq	80(%rsp), %rbx
	movslq	52(%rsp), %rdx
	subl	$1, %eax
	pxor	%xmm6, %xmm6
	salq	$4, %rax
	movl	%r13d, 96(%rsp)
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rbx,8), %rbx
	movq	40(%rsp), %r11
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	%rbx, 24(%rsp)
	movq	72(%rsp), %rbx
	movq	.LC1(%rip), %xmm11
	movslq	56(%rsp), %rdx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 32(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	48(%rsp), %rdx
	movq	%rbx, 64(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	48(%r12), %rdx
	movq	%rbx, 16(%rsp)
	leaq	16(%rdx), %rbp
	addq	%rbp, %rax
	movq	%rax, (%rsp)
	jmp	.L7667
	.p2align 4,,10
	.p2align 3
.L7654:
	movq	%rbp, %rdx
	cmpq	%rbp, (%rsp)
	je	.L7802
	addq	$16, %rbp
.L7667:
	testb	$2, 12(%rdx)
	je	.L7654
	movslq	8(%rdx), %rcx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm10
	movsd	dt(%rip), %xmm8
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm0
	movq	24(%r12), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	(%rdx), %rcx
	movslq	4(%rdx), %rdx
	divsd	%xmm0, %xmm10
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	leaq	0(,%rdx,8), %rcx
	movq	(%rax,%rdx,8), %r8
	movslq	uf+4(%rip), %rdx
	leaq	8(%r8,%rdx,8), %r13
	movslq	fm+4(%rip), %rdx
	movsd	0(%r13), %xmm14
	movsd	8(%r8,%rdx,8), %xmm0
	mulsd	%xmm14, %xmm8
	movapd	%xmm0, %xmm1
	mulsd	L0(%rip), %xmm10
	mulsd	%xmm10, %xmm1
	addsd	%xmm6, %xmm1
	divsd	%xmm1, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L7794
	movq	-8(%rax,%rcx), %r9
	movapd	%xmm7, %xmm9
.L7655:
	mulsd	%xmm8, %xmm0
	movapd	%xmm4, %xmm1
	movq	8(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r9,%rax), %r10
	movsd	(%r10), %xmm2
	mulsd	%xmm9, %xmm0
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7659
	comisd	%xmm7, %xmm2
	jnb	.L7659
	movsd	%xmm0, 104(%rsp)
	movapd	%xmm9, %xmm0
	movq	32(%rsp), %rax
	movapd	%xmm9, %xmm15
	mulsd	%xmm8, %xmm0
	xorpd	%xmm11, %xmm15
	movsd	%xmm4, 112(%rsp)
	mulsd	(%r9,%rax), %xmm15
	movq	64(%rsp), %rax
	movsd	(%r9,%rax), %xmm1
	movq	24(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r9,%rax), %xmm2
	movapd	%xmm0, %xmm5
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm5
	mulsd	%xmm15, %xmm0
	mulsd	%xmm15, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	movapd	%xmm1, %xmm5
	mulsd	%xmm6, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	call	line_area
	movsd	112(%rsp), %xmm4
	movsd	104(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7659:
	mulsd	%xmm2, %xmm14
	movq	16(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7654
	movslq	(%r14), %rdx
	movslq	(%r11), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7654
	movq	_attribute(%rip), %rbx
	movl	$4, %ecx
	jmp	.L7666
	.p2align 4,,10
	.p2align 3
.L7817:
	movapd	%xmm9, %xmm1
	movsd	8(%r9,%rax,8), %xmm14
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm14
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7665
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7665:
	mulsd	8(%r9,%rdi,8), %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm14, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm5, %xmm0
	mulsd	0(%r13), %xmm0
.L7663:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%r11,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7654
.L7666:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r10), %xmm0
	movapd	%xmm2, %xmm5
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbx,%rsi)
	je	.L7662
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm5
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm5
	movapd	%xmm1, %xmm0
.L7662:
	comisd	%xmm12, %xmm0
	leaq	8(%r8,%rdx,8), %rdx
	ja	.L7817
	movapd	%xmm6, %xmm0
	jmp	.L7663
.L7810:
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L7606
.L7637:
	movsd	-524288(%rdx,%rax,8), %xmm5
	testb	%cl, %cl
	jne	.L7818
.L7668:
	movl	56(%r12), %eax
	testl	%eax, %eax
	jle	.L7621
	movq	80(%rsp), %rbx
	movslq	52(%rsp), %rdx
	subl	$1, %eax
	pxor	%xmm6, %xmm6
	salq	$4, %rax
	movl	%r13d, 124(%rsp)
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rbx,8), %rbx
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	%rbx, 8(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	56(%rsp), %rdx
	movq	%rbx, 96(%rsp)
	movq	72(%rsp), %rbx
	leaq	8(,%rbx,8), %rbx
	movq	%rbx, 104(%rsp)
	leaq	8(,%rdx,8), %rbx
	movslq	48(%rsp), %rdx
	movq	%rbx, 112(%rsp)
	leaq	8(,%rdx,8), %rbx
	movq	48(%r12), %rdx
	movq	%rbx, 16(%rsp)
	movq	40(%rsp), %rbx
	leaq	16(%rdx), %r8
	addq	%r8, %rax
	movq	%rax, (%rsp)
	jmp	.L7682
	.p2align 4,,10
	.p2align 3
.L7669:
	movq	%r8, %rdx
	cmpq	%r8, (%rsp)
	je	.L7803
	addq	$16, %r8
.L7682:
	testb	$2, 12(%rdx)
	je	.L7669
	movslq	8(%rdx), %rcx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm10
	movsd	dt(%rip), %xmm8
	sall	%cl, %eax
	cvtsi2sdl	%eax, %xmm0
	movq	24(%r12), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	(%rdx), %rcx
	divsd	%xmm0, %xmm10
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	movslq	4(%rdx), %rcx
	movq	(%rax,%rcx,8), %r9
	leaq	0(,%rcx,8), %rdx
	movslq	uf+4(%rip), %rcx
	leaq	8(%r9,%rcx,8), %r13
	movsd	0(%r13), %xmm11
	mulsd	%xmm11, %xmm8
	mulsd	L0(%rip), %xmm10
	movapd	%xmm10, %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm0
	divsd	%xmm0, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L7796
	movq	-8(%rax,%rdx), %r10
	movapd	%xmm7, %xmm9
.L7670:
	movapd	%xmm8, %xmm0
	movapd	%xmm5, %xmm1
	movq	8(%rsp), %rax
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm1
	leaq	(%r10,%rax), %r11
	movsd	(%r11), %xmm2
	comisd	%xmm2, %xmm6
	mulsd	%xmm9, %xmm0
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7674
	comisd	%xmm7, %xmm2
	jnb	.L7674
	movapd	%xmm9, %xmm14
	movq	104(%rsp), %rax
	movapd	%xmm9, %xmm15
	xorpd	.LC1(%rip), %xmm15
	mulsd	%xmm8, %xmm14
	movsd	%xmm0, 24(%rsp)
	mulsd	(%r10,%rax), %xmm15
	movq	112(%rsp), %rax
	movsd	%xmm4, 64(%rsp)
	movsd	%xmm5, 32(%rsp)
	movsd	(%r10,%rax), %xmm1
	movq	96(%rsp), %rax
	subsd	%xmm13, %xmm14
	movsd	(%r10,%rax), %xmm2
	movapd	%xmm14, %xmm0
	addsd	%xmm13, %xmm14
	subsd	%xmm13, %xmm0
	mulsd	%xmm15, %xmm14
	mulsd	%xmm15, %xmm0
	mulsd	%xmm13, %xmm0
	subsd	%xmm0, %xmm2
	movapd	%xmm1, %xmm0
	mulsd	%xmm6, %xmm0
	mulsd	%xmm13, %xmm0
	subsd	%xmm0, %xmm2
	movapd	%xmm14, %xmm0
	call	line_area
	movsd	64(%rsp), %xmm4
	movsd	32(%rsp), %xmm5
	movsd	24(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7674:
	mulsd	%xmm2, %xmm11
	movq	16(%rsp), %rax
	movsd	%xmm11, (%r9,%rax)
	testq	%r14, %r14
	je	.L7669
	movslq	(%r14), %rdx
	movslq	(%rbx), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7669
	movq	_attribute(%rip), %rbp
	movl	$4, %ecx
	jmp	.L7681
	.p2align 4,,10
	.p2align 3
.L7819:
	movapd	%xmm9, %xmm1
	movsd	8(%r10,%rax,8), %xmm15
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm15
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7680
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7680:
	mulsd	8(%r10,%rdi,8), %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm15, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm11, %xmm0
	mulsd	0(%r13), %xmm0
.L7678:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%rbx,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7669
.L7681:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r11), %xmm0
	movapd	%xmm2, %xmm11
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbp,%rsi)
	je	.L7677
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm11
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm11
	movapd	%xmm1, %xmm0
.L7677:
	comisd	%xmm12, %xmm0
	leaq	8(%r9,%rdx,8), %rdx
	ja	.L7819
	movapd	%xmm6, %xmm0
	jmp	.L7678
	.p2align 4,,10
	.p2align 3
.L7796:
	movsd	.LC23(%rip), %xmm9
	movq	%r9, %r10
	jmp	.L7670
	.p2align 4,,10
	.p2align 3
.L7790:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r10
	jmp	.L7623
	.p2align 4,,10
	.p2align 3
.L7803:
	movl	124(%rsp), %r13d
.L7636:
	movq	40(%rsp), %rbx
	movsd	%xmm3, (%rsp)
	movq	%rbx, %rdi
	call	delete
	movq	%rbx, %rdi
	call	free
	movsd	(%rsp), %xmm3
	comisd	.LC293(%rip), %xmm3
	jbe	.L7683
	subsd	.LC5(%rip), %xmm3
	movl	$.LC294, %esi
	movl	$1, %eax
	movq	stderr(%rip), %rdi
	movapd	%xmm3, %xmm0
	call	fprintf
	movq	stderr(%rip), %rdi
	call	fflush
.L7683:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7688
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7688
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7689:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7689
.L7688:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 152(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	%r13d, %edx
	movl	$0, 160(%rsp)
	pushq	$283
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	80(%rsp), %ebx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %r8d
	movl	%ebx, %edx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	152(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	movl	$1, %r8d
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	xorl	%r8d, %r8d
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	cm(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testq	%r14, %r14
	je	.L7687
	movq	88(%rsp), %rbp
	movl	(%r14), %r12d
	movl	(%r15), %edx
	movl	0(%rbp), %r13d
	testl	%r12d, %r12d
	js	.L7687
	movl	$4, %ebx
	.p2align 4,,10
	.p2align 3
.L7692:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	movl	$1, %r8d
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	movl	$1, %r8d
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf+4(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movl	(%r14,%rbx), %r12d
	movl	0(%rbp,%rbx), %r13d
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	(%r15,%rbx), %edx
	addq	$4, %rbx
	movl	-4(%r14,%rbx), %eax
	testl	%eax, %eax
	jns	.L7692
.L7687:
	movl	$_loop.29, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.29+12(%rip)
	cmpl	$65535, %eax
	jg	.L7820
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L7821
.L7693:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7697
	movslq	48(%rsp), %rcx
	movq	80(%rsp), %rbx
	subl	$1, %edx
	movq	24(%rax), %r12
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rcx,8), %rbp
	movslq	120(%rsp), %rcx
	leaq	8(,%rbx,8), %rbx
	movsd	.LC10(%rip), %xmm2
	movq	%rbx, 8(%rsp)
	leaq	16(%rax), %r11
	leaq	8(,%rcx,8), %rbx
	movslq	uf+4(%rip), %rcx
	movq	%r12, 32(%rsp)
	movq	%rbx, 16(%rsp)
	movq	88(%rsp), %r12
	leaq	8(,%rcx,8), %rbx
	movslq	cm(%rip), %rcx
	leaq	8(,%rcx,8), %rsi
	movq	%rsi, 24(%rsp)
	leaq	(%rdx,%r11), %rsi
	movq	%rsi, (%rsp)
	jmp	.L7696
	.p2align 4,,10
	.p2align 3
.L7698:
	movq	%r11, %rax
	cmpq	%r11, (%rsp)
	je	.L7697
.L7822:
	addq	$16, %r11
.L7696:
	movslq	8(%rax), %rcx
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm3
	movslq	4(%rax), %rsi
	movl	$1, %edx
	movq	32(%rsp), %rdi
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	(%rdi,%rcx,8), %rdx
	movslq	(%rax), %rcx
	movq	24(%rsp), %rdi
	movq	8(%rsp), %rax
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm3
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movq	(%rdx,%rsi,8), %rcx
	movq	8(%rdx,%rsi,8), %r8
	leaq	(%rcx,%rdi), %r13
	movq	16(%rsp), %rdi
	leaq	(%r8,%rbx), %r9
	addq	%rcx, %rax
	leaq	(%rcx,%rbx), %r10
	movsd	(%r9), %xmm0
	movsd	(%rcx,%rbp), %xmm1
	subsd	(%r10), %xmm0
	mulsd	(%rcx,%rdi), %xmm0
	subsd	(%r8,%rbp), %xmm1
	addsd	%xmm1, %xmm0
	movsd	0(%r13), %xmm1
	mulsd	dt(%rip), %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm0
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
	testq	%r14, %r14
	je	.L7698
	movslq	(%r14), %rax
	movslq	(%r12), %rsi
	movslq	(%r15), %rdi
	testl	%eax, %eax
	js	.L7698
	movl	$4, %edx
	.p2align 4,,10
	.p2align 3
.L7699:
	movsd	(%r9), %xmm0
	subsd	(%r10), %xmm0
	leaq	8(%rcx,%rdi,8), %rdi
	mulsd	8(%rcx,%rsi,8), %xmm0
	movsd	8(%rcx,%rax,8), %xmm1
	subsd	8(%r8,%rax,8), %xmm1
	movslq	(%r14,%rdx), %rax
	movslq	(%r12,%rdx), %rsi
	addq	$4, %rdx
	addsd	%xmm1, %xmm0
	movsd	0(%r13), %xmm1
	mulsd	dt(%rip), %xmm0
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm0
	addsd	(%rdi), %xmm0
	movsd	%xmm0, (%rdi)
	movslq	-4(%r15,%rdx), %rdi
	testl	%eax, %eax
	jns	.L7699
	movq	%r11, %rax
	cmpq	%r11, (%rsp)
	jne	.L7822
.L7697:
	movq	%r14, %rdi
	call	delete
	movq	%r14, %rdi
	call	free
	movl	48(%rsp), %eax
	leaq	144(%rsp), %rdi
	movl	$-1, 160(%rsp)
	movl	%eax, 144(%rsp)
	movl	52(%rsp), %eax
	movl	%eax, 148(%rsp)
	movl	56(%rsp), %eax
	movl	%eax, 152(%rsp)
	movl	72(%rsp), %eax
	movl	%eax, 156(%rsp)
	call	delete
	addq	$184, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L7820:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm4
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L7823
.L7700:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7697
	movq	80(%rsp), %rbx
	movslq	48(%rsp), %rcx
	subl	$1, %edx
	movq	24(%rax), %r12
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rbx,8), %rbp
	leaq	8(,%rcx,8), %rbx
	movslq	120(%rsp), %rcx
	movsd	.LC10(%rip), %xmm2
	leaq	16(%rax), %r10
	movq	%r12, 16(%rsp)
	movq	88(%rsp), %r12
	leaq	8(,%rcx,8), %rsi
	movslq	uf+4(%rip), %rcx
	leaq	(%rdx,%r10), %rdi
	movq	%rsi, (%rsp)
	movq	%rdi, 8(%rsp)
	leaq	8(,%rcx,8), %r11
	jmp	.L7702
	.p2align 4,,10
	.p2align 3
.L7703:
	movq	%r10, %rax
	cmpq	%r10, 8(%rsp)
	je	.L7697
	addq	$16, %r10
.L7702:
	movslq	8(%rax), %rdx
	movslq	(%rax), %rsi
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm3
	movq	16(%rsp), %rdi
	movq	%rdx, %rcx
	movq	(%rdi,%rdx,8), %rdx
	movslq	4(%rax), %rdi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx,%rdi,8), %rsi
	movq	8(%rdx,%rdi,8), %rdi
	movl	$1, %edx
	sall	%cl, %edx
	movq	(%rsp), %rcx
	cvtsi2sdl	%edx, %xmm0
	leaq	(%rdi,%r11), %r8
	movsd	(%rsi,%rbx), %xmm1
	leaq	(%rsi,%r11), %r9
	subsd	(%rdi,%rbx), %xmm1
	leaq	(%rsi,%rbp), %rax
	divsd	%xmm0, %xmm3
	movsd	(%r8), %xmm0
	subsd	(%r9), %xmm0
	mulsd	(%rsi,%rcx), %xmm0
	addsd	%xmm1, %xmm0
	mulsd	dt(%rip), %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm4, %xmm3
	divsd	%xmm3, %xmm0
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
	testq	%r14, %r14
	je	.L7703
	movslq	(%r14), %rax
	movslq	(%r12), %rcx
	movslq	(%r15), %r13
	testl	%eax, %eax
	js	.L7703
	movl	$4, %edx
	.p2align 4,,10
	.p2align 3
.L7704:
	movsd	(%r8), %xmm0
	subsd	(%r9), %xmm0
	leaq	8(%rsi,%r13,8), %r13
	mulsd	8(%rsi,%rcx,8), %xmm0
	movsd	8(%rsi,%rax,8), %xmm1
	subsd	8(%rdi,%rax,8), %xmm1
	movslq	(%r14,%rdx), %rax
	movslq	(%r12,%rdx), %rcx
	addq	$4, %rdx
	addsd	%xmm1, %xmm0
	mulsd	dt(%rip), %xmm0
	divsd	%xmm3, %xmm0
	addsd	0(%r13), %xmm0
	movsd	%xmm0, 0(%r13)
	movslq	-4(%r15,%rdx), %r13
	testl	%eax, %eax
	jns	.L7704
	jmp	.L7703
	.p2align 4,,10
	.p2align 3
.L7706:
	movq	$0, 40(%rsp)
	xorl	%r14d, %r14d
	jmp	.L7597
.L7814:
	call	update_cache_f
	movq	grid(%rip), %r12
	jmp	.L7620
	.p2align 4,,10
	.p2align 3
.L7792:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r9
	jmp	.L7640
	.p2align 4,,10
	.p2align 3
.L7802:
	movl	96(%rsp), %r13d
	jmp	.L7636
.L7794:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r9
	jmp	.L7655
.L7823:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	(%rsp), %xmm4
	jmp	.L7700
.L7821:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L7693
.L7818:
	movsd	%xmm4, 8(%rsp)
	movsd	%xmm5, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm4
	movsd	(%rsp), %xmm5
	movq	grid(%rip), %r12
	jmp	.L7668
.L7621:
	movq	40(%rsp), %rbx
	movq	%rbx, %rdi
	call	delete
	movq	%rbx, %rdi
	call	free
	jmp	.L7683
.L7598:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7723
	movq	$0, 40(%rsp)
	movslq	(%rdx), %rax
	xorl	%r14d, %r14d
	testl	%eax, %eax
	jns	.L7601
	jmp	.L7602
	.p2align 4,,10
	.p2align 3
.L7812:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r12
	movsd	(%rsp), %xmm4
	jmp	.L7638
.L7816:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r12
	movsd	(%rsp), %xmm4
	jmp	.L7653
	.cfi_endproc
.LFE360:
	.size	sweep_y, .-sweep_y
	.p2align 4
	.type	sweep_x, @function
sweep_x:
.LFB359:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movslq	%edi, %rbx
	movl	$.LC291, %edi
	movq	%rbx, %r13
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	movl	%esi, 120(%rsp)
	movq	%rdx, 88(%rsp)
	call	new_vector
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC292, %edi
	movq	%rax, 56(%rsp)
	sarq	$32, %rax
	movq	%rax, 72(%rsp)
	call	new_block_scalar
	movl	$.LC90, %esi
	movl	$1, %edx
	movl	$.LC282, %edi
	movl	%eax, 52(%rsp)
	call	new_block_scalar
	movq	_attribute(%rip), %rsi
	movq	%rbx, 80(%rsp)
	movl	%eax, 48(%rsp)
	leaq	(%rbx,%rbx,4), %rax
	leaq	(%rbx,%rax,2), %rax
	salq	$4, %rax
	movq	128(%rsi,%rax), %r15
	testq	%r15, %r15
	je	.L7934
	movl	(%r15), %ebx
	testl	%ebx, %ebx
	js	.L7826
	movl	%r13d, (%rsp)
	movq	%r15, %rbx
	xorl	%r14d, %r14d
	xorl	%ebp, %ebp
	movq	%r15, %r13
	.p2align 4,,10
	.p2align 3
.L7827:
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC286, %edi
	addq	$4, %r13
	call	new_block_scalar
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC282, %edi
	movl	%eax, %r15d
	call	new_block_scalar
	movq	%rbp, %rdi
	movl	%r15d, %esi
	movl	%eax, %r12d
	call	list_append
	movq	%r14, %rdi
	movl	%r12d, %esi
	movq	%rax, %rbp
	call	list_append
	movl	0(%r13), %r11d
	movq	%rax, %r14
	testl	%r11d, %r11d
	jns	.L7827
	movq	baseblock(%rip), %rdx
	movl	(%rsp), %r13d
	movq	%rbp, 40(%rsp)
	movq	%rbx, %r15
	testq	%rdx, %rdx
	je	.L7828
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7828
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7829:
	leaq	(%rax,%rax,4), %rcx
	xorl	%r10d, %r10d
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%r10w, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7829
.L7828:
	movl	$0, 140(%rsp)
	movq	40(%rsp), %rbp
	movq	$0, 132(%rsp)
	testq	%rbp, %rbp
	je	.L7830
	movl	0(%rbp), %edx
	movl	(%r15), %r12d
	testl	%edx, %edx
	js	.L7830
	movl	$4, %ebx
	jmp	.L7833
	.p2align 4,,10
	.p2align 3
.L8037:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$-1, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %ecx
	pushq	$65
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
.L8036:
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%r12d, %edx
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r8d, %r8d
	movl	$1, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$70
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$70
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$73
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	movl	$-1, %ecx
	pushq	$73
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movl	0(%rbp,%rbx), %edx
	movl	(%r15,%rbx), %r12d
	addq	$4, %rbx
	movl	-4(%rbp,%rbx), %r9d
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testl	%r9d, %r9d
	js	.L7830
.L7833:
	subq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$185
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movq	164(%rsp), %rdi
	movl	172(%rsp), %esi
	call	stencil_val_a
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$1, %ecx
	movq	164(%rsp), %rdi
	movl	172(%rsp), %esi
	movl	%r13d, %edx
	movq	%rdi, 176(%rsp)
	movl	%esi, 184(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r13d, %edx
	movl	$-1, %ecx
	pushq	$58
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movslq	%r12d, %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpq	$0, 16(%rax)
	jne	.L8037
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$1, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	pushq	$67
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %ecx
	pushq	$67
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	jmp	.L8036
.L7951:
	.cfi_restore_state
	movq	$0, 40(%rsp)
	xorl	%r14d, %r14d
	.p2align 4,,10
	.p2align 3
.L7830:
	movl	$_loop.28, %edi
	call	end_stencil
	movq	grid(%rip), %rdx
	movl	$0, _loop.28+12(%rip)
	cmpb	$0, 128(%rdx)
	jne	.L8038
.L7834:
	movl	40(%rdx), %r8d
	testl	%r8d, %r8d
	jle	.L7825
	movq	$0, 32(%rsp)
	movq	%r14, 96(%rsp)
	movq	%r15, 64(%rsp)
	jmp	.L7836
	.p2align 4,,10
	.p2align 3
.L7837:
	addq	$1, 32(%rsp)
	movq	32(%rsp), %rax
	cmpl	%eax, 40(%rdx)
	jle	.L8039
.L7836:
	cmpq	$0, 40(%rsp)
	je	.L7837
	movq	32(%rsp), %rax
	movq	40(%rsp), %rdi
	movq	64(%rsp), %r11
	salq	$4, %rax
	addq	32(%rdx), %rax
	movl	4(%rax), %esi
	movl	(%rax), %r15d
	movl	8(%rax), %r14d
	movslq	(%rdi), %rax
	movl	%esi, (%rsp)
	movl	(%r11), %ecx
	testl	%eax, %eax
	js	.L7837
	movslq	%r14d, %r12
	movslq	%r15d, %rbp
	leaq	0(,%r12,8), %rbx
	movq	%r11, %r12
	movq	%rbx, 8(%rsp)
	leaq	0(,%rbp,8), %rbx
	movq	%rdi, %rbp
	movq	%rbx, 16(%rsp)
	movslq	%esi, %rbx
	salq	$3, %rbx
	movq	%rbx, 24(%rsp)
	movl	%r14d, %ebx
	.p2align 4,,10
	.p2align 3
.L7838:
	movq	8(%rsp), %rdi
	movq	24(%rdx), %rdx
	addq	$4, %rbp
	movl	%r15d, 132(%rsp)
	movq	24(%rsp), %rsi
	movl	%ebx, 140(%rsp)
	addq	$4, %r12
	movq	(%rdx,%rdi), %rdx
	movq	16(%rsp), %rdi
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rdi), %rdx
	movq	(%rdx,%rsi), %rdx
	movl	%ebx, %esi
	leaq	8(%rdx,%rax,8), %r14
	movl	(%rsp), %eax
	movl	%r13d, %edx
	movl	%eax, 136(%rsp)
	movq	132(%rsp), %rdi
	call	vof_concentration_gradient_x
	movslq	0(%rbp), %rax
	movl	(%r12), %ecx
	movq	grid(%rip), %rdx
	movsd	%xmm0, (%r14)
	testl	%eax, %eax
	jns	.L7838
	addq	$1, 32(%rsp)
	movq	32(%rsp), %rax
	cmpl	%eax, 40(%rdx)
	jg	.L7836
.L8039:
	movq	96(%rsp), %r14
	movq	64(%rsp), %r15
.L7825:
	movl	52(%rsp), %edx
	movq	56(%rsp), %rsi
	movl	%r13d, %edi
	call	reconstruction
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7842
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7842
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7843:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7843
.L7842:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movl	fm(%rip), %edx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	xorl	%esi, %esi
	orl	$1, _loop.27+16(%rip)
	movq	$0, 152(%rsp)
	movl	$0, 160(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$202
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$202
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$211
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$211
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	fm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$212
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$212
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	pushq	$226
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	84(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	pushq	$226
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	88(%rsp), %rbx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	$1, _stencil_nop(%rip)
	movq	%rbx, %rax
	shrq	$32, %rax
	movq	%rax, %rdx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	movl	%ebx, %edx
	pushq	$226
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-2, %ecx
	movl	%r13d, %edx
	pushq	$225
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$234
	.cfi_def_cfa_offset 256
	xorl	%r9d, %r9d
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movl	80(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	uf(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$234
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testq	%r14, %r14
	je	.L7841
	movq	40(%rsp), %rax
	movl	(%r14), %r12d
	movl	(%r15), %ebp
	movl	(%rax), %r10d
	testl	%r12d, %r12d
	js	.L7841
	movq	%r15, (%rsp)
	movl	$4, %ebx
	movl	%r10d, %r15d
	.p2align 4,,10
	.p2align 3
.L7846:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	$-2, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r13d, %edx
	pushq	$243
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r15d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	movl	$-2, %ecx
	pushq	$247
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%ebp, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	movl	$-2, %ecx
	pushq	$247
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$248
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$248
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$251
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movl	184(%rsp), %esi
	movq	176(%rsp), %rdi
	call	stencil_val_a
	movq	72(%rsp), %rax
	movl	(%r14,%rbx), %r12d
	movl	(%rax,%rbx), %r15d
	movq	32(%rsp), %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	(%rax,%rbx), %ebp
	addq	$4, %rbx
	movl	-4(%r14,%rbx), %esi
	testl	%esi, %esi
	jns	.L7846
	movq	%rax, %r15
.L7841:
	movl	$_loop.27, %edi
	call	end_stencil
	movslq	fm(%rip), %rax
	movl	$0, _loop.27+12(%rip)
	cmpl	$65535, %eax
	jle	.L7844
	movq	_constant(%rip), %rcx
	movq	grid(%rip), %r12
	movslq	cm(%rip), %rdx
	movsd	-524288(%rcx,%rax,8), %xmm4
	movzbl	128(%r12), %eax
	cmpl	$65535, %edx
	jg	.L7865
	testb	%al, %al
	jne	.L8040
.L7866:
	movl	56(%r12), %edx
	testl	%edx, %edx
	jle	.L7849
	movq	80(%rsp), %rax
	subl	$1, %edx
	pxor	%xmm6, %xmm6
	movl	%r13d, 96(%rsp)
	salq	$4, %rdx
	movq	40(%rsp), %r11
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rax,8), %rax
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	.LC1(%rip), %xmm10
	movq	%rax, 16(%rsp)
	movslq	52(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 64(%rsp)
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 24(%rsp)
	movq	72(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 32(%rsp)
	movslq	48(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 8(%rsp)
	movq	48(%r12), %rax
	leaq	16(%rax), %rbp
	leaq	(%rdx,%rbp), %rbx
	movq	%rbx, (%rsp)
	jmp	.L7880
	.p2align 4,,10
	.p2align 3
.L7867:
	movq	%rbp, %rax
	cmpq	%rbp, (%rsp)
	je	.L8030
	addq	$16, %rbp
.L7880:
	testb	$1, 12(%rax)
	je	.L7867
	movslq	8(%rax), %rcx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movslq	(%rax), %rsi
	movapd	%xmm7, %xmm11
	movslq	4(%rax), %rax
	movsd	dt(%rip), %xmm8
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	24(%r12), %rdx
	movq	(%rdx,%rcx,8), %rdx
	leaq	0(,%rsi,8), %rcx
	divsd	%xmm0, %xmm11
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rsi,8), %rsi
	movq	(%rsi,%rax,8), %r8
	movslq	uf(%rip), %rsi
	leaq	8(%r8,%rsi,8), %r13
	movsd	0(%r13), %xmm14
	mulsd	%xmm14, %xmm8
	mulsd	L0(%rip), %xmm11
	movapd	%xmm11, %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm0
	divsd	%xmm0, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L8020
	movq	-8(%rdx,%rcx), %rdx
	movapd	%xmm7, %xmm9
	movq	(%rdx,%rax,8), %r9
.L7868:
	movapd	%xmm8, %xmm0
	movslq	cm(%rip), %rax
	mulsd	%xmm4, %xmm0
	movsd	8(%r8,%rax,8), %xmm1
	movq	16(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r9,%rax), %r10
	movsd	(%r10), %xmm2
	mulsd	%xmm9, %xmm0
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7872
	comisd	%xmm7, %xmm2
	jnb	.L7872
	movsd	%xmm0, 104(%rsp)
	movapd	%xmm9, %xmm0
	movq	24(%rsp), %rax
	movapd	%xmm9, %xmm15
	mulsd	%xmm8, %xmm0
	xorpd	%xmm10, %xmm15
	movsd	%xmm4, 112(%rsp)
	mulsd	(%r9,%rax), %xmm15
	movq	32(%rsp), %rax
	movsd	(%r9,%rax), %xmm1
	movq	64(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r9,%rax), %xmm2
	movapd	%xmm0, %xmm5
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm5
	mulsd	%xmm15, %xmm0
	mulsd	%xmm15, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	movapd	%xmm1, %xmm5
	mulsd	%xmm6, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	call	line_area
	movsd	112(%rsp), %xmm4
	movsd	104(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7872:
	mulsd	%xmm2, %xmm14
	movq	8(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7867
	movslq	(%r14), %rdx
	movslq	(%r11), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7867
	movq	_attribute(%rip), %rbx
	movl	$4, %ecx
	jmp	.L7879
	.p2align 4,,10
	.p2align 3
.L8041:
	movapd	%xmm9, %xmm1
	movsd	8(%r9,%rax,8), %xmm14
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm14
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7878
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7878:
	mulsd	8(%r9,%rdi,8), %xmm1
	mulsd	%xmm11, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm14, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm5, %xmm0
	mulsd	0(%r13), %xmm0
.L7876:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%r11,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7867
.L7879:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r10), %xmm0
	movapd	%xmm2, %xmm5
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbx,%rsi)
	je	.L7875
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm5
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm5
	movapd	%xmm1, %xmm0
.L7875:
	comisd	%xmm12, %xmm0
	leaq	8(%r8,%rdx,8), %rdx
	ja	.L8041
	movapd	%xmm6, %xmm0
	jmp	.L7876
	.p2align 4,,10
	.p2align 3
.L7844:
	movq	grid(%rip), %r12
	movslq	cm(%rip), %rax
	movzbl	128(%r12), %edx
	cmpl	$65535, %eax
	jg	.L7847
	testb	%dl, %dl
	jne	.L8042
.L7848:
	movl	56(%r12), %edx
	testl	%edx, %edx
	jle	.L7849
	movq	80(%rsp), %rax
	subl	$1, %edx
	pxor	%xmm6, %xmm6
	movl	%r13d, 104(%rsp)
	salq	$4, %rdx
	movapd	%xmm6, %xmm3
	movsd	.LC10(%rip), %xmm7
	movsd	.LC64(%rip), %xmm12
	leaq	8(,%rax,8), %rax
	movsd	.LC5(%rip), %xmm13
	movq	.LC1(%rip), %xmm10
	movq	%rax, 8(%rsp)
	movslq	52(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 32(%rsp)
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 64(%rsp)
	movq	72(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 96(%rsp)
	movslq	48(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	movq	48(%r12), %rax
	leaq	16(%rax), %r9
	leaq	(%rdx,%r9), %rbx
	movq	%rbx, (%rsp)
	movq	40(%rsp), %rbx
	jmp	.L7863
	.p2align 4,,10
	.p2align 3
.L7850:
	movq	%r9, %rax
	cmpq	%r9, (%rsp)
	je	.L8028
.L8043:
	addq	$16, %r9
.L7863:
	testb	$1, 12(%rax)
	je	.L7850
	movslq	8(%rax), %rcx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm11
	movsd	dt(%rip), %xmm8
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	24(%r12), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movslq	(%rax), %rcx
	movslq	4(%rax), %rax
	divsd	%xmm0, %xmm11
	movq	(%rdx), %rdx
	leaq	0(,%rcx,8), %rsi
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	(%rcx,%rax,8), %r8
	movslq	uf(%rip), %rcx
	leaq	8(%r8,%rcx,8), %r13
	movslq	fm(%rip), %rcx
	movsd	0(%r13), %xmm14
	movsd	8(%r8,%rcx,8), %xmm0
	mulsd	%xmm14, %xmm8
	movapd	%xmm0, %xmm1
	mulsd	L0(%rip), %xmm11
	mulsd	%xmm11, %xmm1
	addsd	%xmm6, %xmm1
	divsd	%xmm1, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L8018
	movq	-8(%rdx,%rsi), %rdx
	movapd	%xmm7, %xmm9
	movq	(%rdx,%rax,8), %r10
.L7851:
	mulsd	%xmm8, %xmm0
	movslq	cm(%rip), %rax
	movsd	8(%r8,%rax,8), %xmm1
	movq	8(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r10,%rax), %r11
	mulsd	%xmm9, %xmm0
	movsd	(%r11), %xmm2
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7855
	comisd	%xmm7, %xmm2
	jnb	.L7855
	movsd	%xmm0, 24(%rsp)
	movapd	%xmm9, %xmm0
	movq	64(%rsp), %rax
	movapd	%xmm9, %xmm5
	mulsd	%xmm8, %xmm0
	xorpd	%xmm10, %xmm5
	mulsd	(%r10,%rax), %xmm5
	movq	96(%rsp), %rax
	movsd	(%r10,%rax), %xmm1
	movq	32(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r10,%rax), %xmm2
	movapd	%xmm0, %xmm4
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm4
	mulsd	%xmm5, %xmm0
	mulsd	%xmm5, %xmm4
	mulsd	%xmm13, %xmm4
	subsd	%xmm4, %xmm2
	movapd	%xmm1, %xmm4
	mulsd	%xmm6, %xmm4
	mulsd	%xmm13, %xmm4
	subsd	%xmm4, %xmm2
	call	line_area
	movsd	24(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7855:
	mulsd	%xmm2, %xmm14
	movq	16(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7850
	movslq	(%r14), %rdx
	movslq	(%rbx), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7850
	movq	_attribute(%rip), %rbp
	movl	$4, %ecx
	.p2align 4,,10
	.p2align 3
.L7862:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r11), %xmm1
	movapd	%xmm2, %xmm4
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbp,%rsi)
	je	.L7858
	movapd	%xmm7, %xmm5
	movapd	%xmm7, %xmm4
	subsd	%xmm1, %xmm5
	subsd	%xmm2, %xmm4
	movapd	%xmm5, %xmm1
.L7858:
	comisd	%xmm12, %xmm1
	leaq	8(%r8,%rdx,8), %rdx
	movapd	%xmm6, %xmm0
	jbe	.L7859
	movsd	8(%r10,%rax,8), %xmm0
	movapd	%xmm7, %xmm5
	divsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	mulsd	%xmm8, %xmm1
	subsd	%xmm1, %xmm5
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm5
	ja	.L7861
	mulsd	%xmm9, %xmm5
	movapd	%xmm5, %xmm1
.L7861:
	mulsd	8(%r10,%rdi,8), %xmm1
	mulsd	%xmm11, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm1, %xmm0
	mulsd	%xmm4, %xmm0
	mulsd	0(%r13), %xmm0
.L7859:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%rbx,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	jns	.L7862
	movq	%r9, %rax
	cmpq	%r9, (%rsp)
	jne	.L8043
.L8028:
	movl	104(%rsp), %r13d
	jmp	.L7864
	.p2align 4,,10
	.p2align 3
.L7847:
	movq	_constant(%rip), %rcx
	movsd	-524288(%rcx,%rax,8), %xmm4
	testb	%dl, %dl
	jne	.L8044
.L7881:
	movl	56(%r12), %edx
	testl	%edx, %edx
	jle	.L7849
	movq	80(%rsp), %rax
	subl	$1, %edx
	pxor	%xmm6, %xmm6
	movl	%r13d, 96(%rsp)
	salq	$4, %rdx
	movq	40(%rsp), %r11
	movsd	.LC10(%rip), %xmm7
	movapd	%xmm6, %xmm3
	leaq	8(,%rax,8), %rax
	movsd	.LC64(%rip), %xmm12
	movsd	.LC5(%rip), %xmm13
	movq	.LC1(%rip), %xmm11
	movq	%rax, 8(%rsp)
	movslq	52(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 24(%rsp)
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 32(%rsp)
	movq	72(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 64(%rsp)
	movslq	48(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	movq	48(%r12), %rax
	leaq	16(%rax), %rbp
	leaq	(%rdx,%rbp), %rbx
	movq	%rbx, (%rsp)
	jmp	.L7895
	.p2align 4,,10
	.p2align 3
.L7882:
	movq	%rbp, %rax
	cmpq	%rbp, (%rsp)
	je	.L8030
	addq	$16, %rbp
.L7895:
	testb	$1, 12(%rax)
	je	.L7882
	movslq	8(%rax), %rcx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm7, %xmm10
	movsd	dt(%rip), %xmm8
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	24(%r12), %rdx
	movq	(%rdx,%rcx,8), %rdx
	movslq	(%rax), %rcx
	movslq	4(%rax), %rax
	divsd	%xmm0, %xmm10
	movq	(%rdx), %rdx
	leaq	0(,%rcx,8), %rsi
	movq	16(%rdx), %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	(%rcx,%rax,8), %r8
	movslq	uf(%rip), %rcx
	leaq	8(%r8,%rcx,8), %r13
	movslq	fm(%rip), %rcx
	movsd	0(%r13), %xmm14
	movsd	8(%r8,%rcx,8), %xmm0
	mulsd	%xmm14, %xmm8
	movapd	%xmm0, %xmm1
	mulsd	L0(%rip), %xmm10
	mulsd	%xmm10, %xmm1
	addsd	%xmm6, %xmm1
	divsd	%xmm1, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L8022
	movq	-8(%rdx,%rsi), %rdx
	movapd	%xmm7, %xmm9
	movq	(%rdx,%rax,8), %r9
.L7883:
	mulsd	%xmm8, %xmm0
	movapd	%xmm4, %xmm1
	movq	8(%rsp), %rax
	addsd	%xmm6, %xmm1
	leaq	(%r9,%rax), %r10
	movsd	(%r10), %xmm2
	mulsd	%xmm9, %xmm0
	comisd	%xmm2, %xmm6
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7887
	comisd	%xmm7, %xmm2
	jnb	.L7887
	movsd	%xmm0, 104(%rsp)
	movapd	%xmm9, %xmm0
	movq	32(%rsp), %rax
	movapd	%xmm9, %xmm15
	mulsd	%xmm8, %xmm0
	xorpd	%xmm11, %xmm15
	movsd	%xmm4, 112(%rsp)
	mulsd	(%r9,%rax), %xmm15
	movq	64(%rsp), %rax
	movsd	(%r9,%rax), %xmm1
	movq	24(%rsp), %rax
	subsd	%xmm13, %xmm0
	movsd	(%r9,%rax), %xmm2
	movapd	%xmm0, %xmm5
	addsd	%xmm13, %xmm0
	subsd	%xmm13, %xmm5
	mulsd	%xmm15, %xmm0
	mulsd	%xmm15, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	movapd	%xmm1, %xmm5
	mulsd	%xmm6, %xmm5
	mulsd	%xmm13, %xmm5
	subsd	%xmm5, %xmm2
	call	line_area
	movsd	112(%rsp), %xmm4
	movsd	104(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7887:
	mulsd	%xmm2, %xmm14
	movq	16(%rsp), %rax
	movsd	%xmm14, (%r8,%rax)
	testq	%r14, %r14
	je	.L7882
	movslq	(%r14), %rdx
	movslq	(%r11), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7882
	movq	_attribute(%rip), %rbx
	movl	$4, %ecx
	jmp	.L7894
	.p2align 4,,10
	.p2align 3
.L8045:
	movapd	%xmm9, %xmm1
	movsd	8(%r9,%rax,8), %xmm14
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm14
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7893
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7893:
	mulsd	8(%r9,%rdi,8), %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm14, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm5, %xmm0
	mulsd	0(%r13), %xmm0
.L7891:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%r11,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7882
.L7894:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r10), %xmm0
	movapd	%xmm2, %xmm5
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbx,%rsi)
	je	.L7890
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm5
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm5
	movapd	%xmm1, %xmm0
.L7890:
	comisd	%xmm12, %xmm0
	leaq	8(%r8,%rdx,8), %rdx
	ja	.L8045
	movapd	%xmm6, %xmm0
	jmp	.L7891
.L8038:
	call	update_cache_f
	movq	grid(%rip), %rdx
	jmp	.L7834
.L7865:
	movsd	-524288(%rcx,%rdx,8), %xmm5
	testb	%al, %al
	jne	.L8046
.L7896:
	movl	56(%r12), %edx
	testl	%edx, %edx
	jle	.L7849
	movq	80(%rsp), %rax
	subl	$1, %edx
	pxor	%xmm6, %xmm6
	movl	%r13d, 124(%rsp)
	salq	$4, %rdx
	movapd	%xmm6, %xmm3
	movsd	.LC10(%rip), %xmm7
	movsd	.LC64(%rip), %xmm12
	leaq	8(,%rax,8), %rax
	movsd	.LC5(%rip), %xmm13
	movq	%rax, 8(%rsp)
	movslq	52(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 96(%rsp)
	movslq	56(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 104(%rsp)
	movq	72(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 112(%rsp)
	movslq	48(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	movq	48(%r12), %rax
	leaq	16(%rax), %r8
	leaq	(%rdx,%r8), %rbx
	movq	%rbx, (%rsp)
	movq	40(%rsp), %rbx
	jmp	.L7910
	.p2align 4,,10
	.p2align 3
.L7897:
	movq	%r8, %rax
	cmpq	%r8, (%rsp)
	je	.L8031
	addq	$16, %r8
.L7910:
	testb	$1, 12(%rax)
	je	.L7897
	movslq	8(%rax), %rcx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movslq	(%rax), %rsi
	movapd	%xmm7, %xmm10
	movslq	4(%rax), %rax
	movsd	dt(%rip), %xmm8
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	24(%r12), %rdx
	movq	(%rdx,%rcx,8), %rdx
	leaq	0(,%rsi,8), %rcx
	divsd	%xmm0, %xmm10
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdx
	movq	(%rdx,%rsi,8), %rsi
	movq	(%rsi,%rax,8), %r9
	movslq	uf(%rip), %rsi
	leaq	8(%r9,%rsi,8), %r13
	movsd	0(%r13), %xmm11
	mulsd	%xmm11, %xmm8
	mulsd	L0(%rip), %xmm10
	movapd	%xmm10, %xmm0
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm0
	divsd	%xmm0, %xmm8
	comisd	%xmm6, %xmm8
	jbe	.L8024
	movq	-8(%rdx,%rcx), %rdx
	movapd	%xmm7, %xmm9
	movq	(%rdx,%rax,8), %r10
.L7898:
	movapd	%xmm8, %xmm0
	movapd	%xmm5, %xmm1
	movq	8(%rsp), %rax
	mulsd	%xmm4, %xmm0
	addsd	%xmm6, %xmm1
	leaq	(%r10,%rax), %r11
	movsd	(%r11), %xmm2
	comisd	%xmm2, %xmm6
	mulsd	%xmm9, %xmm0
	divsd	%xmm1, %xmm0
	maxsd	%xmm3, %xmm0
	movapd	%xmm0, %xmm3
	jnb	.L7902
	comisd	%xmm7, %xmm2
	jnb	.L7902
	movapd	%xmm9, %xmm14
	movq	104(%rsp), %rax
	movapd	%xmm9, %xmm15
	xorpd	.LC1(%rip), %xmm15
	mulsd	%xmm8, %xmm14
	movsd	%xmm0, 24(%rsp)
	mulsd	(%r10,%rax), %xmm15
	movq	112(%rsp), %rax
	movsd	%xmm4, 64(%rsp)
	movsd	%xmm5, 32(%rsp)
	movsd	(%r10,%rax), %xmm1
	movq	96(%rsp), %rax
	subsd	%xmm13, %xmm14
	movsd	(%r10,%rax), %xmm2
	movapd	%xmm14, %xmm0
	addsd	%xmm13, %xmm14
	subsd	%xmm13, %xmm0
	mulsd	%xmm15, %xmm14
	mulsd	%xmm15, %xmm0
	mulsd	%xmm13, %xmm0
	subsd	%xmm0, %xmm2
	movapd	%xmm1, %xmm0
	mulsd	%xmm6, %xmm0
	mulsd	%xmm13, %xmm0
	subsd	%xmm0, %xmm2
	movapd	%xmm14, %xmm0
	call	line_area
	movsd	64(%rsp), %xmm4
	movsd	32(%rsp), %xmm5
	movsd	24(%rsp), %xmm3
	movapd	%xmm0, %xmm2
.L7902:
	mulsd	%xmm2, %xmm11
	movq	16(%rsp), %rax
	movsd	%xmm11, (%r9,%rax)
	testq	%r14, %r14
	je	.L7897
	movslq	(%r14), %rdx
	movslq	(%rbx), %rdi
	movslq	(%r15), %rax
	testl	%edx, %edx
	js	.L7897
	movq	_attribute(%rip), %rbp
	movl	$4, %ecx
	jmp	.L7909
	.p2align 4,,10
	.p2align 3
.L8047:
	movapd	%xmm9, %xmm1
	movsd	8(%r10,%rax,8), %xmm15
	mulsd	%xmm8, %xmm1
	divsd	%xmm0, %xmm15
	movapd	%xmm7, %xmm0
	subsd	%xmm1, %xmm0
	movapd	%xmm9, %xmm1
	comisd	%xmm7, %xmm0
	ja	.L7908
	movapd	%xmm0, %xmm1
	mulsd	%xmm9, %xmm1
.L7908:
	mulsd	8(%r10,%rdi,8), %xmm1
	mulsd	%xmm10, %xmm1
	mulsd	%xmm13, %xmm1
	addsd	%xmm15, %xmm1
	movapd	%xmm1, %xmm0
	mulsd	%xmm11, %xmm0
	mulsd	0(%r13), %xmm0
.L7906:
	movsd	%xmm0, (%rdx)
	movslq	(%r14,%rcx), %rdx
	movslq	(%rbx,%rcx), %rdi
	addq	$4, %rcx
	movslq	-4(%r15,%rcx), %rax
	testl	%edx, %edx
	js	.L7897
.L7909:
	leaq	(%rax,%rax,4), %rsi
	movsd	(%r11), %xmm0
	movapd	%xmm2, %xmm11
	leaq	(%rax,%rsi,2), %rsi
	salq	$4, %rsi
	cmpb	$0, 140(%rbp,%rsi)
	je	.L7905
	movapd	%xmm7, %xmm1
	movapd	%xmm7, %xmm11
	subsd	%xmm0, %xmm1
	subsd	%xmm2, %xmm11
	movapd	%xmm1, %xmm0
.L7905:
	comisd	%xmm12, %xmm0
	leaq	8(%r9,%rdx,8), %rdx
	ja	.L8047
	movapd	%xmm6, %xmm0
	jmp	.L7906
	.p2align 4,,10
	.p2align 3
.L8024:
	movsd	.LC23(%rip), %xmm9
	movq	%r9, %r10
	jmp	.L7898
	.p2align 4,,10
	.p2align 3
.L8018:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r10
	jmp	.L7851
	.p2align 4,,10
	.p2align 3
.L8031:
	movl	124(%rsp), %r13d
.L7864:
	movq	40(%rsp), %rbx
	movsd	%xmm3, (%rsp)
	movq	%rbx, %rdi
	call	delete
	movq	%rbx, %rdi
	call	free
	movsd	(%rsp), %xmm3
	comisd	.LC293(%rip), %xmm3
	jbe	.L7911
	subsd	.LC5(%rip), %xmm3
	movl	$.LC294, %esi
	movl	$1, %eax
	movq	stderr(%rip), %rdi
	movapd	%xmm3, %xmm0
	call	fprintf
	movq	stderr(%rip), %rdi
	call	fflush
.L7911:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7916
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L7916
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L7917:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L7917
.L7916:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 152(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	%r13d, %edx
	movl	$0, 160(%rsp)
	pushq	$283
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	80(%rsp), %ebx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %ecx
	movl	%ebx, %edx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movl	152(%rsp), %edx
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	movl	$1, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	xorl	%r8d, %r8d
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	movl	cm(%rip), %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$283
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	testq	%r14, %r14
	je	.L7915
	movq	88(%rsp), %rbp
	movl	(%r14), %r12d
	movl	(%r15), %edx
	movl	0(%rbp), %r13d
	testl	%r12d, %r12d
	js	.L7915
	movl	$4, %ebx
	.p2align 4,,10
	.p2align 3
.L7920:
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 256
	pushq	$.LC164
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	%r12d, %edx
	movl	$1, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	movl	$1, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	uf(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	cm(%rip), %edx
	xorl	%ecx, %ecx
	pushq	$286
	.cfi_def_cfa_offset 264
	pushq	$.LC164
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movl	(%r14,%rbx), %r12d
	movl	0(%rbp,%rbx), %r13d
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	(%r15,%rbx), %edx
	addq	$4, %rbx
	movl	-4(%r14,%rbx), %eax
	testl	%eax, %eax
	jns	.L7920
.L7915:
	movl	$_loop.26, %edi
	call	end_stencil
	movslq	cm(%rip), %rax
	movl	$0, _loop.26+12(%rip)
	cmpl	$65535, %eax
	jg	.L8048
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L8049
.L7921:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7925
	movslq	48(%rsp), %rcx
	movq	80(%rsp), %rbx
	subl	$1, %edx
	movq	24(%rax), %r12
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rcx,8), %rbp
	movslq	120(%rsp), %rcx
	leaq	8(,%rbx,8), %rbx
	movsd	.LC10(%rip), %xmm2
	movq	%rbx, 8(%rsp)
	leaq	16(%rax), %r11
	leaq	8(,%rcx,8), %rbx
	movslq	uf(%rip), %rcx
	movq	%r12, 32(%rsp)
	movq	%rbx, 16(%rsp)
	movq	88(%rsp), %r12
	leaq	8(,%rcx,8), %rbx
	movslq	cm(%rip), %rcx
	leaq	8(,%rcx,8), %rcx
	movq	%rcx, 24(%rsp)
	leaq	(%rdx,%r11), %rcx
	movq	%rcx, (%rsp)
	jmp	.L7924
	.p2align 4,,10
	.p2align 3
.L7926:
	movq	%r11, %rax
	cmpq	%r11, (%rsp)
	je	.L7925
.L8050:
	addq	$16, %r11
.L7924:
	movslq	8(%rax), %rcx
	movl	$1, %edx
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm3
	movq	32(%rsp), %rdi
	sall	%cl, %edx
	cvtsi2sdl	%edx, %xmm0
	movq	(%rdi,%rcx,8), %rdx
	movslq	(%rax), %rdi
	movq	(%rdx), %rdx
	divsd	%xmm0, %xmm3
	movq	16(%rdx), %rsi
	movslq	4(%rax), %rdx
	movq	(%rsi,%rdi,8), %rax
	movq	8(%rsi,%rdi,8), %rsi
	movq	24(%rsp), %rdi
	movq	(%rax,%rdx,8), %rcx
	movq	(%rsi,%rdx,8), %r8
	movq	8(%rsp), %rax
	leaq	(%rcx,%rdi), %r13
	movq	16(%rsp), %rdi
	leaq	(%r8,%rbx), %r9
	movsd	(%rcx,%rbp), %xmm1
	leaq	(%rcx,%rbx), %r10
	movsd	(%r9), %xmm0
	subsd	(%r8,%rbp), %xmm1
	addq	%rcx, %rax
	subsd	(%r10), %xmm0
	mulsd	(%rcx,%rdi), %xmm0
	addsd	%xmm1, %xmm0
	movsd	0(%r13), %xmm1
	mulsd	dt(%rip), %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm0
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
	testq	%r14, %r14
	je	.L7926
	movslq	(%r14), %rax
	movslq	(%r12), %rsi
	movslq	(%r15), %rdi
	testl	%eax, %eax
	js	.L7926
	movl	$4, %edx
	.p2align 4,,10
	.p2align 3
.L7927:
	movsd	(%r9), %xmm0
	subsd	(%r10), %xmm0
	leaq	8(%rcx,%rdi,8), %rdi
	mulsd	8(%rcx,%rsi,8), %xmm0
	movsd	8(%rcx,%rax,8), %xmm1
	subsd	8(%r8,%rax,8), %xmm1
	movslq	(%r14,%rdx), %rax
	movslq	(%r12,%rdx), %rsi
	addq	$4, %rdx
	addsd	%xmm1, %xmm0
	movsd	0(%r13), %xmm1
	mulsd	dt(%rip), %xmm0
	mulsd	%xmm3, %xmm1
	divsd	%xmm1, %xmm0
	addsd	(%rdi), %xmm0
	movsd	%xmm0, (%rdi)
	movslq	-4(%r15,%rdx), %rdi
	testl	%eax, %eax
	jns	.L7927
	movq	%r11, %rax
	cmpq	%r11, (%rsp)
	jne	.L8050
.L7925:
	movq	%r14, %rdi
	call	delete
	movq	%r14, %rdi
	call	free
	movl	48(%rsp), %eax
	leaq	144(%rsp), %rdi
	movl	$-1, 160(%rsp)
	movl	%eax, 144(%rsp)
	movl	52(%rsp), %eax
	movl	%eax, 148(%rsp)
	movl	56(%rsp), %eax
	movl	%eax, 152(%rsp)
	movl	72(%rsp), %eax
	movl	%eax, 156(%rsp)
	call	delete
	addq	$184, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L8048:
	.cfi_restore_state
	movq	_constant(%rip), %rdx
	movsd	-524288(%rdx,%rax,8), %xmm4
	movq	grid(%rip), %rax
	cmpb	$0, 128(%rax)
	jne	.L8051
.L7928:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L7925
	movq	80(%rsp), %rbx
	movslq	48(%rsp), %rcx
	subl	$1, %edx
	movq	24(%rax), %r12
	movq	32(%rax), %rax
	salq	$4, %rdx
	leaq	8(,%rbx,8), %rbp
	leaq	8(,%rcx,8), %rbx
	movslq	120(%rsp), %rcx
	movsd	.LC10(%rip), %xmm2
	leaq	16(%rax), %r10
	movq	%r12, 16(%rsp)
	movq	88(%rsp), %r12
	leaq	8(,%rcx,8), %rcx
	movq	%rcx, (%rsp)
	movslq	uf(%rip), %rcx
	leaq	8(,%rcx,8), %r11
	leaq	(%rdx,%r10), %rcx
	movq	%rcx, 8(%rsp)
	jmp	.L7930
	.p2align 4,,10
	.p2align 3
.L7931:
	movq	%r10, %rax
	cmpq	%r10, 8(%rsp)
	je	.L7925
	addq	$16, %r10
.L7930:
	movslq	8(%rax), %rdx
	movslq	(%rax), %r8
	pxor	%xmm0, %xmm0
	movapd	%xmm2, %xmm3
	movq	16(%rsp), %rsi
	movq	%rdx, %rcx
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rdi
	movslq	4(%rax), %rdx
	movq	(%rdi,%r8,8), %rax
	movq	8(%rdi,%r8,8), %rdi
	movq	(%rax,%rdx,8), %rsi
	movq	(%rdi,%rdx,8), %rdi
	movl	$1, %edx
	sall	%cl, %edx
	movq	(%rsp), %rcx
	cvtsi2sdl	%edx, %xmm0
	leaq	(%rdi,%r11), %r8
	movsd	(%rsi,%rbx), %xmm1
	leaq	(%rsi,%r11), %r9
	subsd	(%rdi,%rbx), %xmm1
	leaq	(%rsi,%rbp), %rax
	divsd	%xmm0, %xmm3
	movsd	(%r8), %xmm0
	subsd	(%r9), %xmm0
	mulsd	(%rsi,%rcx), %xmm0
	addsd	%xmm1, %xmm0
	mulsd	dt(%rip), %xmm0
	mulsd	L0(%rip), %xmm3
	mulsd	%xmm4, %xmm3
	divsd	%xmm3, %xmm0
	addsd	(%rax), %xmm0
	movsd	%xmm0, (%rax)
	testq	%r14, %r14
	je	.L7931
	movslq	(%r14), %rax
	movslq	(%r12), %rcx
	movslq	(%r15), %r13
	testl	%eax, %eax
	js	.L7931
	movl	$4, %edx
	.p2align 4,,10
	.p2align 3
.L7932:
	movsd	(%r8), %xmm0
	subsd	(%r9), %xmm0
	leaq	8(%rsi,%r13,8), %r13
	mulsd	8(%rsi,%rcx,8), %xmm0
	movsd	8(%rsi,%rax,8), %xmm1
	subsd	8(%rdi,%rax,8), %xmm1
	movslq	(%r14,%rdx), %rax
	movslq	(%r12,%rdx), %rcx
	addq	$4, %rdx
	addsd	%xmm1, %xmm0
	mulsd	dt(%rip), %xmm0
	divsd	%xmm3, %xmm0
	addsd	0(%r13), %xmm0
	movsd	%xmm0, 0(%r13)
	movslq	-4(%r15,%rdx), %r13
	testl	%eax, %eax
	jns	.L7932
	jmp	.L7931
	.p2align 4,,10
	.p2align 3
.L7934:
	movq	$0, 40(%rsp)
	xorl	%r14d, %r14d
	jmp	.L7825
.L8042:
	call	update_cache_f
	movq	grid(%rip), %r12
	jmp	.L7848
	.p2align 4,,10
	.p2align 3
.L8020:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r9
	jmp	.L7868
	.p2align 4,,10
	.p2align 3
.L8030:
	movl	96(%rsp), %r13d
	jmp	.L7864
.L8022:
	movsd	.LC23(%rip), %xmm9
	movq	%r8, %r9
	jmp	.L7883
.L8051:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %rax
	movsd	(%rsp), %xmm4
	jmp	.L7928
.L8049:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L7921
.L8046:
	movsd	%xmm4, 8(%rsp)
	movsd	%xmm5, (%rsp)
	call	update_cache_f
	movsd	8(%rsp), %xmm4
	movsd	(%rsp), %xmm5
	movq	grid(%rip), %r12
	jmp	.L7896
.L7849:
	movq	40(%rsp), %rbx
	movq	%rbx, %rdi
	call	delete
	movq	%rbx, %rdi
	call	free
	jmp	.L7911
.L7826:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L7951
	movq	$0, 40(%rsp)
	movslq	(%rdx), %rax
	xorl	%r14d, %r14d
	testl	%eax, %eax
	jns	.L7829
	jmp	.L7830
	.p2align 4,,10
	.p2align 3
.L8040:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r12
	movsd	(%rsp), %xmm4
	jmp	.L7866
.L8044:
	movsd	%xmm4, (%rsp)
	call	update_cache_f
	movq	grid(%rip), %r12
	movsd	(%rsp), %xmm4
	jmp	.L7881
	.cfi_endproc
.LFE359:
	.size	sweep_x, .-sweep_x
	.p2align 4
	.globl	output_facets
	.type	output_facets, @function
output_facets:
.LFB346:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$152, %rsp
	.cfi_def_cfa_offset 208
	movq	baseblock(%rip), %rdx
	movq	216(%rsp), %r14
	movl	224(%rsp), %r13d
	movl	208(%rsp), %r12d
	movq	224(%rsp), %rbp
	testq	%r14, %r14
	cmove	stdout(%rip), %r14
	testl	%r13d, %r13d
	je	.L8054
	testq	%rdx, %rdx
	je	.L8055
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8055
.L8069:
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L8056:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8056
.L8055:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movl	%r12d, %edx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	movl	%r13d, %eax
	movabsq	$-4294967296, %rdx
	andq	%rbp, %rdx
	movq	%rdi, 128(%rsp)
	orq	%rax, %rdx
	movl	%esi, 136(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movq	%rdx, %rbp
	testl	%r13d, %r13d
	js	.L8057
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$420
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$1, %ecx
	movl	%ebp, %edx
	pushq	$420
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	movq	%rbp, %rax
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 224
	shrq	$32, %rax
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$420
	.cfi_def_cfa_offset 232
	movl	%eax, %edx
	movq	%rax, %r15
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	$1, %r8d
	movl	%r15d, %edx
	pushq	$420
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	128(%rsp), %rdi
	movl	136(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	jmp	.L8058
	.p2align 4,,10
	.p2align 3
.L8054:
	testq	%rdx, %rdx
	jne	.L8067
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	movl	$-1, %r13d
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movl	104(%rsp), %eax
	movl	%eax, 136(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
.L8057:
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	movl	%r12d, %edx
	call	_stencil_mycs
.L8058:
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	movl	%r12d, %edx
	pushq	$522
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movl	$_loop.34, %edi
	call	end_stencil
	movq	grid(%rip), %rcx
	movl	$0, _loop.34+12(%rip)
	cmpb	$0, 128(%rcx)
	jne	.L8083
.L8059:
	movl	40(%rcx), %eax
	testl	%eax, %eax
	jle	.L8066
	movslq	%r12d, %rax
	movsd	.LC295(%rip), %xmm4
	xorl	%ebx, %ebx
	leaq	8(,%rax,8), %r15
	jmp	.L8065
	.p2align 4,,10
	.p2align 3
.L8061:
	addq	$1, %rbx
	cmpl	%ebx, 40(%rcx)
	jle	.L8066
.L8065:
	movq	%rbx, %rax
	salq	$4, %rax
	addq	32(%rcx), %rax
	movslq	8(%rax), %rsi
	movslq	(%rax), %rdi
	movl	4(%rax), %r9d
	movq	24(%rcx), %rax
	movq	%rsi, %r11
	movq	(%rax,%rsi,8), %rax
	movslq	%r9d, %rsi
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r15), %xmm13
	comisd	%xmm4, %xmm13
	jbe	.L8061
	movsd	.LC218(%rip), %xmm0
	comisd	%xmm13, %xmm0
	jbe	.L8061
	movabsq	$-4294967296, %rdx
	movl	%r13d, %eax
	movl	%edi, 52(%rsp)
	movl	%r12d, %ecx
	andq	%rdx, %rbp
	movl	%r9d, 56(%rsp)
	movsd	L0(%rip), %xmm7
	movl	%r11d, %edx
	movq	52(%rsp), %rsi
	orq	%rax, %rbp
	movl	%edi, 20(%rsp)
	leaq	64(%rsp), %rdi
	movsd	X0(%rip), %xmm6
	movsd	Y0(%rip), %xmm3
	movq	%rbp, %r8
	movl	%r9d, 16(%rsp)
	movl	%r11d, 60(%rsp)
	movl	%r11d, 12(%rsp)
	movsd	%xmm7, 24(%rsp)
	movsd	%xmm6, 32(%rsp)
	movsd	%xmm3, 40(%rsp)
	call	facet_normal
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	movapd	%xmm13, %xmm0
	pushq	88(%rsp)
	.cfi_def_cfa_offset 224
	pushq	88(%rsp)
	.cfi_def_cfa_offset 232
	pushq	88(%rsp)
	.cfi_def_cfa_offset 240
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	pushq	88(%rsp)
	.cfi_def_cfa_offset 224
	pushq	88(%rsp)
	.cfi_def_cfa_offset 232
	pushq	88(%rsp)
	.cfi_def_cfa_offset 240
	leaq	128(%rsp), %rdi
	call	facets
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	movl	12(%rsp), %r11d
	movq	grid(%rip), %rcx
	cmpl	$2, %eax
	movq	.LC295(%rip), %rax
	movl	16(%rsp), %r9d
	movl	20(%rsp), %r10d
	movq	%rax, %xmm4
	jne	.L8061
	movl	%r11d, %ecx
	movl	$1, %eax
	pxor	%xmm1, %xmm1
	subl	$2, %r10d
	sall	%cl, %eax
	subl	$2, %r9d
	pxor	%xmm2, %xmm2
	movsd	120(%rsp), %xmm6
	cvtsi2sdl	%eax, %xmm1
	pxor	%xmm3, %xmm3
	movl	$.LC153, %esi
	movq	%r14, %rdi
	cvtsi2sdl	%r9d, %xmm3
	movsd	.LC10(%rip), %xmm0
	addq	$1, %rbx
	movsd	.LC5(%rip), %xmm5
	cvtsi2sdl	%r10d, %xmm2
	movl	$4, %eax
	divsd	%xmm1, %xmm0
	pxor	%xmm1, %xmm1
	addsd	%xmm1, %xmm2
	addsd	%xmm3, %xmm1
	movsd	128(%rsp), %xmm3
	addsd	%xmm5, %xmm2
	addsd	%xmm5, %xmm1
	movsd	104(%rsp), %xmm5
	mulsd	24(%rsp), %xmm0
	mulsd	%xmm0, %xmm6
	mulsd	%xmm0, %xmm5
	mulsd	%xmm0, %xmm2
	mulsd	%xmm0, %xmm1
	addsd	32(%rsp), %xmm2
	mulsd	%xmm0, %xmm3
	addsd	40(%rsp), %xmm1
	mulsd	96(%rsp), %xmm0
	addsd	%xmm1, %xmm3
	addsd	%xmm5, %xmm1
	addsd	%xmm2, %xmm0
	addsd	%xmm6, %xmm2
	call	fprintf
	movq	.LC295(%rip), %rax
	movq	grid(%rip), %rcx
	movq	%rax, %xmm4
	cmpl	%ebx, 40(%rcx)
	jg	.L8065
.L8066:
	addq	$152, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movq	%r14, %rdi
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	jmp	fflush
	.p2align 4,,10
	.p2align 3
.L8067:
	.cfi_restore_state
	movslq	(%rdx), %rax
	movl	$-1, %r13d
	testl	%eax, %eax
	jns	.L8069
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	xorl	%esi, %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 216
	pushq	$0
	.cfi_def_cfa_offset 224
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 216
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 224
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$520
	.cfi_def_cfa_offset 232
	pushq	$.LC289
	.cfi_def_cfa_offset 240
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movl	104(%rsp), %eax
	movl	%eax, 136(%rsp)
	movl	$4294967295, %eax
	addq	$32, %rsp
	.cfi_def_cfa_offset 208
	orq	%rax, %rbp
	jmp	.L8057
	.p2align 4,,10
	.p2align 3
.L8083:
	call	update_cache_f
	movq	grid(%rip), %rcx
	jmp	.L8059
	.cfi_endproc
.LFE346:
	.size	output_facets, .-output_facets
	.section	.rodata.str1.1
.LC296:
	.string	"\n=====================\n"
	.text
	.p2align 4
	.type	interface, @function
interface:
.LFB435:
	.cfi_startproc
	subq	$120, %rsp
	.cfi_def_cfa_offset 128
	movdqa	.LC136(%rip), %xmm0
	movl	$.LC76, %esi
	movaps	%xmm0, 32(%rsp)
	movdqa	.LC297(%rip), %xmm0
	movaps	%xmm0, 48(%rsp)
	pxor	%xmm0, %xmm0
	movaps	%xmm0, 64(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 96(%rsp)
	testl	%edi, %edi
	je	.L8088
	movl	$.LC116, %esi
.L8088:
	leaq	32(%rsp), %rdi
	call	fopen
	movl	f(%rip), %edx
	pxor	%xmm0, %xmm0
	movq	$0, 16(%rsp)
	movaps	%xmm0, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 136
	movl	%edx, 8(%rsp)
	movq	%rax, 16(%rsp)
	pushq	24(%rsp)
	.cfi_def_cfa_offset 144
	pushq	24(%rsp)
	.cfi_def_cfa_offset 152
	pushq	24(%rsp)
	.cfi_def_cfa_offset 160
	movq	%rax, fp5.12(%rip)
	call	output_facets
	movq	fp5.12(%rip), %rcx
	addq	$32, %rsp
	.cfi_def_cfa_offset 128
	movl	$23, %edx
	movl	$1, %esi
	movl	$.LC296, %edi
	call	fwrite
	movq	fp5.12(%rip), %rdi
	call	fclose
	xorl	%eax, %eax
	addq	$120, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE435:
	.size	interface, .-interface
	.p2align 4
	.globl	interface_area
	.type	interface_area, @function
interface_area:
.LFB347:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movl	%edi, %ebx
	subq	$104, %rsp
	.cfi_def_cfa_offset 160
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L8093
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8093
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L8094:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8094
.L8093:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	xorl	%esi, %esi
	movl	%ebx, %edx
	pushq	$0
	.cfi_def_cfa_offset 176
	xorl	%r8d, %r8d
	pushq	$554
	.cfi_def_cfa_offset 184
	pushq	$.LC289
	.cfi_def_cfa_offset 192
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$554
	.cfi_def_cfa_offset 184
	pushq	$.LC289
	.cfi_def_cfa_offset 192
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	movl	%ebx, %edx
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 176
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$556
	.cfi_def_cfa_offset 184
	pushq	$.LC289
	.cfi_def_cfa_offset 192
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	movl	$_loop.33, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.33+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L8106
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L8100
.L8108:
	movq	24(%rax), %r14
	movq	32(%rax), %rax
	leal	-1(%rdx), %r13d
	movslq	%ebx, %rcx
	movsd	L0(%rip), %xmm7
	salq	$4, %r13
	movsd	.LC295(%rip), %xmm1
	leaq	8(,%rcx,8), %r15
	leaq	16(%rax), %rbp
	movsd	.LC218(%rip), %xmm2
	pxor	%xmm3, %xmm3
	movsd	%xmm7, 8(%rsp)
	addq	%rbp, %r13
	jmp	.L8099
	.p2align 4,,10
	.p2align 3
.L8096:
	movq	%rbp, %rax
	cmpq	%rbp, %r13
	je	.L8089
.L8107:
	addq	$16, %rbp
.L8099:
	movslq	(%rax), %rdi
	movslq	4(%rax), %rsi
	movslq	8(%rax), %rax
	movq	%rax, %r12
	movq	(%r14,%rax,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rdi,8), %rax
	movq	(%rax,%rsi,8), %rax
	movsd	(%rax,%r15), %xmm13
	comisd	%xmm1, %xmm13
	jbe	.L8096
	comisd	%xmm13, %xmm2
	jbe	.L8096
	movl	%edi, 20(%rsp)
	movl	%ebx, %ecx
	leaq	32(%rsp), %rdi
	movl	%r12d, %edx
	movl	%esi, 24(%rsp)
	movq	20(%rsp), %rsi
	movsd	%xmm3, (%rsp)
	movl	%r12d, 28(%rsp)
	call	mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 168
	movapd	%xmm13, %xmm0
	pushq	56(%rsp)
	.cfi_def_cfa_offset 176
	pushq	56(%rsp)
	.cfi_def_cfa_offset 184
	pushq	56(%rsp)
	.cfi_def_cfa_offset 192
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 168
	pushq	56(%rsp)
	.cfi_def_cfa_offset 176
	pushq	56(%rsp)
	.cfi_def_cfa_offset 184
	pushq	56(%rsp)
	.cfi_def_cfa_offset 192
	leaq	96(%rsp), %rdi
	call	line_length_center
	movl	$1, %eax
	movl	%r12d, %ecx
	pxor	%xmm5, %xmm5
	sall	%cl, %eax
	movapd	%xmm0, %xmm4
	movsd	.LC10(%rip), %xmm0
	movsd	32(%rsp), %xmm3
	cvtsi2sdl	%eax, %xmm5
	movq	.LC218(%rip), %rax
	movq	%rax, %xmm2
	movq	.LC295(%rip), %rax
	divsd	%xmm5, %xmm0
	movq	%rax, %xmm1
	movq	%rbp, %rax
	mulsd	40(%rsp), %xmm0
	addq	$32, %rsp
	.cfi_def_cfa_offset 160
	mulsd	%xmm4, %xmm0
	addsd	%xmm0, %xmm3
	cmpq	%rbp, %r13
	jne	.L8107
.L8089:
	addq	$104, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	movapd	%xmm3, %xmm0
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L8106:
	.cfi_restore_state
	call	update_cache_f
	movq	grid(%rip), %rax
	movl	40(%rax), %edx
	testl	%edx, %edx
	jg	.L8108
.L8100:
	pxor	%xmm3, %xmm3
	jmp	.L8089
	.cfi_endproc
.LFE347:
	.size	interface_area, .-interface_area
	.section	.rodata.str1.1
.LC298:
	.string	"cc"
.LC299:
	.string	"tc"
	.text
	.p2align 4
	.globl	vof_advection
	.type	vof_advection, @function
vof_advection:
.LFB361:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$88, %rsp
	.cfi_def_cfa_offset 144
	movq	%rdi, 16(%rsp)
	testq	%rdi, %rdi
	je	.L8109
	movl	(%rdi), %ebx
	testl	%ebx, %ebx
	js	.L8109
	movl	%esi, %eax
	movl	%ebx, %ebp
	shrl	$31, %eax
	leal	(%rsi,%rax), %edx
	addl	$1, %esi
	movl	%esi, %ecx
	andl	$1, %edx
	shrl	$31, %ecx
	subl	%eax, %edx
	leal	(%rsi,%rcx), %eax
	movslq	%edx, %rdi
	andl	$1, %eax
	movq	%rdi, 32(%rsp)
	subl	%ecx, %eax
	cltq
	movq	%rax, 40(%rsp)
	.p2align 4,,10
	.p2align 3
.L8124:
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC298, %edi
	movslq	%ebp, %rbx
	call	new_block_scalar
	movq	_attribute(%rip), %rdx
	movq	%rbx, 24(%rsp)
	movl	%eax, 12(%rsp)
	leaq	(%rbx,%rbx,4), %rax
	leaq	(%rbx,%rax,2), %rax
	salq	$4, %rax
	movq	128(%rdx,%rax), %rbx
	testq	%rbx, %rbx
	jne	.L8171
.L8113:
	movq	baseblock(%rip), %rcx
	testq	%rcx, %rcx
	jne	.L8172
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	xorl	%r12d, %r12d
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	pushq	$339
	.cfi_def_cfa_offset 160
	pushq	$.LC164
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	44(%rsp), %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$339
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
.L8118:
	movl	$_loop.32, %edi
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.32+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L8173
.L8122:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L8128
	movq	24(%rax), %r15
	movq	32(%rax), %rax
	leal	-1(%rdx), %r11d
	pxor	%xmm4, %xmm4
	movq	24(%rsp), %rdi
	movslq	12(%rsp), %rcx
	salq	$4, %r11
	leaq	16(%rax), %r9
	movq	_attribute(%rip), %r10
	movsd	.LC5(%rip), %xmm1
	movsd	.LC10(%rip), %xmm3
	leaq	8(,%rdi,8), %r14
	leaq	8(,%rcx,8), %r13
	addq	%r9, %r11
	jmp	.L8127
	.p2align 4,,10
	.p2align 3
.L8129:
	movq	%r9, %rax
	cmpq	%r9, %r11
	je	.L8128
	addq	$16, %r9
.L8127:
	movslq	8(%rax), %rdx
	movslq	(%rax), %rsi
	movapd	%xmm1, %xmm0
	movq	(%r15,%rdx,8), %rdx
	movq	(%rdx), %rdx
	movq	16(%rdx), %rcx
	movslq	4(%rax), %rdx
	movq	(%rcx,%rsi,8), %rax
	movq	(%rax,%rdx,8), %rsi
	leaq	(%rsi,%r14), %rdi
	movsd	(%rdi), %xmm2
	cmpltsd	%xmm2, %xmm0
	movapd	%xmm3, %xmm2
	andpd	%xmm0, %xmm2
	andnpd	%xmm4, %xmm0
	orpd	%xmm2, %xmm0
	movsd	%xmm0, (%rsi,%r13)
	testq	%r12, %r12
	je	.L8129
	movslq	(%r12), %rdx
	movslq	(%rbx), %rax
	testl	%edx, %edx
	js	.L8129
	movl	$4, %ecx
	jmp	.L8136
	.p2align 4,,10
	.p2align 3
.L8174:
	comisd	%xmm0, %xmm1
	jbe	.L8160
	movapd	%xmm3, %xmm2
	subsd	%xmm0, %xmm2
	movsd	8(%rsi,%rax,8), %xmm0
	divsd	%xmm2, %xmm0
.L8131:
	movsd	%xmm0, 8(%rsi,%rdx,8)
.L8133:
	movslq	(%r12,%rcx), %rdx
	addq	$4, %rcx
	movslq	-4(%rbx,%rcx), %rax
	testl	%edx, %edx
	js	.L8129
.L8136:
	leaq	(%rax,%rax,4), %r8
	movsd	(%rdi), %xmm0
	leaq	(%rax,%r8,2), %r8
	salq	$4, %r8
	cmpb	$0, 140(%r10,%r8)
	jne	.L8174
	comisd	%xmm1, %xmm0
	pxor	%xmm2, %xmm2
	jbe	.L8134
	movsd	8(%rsi,%rax,8), %xmm2
	divsd	%xmm0, %xmm2
.L8134:
	movsd	%xmm2, 8(%rsi,%rdx,8)
	jmp	.L8133
	.p2align 4,,10
	.p2align 3
.L8160:
	movapd	%xmm4, %xmm0
	jmp	.L8131
	.p2align 4,,10
	.p2align 3
.L8128:
	movl	12(%rsp), %ebx
	movq	32(%rsp), %rax
	movl	%ebp, %edi
	movq	%r12, %rdx
	movq	$sweep_x, 64(%rsp)
	movq	$sweep_y, 72(%rsp)
	movl	%ebx, %esi
	call	*64(%rsp,%rax,8)
	movq	40(%rsp), %rax
	movq	%r12, %rdx
	movl	%ebx, %esi
	movl	%ebp, %edi
	call	*64(%rsp,%rax,8)
	movq	%r12, %rdi
	call	delete
	movq	%r12, %rdi
	call	free
	leaq	56(%rsp), %rdi
	movl	%ebx, 56(%rsp)
	movl	$-1, 60(%rsp)
	call	delete
	addq	$4, 16(%rsp)
	movq	16(%rsp), %rax
	movl	(%rax), %ebp
	testl	%ebp, %ebp
	jns	.L8124
.L8109:
	addq	$88, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L8171:
	.cfi_restore_state
	movl	(%rbx), %r15d
	testl	%r15d, %r15d
	js	.L8113
	movq	%rbx, %r14
	xorl	%r12d, %r12d
	.p2align 4,,10
	.p2align 3
.L8115:
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC299, %edi
	call	new_block_scalar
	movq	%r12, %rdi
	movl	%eax, %esi
	call	list_append
	movq	%rax, %r12
	movslq	%r15d, %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	movq	_attribute(%rip), %rdx
	salq	$4, %rax
	addq	%rdx, %rax
	cmpq	$vof_concentration_refine, 112(%rax)
	je	.L8114
	movq	$vof_concentration_refine, 96(%rax)
	movq	$vof_concentration_refine, 112(%rax)
	movq	$restriction_volume_average, 104(%rax)
	movl	$1, 88(%rax)
	movl	%ebp, 136(%rax)
.L8114:
	movl	4(%r14), %r15d
	addq	$4, %r14
	testl	%r15d, %r15d
	jns	.L8115
	movq	baseblock(%rip), %rcx
	testq	%rcx, %rcx
	jne	.L8168
.L8116:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	pushq	$339
	.cfi_def_cfa_offset 160
	pushq	$.LC164
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	44(%rsp), %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$339
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	testq	%r12, %r12
	je	.L8118
	movl	(%r12), %r10d
	movl	(%rbx), %r15d
	testl	%r10d, %r10d
	js	.L8118
	movq	%rbx, %r13
	movq	%r12, %r14
	movl	%r10d, %edx
	jmp	.L8121
	.p2align 4,,10
	.p2align 3
.L8175:
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$343
	.cfi_def_cfa_offset 160
	pushq	$.LC164
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$343
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$343
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$343
	.cfi_def_cfa_offset 168
.L8169:
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	%ebp, %edx
	xorl	%r9d, %r9d
	movl	104(%rsp), %esi
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	addq	$4, %r14
	addq	$4, %r13
	call	stencil_val
	movl	(%r14), %edx
	movl	0(%r13), %r15d
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	testl	%edx, %edx
	js	.L8118
.L8121:
	movslq	%r15d, %rax
	leaq	(%rax,%rax,4), %rcx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	cmpb	$0, 140(%rax)
	jne	.L8175
	subq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$345
	.cfi_def_cfa_offset 160
	pushq	$.LC164
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$345
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%r15d, %edx
	pushq	$345
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	pushq	$0
	.cfi_def_cfa_offset 160
	pushq	$345
	.cfi_def_cfa_offset 168
	jmp	.L8169
.L8172:
	.cfi_restore_state
	movslq	(%rcx), %rax
	xorl	%r12d, %r12d
	testl	%eax, %eax
	js	.L8176
	.p2align 4,,10
	.p2align 3
.L8117:
	leaq	(%rax,%rax,4), %rsi
	addq	$4, %rcx
	leaq	(%rax,%rsi,2), %rax
	xorl	%esi, %esi
	salq	$4, %rax
	addq	%rdx, %rax
	movw	%si, 80(%rax)
	movl	$0, 84(%rax)
.L8168:
	movslq	(%rcx), %rax
	testl	%eax, %eax
	jns	.L8117
	jmp	.L8116
.L8173:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L8122
.L8176:
	movq	$0, 64(%rsp)
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	xorl	%edi, %edi
	movl	$0, 72(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r8d, %r8d
	xorl	%esi, %esi
	pushq	$339
	.cfi_def_cfa_offset 160
	pushq	$.LC164
	.cfi_def_cfa_offset 168
	pushq	$0
	.cfi_def_cfa_offset 176
	movl	44(%rsp), %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 152
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 160
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	pushq	$339
	.cfi_def_cfa_offset 168
	pushq	$.LC164
	.cfi_def_cfa_offset 176
	movq	96(%rsp), %rdi
	movl	104(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 144
	jmp	.L8118
	.cfi_endproc
.LFE361:
	.size	vof_advection, .-vof_advection
	.p2align 4
	.type	vof_0, @function
vof_0:
.LFB363:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	movl	%edi, %esi
	movq	interfaces(%rip), %rdi
	call	vof_advection
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE363:
	.size	vof_0, .-vof_0
	.section	.rodata.str1.8
	.align 8
.LC304:
	.string	"/root/mnt/basilisk/src/heights.h"
	.text
	.p2align 4
	.globl	heights
	.type	heights, @function
heights:
.LFB382:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	movslq	%edi, %r12
	movl	$.LC274, %edi
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	movq	%rsi, %rbp
	movq	%r12, %r13
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	movq	%rsi, %rbx
	sarq	$32, %rbx
	subq	$312, %rsp
	.cfi_def_cfa_offset 368
	movl	%esi, 240(%rsp)
	movl	%ebx, 244(%rsp)
	call	new_vector
	movslq	nboundary(%rip), %rdx
	movq	%rax, 176(%rsp)
	movq	%rax, %rsi
	movl	%eax, 12(%rsp)
	sarq	$32, %rax
	movq	%rax, 208(%rsp)
	movl	%eax, 16(%rsp)
	leaq	(%r12,%r12,4), %rax
	leaq	(%r12,%rax,2), %rax
	salq	$4, %rax
	movq	%rax, 184(%rsp)
	testl	%edx, %edx
	jle	.L8180
	movq	_attribute(%rip), %rdi
	movslq	%esi, %r14
	movq	(%rdi,%rax), %rcx
	leaq	(%r14,%r14,4), %rax
	leaq	(%r14,%rax,2), %rax
	salq	$4, %rax
	movq	(%rdi,%rax), %r8
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L8181:
	movq	(%rcx,%rax,8), %rsi
	movq	%rsi, (%r8,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L8181
	movq	208(%rsp), %rsi
	leaq	(%rsi,%rsi,4), %rax
	movslq	%esi, %r8
	leaq	(%rsi,%rax,2), %rax
	salq	$4, %rax
	movq	(%rdi,%rax), %rdi
	xorl	%eax, %eax
	.p2align 4,,10
	.p2align 3
.L8182:
	movq	(%rcx,%rax,8), %rsi
	movq	%rsi, (%rdi,%rax,8)
	addq	$1, %rax
	cmpq	%rax, %rdx
	jne	.L8182
.L8183:
	movq	%r8, 24(%rsp)
	leaq	268(%rsp), %rdi
	leaq	8(,%r12,8), %r15
	movl	$-1, %r12d
	movl	%r13d, 268(%rsp)
	movl	$-1, 272(%rsp)
	call	*restriction(%rip)
	movslq	%ebp, %rax
	movq	24(%rsp), %r8
	movq	%rax, 224(%rsp)
	leaq	8(,%rax,8), %rax
	movq	%rax, 160(%rsp)
	movslq	%ebx, %rax
	movq	%rax, 232(%rsp)
	leaq	8(,%rbx,8), %rax
	movq	%rax, 168(%rsp)
	leaq	8(,%r14,8), %rax
	movl	$-2, %r14d
	movq	%rax, 32(%rsp)
	leaq	8(,%r8,8), %rax
	movq	%rax, 24(%rsp)
	movl	%r14d, 196(%rsp)
	movq	%r15, %r14
.L8189:
	movq	grid(%rip), %rax
	movl	16(%rax), %edi
	movq	%rax, 144(%rsp)
	testl	%edi, %edi
	jns	.L8464
.L8184:
	addl	$2, %r12d
	addl	$4, 196(%rsp)
	cmpl	$3, %r12d
	jne	.L8189
	movq	224(%rsp), %rbx
	movq	_attribute(%rip), %rsi
	movq	baseblock(%rip), %rdx
	leaq	(%rbx,%rbx,4), %rax
	leaq	(%rbx,%rax,2), %rax
	movq	232(%rsp), %rbx
	salq	$4, %rax
	movq	%rax, %r14
	leaq	(%rsi,%rax), %rax
	movq	$no_data, 96(%rax)
	movq	$no_restriction, 104(%rax)
	movl	$1, 88(%rax)
	leaq	(%rbx,%rbx,4), %rax
	leaq	(%rbx,%rax,2), %rax
	salq	$4, %rax
	movq	%rax, 16(%rsp)
	addq	%rsi, %rax
	movq	$no_data, 96(%rax)
	movq	$no_restriction, 104(%rax)
	movl	$1, 88(%rax)
	testq	%rdx, %rdx
	je	.L8304
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8304
	.p2align 4,,10
	.p2align 3
.L8305:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8305
.L8304:
	movl	$0, 296(%rsp)
	movl	240(%rsp), %r12d
	movl	$-2, %ebp
	movabsq	$-4294967296, %rbx
	movq	%r14, 24(%rsp)
	movl	244(%rsp), %r15d
	movq	$0, 288(%rsp)
	movq	248(%rsp), %r13
.L8303:
	subq	$8, %rsp
	.cfi_def_cfa_offset 376
	andq	%rbx, %r13
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	orq	%r12, %r13
	movl	%ebp, %ecx
	pushq	$227
	.cfi_def_cfa_offset 392
	movl	%r13d, %edx
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	movl	%ebp, %ecx
	movl	%r13d, %edx
	pushq	$228
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$228
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$229
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r13d, %edx
	pushq	$.LC304
	.cfi_def_cfa_offset 392
	pushq	$0
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	movl	%ebp, %ecx
	movl	%r13d, %edx
	movl	%r13d, %r13d
	pushq	$229
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	movq	%r15, %rdx
	movl	%ebp, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	salq	$32, %rdx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	pushq	$227
	.cfi_def_cfa_offset 392
	orq	%rdx, %r13
	shrq	$32, %rdx
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movq	%rdx, %r14
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	movl	%ebp, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$228
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$228
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$229
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$.LC304
	.cfi_def_cfa_offset 392
	pushq	$0
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 376
	movl	%ebp, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 384
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	addl	$1, %ebp
	pushq	$229
	.cfi_def_cfa_offset 392
	pushq	$.LC304
	.cfi_def_cfa_offset 400
	movq	320(%rsp), %rdi
	movl	328(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 368
	cmpl	$3, %ebp
	jne	.L8303
	movl	$_loop.25, %edi
	movq	24(%rsp), %r14
	call	end_stencil
	movq	grid(%rip), %rax
	movl	$0, _loop.25+12(%rip)
	cmpb	$0, 128(%rax)
	jne	.L8465
.L8306:
	movl	40(%rax), %edx
	testl	%edx, %edx
	jle	.L8338
	movq	24(%rax), %r10
	movq	32(%rax), %rax
	leal	-1(%rdx), %r9d
	salq	$4, %r9
	movsd	.LC15(%rip), %xmm4
	movq	.LC17(%rip), %xmm2
	leaq	16(%rax), %r8
	movsd	.LC18(%rip), %xmm5
	movsd	.LC19(%rip), %xmm8
	movsd	.LC16(%rip), %xmm7
	movq	160(%rsp), %rsi
	addq	%r8, %r9
	movq	168(%rsp), %rdi
	.p2align 4,,10
	.p2align 3
.L8337:
	movslq	8(%rax), %rdx
	movslq	4(%rax), %rcx
	movsd	.LC16(%rip), %xmm6
	movsd	.LC19(%rip), %xmm9
	movq	(%r10,%rdx,8), %rdx
	salq	$3, %rcx
	movq	(%rdx), %r11
	movslq	(%rax), %rdx
	movq	16(%r11), %rax
	leaq	(%rax,%rdx,8), %r11
	movq	$-2, %rax
	movq	(%r11), %rdx
	addq	%rcx, %rdx
.L8336:
	movq	(%r11,%rax,8), %rbp
	movl	%eax, %ebx
	movq	0(%rbp,%rcx), %rbp
	movsd	0(%rbp,%rsi), %xmm1
	comisd	%xmm4, %xmm1
	jbe	.L8449
	movapd	%xmm1, %xmm0
	subsd	%xmm6, %xmm0
	movapd	%xmm0, %xmm3
	andpd	%xmm2, %xmm3
	comisd	%xmm3, %xmm5
	jb	.L8311
.L8310:
	movq	(%rdx), %rbp
	pxor	%xmm10, %xmm10
	cvtsi2sdl	%ebx, %xmm10
	addq	%rsi, %rbp
	movsd	0(%rbp), %xmm3
	addsd	%xmm10, %xmm0
	comisd	%xmm4, %xmm3
	andpd	%xmm2, %xmm0
	jbe	.L8452
	subsd	%xmm7, %xmm3
.L8319:
	andpd	%xmm2, %xmm3
	comisd	%xmm0, %xmm3
	jbe	.L8311
	addsd	%xmm10, %xmm1
	movsd	%xmm1, 0(%rbp)
.L8311:
	movq	(%rdx,%rax,8), %rbp
	movsd	0(%rbp,%rdi), %xmm1
	comisd	%xmm4, %xmm1
	jbe	.L8453
	movsd	.LC16(%rip), %xmm0
	movapd	%xmm1, %xmm3
	subsd	%xmm0, %xmm3
	movapd	%xmm3, %xmm0
	andpd	%xmm2, %xmm0
	comisd	%xmm0, %xmm5
	jb	.L8325
.L8324:
	pxor	%xmm10, %xmm10
	cvtsi2sdl	%ebx, %xmm10
	movq	(%rdx), %rbx
	addq	%rdi, %rbx
	movsd	(%rbx), %xmm0
	addsd	%xmm10, %xmm3
	comisd	%xmm4, %xmm0
	andpd	%xmm2, %xmm3
	jbe	.L8456
	subsd	%xmm6, %xmm0
.L8333:
	andpd	%xmm2, %xmm0
	comisd	%xmm3, %xmm0
	jbe	.L8325
	addsd	%xmm10, %xmm1
	movsd	%xmm1, (%rbx)
.L8325:
	addq	$1, %rax
	cmpq	$3, %rax
	jne	.L8336
	movq	%r8, %rax
	cmpq	%r8, %r9
	je	.L8338
	addq	$16, %r8
	jmp	.L8337
	.p2align 4,,10
	.p2align 3
.L8453:
	movsd	.LC19(%rip), %xmm0
	comisd	%xmm1, %xmm0
	jbe	.L8454
	movsd	.LC16(%rip), %xmm0
	movapd	%xmm1, %xmm3
	addsd	%xmm0, %xmm3
	andpd	%xmm2, %xmm3
	comisd	%xmm3, %xmm5
	jb	.L8325
.L8328:
	movapd	%xmm0, %xmm3
	addsd	%xmm1, %xmm3
	jmp	.L8324
	.p2align 4,,10
	.p2align 3
.L8449:
	comisd	%xmm1, %xmm8
	jbe	.L8450
	movapd	%xmm1, %xmm3
	movapd	%xmm7, %xmm0
	addsd	%xmm7, %xmm3
	andpd	%xmm2, %xmm3
	comisd	%xmm3, %xmm5
	jb	.L8311
.L8314:
	addsd	%xmm1, %xmm0
	jmp	.L8310
	.p2align 4,,10
	.p2align 3
.L8456:
	comisd	%xmm0, %xmm9
	jbe	.L8333
	addsd	%xmm6, %xmm0
	jmp	.L8333
	.p2align 4,,10
	.p2align 3
.L8450:
	movapd	%xmm1, %xmm0
	andpd	%xmm2, %xmm0
	comisd	%xmm0, %xmm5
	jb	.L8311
	comisd	%xmm1, %xmm8
	ja	.L8466
	movapd	%xmm1, %xmm0
	jmp	.L8310
	.p2align 4,,10
	.p2align 3
.L8452:
	comisd	%xmm3, %xmm8
	jbe	.L8319
	addsd	%xmm7, %xmm3
	jmp	.L8319
	.p2align 4,,10
	.p2align 3
.L8454:
	movapd	%xmm1, %xmm3
	andpd	%xmm2, %xmm3
	comisd	%xmm3, %xmm5
	jb	.L8325
	comisd	%xmm1, %xmm0
	ja	.L8467
	movapd	%xmm1, %xmm3
	jmp	.L8324
.L8338:
	movq	_attribute(%rip), %rax
	movq	16(%rsp), %rbx
	leaq	288(%rsp), %rdi
	movq	$refine_h_x, 96(%rax,%r14)
	movq	$refine_h_y, 96(%rax,%rbx)
	movl	12(%rsp), %eax
	movq	$-1, 296(%rsp)
	movl	%eax, 288(%rsp)
	movl	208(%rsp), %eax
	movl	%eax, 292(%rsp)
	call	delete
	addq	$312, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
.L8464:
	.cfi_restore_state
	cmpb	$0, 128(%rax)
	jne	.L8468
.L8185:
	movq	144(%rsp), %rbx
	movq	96(%rbx), %rdx
	movq	(%rdx), %rax
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L8186
	movq	24(%rbx), %rcx
	subl	$1, %edx
	movsd	.LC2(%rip), %xmm0
	movq	160(%rsp), %r9
	movq	168(%rsp), %r10
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %rsi
	leaq	8(%rax,%rdx,8), %rcx
	.p2align 4,,10
	.p2align 3
.L8187:
	movslq	(%rax), %rdx
	movslq	4(%rax), %r8
	addq	$8, %rax
	movq	(%rsi,%rdx,8), %rdx
	movq	(%rdx,%r8,8), %rdx
	movsd	%xmm0, (%rdx,%r9)
	movsd	%xmm0, (%rdx,%r10)
	cmpq	%rax, %rcx
	jne	.L8187
.L8186:
	testl	%edi, %edi
	jle	.L8184
	cmpl	$1, %r12d
	je	.L8469
	pxor	%xmm7, %xmm7
	movsd	%xmm7, 216(%rsp)
	cmpl	$-1, %r12d
	je	.L8470
.L8193:
	pxor	%xmm7, %xmm7
	movsd	%xmm7, 200(%rsp)
.L8194:
	movq	$0, 40(%rsp)
	movl	196(%rsp), %r15d
	movl	$1, %ebx
	movq	$8, 136(%rsp)
	.p2align 4,,10
	.p2align 3
.L8301:
	movq	144(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L8471
.L8195:
	movq	grid(%rip), %r13
	movq	136(%rsp), %rax
	movq	96(%r13), %r10
	addq	%rax, %rax
	movq	%rax, 56(%rsp)
	leaq	(%r10,%rax), %rdx
	movq	(%rdx), %rsi
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L8200
	movq	24(%r13), %rcx
	subl	$1, %edx
	movq	24(%rsp), %r9
	movq	%r13, 48(%rsp)
	movq	136(%rsp), %rax
	movq	32(%rsp), %r13
	leaq	8(%rsi,%rdx,8), %rbp
	movq	(%rcx,%rax), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r11
	.p2align 4,,10
	.p2align 3
.L8199:
	movslq	(%rsi), %rcx
	movslq	4(%rsi), %r8
	addq	$8, %rsi
	movq	%rcx, %rdx
	movq	%r8, %rax
	movq	(%r11,%rcx,8), %rdi
	addl	%r15d, %edx
	addl	%r15d, %eax
	movslq	%edx, %rdx
	cltq
	movq	(%rdi,%r8,8), %rcx
	movq	(%r11,%rdx,8), %rdx
	movq	(%rdi,%rax,8), %rax
	movq	(%rdx,%r8,8), %rdx
	movsd	(%rdx,%r14), %xmm0
	movsd	%xmm0, (%rcx,%r13)
	movsd	(%rax,%r14), %xmm0
	movsd	%xmm0, (%rcx,%r9)
	cmpq	%rsi, %rbp
	jne	.L8199
	movq	48(%rsp), %r13
.L8200:
	movq	40(%rsp), %rcx
	movl	16(%r13), %eax
	movl	%ecx, 48(%rsp)
	movl	%ecx, %r8d
	cmpl	%ecx, %eax
	jge	.L8472
.L8198:
	movq	boundaries(%rip), %rbp
	testq	%rbp, %rbp
	je	.L8202
.L8201:
	movq	0(%rbp), %rdi
	addq	$8, %rbp
	testq	%rdi, %rdi
	je	.L8202
.L8213:
	movq	8(%rdi), %rax
	testq	%rax, %rax
	je	.L8201
	movl	12(%rsp), %esi
	addq	$8, %rbp
	movl	%ebx, %edx
	movq	$-1, 296(%rsp)
	movl	%esi, 288(%rsp)
	movl	16(%rsp), %esi
	movl	%esi, 292(%rsp)
	leaq	288(%rsp), %rsi
	call	*%rax
	movq	-8(%rbp), %rdi
	testq	%rdi, %rdi
	jne	.L8213
.L8202:
	movq	grid(%rip), %rax
	movq	%rax, 144(%rsp)
	movl	16(%rax), %eax
	movl	%eax, 192(%rsp)
	cmpl	%ebx, %eax
	jge	.L8473
.L8211:
	addq	$1, 40(%rsp)
	movq	40(%rsp), %rax
	addq	$8, 136(%rsp)
	leal	1(%rax), %ebx
	cmpl	192(%rsp), %ebx
	jle	.L8301
	jmp	.L8184
	.p2align 4,,10
	.p2align 3
.L8471:
	call	update_cache_f
	jmp	.L8195
	.p2align 4,,10
	.p2align 3
.L8472:
	cmpb	$0, 128(%r13)
	jne	.L8474
.L8203:
	movq	40(%rsp), %rcx
	salq	$4, %rcx
	addq	%rcx, %r10
	movq	%rcx, 64(%rsp)
	movl	8(%r10), %edx
	movq	(%r10), %rsi
	testl	%edx, %edx
	jle	.L8207
	movq	24(%r13), %rcx
	subl	$1, %edx
	movq	24(%rsp), %r11
	movl	%eax, 88(%rsp)
	movq	136(%rsp), %rdi
	movq	32(%rsp), %rbp
	movl	%r8d, 80(%rsp)
	movq	%r13, 72(%rsp)
	movq	-8(%rcx,%rdi), %rcx
	movq	(%rcx), %rcx
	movq	16(%rcx), %r10
	leaq	8(%rsi,%rdx,8), %rcx
	movq	%rcx, %r13
	.p2align 4,,10
	.p2align 3
.L8206:
	movl	(%rsi), %edx
	movslq	4(%rsi), %rdi
	addq	$8, %rsi
	leal	(%rdx,%r12), %ecx
	movq	%rdi, %rax
	movslq	%ecx, %rcx
	addl	%r15d, %eax
	movq	(%r10,%rcx,8), %rcx
	cltq
	movq	(%rcx,%rdi,8), %r9
	movslq	%edx, %rcx
	addl	%r15d, %edx
	movslq	%edx, %rdx
	movq	(%r10,%rcx,8), %rcx
	movq	(%r10,%rdx,8), %rdx
	movsd	(%r9,%r14), %xmm0
	movq	(%rcx,%rdi,8), %r8
	movq	(%rcx,%rax,8), %rax
	movq	(%rdx,%rdi,8), %rdx
	movsd	%xmm0, (%r8,%rbp)
	movsd	(%rdx,%r14), %xmm0
	leal	(%rdi,%r12), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rdx
	movsd	%xmm0, (%r9,%rbp)
	movsd	(%rdx,%r14), %xmm0
	movsd	%xmm0, (%r8,%r11)
	movsd	(%rax,%r14), %xmm0
	movsd	%xmm0, (%rdx,%r11)
	cmpq	%rsi, %r13
	jne	.L8206
	movq	72(%rsp), %r13
	movl	80(%rsp), %r8d
	movl	88(%rsp), %eax
.L8207:
	cmpl	%eax, 48(%rsp)
	jg	.L8198
	cmpb	$0, 128(%r13)
	jne	.L8475
.L8208:
	movq	64(%rsp), %rdx
	addq	104(%r13), %rdx
	movq	(%rdx), %r9
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L8198
	movl	16(%rsp), %esi
	movl	12(%rsp), %ecx
	subl	$1, %edx
	movl	%r12d, 64(%rsp)
	leaq	8(%r9,%rdx,8), %rax
	movq	176(%rsp), %r12
	movq	%r14, 72(%rsp)
	movq	%r9, %rbp
	movq	%rsi, 48(%rsp)
	movq	184(%rsp), %r13
	movq	%rax, %r14
	movl	%r15d, 80(%rsp)
	movq	%rcx, %r15
	movl	%ebx, 88(%rsp)
	movl	%r8d, %ebx
	.p2align 4,,10
	.p2align 3
.L8209:
	movl	0(%rbp), %ecx
	movl	4(%rbp), %edx
	movl	%ebx, %esi
	movl	%ebx, 284(%rsp)
	movabsq	$-4294967296, %rax
	addq	$8, %rbp
	movl	%ecx, 276(%rsp)
	andq	%rax, %r12
	movq	_attribute(%rip), %rcx
	orq	%r15, %r12
	movl	%edx, 280(%rsp)
	movq	276(%rsp), %rdi
	movl	%r12d, %edx
	movl	%r12d, %r12d
	call	*96(%rcx,%r13)
	movq	48(%rsp), %rdx
	movq	_attribute(%rip), %rcx
	movq	276(%rsp), %rdi
	movl	284(%rsp), %esi
	salq	$32, %rdx
	orq	%rdx, %r12
	shrq	$32, %rdx
	call	*96(%rcx,%r13)
	cmpq	%rbp, %r14
	jne	.L8209
	movq	%r12, 176(%rsp)
	movq	72(%rsp), %r14
	movl	80(%rsp), %r15d
	movl	64(%rsp), %r12d
	movl	88(%rsp), %ebx
	jmp	.L8198
	.p2align 4,,10
	.p2align 3
.L8473:
	movq	144(%rsp), %rax
	cmpb	$0, 128(%rax)
	jne	.L8476
.L8214:
	movq	144(%rsp), %rax
	movq	56(%rsp), %rdx
	addq	96(%rax), %rdx
	movq	(%rdx), %rcx
	movl	8(%rdx), %edx
	testl	%edx, %edx
	jle	.L8211
	movq	24(%rax), %rsi
	subl	$1, %edx
	movq	%rcx, %r10
	pxor	%xmm1, %xmm1
	movq	136(%rsp), %rax
	movsd	.LC10(%rip), %xmm3
	movq	(%rsi,%rax), %rsi
	leaq	8(%rcx,%rdx,8), %rax
	movl	%r15d, %ecx
	movq	%rax, 152(%rsp)
	movq	%r14, %rax
	movq	(%rsi), %rsi
	movq	16(%rsi), %r11
	.p2align 4,,10
	.p2align 3
.L8300:
	movslq	(%r10), %rdx
	movslq	4(%r10), %rsi
	movq	160(%rsp), %rbx
	movq	(%r11,%rdx,8), %r15
	movq	%rdx, %r13
	movq	%rsi, %rbp
	leaq	0(,%rsi,8), %rdx
	movq	(%r15,%rsi,8), %r14
	leaq	(%r14,%rax), %rsi
	leaq	(%r14,%rbx), %r8
	movsd	(%rsi), %xmm6
	cmpl	$1, %r12d
	je	.L8477
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	movapd	%xmm1, %xmm5
	xorl	%r9d, %r9d
.L8215:
	movl	%ebp, 48(%rsp)
	subl	%r12d, %r13d
	movl	$1, %ebx
	movq	%rdx, %rbp
	movq	%r15, 56(%rsp)
	movq	%rax, %r15
	movq	%r14, 64(%rsp)
	movl	%r12d, %r14d
	movq	%r11, %r12
.L8235:
	cmpl	$2, %ebx
	jg	.L8217
	leal	(%rcx,%r13), %edi
	movslq	%edi, %rdi
	movq	(%r12,%rdi,8), %rdi
	movq	(%rdi,%rbp), %rdi
	movsd	(%rdi,%r15), %xmm0
.L8218:
	comisd	%xmm1, %xmm2
	addsd	%xmm0, %xmm4
	jbe	.L8219
	comisd	%xmm2, %xmm3
	ja	.L8478
.L8219:
	comisd	%xmm3, %xmm2
	jb	.L8226
	comisd	%xmm0, %xmm1
	jnb	.L8479
.L8226:
	comisd	%xmm2, %xmm1
	jnb	.L8480
.L8230:
	ucomisd	%xmm2, %xmm0
	jp	.L8223
	je	.L8481
.L8223:
	addl	$1, %ebx
	addl	%r14d, %r13d
	cmpl	$5, %ebx
	jne	.L8235
.L8460:
	movq	%r15, %rax
	movq	%r12, %r11
	movl	48(%rsp), %ebp
	movl	%r14d, %r12d
	movq	56(%rsp), %r15
	movq	64(%rsp), %r14
.L8225:
	cmpl	$-1, %r12d
	je	.L8482
	cmpl	$-1, %r9d
	je	.L8483
	cvttsd2sil	%xmm2, %edx
	cmpl	$-1, %edx
	je	.L8367
	movq	.LC2(%rip), %rbx
	movq	%rbx, (%r8)
.L8242:
	movsd	(%rsi), %xmm6
	addq	168(%rsp), %r14
	cmpl	$1, %r12d
	je	.L8484
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	movapd	%xmm1, %xmm5
	xorl	%r13d, %r13d
.L8257:
	movl	%r13d, 48(%rsp)
	subl	%r12d, %ebp
	movl	$1, %ebx
	movq	%rax, %r13
	movq	%r14, 56(%rsp)
	movl	%ecx, %r14d
.L8277:
	cmpl	$2, %ebx
	jg	.L8259
	leal	(%r14,%rbp), %edx
	movslq	%edx, %rdx
	movq	(%r15,%rdx,8), %rdx
	movsd	(%rdx,%r13), %xmm0
.L8260:
	comisd	%xmm1, %xmm2
	addsd	%xmm0, %xmm4
	jbe	.L8261
	comisd	%xmm2, %xmm3
	ja	.L8485
.L8261:
	comisd	%xmm3, %xmm2
	jb	.L8268
	comisd	%xmm0, %xmm1
	jnb	.L8486
.L8268:
	comisd	%xmm2, %xmm1
	jnb	.L8487
.L8272:
	ucomisd	%xmm2, %xmm0
	jp	.L8265
	je	.L8488
.L8265:
	addl	$1, %ebx
	addl	%r12d, %ebp
	cmpl	$5, %ebx
	jne	.L8277
.L8461:
	movq	%r13, %rax
	movl	%r14d, %ecx
	movl	48(%rsp), %r13d
	movq	56(%rsp), %r14
.L8267:
	cmpl	$-1, %r12d
	je	.L8489
	cmpl	$-1, %r13d
	je	.L8490
	cvttsd2sil	%xmm2, %edx
	cmpl	$-1, %edx
	je	.L8366
	movq	.LC2(%rip), %rbx
	movq	%rbx, (%r14)
.L8285:
	addq	$8, %r10
	cmpq	%r10, 152(%rsp)
	jne	.L8300
	movq	%rax, %r14
	movl	%ecx, %r15d
	jmp	.L8211
	.p2align 4,,10
	.p2align 3
.L8259:
	movslq	%ebp, %rdx
	movq	24(%rsp), %rax
	movq	(%r15,%rdx,8), %rdx
	movsd	(%rdx,%rax), %xmm0
	jmp	.L8260
	.p2align 4,,10
	.p2align 3
.L8217:
	movslq	%r13d, %rdi
	movq	32(%rsp), %rax
	movq	(%r12,%rdi,8), %rdi
	movq	(%rdi,%rbp), %rdi
	movsd	(%rdi,%rax), %xmm0
	jmp	.L8218
	.p2align 4,,10
	.p2align 3
.L8487:
	comisd	%xmm3, %xmm0
	jb	.L8272
	pxor	%xmm0, %xmm0
	pxor	%xmm2, %xmm2
	movq	%r13, %rax
	movl	%r14d, %ecx
	cvtsi2sdl	%ebx, %xmm0
	movl	48(%rsp), %r13d
	movq	56(%rsp), %r14
	addsd	.LC5(%rip), %xmm0
	movsd	.LC16(%rip), %xmm6
	mulsd	216(%rsp), %xmm6
	cvtsi2sdl	%r12d, %xmm2
	subsd	%xmm4, %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm0, %xmm6
	movapd	%xmm6, %xmm4
.L8271:
	cmpl	$-1, %r12d
	je	.L8279
	cmpl	$-1, %r13d
	jne	.L8366
	movsd	.LC15(%rip), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L8444
.L8495:
	movsd	.LC16(%rip), %xmm6
	movapd	%xmm4, %xmm2
	subsd	%xmm6, %xmm2
.L8292:
	comisd	%xmm0, %xmm5
	andpd	.LC17(%rip), %xmm2
	jbe	.L8446
.L8496:
	movsd	.LC16(%rip), %xmm6
	movapd	%xmm5, %xmm0
	subsd	%xmm6, %xmm0
.L8296:
	movapd	%xmm0, %xmm6
	andpd	.LC17(%rip), %xmm6
	cmpnltsd	%xmm6, %xmm2
	movapd	%xmm2, %xmm0
	andpd	%xmm2, %xmm5
	andnpd	%xmm4, %xmm0
	orpd	%xmm0, %xmm5
.L8288:
	comisd	.LC303(%rip), %xmm5
	jbe	.L8299
	movsd	.LC2(%rip), %xmm5
.L8299:
	movsd	%xmm5, (%r14)
	jmp	.L8285
	.p2align 4,,10
	.p2align 3
.L8480:
	comisd	%xmm3, %xmm0
	jb	.L8230
	pxor	%xmm0, %xmm0
	movq	%r12, %r11
	pxor	%xmm2, %xmm2
	movl	%r14d, %r12d
	cvtsi2sdl	%ebx, %xmm0
	movq	%r15, %rax
	movl	48(%rsp), %ebp
	movq	56(%rsp), %r15
	addsd	.LC5(%rip), %xmm0
	movsd	.LC16(%rip), %xmm6
	cvtsi2sdl	%r12d, %xmm2
	movq	64(%rsp), %r14
	mulsd	216(%rsp), %xmm6
	subsd	%xmm4, %xmm0
	mulsd	%xmm2, %xmm0
	addsd	%xmm0, %xmm6
	movapd	%xmm6, %xmm4
.L8229:
	cmpl	$-1, %r12d
	je	.L8237
	cmpl	$-1, %r9d
	jne	.L8367
	movsd	.LC15(%rip), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L8439
.L8493:
	movsd	.LC16(%rip), %xmm6
	movapd	%xmm4, %xmm2
	subsd	%xmm6, %xmm2
.L8249:
	comisd	%xmm0, %xmm5
	andpd	.LC17(%rip), %xmm2
	jbe	.L8441
.L8494:
	movsd	.LC16(%rip), %xmm6
	movapd	%xmm5, %xmm0
	subsd	%xmm6, %xmm0
.L8253:
	movapd	%xmm0, %xmm6
	andpd	.LC17(%rip), %xmm6
	cmpnltsd	%xmm6, %xmm2
	movapd	%xmm2, %xmm0
	andpd	%xmm2, %xmm5
	andnpd	%xmm4, %xmm0
	orpd	%xmm0, %xmm5
.L8245:
	comisd	.LC303(%rip), %xmm5
	jbe	.L8256
	movsd	.LC2(%rip), %xmm5
.L8256:
	movsd	%xmm5, (%r8)
	jmp	.L8242
	.p2align 4,,10
	.p2align 3
.L8481:
	movapd	%xmm4, %xmm0
	leaq	288(%rsp), %rdi
	movq	%r10, 120(%rsp)
	movq	%r8, 128(%rsp)
	movl	%ecx, 116(%rsp)
	movl	%r9d, 112(%rsp)
	movq	%rsi, 104(%rsp)
	movsd	%xmm2, 96(%rsp)
	movsd	%xmm6, 88(%rsp)
	movsd	%xmm5, 80(%rsp)
	movsd	%xmm4, 72(%rsp)
	call	modf
	pxor	%xmm1, %xmm1
	movq	104(%rsp), %rsi
	movq	.LC10(%rip), %rax
	ucomisd	%xmm1, %xmm0
	movsd	72(%rsp), %xmm4
	movl	116(%rsp), %ecx
	movsd	80(%rsp), %xmm5
	movsd	88(%rsp), %xmm6
	movq	%rax, %xmm3
	movsd	96(%rsp), %xmm2
	movl	112(%rsp), %r9d
	movq	120(%rsp), %r10
	movq	128(%rsp), %r8
	jp	.L8460
	je	.L8223
	jmp	.L8460
	.p2align 4,,10
	.p2align 3
.L8488:
	movapd	%xmm4, %xmm0
	leaq	288(%rsp), %rdi
	movq	%r11, 104(%rsp)
	movq	%r10, 96(%rsp)
	movsd	%xmm2, 88(%rsp)
	movsd	%xmm5, 80(%rsp)
	movsd	%xmm6, 72(%rsp)
	movsd	%xmm4, 64(%rsp)
	call	modf
	pxor	%xmm1, %xmm1
	movq	96(%rsp), %r10
	movq	.LC10(%rip), %rax
	ucomisd	%xmm1, %xmm0
	movsd	64(%rsp), %xmm4
	movsd	72(%rsp), %xmm6
	movsd	80(%rsp), %xmm5
	movsd	88(%rsp), %xmm2
	movq	%rax, %xmm3
	movq	104(%rsp), %r11
	jp	.L8461
	je	.L8265
	jmp	.L8461
	.p2align 4,,10
	.p2align 3
.L8478:
	comisd	%xmm0, %xmm1
	jnb	.L8222
	comisd	%xmm3, %xmm0
	jnb	.L8222
	movapd	%xmm0, %xmm2
	jmp	.L8223
	.p2align 4,,10
	.p2align 3
.L8485:
	comisd	%xmm0, %xmm1
	jnb	.L8264
	comisd	%xmm3, %xmm0
	jnb	.L8264
	movapd	%xmm0, %xmm2
	jmp	.L8265
	.p2align 4,,10
	.p2align 3
.L8477:
	movsd	(%r8), %xmm5
	ucomisd	.LC302(%rip), %xmm5
	jp	.L8368
	je	.L8344
.L8368:
	movsd	.LC15(%rip), %xmm0
	movsd	.LC301(%rip), %xmm2
	addsd	%xmm5, %xmm0
	divsd	%xmm2, %xmm0
	cvttsd2sil	%xmm0, %edi
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%edi, %xmm0
	leal	-1(%rdi), %r9d
	mulsd	%xmm2, %xmm0
	subsd	%xmm0, %xmm5
	testl	%edi, %edi
	je	.L8345
	pxor	%xmm2, %xmm2
	movapd	%xmm5, %xmm4
	cvtsi2sdl	%r9d, %xmm2
	jmp	.L8215
	.p2align 4,,10
	.p2align 3
.L8484:
	movsd	(%r14), %xmm2
	ucomisd	.LC302(%rip), %xmm2
	jp	.L8383
	je	.L8356
.L8383:
	movsd	.LC15(%rip), %xmm0
	movsd	.LC301(%rip), %xmm4
	movapd	%xmm2, %xmm5
	addsd	%xmm2, %xmm0
	divsd	%xmm4, %xmm0
	cvttsd2sil	%xmm0, %edx
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%edx, %xmm0
	leal	-1(%rdx), %r13d
	mulsd	%xmm4, %xmm0
	subsd	%xmm0, %xmm5
	testl	%edx, %edx
	je	.L8357
	pxor	%xmm2, %xmm2
	movapd	%xmm5, %xmm4
	cvtsi2sdl	%r13d, %xmm2
	jmp	.L8257
	.p2align 4,,10
	.p2align 3
.L8489:
	ucomisd	.LC23(%rip), %xmm2
	jp	.L8391
	je	.L8279
.L8391:
	comisd	%xmm6, %xmm1
	jnb	.L8281
	comisd	%xmm3, %xmm6
	jb	.L8491
.L8281:
	movq	.LC302(%rip), %rbx
	movq	%rbx, (%r14)
	jmp	.L8285
	.p2align 4,,10
	.p2align 3
.L8482:
	ucomisd	.LC23(%rip), %xmm2
	jp	.L8376
	je	.L8237
.L8376:
	comisd	%xmm6, %xmm1
	movsd	.LC302(%rip), %xmm0
	jnb	.L8239
	comisd	%xmm3, %xmm6
	jb	.L8492
.L8239:
	movsd	%xmm0, (%r8)
	movsd	(%rsi), %xmm2
	movapd	%xmm1, %xmm5
	xorl	%r13d, %r13d
	addq	168(%rsp), %r14
	movapd	%xmm2, %xmm6
	movapd	%xmm2, %xmm4
	jmp	.L8257
	.p2align 4,,10
	.p2align 3
.L8483:
	ucomisd	.LC23(%rip), %xmm2
	jp	.L8245
	jne	.L8245
	movsd	.LC15(%rip), %xmm0
	comisd	%xmm0, %xmm4
	ja	.L8493
.L8439:
	movsd	.LC19(%rip), %xmm2
	comisd	%xmm4, %xmm2
	jbe	.L8440
	movsd	.LC16(%rip), %xmm6
	comisd	%xmm0, %xmm5
	addsd	%xmm4, %xmm6
	movapd	%xmm6, %xmm2
	andpd	.LC17(%rip), %xmm2
	ja	.L8494
.L8441:
	movsd	.LC19(%rip), %xmm0
	comisd	%xmm5, %xmm0
	jbe	.L8442
	movsd	.LC16(%rip), %xmm6
	addsd	%xmm5, %xmm6
	movapd	%xmm6, %xmm0
	jmp	.L8253
	.p2align 4,,10
	.p2align 3
.L8490:
	ucomisd	.LC23(%rip), %xmm2
	jp	.L8288
	jne	.L8288
	movsd	.LC15(%rip), %xmm0
	comisd	%xmm0, %xmm4
	ja	.L8495
.L8444:
	movsd	.LC19(%rip), %xmm2
	comisd	%xmm4, %xmm2
	jbe	.L8445
	movsd	.LC16(%rip), %xmm6
	comisd	%xmm0, %xmm5
	addsd	%xmm4, %xmm6
	movapd	%xmm6, %xmm2
	andpd	.LC17(%rip), %xmm2
	ja	.L8496
.L8446:
	movsd	.LC19(%rip), %xmm0
	comisd	%xmm5, %xmm0
	jbe	.L8447
	movsd	.LC16(%rip), %xmm6
	addsd	%xmm5, %xmm6
	movapd	%xmm6, %xmm0
	jmp	.L8296
	.p2align 4,,10
	.p2align 3
.L8344:
	movsd	.LC2(%rip), %xmm5
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	movl	$-1, %r9d
	jmp	.L8215
	.p2align 4,,10
	.p2align 3
.L8356:
	movsd	.LC2(%rip), %xmm5
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	movl	$-1, %r13d
	jmp	.L8257
	.p2align 4,,10
	.p2align 3
.L8279:
	movsd	%xmm4, (%r14)
	jmp	.L8285
	.p2align 4,,10
	.p2align 3
.L8237:
	movsd	%xmm4, (%r8)
	jmp	.L8242
.L8492:
	comisd	%xmm1, %xmm2
	jbe	.L8240
	comisd	%xmm2, %xmm3
	ja	.L8239
.L8240:
	comisd	%xmm3, %xmm2
	movsd	.LC300(%rip), %xmm0
	jnb	.L8243
	movsd	.LC301(%rip), %xmm0
.L8243:
	addsd	%xmm4, %xmm0
	jmp	.L8239
.L8491:
	comisd	%xmm1, %xmm2
	jbe	.L8282
	comisd	%xmm2, %xmm3
	ja	.L8281
.L8282:
	comisd	%xmm3, %xmm2
	movsd	.LC300(%rip), %xmm0
	jnb	.L8286
	movsd	.LC301(%rip), %xmm0
.L8286:
	addsd	%xmm4, %xmm0
	movsd	%xmm0, (%r14)
	jmp	.L8285
.L8475:
	movl	%r8d, 48(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r13
	movl	48(%rsp), %r8d
	jmp	.L8208
.L8474:
	movl	%ecx, 64(%rsp)
	call	update_cache_f
	movq	grid(%rip), %r13
	movl	64(%rsp), %r8d
	movq	96(%r13), %r10
	movl	16(%r13), %eax
	jmp	.L8203
.L8476:
	call	update_cache_f
	movq	grid(%rip), %rax
	movq	%rax, 144(%rsp)
	movl	16(%rax), %eax
	movl	%eax, 192(%rsp)
	jmp	.L8214
.L8264:
	pxor	%xmm2, %xmm2
	movq	%r13, %rax
	movl	%r14d, %ecx
	movl	48(%rsp), %r13d
	cvtsi2sdl	%ebx, %xmm2
	movq	56(%rsp), %r14
	mulsd	%xmm0, %xmm2
	subsd	%xmm2, %xmm4
	movapd	%xmm0, %xmm2
	jmp	.L8267
.L8222:
	pxor	%xmm2, %xmm2
	movq	%r15, %rax
	movq	%r12, %r11
	movl	48(%rsp), %ebp
	cvtsi2sdl	%ebx, %xmm2
	movl	%r14d, %r12d
	movq	56(%rsp), %r15
	movq	64(%rsp), %r14
	mulsd	%xmm0, %xmm2
	subsd	%xmm2, %xmm4
	movapd	%xmm0, %xmm2
	jmp	.L8225
.L8479:
	movq	%r12, %r11
	pxor	%xmm0, %xmm0
	movl	%r14d, %r12d
	movq	%r15, %rax
	cvtsi2sdl	%r12d, %xmm0
	subsd	.LC5(%rip), %xmm4
	movl	48(%rsp), %ebp
	movsd	.LC16(%rip), %xmm6
	movq	56(%rsp), %r15
	mulsd	200(%rsp), %xmm6
	movq	64(%rsp), %r14
	mulsd	%xmm0, %xmm4
	addsd	%xmm6, %xmm4
	jmp	.L8229
.L8486:
	pxor	%xmm0, %xmm0
	subsd	.LC5(%rip), %xmm4
	movq	%r13, %rax
	movl	%r14d, %ecx
	cvtsi2sdl	%r12d, %xmm0
	movl	48(%rsp), %r13d
	movq	56(%rsp), %r14
	movsd	.LC16(%rip), %xmm6
	mulsd	200(%rsp), %xmm6
	mulsd	%xmm0, %xmm4
	addsd	%xmm6, %xmm4
	jmp	.L8271
.L8445:
	movapd	%xmm4, %xmm2
	jmp	.L8292
.L8447:
	movapd	%xmm5, %xmm0
	jmp	.L8296
.L8440:
	movapd	%xmm4, %xmm2
	jmp	.L8249
.L8442:
	movapd	%xmm5, %xmm0
	jmp	.L8253
.L8345:
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	jmp	.L8215
.L8357:
	movapd	%xmm6, %xmm4
	movapd	%xmm6, %xmm2
	jmp	.L8257
.L8470:
	movsd	.LC10(%rip), %xmm7
	movsd	%xmm7, 200(%rsp)
	jmp	.L8194
.L8469:
	movsd	.LC10(%rip), %xmm7
	movsd	%xmm7, 216(%rsp)
	jmp	.L8193
.L8468:
	call	update_cache_f
	movq	grid(%rip), %rax
	movq	%rax, 144(%rsp)
	movl	16(%rax), %edi
	jmp	.L8185
.L8465:
	call	update_cache_f
	movq	grid(%rip), %rax
	jmp	.L8306
.L8180:
	movslq	176(%rsp), %r14
	movslq	208(%rsp), %r8
	jmp	.L8183
.L8367:
	movapd	%xmm4, %xmm5
	jmp	.L8245
.L8467:
	movsd	.LC16(%rip), %xmm0
	jmp	.L8328
.L8466:
	movapd	%xmm7, %xmm0
	jmp	.L8314
.L8366:
	movapd	%xmm4, %xmm5
	jmp	.L8288
	.cfi_endproc
.LFE382:
	.size	heights, .-heights
	.p2align 4
	.globl	height_normal
	.type	height_normal, @function
height_normal:
.LFB389:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	movl	%ecx, %r9d
	movslq	%edx, %rcx
	movq	%r8, %r13
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	movq	%rdi, %r12
	movq	%rsi, %rdi
	pushq	%rbx
	.cfi_def_cfa_offset 32
	.cfi_offset 3, -32
	sarq	$32, %rdi
	leaq	0(,%rdi,8), %r10
	subq	$48, %rsp
	.cfi_def_cfa_offset 80
	movq	grid(%rip), %rax
	movq	.LC17(%rip), %xmm2
	movq	%rsi, (%rsp)
	movq	24(%rax), %rax
	movl	%edx, 8(%rsp)
	movq	(%rax,%rcx,8), %rax
	movslq	%esi, %rcx
	addq	$1, %rcx
	movq	(%rax), %rax
	leaq	0(,%rcx,8), %r11
	movq	16(%rax), %r8
	movslq	%r9d, %rax
	addq	$1, %rax
	movq	(%r8,%rcx,8), %rcx
	movq	-8(%r8,%r11), %r9
	movq	(%rcx,%rdi,8), %rbx
	movq	-16(%r8,%r11), %rcx
	movq	(%rcx,%rdi,8), %rcx
	movsd	(%rbx,%rax,8), %xmm0
	movq	8(%r9,%r10), %rdi
	subsd	(%rcx,%rax,8), %xmm0
	movq	-8(%r9,%r10), %rcx
	movsd	(%rdi,%rax,8), %xmm1
	leaq	16(%rsp), %rdi
	subsd	(%rcx,%rax,8), %xmm1
	movl	$normal_y, %eax
	movl	$normal_x, %ecx
	andpd	%xmm2, %xmm0
	movq	%rax, %rbx
	andpd	%xmm2, %xmm1
	comisd	%xmm0, %xmm1
	cmova	%rcx, %rbx
	cmovbe	%rcx, %rax
	movq	%r13, %rcx
	call	*%rax
	movsd	24(%rsp), %xmm0
	movsd	16(%rsp), %xmm2
	ucomisd	.LC2(%rip), %xmm0
	movsd	32(%rsp), %xmm1
	jp	.L8500
	jne	.L8500
	movq	(%rsp), %rsi
	movl	8(%rsp), %edx
	movq	%r13, %rcx
	leaq	16(%rsp), %rdi
	call	*%rbx
	movsd	16(%rsp), %xmm2
	movsd	24(%rsp), %xmm0
	movsd	32(%rsp), %xmm1
.L8500:
	movsd	%xmm2, (%r12)
	movq	%r12, %rax
	movsd	%xmm0, 8(%r12)
	movsd	%xmm1, 16(%r12)
	addq	$48, %rsp
	.cfi_def_cfa_offset 32
	popq	%rbx
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE389:
	.size	height_normal, .-height_normal
	.section	.rodata.str1.1
.LC306:
	.string	"h"
.LC307:
	.string	"k"
	.text
	.p2align 4
	.globl	curvature
	.type	curvature, @function
curvature:
.LFB401:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pxor	%xmm4, %xmm4
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$664, %rsp
	.cfi_def_cfa_offset 720
	movzbl	736(%rsp), %eax
	movl	720(%rsp), %r14d
	movsd	728(%rsp), %xmm5
	movb	%al, 39(%rsp)
	movl	724(%rsp), %eax
	movsd	%xmm5, 152(%rsp)
	ucomisd	%xmm4, %xmm5
	movl	%eax, 128(%rsp)
	jp	.L8507
	movq	%xmm5, %rax
	cmove	.LC10(%rip), %rax
	movq	%rax, 152(%rsp)
.L8507:
	movslq	%r14d, %rcx
	movq	_attribute(%rip), %rax
	leaq	(%rcx,%rcx,4), %rdx
	movq	%rcx, 160(%rsp)
	leaq	(%rcx,%rdx,2), %rdx
	salq	$4, %rdx
	addq	%rax, %rdx
	movl	156(%rdx), %ecx
	movl	160(%rdx), %ebx
	movl	%ecx, 204(%rsp)
	movl	%ebx, 136(%rsp)
	movl	%ecx, 200(%rsp)
	testl	%ecx, %ecx
	je	.L8709
.L8509:
	movslq	128(%rsp), %rcx
	movl	$.LC90, %esi
	movl	$.LC307, %edi
	leaq	(%rcx,%rcx,4), %rdx
	movq	%rcx, %rbx
	movq	%rcx, 208(%rsp)
	leaq	(%rcx,%rdx,2), %rdx
	salq	$4, %rdx
	addq	%rdx, %rax
	movl	$1, %edx
	movq	$curvature_prolongation, 96(%rax)
	movq	$curvature_prolongation, 112(%rax)
	movq	$curvature_restriction, 104(%rax)
	call	new_block_scalar
	movl	%ebx, %esi
	movl	%eax, %edi
	movl	%eax, 104(%rsp)
	call	scalar_clone
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L8512
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8512
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L8513:
	leaq	(%rax,%rax,4), %rcx
	xorl	%edi, %edi
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%di, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8513
.L8512:
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	%r14d, %edx
	movl	$-1, %r12d
	movq	$0, 256(%rsp)
	movl	$0, 264(%rsp)
	call	_stencil_interfacial
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$575
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$0
	.cfi_def_cfa_offset 752
	movl	136(%rsp), %ebx
	movq	288(%rsp), %rdi
	movl	296(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val_a
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$581
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$0
	.cfi_def_cfa_offset 752
	movq	288(%rsp), %rdi
	movl	296(%rsp), %esi
	call	stencil_val_a
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%edi, %edi
	movl	$0, 552(%rsp)
	xorl	%esi, %esi
	movl	$1, %ecx
	movl	%r14d, %edx
	movq	$0, 544(%rsp)
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$193
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	movl	$-1, %ecx
	movl	%r14d, %edx
	pushq	$193
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 736
	movl	$1, %r8d
	movl	%r14d, %edx
	pushq	$193
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	movl	$-1, %r8d
	movl	%r14d, %edx
	pushq	$193
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%ebx, %edx
	xorl	%r9d, %r9d
	pushq	$583
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$0
	.cfi_def_cfa_offset 752
	movq	288(%rsp), %rdi
	movl	296(%rsp), %esi
	call	stencil_val_a
	movl	168(%rsp), %ebx
	movl	232(%rsp), %ecx
	movq	%rbx, %rbp
	movq	%rbx, 144(%rsp)
	movl	%ecx, %ebx
	salq	$32, %rbp
	movq	%rcx, 152(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	orq	%rbp, %rbx
	shrq	$32, %rbp
.L8511:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 520(%rsp)
	movl	%ebp, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 528(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$382
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%r8d, %r8d
	movl	%ebp, %edx
	addl	$1, %r12d
	pushq	$383
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %r12d
	jne	.L8511
	movq	%rbx, %rax
	movl	$-1, %r12d
	shrq	$32, %rax
	movq	%rax, %rbp
.L8514:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movq	$0, 520(%rsp)
	movl	%ebp, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 528(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$401
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%r8d, %r8d
	movl	%ebp, %edx
	pushq	$401
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%r8d, %r8d
	movl	%ebp, %edx
	addl	$1, %r12d
	pushq	$402
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %r12d
	jne	.L8514
	movl	$-1, %r12d
	movl	%ebx, %ebp
.L8515:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movq	$0, 520(%rsp)
	movl	%ebp, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 528(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$382
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%r12d, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%ebp, %edx
	addl	$1, %r12d
	pushq	$383
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %r12d
	jne	.L8515
	movl	$-1, %ebp
.L8516:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movl	%ebp, %r8d
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movq	$0, 520(%rsp)
	movl	%ebx, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$0, 528(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$401
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%ebp, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	pushq	$401
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	movl	%ebp, %r8d
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%ebx, %edx
	addl	$1, %ebp
	pushq	$402
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %ebp
	jne	.L8516
	movq	512(%rsp), %rdi
	movl	520(%rsp), %esi
	movl	%r14d, %edx
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%r8d, %r8d
	movl	%r14d, %edx
	pushq	$423
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	movl	$_loop.24, %edi
	call	end_stencil
	movq	grid(%rip), %rcx
	movl	$0, _loop.24+12(%rip)
	cmpb	$0, 128(%rcx)
	jne	.L8710
	movl	40(%rcx), %esi
	testl	%esi, %esi
	jle	.L8620
.L8720:
	movq	160(%rsp), %rax
	movl	$0, 108(%rsp)
	xorl	%r13d, %r13d
	movl	%r14d, 192(%rsp)
	movsd	.LC10(%rip), %xmm5
	leaq	8(,%rax,8), %r8
	movslq	104(%rsp), %rax
	movl	$0, 184(%rsp)
	movsd	.LC2(%rip), %xmm4
	movq	%r8, %rbp
	leaq	8(,%rax,8), %rax
	movq	%rax, 24(%rsp)
	movslq	136(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 168(%rsp)
	movslq	200(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 176(%rsp)
	leaq	400(%rsp), %rax
	movq	%rax, 144(%rsp)
	jmp	.L8575
	.p2align 4,,10
	.p2align 3
.L8522:
	movq	(%rdx,%rax,8), %r15
	pxor	%xmm7, %xmm7
	movq	(%r15,%r12), %r15
	comisd	(%r15,%rbp), %xmm7
	jnb	.L8521
	movq	(%rsi,%rax,8), %r15
	comisd	(%r15,%rbp), %xmm7
	jnb	.L8521
	addq	$2, %rax
	cmpq	$3, %rax
	jne	.L8522
.L8523:
	movq	24(%rsp), %rax
	movsd	%xmm4, (%rdi,%rax)
.L8541:
	addq	$1, %r13
	cmpl	%r13d, 40(%rcx)
	jle	.L8711
.L8575:
	movq	%r13, %rax
	salq	$4, %rax
	addq	32(%rcx), %rax
	movslq	(%rax), %rbx
	movslq	4(%rax), %r10
	movslq	8(%rax), %r8
	movq	24(%rcx), %rax
	movl	%ebx, 8(%rsp)
	salq	$3, %rbx
	leaq	0(,%r10,8), %r12
	movq	(%rax,%r8,8), %rax
	movl	%r10d, 16(%rsp)
	movq	%r8, %r14
	movq	(%rax), %rax
	movq	16(%rax), %r11
	movq	$-1, %rax
	leaq	(%r11,%rbx), %rdx
	movq	(%rdx), %r9
	leaq	(%r9,%r12), %rsi
	movq	(%rsi), %rdi
	movsd	(%rdi,%rbp), %xmm0
	comisd	%xmm5, %xmm0
	jnb	.L8522
	pxor	%xmm7, %xmm7
	movq	$-1, %rax
	comisd	%xmm0, %xmm7
	jb	.L8521
.L8524:
	movq	(%rdx,%rax,8), %r15
	movq	(%r15,%r12), %r15
	movsd	(%r15,%rbp), %xmm0
	comisd	%xmm5, %xmm0
	jnb	.L8521
	movq	(%rsi,%rax,8), %r15
	movsd	(%r15,%rbp), %xmm0
	comisd	%xmm5, %xmm0
	jnb	.L8521
	addq	$2, %rax
	cmpq	$3, %rax
	je	.L8523
	jmp	.L8524
	.p2align 4,,10
	.p2align 3
.L8521:
	movq	24(%rsp), %rax
	movl	%r14d, %ecx
	pxor	%xmm0, %xmm0
	movapd	%xmm5, %xmm7
	movq	112(%rsp), %rdx
	movl	%r14d, 520(%rsp)
	leaq	(%rdi,%rax), %r15
	movl	8(%rsp), %eax
	salq	$32, %rdx
	orq	120(%rsp), %rdx
	movl	%eax, 512(%rsp)
	movl	16(%rsp), %eax
	movl	%eax, 516(%rsp)
	movl	$1, %eax
	sall	%cl, %eax
	movq	-8(%r11,%rbx), %rcx
	cvtsi2sdl	%eax, %xmm0
	movq	8(%r11,%rbx), %rax
	movq	(%rcx,%r10,8), %rcx
	movq	(%rax,%r10,8), %rax
	divsd	%xmm0, %xmm7
	movsd	(%rax,%rbp), %xmm1
	movq	-8(%r9,%r12), %rax
	subsd	(%rcx,%rbp), %xmm1
	movq	8(%r9,%r12), %rcx
	movsd	(%rcx,%rbp), %xmm2
	subsd	(%rax,%rbp), %xmm2
	movapd	%xmm1, %xmm0
	andpd	.LC17(%rip), %xmm0
	movapd	%xmm2, %xmm3
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm0, %xmm3
	movsd	%xmm7, 80(%rsp)
	movsd	L0(%rip), %xmm7
	movsd	%xmm7, 96(%rsp)
	ja	.L8525
	movq	$kappa_y, 88(%rsp)
	movl	$kappa_x, %eax
.L8526:
	movq	%r8, 64(%rsp)
	movq	512(%rsp), %rdi
	movq	%rdx, 40(%rsp)
	movl	520(%rsp), %esi
	movsd	%xmm4, 72(%rsp)
	movsd	%xmm2, 56(%rsp)
	movsd	%xmm1, 48(%rsp)
	call	*%rax
	movsd	72(%rsp), %xmm4
	movq	.LC10(%rip), %rax
	movq	40(%rsp), %rdx
	movsd	48(%rsp), %xmm1
	ucomisd	%xmm4, %xmm0
	movsd	56(%rsp), %xmm2
	movq	64(%rsp), %r8
	movq	%rax, %xmm5
	jp	.L8628
	je	.L8527
.L8628:
	pxor	%xmm7, %xmm7
	comisd	%xmm1, %xmm7
	ja	.L8712
.L8617:
	movsd	96(%rsp), %xmm2
	mulsd	80(%rsp), %xmm2
	movapd	%xmm5, %xmm1
	divsd	%xmm2, %xmm1
	movapd	%xmm0, %xmm2
	andpd	.LC17(%rip), %xmm2
	comisd	%xmm1, %xmm2
	jbe	.L8685
	pxor	%xmm7, %xmm7
	comisd	%xmm7, %xmm0
	jbe	.L8713
.L8538:
	ucomisd	%xmm4, %xmm1
	movsd	%xmm1, (%r15)
	jp	.L8616
	je	.L8539
.L8616:
	movq	grid(%rip), %rcx
	addl	$1, 108(%rsp)
	addq	$1, %r13
	cmpl	%r13d, 40(%rcx)
	jg	.L8575
.L8711:
	movl	192(%rsp), %r14d
.L8518:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L8578
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8578
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L8579:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8579
.L8578:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 276(%rsp)
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$-1, %ebx
	movl	$0, 284(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$594
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movl	136(%rsp), %r12d
	movl	%r12d, %edx
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$595
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	300(%rsp), %rdi
	movl	308(%rsp), %esi
	call	stencil_val
	movq	300(%rsp), %rdi
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	movl	%r14d, %edx
	movl	276(%rsp), %esi
	call	_stencil_interfacial
.L8577:
	movl	$-1, %ebp
.L8580:
	movl	%ebp, 272(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movl	%ebx, 276(%rsp)
	xorl	%r8d, %r8d
	movl	%r12d, %edx
	xorl	%esi, %esi
	movl	$0, 284(%rsp)
	addl	$1, %ebp
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$604
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	300(%rsp), %rdi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$605
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	300(%rsp), %rdi
	movl	308(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %ebp
	jne	.L8580
	addl	$1, %ebx
	cmpl	$2, %ebx
	jne	.L8577
	movl	%r14d, %edx
	xorl	%edi, %edi
	xorl	%esi, %esi
	movl	$-1, %ebx
	movq	$0, 512(%rsp)
	movl	$0, 520(%rsp)
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$461
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
.L8582:
	movl	$-1, %ebp
.L8583:
	movl	%ebp, 516(%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	movl	%ebx, 520(%rsp)
	xorl	%r8d, %r8d
	movl	%r14d, %edx
	xorl	%esi, %esi
	movl	$0, 528(%rsp)
	addl	$1, %ebp
	pushq	$0
	.cfi_def_cfa_offset 736
	pushq	$472
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$472
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	movq	544(%rsp), %rdi
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	movl	%r14d, %edx
	movl	520(%rsp), %esi
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 736
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$474
	.cfi_def_cfa_offset 744
	pushq	$.LC129
	.cfi_def_cfa_offset 752
	movq	544(%rsp), %rdi
	movl	552(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpl	$2, %ebp
	jne	.L8583
	addl	$1, %ebx
	cmpl	$2, %ebx
	jne	.L8582
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movq	$0, 276(%rsp)
	xorl	%edi, %edi
	pushq	$622
	.cfi_def_cfa_offset 736
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$0
	.cfi_def_cfa_offset 752
	movl	160(%rsp), %ebx
	movl	308(%rsp), %esi
	movl	%ebx, %edx
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	cmpb	$0, 39(%rsp)
	je	.L8585
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$624
	.cfi_def_cfa_offset 736
	movl	%ebx, %edx
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$1
	.cfi_def_cfa_offset 752
	movq	300(%rsp), %rdi
	movl	308(%rsp), %esi
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
.L8586:
	movl	$_loop.23, %edi
	call	end_stencil
	movq	grid(%rip), %rcx
	movl	$0, _loop.23+12(%rip)
	cmpb	$0, 128(%rcx)
	jne	.L8714
	movl	40(%rcx), %edx
	testl	%edx, %edx
	jle	.L8624
.L8721:
	movslq	104(%rsp), %rax
	xorl	%r11d, %r11d
	movl	$0, 48(%rsp)
	movl	%r14d, 56(%rsp)
	movsd	.LC2(%rip), %xmm4
	movq	%r11, %rbx
	leaq	8(,%rax,8), %r8
	movq	160(%rsp), %rax
	movl	$0, 40(%rsp)
	movsd	.LC10(%rip), %xmm5
	movsd	152(%rsp), %xmm7
	leaq	8(,%rax,8), %rax
	movq	%rax, 24(%rsp)
	movq	208(%rsp), %rax
	leaq	8(,%rax,8), %rax
	movq	%rax, 16(%rsp)
	jmp	.L8613
	.p2align 4,,10
	.p2align 3
.L8715:
	movq	24(%rsp), %r11
	movsd	(%rax,%r11), %xmm13
	movq	$-1, %rax
	comisd	%xmm5, %xmm13
	jb	.L8691
.L8593:
	movq	(%rdx,%rax,8), %rdi
	pxor	%xmm3, %xmm3
	movq	(%rdi,%rbp), %rdi
	comisd	(%rdi,%r11), %xmm3
	jnb	.L8592
	movq	(%rsi,%rax,8), %rdi
	comisd	(%rdi,%r11), %xmm3
	jnb	.L8592
	addq	$2, %rax
	cmpq	$3, %rax
	jne	.L8593
.L8615:
	movq	24(%rcx), %rax
	movq	16(%rsp), %rdi
	movq	(%rax,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r14,8), %rax
	movq	(%rax,%r13,8), %rax
	movsd	%xmm4, (%rax,%rdi)
.L8611:
	addq	$1, %rbx
	cmpl	%ebx, 40(%rcx)
	jle	.L8588
.L8613:
	movq	%rbx, %rax
	salq	$4, %rax
	addq	32(%rcx), %rax
	movslq	(%rax), %r14
	movslq	4(%rax), %r13
	movslq	8(%rax), %r12
	movq	24(%rcx), %rax
	leaq	0(,%r14,8), %r9
	leaq	0(,%r13,8), %rbp
	movl	%r14d, 8(%rsp)
	movq	%r13, %r15
	movq	(%rax,%r12,8), %rax
	movq	%r12, %r10
	movq	(%rax), %rax
	movq	16(%rax), %rdx
	addq	%r9, %rdx
	movq	(%rdx), %rsi
	addq	%rbp, %rsi
	movq	(%rsi), %rax
	movsd	(%rax,%r8), %xmm0
	comisd	%xmm0, %xmm4
	jbe	.L8715
.L8589:
	movq	24(%rcx), %rax
	movq	16(%rsp), %rdi
	mulsd	%xmm7, %xmm0
	movq	(%rax,%r12,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%r14,8), %rax
	addq	(%rax,%r13,8), %rdi
	cmpb	$0, 39(%rsp)
	je	.L8612
	addsd	(%rdi), %xmm0
	addq	$1, %rbx
	movsd	%xmm0, (%rdi)
	cmpl	%ebx, 40(%rcx)
	jg	.L8613
.L8588:
	movl	104(%rsp), %eax
	movq	144(%rsp), %rdi
	movl	$-1, 404(%rsp)
	movl	%eax, 400(%rsp)
	call	delete
	movl	204(%rsp), %eax
	testl	%eax, %eax
	je	.L8716
.L8614:
	movq	184(%rsp), %rdx
	movl	108(%rsp), %eax
	movq	48(%rsp), %rcx
	salq	$32, %rdx
	orq	%rdx, %rax
	movl	40(%rsp), %edx
	salq	$32, %rcx
	addq	$664, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	orq	%rcx, %rdx
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L8525:
	.cfi_restore_state
	movq	$kappa_x, 88(%rsp)
	movq	%xmm1, %rax
	movapd	%xmm2, %xmm1
	movq	%rax, %xmm2
	movl	$kappa_y, %eax
	jmp	.L8526
	.p2align 4,,10
	.p2align 3
.L8527:
	movq	%r8, 48(%rsp)
	movq	88(%rsp), %rax
	movsd	%xmm4, 56(%rsp)
	movq	512(%rsp), %rdi
	movl	520(%rsp), %esi
	movsd	%xmm2, 40(%rsp)
	call	*%rax
	movsd	56(%rsp), %xmm4
	movq	.LC10(%rip), %rax
	movsd	40(%rsp), %xmm2
	movq	48(%rsp), %r8
	ucomisd	%xmm4, %xmm0
	movq	%rax, %xmm5
	jp	.L8630
	je	.L8532
.L8630:
	pxor	%xmm3, %xmm3
	comisd	%xmm2, %xmm3
	jbe	.L8617
	ucomisd	.LC130(%rip), %xmm0
	jp	.L8632
	jne	.L8632
.L8532:
	movsd	%xmm4, (%r15)
.L8539:
	movq	grid(%rip), %rcx
	movsd	L0(%rip), %xmm7
	xorl	%edi, %edi
	movsd	.LC15(%rip), %xmm1
	movq	168(%rsp), %r9
	movq	24(%rcx), %rax
	movsd	%xmm7, 48(%rsp)
	movq	(%rax,%r8,8), %rax
	xorl	%r8d, %r8d
	movq	(%rax), %rax
	addq	16(%rax), %rbx
	movq	24(%rsp), %rax
	movq	(%rbx), %rsi
	addq	%r12, %rsi
	movq	(%rsi), %r15
	addq	%r15, %rax
	movq	%rax, 40(%rsp)
	movq	$-1, %rax
.L8546:
	movq	(%rbx,%rax,8), %rdx
	movq	(%rdx,%r12), %rdx
	movsd	(%rdx,%r9), %xmm0
	ucomisd	%xmm4, %xmm0
	jp	.L8634
	je	.L8542
.L8634:
	andpd	.LC17(%rip), %xmm0
	comisd	%xmm1, %xmm0
	jbe	.L8686
	addl	$1, %r8d
.L8542:
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L8546
	cmpl	%edi, %r8d
	movq	168(%rsp), %r10
	movq	$-1, %rax
	setg	%r8b
	xorl	%edx, %edx
.L8553:
	movq	(%rbx,%rax,8), %rdi
	movl	%eax, %r9d
	movq	(%rdi,%r12), %rdi
	movsd	(%rdi,%r10), %xmm0
	ucomisd	%xmm4, %xmm0
	jp	.L8636
	je	.L8547
.L8636:
	movapd	%xmm0, %xmm1
	andpd	.LC17(%rip), %xmm1
	comisd	.LC15(%rip), %xmm1
	seta	%dil
	cmpb	%dil, %r8b
	je	.L8717
.L8547:
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L8553
	movsd	.LC15(%rip), %xmm1
	movq	$-1, %rax
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movq	176(%rsp), %r10
.L8558:
	movq	(%rsi,%rax,8), %rdi
	movsd	(%rdi,%r10), %xmm0
	ucomisd	%xmm4, %xmm0
	jp	.L8639
	je	.L8554
.L8639:
	andpd	.LC17(%rip), %xmm0
	comisd	%xmm1, %xmm0
	jbe	.L8688
	addl	$1, %r9d
.L8554:
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L8558
	cmpl	%r8d, %r9d
	movq	176(%rsp), %r10
	movq	$-1, %rax
	setg	%r8b
.L8565:
	movq	(%rsi,%rax,8), %rdi
	movl	%eax, %r9d
	movsd	(%rdi,%r10), %xmm0
	ucomisd	%xmm4, %xmm0
	jp	.L8641
	je	.L8559
.L8641:
	movapd	%xmm0, %xmm1
	andpd	.LC17(%rip), %xmm1
	comisd	.LC15(%rip), %xmm1
	seta	%dil
	cmpb	%dil, %r8b
	je	.L8718
.L8559:
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L8565
	cmpl	$1, %edx
	jle	.L8566
	movsd	.LC3(%rip), %xmm6
	movl	$1, %r9d
	movl	$1, %ebx
	leaq	536(%rsp), %r8
	.p2align 4,,10
	.p2align 3
.L8567:
	leaq	512(%rsp), %r12
	movsd	(%r8), %xmm3
	movsd	8(%r8), %xmm2
	xorl	%esi, %esi
	movq	%r12, %rax
	.p2align 4,,10
	.p2align 3
.L8568:
	movsd	(%rax), %xmm0
	pxor	%xmm1, %xmm1
	addl	$1, %esi
	subsd	%xmm3, %xmm0
	mulsd	%xmm0, %xmm0
	addsd	%xmm0, %xmm1
	movsd	8(%rax), %xmm0
	subsd	%xmm2, %xmm0
	mulsd	%xmm0, %xmm0
	addsd	%xmm1, %xmm0
	comisd	%xmm0, %xmm6
	setbe	%dil
	addq	$24, %rax
	cmpl	%ebx, %esi
	jge	.L8644
	testb	%dil, %dil
	jne	.L8568
.L8644:
	movzbl	%dil, %edi
	leal	1(%rbx), %eax
	addq	$24, %r8
	addl	%edi, %r9d
	cmpl	%eax, %edx
	je	.L8570
	movl	%eax, %ebx
	jmp	.L8567
	.p2align 4,,10
	.p2align 3
.L8612:
	movsd	%xmm0, (%rdi)
	jmp	.L8611
	.p2align 4,,10
	.p2align 3
.L8691:
	pxor	%xmm3, %xmm3
	movq	24(%rsp), %rdi
	movq	$-1, %rax
	comisd	%xmm13, %xmm3
	jb	.L8592
.L8595:
	movq	(%rdx,%rax,8), %r11
	movq	(%r11,%rbp), %r11
	movsd	(%r11,%rdi), %xmm0
	comisd	%xmm5, %xmm0
	jnb	.L8592
	movq	(%rsi,%rax,8), %r11
	movsd	(%r11,%rdi), %xmm0
	comisd	%xmm5, %xmm0
	jnb	.L8592
	addq	$2, %rax
	cmpq	$3, %rax
	je	.L8615
	jmp	.L8595
	.p2align 4,,10
	.p2align 3
.L8592:
	pxor	%xmm2, %xmm2
	movq	$-1, %rdi
	movapd	%xmm2, %xmm0
.L8596:
	movq	(%rdx,%rdi,8), %r11
	movq	$-1, %rax
	addq	%rbp, %r11
.L8599:
	movq	(%r11,%rax,8), %rsi
	movsd	(%rsi,%r8), %xmm1
	comisd	%xmm1, %xmm4
	jbe	.L8597
	addsd	%xmm1, %xmm0
	addsd	%xmm5, %xmm2
.L8597:
	addq	$1, %rax
	cmpq	$2, %rax
	jne	.L8599
	addq	$1, %rdi
	cmpq	$2, %rdi
	jne	.L8596
	pxor	%xmm3, %xmm3
	comisd	%xmm3, %xmm2
	jbe	.L8692
	divsd	%xmm2, %xmm0
	addl	$1, 40(%rsp)
.L8602:
	ucomisd	%xmm4, %xmm0
	jp	.L8589
	je	.L8615
	jmp	.L8589
	.p2align 4,,10
	.p2align 3
.L8685:
	movsd	%xmm0, (%r15)
	jmp	.L8616
	.p2align 4,,10
	.p2align 3
.L8686:
	addl	$1, %edi
	jmp	.L8542
	.p2align 4,,10
	.p2align 3
.L8688:
	addl	$1, %r8d
	jmp	.L8554
	.p2align 4,,10
	.p2align 3
.L8570:
	cmpl	$2, %r9d
	jle	.L8566
	movl	8(%rsp), %eax
	movl	192(%rsp), %ecx
	movl	%r14d, %edx
	leaq	336(%rsp), %rdi
	movsd	%xmm4, 56(%rsp)
	movl	%eax, 280(%rsp)
	movl	16(%rsp), %eax
	movl	%r14d, 288(%rsp)
	movl	%eax, 284(%rsp)
	movq	280(%rsp), %rsi
	call	mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movsd	(%r15,%rbp), %xmm0
	pushq	360(%rsp)
	.cfi_def_cfa_offset 736
	pushq	360(%rsp)
	.cfi_def_cfa_offset 744
	pushq	360(%rsp)
	.cfi_def_cfa_offset 752
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	pushq	360(%rsp)
	.cfi_def_cfa_offset 736
	pushq	360(%rsp)
	.cfi_def_cfa_offset 744
	pushq	360(%rsp)
	.cfi_def_cfa_offset 752
	leaq	400(%rsp), %rdi
	call	line_length_center
	movsd	400(%rsp), %xmm0
	movsd	408(%rsp), %xmm1
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	movq	144(%rsp), %r15
	movsd	344(%rsp), %xmm3
	movsd	336(%rsp), %xmm2
	movsd	%xmm1, 16(%rsp)
	movq	%r15, %rdi
	movsd	%xmm0, 8(%rsp)
	call	parabola_fit_init.isra.0
	movsd	.LC22(%rip), %xmm2
	movsd	16(%rsp), %xmm1
	movq	%r15, %rdi
	movsd	8(%rsp), %xmm0
	leaq	536(%rsp), %rax
	call	parabola_fit_add.isra.0
	movsd	56(%rsp), %xmm4
	movq	.LC10(%rip), %rcx
	leaq	(%rbx,%rbx,2), %rdx
	leaq	(%rax,%rdx,8), %rsi
	movapd	%xmm4, %xmm7
	movq	%rcx, %xmm5
	jmp	.L8571
	.p2align 4,,10
	.p2align 3
.L8719:
	addq	$24, %rax
.L8571:
	movsd	8(%r12), %xmm1
	movsd	(%r12), %xmm0
	movapd	%xmm5, %xmm2
	movq	%rax, %r12
	call	parabola_fit_add.isra.0
	movq	.LC10(%rip), %rcx
	cmpq	%rax, %rsi
	movq	%rcx, %xmm5
	jne	.L8719
	movq	144(%rsp), %rdi
	movsd	%xmm7, 8(%rsp)
	call	parabola_fit_solve.isra.0
	movsd	.LC305(%rip), %xmm5
	movsd	488(%rsp), %xmm0
	mulsd	480(%rsp), %xmm5
	movq	.LC10(%rip), %rax
	mulsd	%xmm0, %xmm0
	movsd	.LC33(%rip), %xmm1
	movq	%xmm5, %rbx
	movq	%rax, %xmm5
	addsd	%xmm5, %xmm0
	call	pow
	movq	.LC10(%rip), %rax
	movsd	8(%rsp), %xmm4
	movapd	%xmm0, %xmm1
	movq	%rbx, %xmm0
	divsd	%xmm1, %xmm0
	movsd	.LC80(%rip), %xmm1
	movq	%rax, %xmm5
	movapd	%xmm0, %xmm2
	andpd	.LC17(%rip), %xmm2
	comisd	%xmm1, %xmm2
	jbe	.L8572
	pxor	%xmm2, %xmm2
	movsd	.LC305(%rip), %xmm7
	cmpltsd	%xmm0, %xmm2
	andpd	%xmm2, %xmm1
	andnpd	%xmm7, %xmm2
	movapd	%xmm2, %xmm0
	orpd	%xmm1, %xmm0
.L8572:
	movsd	80(%rsp), %xmm1
	mulsd	48(%rsp), %xmm1
	movq	40(%rsp), %rax
	movq	grid(%rip), %rcx
	divsd	%xmm1, %xmm0
	ucomisd	%xmm4, %xmm0
	movsd	%xmm0, (%rax)
	jp	.L8646
	je	.L8541
.L8646:
	addl	$1, 184(%rsp)
	jmp	.L8541
	.p2align 4,,10
	.p2align 3
.L8712:
	ucomisd	.LC130(%rip), %xmm0
	movapd	%xmm0, %xmm1
	xorpd	.LC1(%rip), %xmm1
	jp	.L8622
	je	.L8527
.L8622:
	movapd	%xmm1, %xmm0
	jmp	.L8617
	.p2align 4,,10
	.p2align 3
.L8585:
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	pushq	$626
	.cfi_def_cfa_offset 736
	pushq	$.LC129
	.cfi_def_cfa_offset 744
	pushq	$0
	.cfi_def_cfa_offset 752
	movl	160(%rsp), %edx
	movq	300(%rsp), %rdi
	movl	308(%rsp), %esi
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	jmp	.L8586
.L8713:
	xorpd	.LC1(%rip), %xmm1
	jmp	.L8538
.L8566:
	movq	40(%rsp), %rax
	movsd	%xmm4, (%rax)
	jmp	.L8541
.L8717:
	pxor	%xmm1, %xmm1
	movslq	%edx, %rdi
	addl	$1, %edx
	cvtsi2sdl	%r9d, %xmm1
	comisd	.LC15(%rip), %xmm0
	leaq	(%rdi,%rdi,2), %r11
	movsd	%xmm1, 512(%rsp,%r11,8)
	jbe	.L8687
	subsd	.LC16(%rip), %xmm0
.L8551:
	leaq	(%rdi,%rdi,2), %rdi
	movsd	%xmm0, 520(%rsp,%rdi,8)
	jmp	.L8547
.L8718:
	pxor	%xmm1, %xmm1
	movslq	%edx, %rdi
	addl	$1, %edx
	cvtsi2sdl	%r9d, %xmm1
	comisd	.LC15(%rip), %xmm0
	leaq	(%rdi,%rdi,2), %r11
	movsd	%xmm1, 520(%rsp,%r11,8)
	jbe	.L8689
	subsd	.LC16(%rip), %xmm0
.L8563:
	leaq	(%rdi,%rdi,2), %rdi
	movsd	%xmm0, 512(%rsp,%rdi,8)
	jmp	.L8559
.L8716:
	movl	200(%rsp), %eax
	leaq	512(%rsp), %rdi
	movq	$-1, 520(%rsp)
	movl	%eax, 512(%rsp)
	movl	136(%rsp), %eax
	movl	%eax, 516(%rsp)
	call	delete
	jmp	.L8614
.L8710:
	call	update_cache_f
	movq	grid(%rip), %rcx
	movl	40(%rcx), %esi
	testl	%esi, %esi
	jg	.L8720
.L8620:
	leaq	400(%rsp), %rax
	movl	$0, 108(%rsp)
	movl	$0, 184(%rsp)
	movq	%rax, 144(%rsp)
	jmp	.L8518
.L8709:
	movl	$.LC306, %edi
	call	new_vector
	movl	%r14d, %edi
	movl	%eax, 200(%rsp)
	movq	%rax, %rsi
	shrq	$32, %rax
	movq	%rax, 136(%rsp)
	call	heights
	movq	_attribute(%rip), %rax
	jmp	.L8509
.L8714:
	call	update_cache_f
	movq	grid(%rip), %rcx
	movl	40(%rcx), %edx
	testl	%edx, %edx
	jg	.L8721
.L8624:
	movl	$0, 48(%rsp)
	movl	$0, 40(%rsp)
	jmp	.L8588
.L8692:
	movl	%r10d, %ecx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movl	8(%rsp), %edi
	sall	%cl, %eax
	movsd	%xmm4, 80(%rsp)
	movapd	%xmm5, %xmm4
	movl	%r10d, %edx
	cvtsi2sdl	%eax, %xmm0
	leal	-2(%rdi), %eax
	pxor	%xmm5, %xmm5
	movl	%edi, 292(%rsp)
	movl	%r15d, 296(%rsp)
	movl	56(%rsp), %ecx
	movq	292(%rsp), %rsi
	movq	%r8, 96(%rsp)
	movq	%r9, 72(%rsp)
	divsd	%xmm0, %xmm4
	pxor	%xmm0, %xmm0
	movsd	%xmm7, 88(%rsp)
	cvtsi2sdl	%eax, %xmm0
	leal	-2(%r15), %eax
	movl	%r10d, 64(%rsp)
	movl	%r10d, 300(%rsp)
	addsd	%xmm5, %xmm0
	addsd	.LC5(%rip), %xmm0
	movsd	%xmm4, 160(%rsp)
	mulsd	L0(%rip), %xmm4
	movsd	%xmm4, 192(%rsp)
	mulsd	%xmm4, %xmm0
	addsd	X0(%rip), %xmm0
	movsd	%xmm0, 168(%rsp)
	pxor	%xmm0, %xmm0
	cvtsi2sdl	%eax, %xmm0
	leaq	304(%rsp), %rax
	movq	%rax, %rdi
	addsd	%xmm5, %xmm0
	addsd	.LC5(%rip), %xmm0
	mulsd	%xmm4, %xmm0
	addsd	Y0(%rip), %xmm0
	movsd	%xmm0, 176(%rsp)
	call	mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movapd	%xmm13, %xmm0
	pushq	328(%rsp)
	.cfi_def_cfa_offset 736
	pushq	328(%rsp)
	.cfi_def_cfa_offset 744
	pushq	328(%rsp)
	.cfi_def_cfa_offset 752
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	pushq	328(%rsp)
	.cfi_def_cfa_offset 736
	pushq	328(%rsp)
	.cfi_def_cfa_offset 744
	pushq	328(%rsp)
	.cfi_def_cfa_offset 752
	leaq	368(%rsp), %rax
	movq	%rax, %rdi
	call	line_length_center
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	movsd	312(%rsp), %xmm3
	movsd	304(%rsp), %xmm2
	leaq	512(%rsp), %rax
	movsd	344(%rsp), %xmm1
	movsd	336(%rsp), %xmm0
	movq	%rax, %rdi
	call	parabola_fit_init.isra.0
	movq	grid(%rip), %rax
	movq	72(%rsp), %r9
	movq	%rbx, 224(%rsp)
	movq	96(%rsp), %r8
	movl	8(%rsp), %edi
	movq	%r13, 248(%rsp)
	movq	24(%rax), %rax
	movsd	88(%rsp), %xmm7
	movq	%r12, 232(%rsp)
	leal	-3(%rdi), %r11d
	movq	%r8, 216(%rsp)
	movl	64(%rsp), %r13d
	movq	(%rax,%r12,8), %rax
	movq	24(%rsp), %r8
	movl	%r15d, %r12d
	movq	%r14, 240(%rsp)
	movsd	80(%rsp), %xmm4
	movq	%rbp, %r14
	movsd	%xmm7, 208(%rsp)
	movq	(%rax), %rax
	addq	16(%rax), %r9
	leal	-3(%r15), %eax
	movl	%r11d, %r15d
	movl	%eax, 72(%rsp)
	movq	.LC10(%rip), %rax
	movq	%rax, %xmm5
.L8607:
	pxor	%xmm0, %xmm0
	pxor	%xmm6, %xmm6
	movq	-8(%r9), %rbp
	movl	72(%rsp), %ebx
	cvtsi2sdl	%r15d, %xmm0
	leal	2(%r15), %r11d
	addq	%r14, %rbp
	addsd	%xmm6, %xmm0
	addsd	.LC5(%rip), %xmm0
	movsd	%xmm0, 64(%rsp)
.L8606:
	movq	-8(%rbp), %rax
	pxor	%xmm6, %xmm6
	leal	2(%rbx), %edx
	movsd	(%rax,%r8), %xmm13
	comisd	%xmm6, %xmm13
	jbe	.L8603
	comisd	%xmm13, %xmm5
	ja	.L8722
.L8603:
	addl	$1, %ebx
	addq	$8, %rbp
	cmpl	%ebx, %r12d
	jne	.L8606
	addl	$1, %r15d
	addq	$8, %r9
	cmpl	%r15d, 8(%rsp)
	jne	.L8607
	movsd	208(%rsp), %xmm7
	movq	216(%rsp), %r8
	leaq	512(%rsp), %rdi
	movsd	%xmm4, 72(%rsp)
	movq	224(%rsp), %rbx
	movq	232(%rsp), %r12
	movq	%r8, 8(%rsp)
	movq	240(%rsp), %r14
	movsd	%xmm7, 64(%rsp)
	movq	248(%rsp), %r13
	call	parabola_fit_solve.isra.0
	movsd	.LC305(%rip), %xmm5
	movsd	600(%rsp), %xmm0
	mulsd	592(%rsp), %xmm5
	movq	.LC10(%rip), %rax
	mulsd	%xmm0, %xmm0
	movsd	.LC33(%rip), %xmm1
	movq	%xmm5, %rbp
	movq	%rax, %xmm5
	addsd	%xmm5, %xmm0
	call	pow
	movq	8(%rsp), %r8
	movq	.LC10(%rip), %rax
	movapd	%xmm0, %xmm1
	movq	%rbp, %xmm0
	movsd	64(%rsp), %xmm7
	movsd	72(%rsp), %xmm4
	divsd	%xmm1, %xmm0
	movsd	.LC80(%rip), %xmm1
	movq	%rax, %xmm5
	movapd	%xmm0, %xmm2
	andpd	.LC17(%rip), %xmm2
	comisd	%xmm1, %xmm2
	ja	.L8723
.L8608:
	addl	$1, 48(%rsp)
	movq	grid(%rip), %rcx
	divsd	192(%rsp), %xmm0
	jmp	.L8602
.L8722:
	movsd	160(%rsp), %xmm6
	movl	56(%rsp), %ecx
	movl	%r11d, 292(%rsp)
	leaq	368(%rsp), %rdi
	mulsd	L0(%rip), %xmm6
	movl	%edx, 296(%rsp)
	movl	%r13d, %edx
	movq	292(%rsp), %rsi
	movsd	%xmm4, 120(%rsp)
	movsd	Y0(%rip), %xmm5
	movsd	X0(%rip), %xmm4
	movq	%r9, 152(%rsp)
	movsd	%xmm5, 88(%rsp)
	movq	%r8, 128(%rsp)
	movl	%r11d, 96(%rsp)
	movsd	%xmm4, 80(%rsp)
	movsd	%xmm6, 112(%rsp)
	movl	%r13d, 300(%rsp)
	call	mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 728
	movapd	%xmm13, %xmm0
	pushq	392(%rsp)
	.cfi_def_cfa_offset 736
	pushq	392(%rsp)
	.cfi_def_cfa_offset 744
	pushq	392(%rsp)
	.cfi_def_cfa_offset 752
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 728
	pushq	392(%rsp)
	.cfi_def_cfa_offset 736
	pushq	392(%rsp)
	.cfi_def_cfa_offset 744
	pushq	392(%rsp)
	.cfi_def_cfa_offset 752
	movq	176(%rsp), %rdi
	call	line_length_center
	movsd	96(%rsp), %xmm1
	movsd	112(%rsp), %xmm3
	pxor	%xmm4, %xmm4
	movsd	144(%rsp), %xmm6
	movapd	%xmm0, %xmm2
	mulsd	%xmm6, %xmm1
	addsd	%xmm1, %xmm3
	pxor	%xmm1, %xmm1
	subsd	200(%rsp), %xmm3
	cvtsi2sdl	%ebx, %xmm1
	divsd	%xmm6, %xmm3
	addsd	%xmm4, %xmm1
	addsd	.LC5(%rip), %xmm1
	mulsd	%xmm6, %xmm1
	addsd	120(%rsp), %xmm1
	subsd	208(%rsp), %xmm1
	divsd	%xmm6, %xmm1
	addsd	432(%rsp), %xmm3
	movsd	%xmm3, 432(%rsp)
	movapd	%xmm3, %xmm0
	addsd	440(%rsp), %xmm1
	movsd	%xmm1, 440(%rsp)
	addq	$32, %rsp
	.cfi_def_cfa_offset 720
	leaq	512(%rsp), %rdi
	call	parabola_fit_add.isra.0
	movsd	120(%rsp), %xmm4
	movl	96(%rsp), %r11d
	movq	.LC10(%rip), %rax
	movq	152(%rsp), %r9
	movq	128(%rsp), %r8
	movq	%rax, %xmm5
	jmp	.L8603
.L8689:
	movsd	.LC19(%rip), %xmm7
	comisd	%xmm0, %xmm7
	jbe	.L8563
	addsd	.LC16(%rip), %xmm0
	jmp	.L8563
.L8687:
	movsd	.LC19(%rip), %xmm7
	comisd	%xmm0, %xmm7
	jbe	.L8551
	addsd	.LC16(%rip), %xmm0
	jmp	.L8551
.L8723:
	pxor	%xmm2, %xmm2
	movsd	.LC305(%rip), %xmm6
	cmpltsd	%xmm0, %xmm2
	andpd	%xmm2, %xmm1
	andnpd	%xmm6, %xmm2
	movapd	%xmm2, %xmm0
	orpd	%xmm1, %xmm0
	jmp	.L8608
.L8632:
	xorpd	.LC1(%rip), %xmm0
	jmp	.L8617
	.cfi_endproc
.LFE401:
	.size	curvature, .-curvature
	.p2align 4
	.type	acceleration_1, @function
acceleration_1:
.LFB410:
	.cfi_startproc
	pushq	%r13
	.cfi_def_cfa_offset 16
	.cfi_offset 13, -16
	pushq	%r12
	.cfi_def_cfa_offset 24
	.cfi_offset 12, -24
	pushq	%rbp
	.cfi_def_cfa_offset 32
	.cfi_offset 6, -32
	pushq	%rbx
	.cfi_def_cfa_offset 40
	.cfi_offset 3, -40
	subq	$40, %rsp
	.cfi_def_cfa_offset 80
	movq	interfaces(%rip), %r12
	testq	%r12, %r12
	jne	.L8736
	jmp	.L8725
	.p2align 4,,10
	.p2align 3
.L8737:
	movl	%ebp, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	movl	%eax, 12(%rsp)
	movsd	%xmm0, 16(%rsp)
	movb	$1, 24(%rsp)
	pushq	24(%rsp)
	.cfi_def_cfa_offset 96
	pushq	24(%rsp)
	.cfi_def_cfa_offset 104
	pushq	24(%rsp)
	.cfi_def_cfa_offset 112
	call	curvature
	addq	$32, %rsp
	.cfi_def_cfa_offset 80
.L8726:
	addq	$4, %r12
.L8736:
	movl	(%r12), %ebp
	testl	%ebp, %ebp
	js	.L8725
	movslq	%ebp, %rax
	pxor	%xmm1, %xmm1
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rbx
	movq	_attribute(%rip), %rax
	salq	$4, %rbx
	addq	%rbx, %rax
	movsd	168(%rax), %xmm0
	ucomisd	%xmm1, %xmm0
	jp	.L8730
	je	.L8726
.L8730:
	movl	152(%rax), %eax
	testl	%eax, %eax
	jne	.L8737
	movl	$1, %edx
	movl	$.LC90, %esi
	movl	$.LC290, %edi
	call	new_block_scalar
	movl	%ebp, (%rsp)
	subq	$8, %rsp
	.cfi_def_cfa_offset 88
	movl	%eax, 12(%rsp)
	movl	%eax, %r13d
	movq	_attribute(%rip), %rax
	movb	$0, 24(%rsp)
	movsd	168(%rax,%rbx), %xmm0
	movsd	%xmm0, 16(%rsp)
	pushq	24(%rsp)
	.cfi_def_cfa_offset 96
	pushq	24(%rsp)
	.cfi_def_cfa_offset 104
	pushq	24(%rsp)
	.cfi_def_cfa_offset 112
	call	curvature
	movq	_attribute(%rip), %rax
	addq	$32, %rsp
	.cfi_def_cfa_offset 80
	movl	%r13d, 152(%rax,%rbx)
	jmp	.L8726
	.p2align 4,,10
	.p2align 3
.L8725:
	addq	$40, %rsp
	.cfi_def_cfa_offset 40
	xorl	%eax, %eax
	popq	%rbx
	.cfi_def_cfa_offset 32
	popq	%rbp
	.cfi_def_cfa_offset 24
	popq	%r12
	.cfi_def_cfa_offset 16
	popq	%r13
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE410:
	.size	acceleration_1, .-acceleration_1
	.p2align 4
	.globl	position
	.type	position, @function
position:
.LFB406:
	.cfi_startproc
	pushq	%r15
	.cfi_def_cfa_offset 16
	.cfi_offset 15, -16
	pushq	%r14
	.cfi_def_cfa_offset 24
	.cfi_offset 14, -24
	pushq	%r13
	.cfi_def_cfa_offset 32
	.cfi_offset 13, -32
	pushq	%r12
	.cfi_def_cfa_offset 40
	.cfi_offset 12, -40
	pushq	%rbp
	.cfi_def_cfa_offset 48
	.cfi_offset 6, -48
	pushq	%rbx
	.cfi_def_cfa_offset 56
	.cfi_offset 3, -56
	subq	$184, %rsp
	.cfi_def_cfa_offset 240
	movslq	244(%rsp), %rbx
	movslq	240(%rsp), %rbp
	leaq	(%rbx,%rbx,4), %rax
	movl	%ebp, 88(%rsp)
	movq	%rbx, %r12
	leaq	(%rbx,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	$curvature_prolongation, 96(%rax)
	movq	$curvature_prolongation, 112(%rax)
	movq	$curvature_restriction, 104(%rax)
	leaq	0(%rbp,%rbp,4), %rax
	leaq	0(%rbp,%rax,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movl	156(%rax), %edx
	movl	160(%rax), %eax
	movl	%edx, 92(%rsp)
	movl	%eax, 80(%rsp)
	movl	%edx, 76(%rsp)
	testl	%edx, %edx
	je	.L8790
.L8739:
	movq	baseblock(%rip), %rdx
	testq	%rdx, %rdx
	je	.L8743
	movslq	(%rdx), %rax
	testl	%eax, %eax
	js	.L8743
	movq	_attribute(%rip), %rsi
	.p2align 4,,10
	.p2align 3
.L8744:
	leaq	(%rax,%rax,4), %rcx
	addq	$4, %rdx
	leaq	(%rax,%rcx,2), %rax
	xorl	%ecx, %ecx
	salq	$4, %rax
	addq	%rsi, %rax
	movw	%cx, 80(%rax)
	movl	$0, 84(%rax)
	movslq	(%rdx), %rax
	testl	%eax, %eax
	jns	.L8744
.L8743:
	movl	88(%rsp), %r14d
	xorl	%edi, %edi
	xorl	%esi, %esi
	movq	$0, 112(%rsp)
	movl	$0, 120(%rsp)
	movl	%r14d, %edx
	call	_stencil_interfacial
	movq	112(%rsp), %rdi
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	movl	120(%rsp), %esi
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movl	$1, %ecx
	movl	%r14d, %edx
	movq	%rdi, 152(%rsp)
	movl	%esi, 160(%rsp)
	pushq	$0
	.cfi_def_cfa_offset 256
	pushq	$683
	.cfi_def_cfa_offset 264
	pushq	$.LC129
	.cfi_def_cfa_offset 272
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %ecx
	movl	%r14d, %edx
	pushq	$683
	.cfi_def_cfa_offset 264
	pushq	$.LC129
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$1, %r8d
	movl	%r14d, %edx
	pushq	$683
	.cfi_def_cfa_offset 264
	pushq	$.LC129
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%ecx, %ecx
	pushq	$0
	.cfi_def_cfa_offset 256
	movl	$-1, %r8d
	movl	%r14d, %edx
	pushq	$683
	.cfi_def_cfa_offset 264
	pushq	$.LC129
	.cfi_def_cfa_offset 272
	movq	176(%rsp), %rdi
	movl	184(%rsp), %esi
	call	stencil_val
	movq	144(%rsp), %rdi
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	120(%rsp), %esi
	movl	%r14d, %edx
	call	_stencil_mycs
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	pushq	$0
	.cfi_def_cfa_offset 256
	xorl	%ecx, %ecx
	movl	%r14d, %edx
	pushq	$750
	.cfi_def_cfa_offset 264
	pushq	$.LC129
	.cfi_def_cfa_offset 272
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	cmpb	$0, 296(%rsp)
	je	.L8791
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	pushq	$757
	.cfi_def_cfa_offset 256
	pushq	$.LC129
	.cfi_def_cfa_offset 264
	pushq	$1
	.cfi_def_cfa_offset 272
.L8789:
	movq	144(%rsp), %rdi
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	xorl	%ecx, %ecx
	movl	152(%rsp), %esi
	movl	%r12d, %edx
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	xorl	%r9d, %r9d
	xorl	%r8d, %r8d
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	xorl	%ecx, %ecx
	movl	%r12d, %edx
	pushq	$762
	.cfi_def_cfa_offset 256
	pushq	$.LC129
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	call	stencil_val_a
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	movl	$_loop.22, %edi
	call	end_stencil
	movq	grid(%rip), %r15
	movl	$0, _loop.22+12(%rip)
	cmpb	$0, 128(%r15)
	jne	.L8792
.L8746:
	movl	40(%r15), %edx
	testl	%edx, %edx
	jle	.L8766
	leaq	8(,%rbx,8), %rax
	xorl	%r9d, %r9d
	pxor	%xmm1, %xmm1
	movsd	.LC10(%rip), %xmm2
	movq	%rax, 24(%rsp)
	leaq	8(,%rbp,8), %r14
	movq	%r9, %rbx
	jmp	.L8765
	.p2align 4,,10
	.p2align 3
.L8753:
	movq	(%rcx,%rax,8), %r11
	movq	(%r11,%rdx), %r11
	comisd	(%r11,%r14), %xmm1
	jnb	.L8752
	movq	(%rsi,%rax,8), %r11
	comisd	(%r11,%r14), %xmm1
	jnb	.L8752
	addq	$2, %rax
	cmpq	$3, %rax
	jne	.L8753
.L8754:
	movq	24(%rsp), %rax
	movq	.LC2(%rip), %rsi
	movq	grid(%rip), %r15
	movq	%rsi, (%rdi,%rax)
.L8764:
	addq	$1, %rbx
	cmpl	%ebx, 40(%r15)
	jle	.L8766
.L8765:
	movq	%rbx, %rax
	movsd	X0(%rip), %xmm6
	movsd	Y0(%rip), %xmm7
	salq	$4, %rax
	addq	32(%r15), %rax
	movsd	L0(%rip), %xmm5
	movslq	8(%rax), %rdi
	movslq	4(%rax), %rbp
	movsd	%xmm6, 32(%rsp)
	movl	(%rax), %r9d
	movq	24(%r15), %rax
	movsd	%xmm7, 40(%rsp)
	leaq	0(,%rbp,8), %rdx
	movq	%rdi, 8(%rsp)
	movq	%rdi, %r12
	movq	%rbp, %r13
	movq	(%rax,%rdi,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %r15
	movslq	%r9d, %rax
	leaq	0(,%rax,8), %r10
	movq	%rax, 16(%rsp)
	movq	$-1, %rax
	leaq	(%r15,%r10), %rcx
	movq	(%rcx), %r8
	leaq	(%r8,%rdx), %rsi
	movq	(%rsi), %rdi
	movsd	(%rdi,%r14), %xmm0
	comisd	%xmm2, %xmm0
	jnb	.L8753
	comisd	%xmm0, %xmm1
	movq	$-1, %rax
	jb	.L8752
.L8755:
	movq	(%rcx,%rax,8), %r11
	movq	(%r11,%rdx), %r11
	movsd	(%r11,%r14), %xmm0
	comisd	%xmm2, %xmm0
	jnb	.L8752
	movq	(%rsi,%rax,8), %r11
	movsd	(%r11,%r14), %xmm0
	comisd	%xmm2, %xmm0
	jnb	.L8752
	addq	$2, %rax
	cmpq	$3, %rax
	je	.L8754
	jmp	.L8755
	.p2align 4,,10
	.p2align 3
.L8752:
	movq	80(%rsp), %rax
	movl	76(%rsp), %r11d
	movl	%r12d, %esi
	movl	%r9d, 144(%rsp)
	movq	-8(%r15,%r10), %rcx
	movl	%r9d, 56(%rsp)
	salq	$32, %rax
	movl	%r13d, 148(%rsp)
	movq	144(%rsp), %rdi
	orq	%rax, %r11
	movq	8(%r15,%r10), %rax
	movq	(%rcx,%rbp,8), %rcx
	movl	$pos_y, %r15d
	movq	%r11, 48(%rsp)
	movq	(%rax,%rbp,8), %rax
	movsd	%xmm5, 64(%rsp)
	movl	%r12d, 152(%rsp)
	movsd	(%rax,%r14), %xmm0
	movq	-8(%r8,%rdx), %rax
	subsd	(%rcx,%r14), %xmm0
	movq	8(%r8,%rdx), %rcx
	movl	$pos_y, %edx
	leaq	272(%rsp), %r8
	andpd	.LC17(%rip), %xmm0
	movsd	(%rcx,%r14), %xmm3
	subsd	(%rax,%r14), %xmm3
	movl	$pos_x, %eax
	leaq	248(%rsp), %rcx
	andpd	.LC17(%rip), %xmm3
	comisd	%xmm0, %xmm3
	cmova	%rax, %r15
	cmova	%rdx, %rax
	movq	%r11, %rdx
	call	*%rax
	movq	48(%rsp), %r11
	movl	56(%rsp), %r9d
	pxor	%xmm1, %xmm1
	ucomisd	.LC2(%rip), %xmm0
	movq	.LC10(%rip), %rax
	movsd	64(%rsp), %xmm5
	movq	%rax, %xmm2
	jp	.L8758
	movl	%r9d, 48(%rsp)
	movsd	%xmm5, 56(%rsp)
	jne	.L8758
	movq	144(%rsp), %rdi
	movl	152(%rsp), %esi
	movq	%r11, %rdx
	leaq	272(%rsp), %r8
	leaq	248(%rsp), %rcx
	call	*%r15
	ucomisd	.LC2(%rip), %xmm0
	movq	.LC10(%rip), %rax
	pxor	%xmm1, %xmm1
	movq	%rax, %xmm2
	jp	.L8771
	movl	48(%rsp), %r9d
	movsd	56(%rsp), %xmm5
	jne	.L8771
	movl	%r12d, %ecx
	movl	$1, %eax
	pxor	%xmm0, %xmm0
	movl	%r12d, %edx
	sall	%cl, %eax
	movapd	%xmm2, %xmm4
	movl	%r9d, 100(%rsp)
	movl	88(%rsp), %ecx
	cvtsi2sdl	%eax, %xmm0
	movl	%r13d, 104(%rsp)
	movq	100(%rsp), %rsi
	leaq	112(%rsp), %rdi
	movl	%r9d, 48(%rsp)
	subl	$2, %r13d
	movl	%r12d, 108(%rsp)
	divsd	%xmm0, %xmm4
	mulsd	%xmm5, %xmm4
	movsd	%xmm4, 56(%rsp)
	call	mycs
	movq	grid(%rip), %r15
	movq	8(%rsp), %rcx
	subq	$8, %rsp
	.cfi_def_cfa_offset 248
	movq	24(%rsp), %rsi
	movq	24(%r15), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rbp,8), %rbp
	movsd	0(%rbp,%r14), %xmm0
	pushq	136(%rsp)
	.cfi_def_cfa_offset 256
	pushq	136(%rsp)
	.cfi_def_cfa_offset 264
	pushq	136(%rsp)
	.cfi_def_cfa_offset 272
	call	line_alpha
	addq	$24, %rsp
	.cfi_def_cfa_offset 248
	pushq	136(%rsp)
	.cfi_def_cfa_offset 256
	pushq	136(%rsp)
	.cfi_def_cfa_offset 264
	pushq	136(%rsp)
	.cfi_def_cfa_offset 272
	leaq	176(%rsp), %rdi
	call	line_length_center
	movl	80(%rsp), %r9d
	pxor	%xmm3, %xmm3
	pxor	%xmm1, %xmm1
	movsd	.LC5(%rip), %xmm5
	movsd	88(%rsp), %xmm4
	subl	$2, %r9d
	movq	.LC10(%rip), %rax
	movsd	176(%rsp), %xmm0
	cvtsi2sdl	%r9d, %xmm3
	mulsd	%xmm4, %xmm0
	movq	%rax, %xmm2
	addsd	%xmm1, %xmm3
	addsd	%xmm5, %xmm3
	mulsd	%xmm4, %xmm3
	addsd	64(%rsp), %xmm3
	addsd	%xmm0, %xmm3
	pxor	%xmm0, %xmm0
	subsd	304(%rsp), %xmm3
	mulsd	280(%rsp), %xmm3
	cvtsi2sdl	%r13d, %xmm0
	addsd	%xmm1, %xmm0
	addsd	%xmm1, %xmm3
	addsd	%xmm5, %xmm0
	mulsd	%xmm4, %xmm0
	mulsd	184(%rsp), %xmm4
	addsd	72(%rsp), %xmm0
	addsd	%xmm4, %xmm0
	subsd	312(%rsp), %xmm0
	mulsd	288(%rsp), %xmm0
	addq	$32, %rsp
	.cfi_def_cfa_offset 240
	addsd	%xmm3, %xmm0
.L8762:
	addq	24(%rsp), %rbp
	cmpb	$0, 296(%rsp)
	je	.L8763
.L8794:
	addsd	0(%rbp), %xmm0
	addq	$1, %rbx
	movsd	%xmm0, 0(%rbp)
	cmpl	%ebx, 40(%r15)
	jg	.L8765
	.p2align 4,,10
	.p2align 3
.L8766:
	movl	92(%rsp), %eax
	testl	%eax, %eax
	je	.L8793
.L8738:
	addq	$184, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 56
	popq	%rbx
	.cfi_def_cfa_offset 48
	popq	%rbp
	.cfi_def_cfa_offset 40
	popq	%r12
	.cfi_def_cfa_offset 32
	popq	%r13
	.cfi_def_cfa_offset 24
	popq	%r14
	.cfi_def_cfa_offset 16
	popq	%r15
	.cfi_def_cfa_offset 8
	ret
	.p2align 4,,10
	.p2align 3
.L8758:
	.cfi_restore_state
	movq	grid(%rip), %r15
	movq	8(%rsp), %rcx
	movq	16(%rsp), %rsi
	movq	24(%r15), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rsi,8), %rax
	movq	(%rax,%rbp,8), %rbp
	addq	24(%rsp), %rbp
	cmpb	$0, 296(%rsp)
	jne	.L8794
.L8763:
	movsd	%xmm0, 0(%rbp)
	jmp	.L8764
	.p2align 4,,10
	.p2align 3
.L8791:
	subq	$8, %rsp
	.cfi_remember_state
	.cfi_def_cfa_offset 248
	pushq	$759
	.cfi_def_cfa_offset 256
	pushq	$.LC129
	.cfi_def_cfa_offset 264
	pushq	$0
	.cfi_def_cfa_offset 272
	jmp	.L8789
	.p2align 4,,10
	.p2align 3
.L8771:
	.cfi_restore_state
	movq	grid(%rip), %r15
	movq	8(%rsp), %rdx
	movq	16(%rsp), %rcx
	movq	24(%r15), %rax
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movq	(%rax,%rcx,8), %rax
	movq	(%rax,%rbp,8), %rbp
	jmp	.L8762
	.p2align 4,,10
	.p2align 3
.L8793:
	movl	76(%rsp), %eax
	leaq	144(%rsp), %rdi
	movq	$-1, 152(%rsp)
	movl	%eax, 144(%rsp)
	movl	80(%rsp), %eax
	movl	%eax, 148(%rsp)
	call	delete
	jmp	.L8738
	.p2align 4,,10
	.p2align 3
.L8792:
	call	update_cache_f
	movq	grid(%rip), %r15
	jmp	.L8746
	.p2align 4,,10
	.p2align 3
.L8790:
	movl	$.LC306, %edi
	call	new_vector
	movl	88(%rsp), %edi
	movl	%eax, 76(%rsp)
	movq	%rax, %rsi
	shrq	$32, %rax
	movq	%rax, 80(%rsp)
	call	heights
	jmp	.L8739
	.cfi_endproc
.LFE406:
	.size	position, .-position
	.section	.text.startup,"ax",@progbits
	.p2align 4
	.globl	main
	.type	main, @function
main:
.LFB417:
	.cfi_startproc
	subq	$8, %rsp
	.cfi_def_cfa_offset 16
	call	_init_solver
	movq	.LC80(%rip), %rax
	movl	$512, %edi
	movq	%rax, L0(%rip)
	call	init_grid
	movq	.LC308(%rip), %rax
	movq	.LC309(%rip), %rcx
	movq	%rax, rho1(%rip)
	movq	.LC15(%rip), %rax
	movq	%rax, mu1(%rip)
	movq	.LC10(%rip), %rax
	movq	%rax, rho2(%rip)
	movq	.LC22(%rip), %rax
	movq	%rax, mu2(%rip)
	movslq	f(%rip), %rax
	leaq	(%rax,%rax,4), %rdx
	leaq	(%rax,%rdx,2), %rax
	salq	$4, %rax
	addq	_attribute(%rip), %rax
	movq	%rcx, 168(%rax)
	movq	.LC287(%rip), %rax
	movq	%rax, TOLERANCE(%rip)
	call	run
	xorl	%eax, %eax
	call	free_solver
	xorl	%eax, %eax
	addq	$8, %rsp
	.cfi_def_cfa_offset 8
	ret
	.cfi_endproc
.LFE417:
	.size	main, .-main
	.data
	.align 16
	.type	_loop.0, @object
	.size	_loop.0, 24
_loop.0:
	.quad	.LC147
	.long	145
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.1, @object
	.size	_loop.1, 24
_loop.1:
	.quad	.LC147
	.long	191
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.2, @object
	.size	_loop.2, 24
_loop.2:
	.quad	.LC145
	.long	33
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.3, @object
	.size	_loop.3, 24
_loop.3:
	.quad	.LC133
	.long	98
	.long	1
	.long	0
	.byte	0
	.zero	3
	.local	fp1.4
	.comm	fp1.4,8,8
	.align 16
	.type	_loop.5, @object
	.size	_loop.5, 24
_loop.5:
	.quad	.LC133
	.long	165
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.6, @object
	.size	_loop.6, 24
_loop.6:
	.quad	.LC133
	.long	223
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.7, @object
	.size	_loop.7, 24
_loop.7:
	.quad	.LC133
	.long	216
	.long	1
	.long	0
	.byte	0
	.zero	3
	.local	fp2.8
	.comm	fp2.8,8,8
	.align 16
	.type	_loop.9, @object
	.size	_loop.9, 24
_loop.9:
	.quad	.LC133
	.long	257
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.10, @object
	.size	_loop.10, 24
_loop.10:
	.quad	.LC133
	.long	250
	.long	1
	.long	0
	.byte	0
	.zero	3
	.local	fp2.11
	.comm	fp2.11,8,8
	.local	fp5.12
	.comm	fp5.12,8,8
	.align 16
	.type	_loop.13, @object
	.size	_loop.13, 24
_loop.13:
	.quad	.LC147
	.long	351
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.14, @object
	.size	_loop.14, 24
_loop.14:
	.quad	.LC147
	.long	376
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.15, @object
	.size	_loop.15, 24
_loop.15:
	.quad	.LC147
	.long	325
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.16, @object
	.size	_loop.16, 24
_loop.16:
	.quad	.LC146
	.long	106
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.17, @object
	.size	_loop.17, 24
_loop.17:
	.quad	.LC146
	.long	97
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.18, @object
	.size	_loop.18, 24
_loop.18:
	.quad	.LC145
	.long	87
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.19, @object
	.size	_loop.19, 24
_loop.19:
	.quad	.LC145
	.long	60
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.20, @object
	.size	_loop.20, 24
_loop.20:
	.quad	.LC131
	.long	44
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.21, @object
	.size	_loop.21, 24
_loop.21:
	.quad	.LC133
	.long	107
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.22, @object
	.size	_loop.22, 24
_loop.22:
	.quad	.LC129
	.long	740
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.23, @object
	.size	_loop.23, 24
_loop.23:
	.quad	.LC129
	.long	587
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.24, @object
	.size	_loop.24, 24
_loop.24:
	.quad	.LC129
	.long	569
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.25, @object
	.size	_loop.25, 24
_loop.25:
	.quad	.LC304
	.long	224
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.26, @object
	.size	_loop.26, 24
_loop.26:
	.quad	.LC164
	.long	282
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.27, @object
	.size	_loop.27, 24
_loop.27:
	.quad	.LC164
	.long	195
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.28, @object
	.size	_loop.28, 24
_loop.28:
	.quad	.LC164
	.long	182
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.29, @object
	.size	_loop.29, 24
_loop.29:
	.quad	.LC164
	.long	282
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.30, @object
	.size	_loop.30, 24
_loop.30:
	.quad	.LC164
	.long	195
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.31, @object
	.size	_loop.31, 24
_loop.31:
	.quad	.LC164
	.long	182
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.32, @object
	.size	_loop.32, 24
_loop.32:
	.quad	.LC164
	.long	338
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.33, @object
	.size	_loop.33, 24
_loop.33:
	.quad	.LC289
	.long	553
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.34, @object
	.size	_loop.34, 24
_loop.34:
	.quad	.LC289
	.long	519
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.35, @object
	.size	_loop.35, 24
_loop.35:
	.quad	.LC289
	.long	444
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.36, @object
	.size	_loop.36, 24
_loop.36:
	.quad	.LC289
	.long	206
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.37, @object
	.size	_loop.37, 24
_loop.37:
	.quad	.LC289
	.long	155
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.40, @object
	.size	_loop.40, 24
_loop.40:
	.quad	.LC147
	.long	403
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.41, @object
	.size	_loop.41, 24
_loop.41:
	.quad	.LC147
	.long	395
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.42, @object
	.size	_loop.42, 24
_loop.42:
	.quad	.LC147
	.long	277
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.43, @object
	.size	_loop.43, 24
_loop.43:
	.quad	.LC147
	.long	266
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.44, @object
	.size	_loop.44, 24
_loop.44:
	.quad	.LC147
	.long	256
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.45, @object
	.size	_loop.45, 24
_loop.45:
	.quad	.LC142
	.long	186
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.46, @object
	.size	_loop.46, 24
_loop.46:
	.quad	.LC142
	.long	122
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.47, @object
	.size	_loop.47, 24
_loop.47:
	.quad	.LC142
	.long	111
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.48, @object
	.size	_loop.48, 24
_loop.48:
	.quad	.LC142
	.long	108
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.49, @object
	.size	_loop.49, 24
_loop.49:
	.quad	.LC142
	.long	122
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.50, @object
	.size	_loop.50, 24
_loop.50:
	.quad	.LC142
	.long	111
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.51, @object
	.size	_loop.51, 24
_loop.51:
	.quad	.LC142
	.long	108
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.52, @object
	.size	_loop.52, 24
_loop.52:
	.quad	.LC142
	.long	168
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.53, @object
	.size	_loop.53, 24
_loop.53:
	.quad	.LC141
	.long	506
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.54, @object
	.size	_loop.54, 24
_loop.54:
	.quad	.LC141
	.long	484
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.55, @object
	.size	_loop.55, 24
_loop.55:
	.quad	.LC141
	.long	357
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.56, @object
	.size	_loop.56, 24
_loop.56:
	.quad	.LC141
	.long	355
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.57, @object
	.size	_loop.57, 24
_loop.57:
	.quad	.LC141
	.long	164
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.58, @object
	.size	_loop.58, 24
_loop.58:
	.quad	.LC141
	.long	84
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.59, @object
	.size	_loop.59, 24
_loop.59:
	.quad	.LC280
	.long	91
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.60, @object
	.size	_loop.60, 24
_loop.60:
	.quad	.LC280
	.long	28
	.long	1
	.long	0
	.byte	0
	.zero	3
	.local	previous.61
	.comm	previous.61,8,8
	.align 16
	.type	_loop.62, @object
	.size	_loop.62, 24
_loop.62:
	.quad	.LC278
	.long	6
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 4
	.type	has_convert.63, @object
	.size	has_convert.63, 4
has_convert.63:
	.long	-1
	.local	added.64
	.comm	added.64,1,1
	.align 4
	.type	has_ffmpeg.65, @object
	.size	has_ffmpeg.65, 4
has_ffmpeg.65:
	.long	-1
	.section	.rodata
	.align 32
	.type	basemap.66, @object
	.size	basemap.66, 792
basemap.66:
	.long	-285763072
	.long	1070426693
	.long	-173234654
	.long	1070800433
	.long	565562393
	.long	1072176684
	.long	-739509531
	.long	1070664185
	.long	392571831
	.long	1071028507
	.long	-1610788933
	.long	1072276893
	.long	-1783748709
	.long	1070822038
	.long	-1640016151
	.long	1071252652
	.long	-1010572132
	.long	1072368102
	.long	830188454
	.long	1070985346
	.long	-377064319
	.long	1071471688
	.long	-1990547055
	.long	1072449403
	.long	1649333412
	.long	1071153994
	.long	681070488
	.long	1071664425
	.long	-1264082130
	.long	1072519997
	.long	619818894
	.long	1071327455
	.long	1664016291
	.long	1071766617
	.long	43866116
	.long	1072579204
	.long	-1716645514
	.long	1071504863
	.long	-1723972660
	.long	1071863955
	.long	33988103
	.long	1072626464
	.long	2093105101
	.long	1071664878
	.long	1363915587
	.long	1071955639
	.long	1792621768
	.long	1072661346
	.long	-785928713
	.long	1071755722
	.long	-2033828231
	.long	1072040885
	.long	-227339422
	.long	1072683549
	.long	1655978861
	.long	1071846548
	.long	223524117
	.long	1072118941
	.long	2116533495
	.long	1072692904
	.long	-1420555829
	.long	1071936545
	.long	-1941106415
	.long	1072189092
	.long	-1056883562
	.long	1072689370
	.long	1600011520
	.long	1072024867
	.long	-327705043
	.long	1072250674
	.long	954468452
	.long	1072673038
	.long	476306238
	.long	1072110645
	.long	-1655712779
	.long	1072303078
	.long	-1700253995
	.long	1072644121
	.long	-1113576581
	.long	1072193003
	.long	-209162296
	.long	1072345755
	.long	-1353885842
	.long	1072602955
	.long	-1022972424
	.long	1072271073
	.long	-1257276153
	.long	1072378226
	.long	-1238967086
	.long	1072549988
	.long	235572565
	.long	1072344002
	.long	-455002101
	.long	1072400082
	.long	1356133244
	.long	1072485774
	.long	1151819794
	.long	1072410961
	.long	-1062051267
	.long	1072410992
	.long	135473027
	.long	1072410962
	.long	764565202
	.long	1072478892
	.long	111626818
	.long	1072376446
	.long	1197458323
	.long	1072317607
	.long	128484531
	.long	1072534132
	.long	-601054628
	.long	1072331247
	.long	-38346568
	.long	1072220357
	.long	178072505
	.long	1072576790
	.long	-1765479224
	.long	1072275762
	.long	696026045
	.long	1072120172
	.long	1603782845
	.long	1072606956
	.long	-83140671
	.long	1072210415
	.long	-1211727785
	.long	1072017981
	.long	-374647592
	.long	1072624729
	.long	380791663
	.long	1072135684
	.long	74212637
	.long	1071914684
	.long	1109466606
	.long	1072630237
	.long	-1027830067
	.long	1072052078
	.long	1630043580
	.long	1071811134
	.long	-28055139
	.long	1072623645
	.long	120893502
	.long	1071960128
	.long	-1249810469
	.long	1071708139
	.long	187994498
	.long	1072605174
	.long	901326856
	.long	1071860348
	.long	-1532470719
	.long	1071568234
	.long	1170179439
	.long	1072575096
	.long	-1520233155
	.long	1071753201
	.long	89231966
	.long	1071368870
	.long	-298172160
	.long	1072533748
	.long	1213080184
	.long	1071633383
	.long	286037950
	.long	1071174785
	.long	2033700687
	.long	1072481532
	.long	131752279
	.long	1071391166
	.long	1148565240
	.long	1070987129
	.long	-263049361
	.long	1072418912
	.long	494041361
	.long	1071134280
	.long	-676322796
	.long	1070806931
	.long	596555427
	.long	1072346422
	.long	-1974157735
	.long	1070859810
	.long	241250443
	.long	1070635108
	.long	-1265768781
	.long	1072264656
	.long	562916968
	.long	1070522979
	.long	166890472
	.long	1070348847
	.long	609490082
	.long	1072174276
	.long	-1650965088
	.long	1069818019
	.long	-1744964536
	.long	1070043413
	.long	-538391262
	.long	1072075999
	.long	1939626472
	.long	1066392552
	.long	724155950
	.long	1069759188
	.data
	.align 16
	.type	_loop.67, @object
	.size	_loop.67, 24
_loop.67:
	.quad	.LC198
	.long	296
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.68, @object
	.size	_loop.68, 24
_loop.68:
	.quad	.LC198
	.long	282
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.69, @object
	.size	_loop.69, 24
_loop.69:
	.quad	.LC198
	.long	240
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.70, @object
	.size	_loop.70, 24
_loop.70:
	.quad	.LC198
	.long	163
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.71, @object
	.size	_loop.71, 24
_loop.71:
	.quad	.LC198
	.long	135
	.long	1
	.long	0
	.byte	0
	.zero	3
	.align 16
	.type	_loop.72, @object
	.size	_loop.72, 24
_loop.72:
	.quad	.LC150
	.long	428
	.long	1
	.long	0
	.byte	0
	.zero	3
	.globl	rhov
	.align 4
	.type	rhov, @object
	.size	rhov, 4
rhov:
	.long	11
	.globl	alphav
	.align 8
	.type	alphav, @object
	.size	alphav, 8
alphav:
	.long	9
	.long	10
	.globl	mu2
	.bss
	.align 8
	.type	mu2, @object
	.size	mu2, 8
mu2:
	.zero	8
	.globl	rho2
	.data
	.align 8
	.type	rho2, @object
	.size	rho2, 8
rho2:
	.long	0
	.long	1072693248
	.globl	mu1
	.bss
	.align 8
	.type	mu1, @object
	.size	mu1, 8
mu1:
	.zero	8
	.globl	rho1
	.data
	.align 8
	.type	rho1, @object
	.size	rho1, 8
rho1:
	.long	0
	.long	1072693248
	.globl	interfaces
	.align 8
	.type	interfaces, @object
	.size	interfaces, 8
interfaces:
	.quad	__compound_literal.0
	.align 8
	.type	__compound_literal.0, @object
	.size	__compound_literal.0, 8
__compound_literal.0:
	.long	8
	.long	-1
	.globl	f
	.align 4
	.type	f, @object
	.size	f, 4
f:
	.long	8
	.globl	dtmax
	.bss
	.align 8
	.type	dtmax, @object
	.size	dtmax, 8
dtmax:
	.zero	8
	.globl	stokes
	.type	stokes, @object
	.size	stokes, 1
stokes:
	.zero	1
	.globl	mgu
	.align 32
	.type	mgu, @object
	.size	mgu, 40
mgu:
	.zero	40
	.globl	mgpf
	.align 32
	.type	mgpf, @object
	.size	mgpf, 40
mgpf:
	.zero	40
	.globl	mgp
	.align 32
	.type	mgp, @object
	.size	mgp, 40
mgp:
	.zero	40
	.globl	rho
	.data
	.align 4
	.type	rho, @object
	.size	rho, 4
rho:
	.long	65540
	.globl	alpha
	.align 8
	.type	alpha, @object
	.size	alpha, 8
alpha:
	.long	65538
	.long	65539
	.globl	a
	.align 8
	.type	a, @object
	.size	a, 8
a:
	.long	65536
	.long	65537
	.globl	mu
	.align 8
	.type	mu, @object
	.size	mu, 8
mu:
	.long	65536
	.long	65537
	.globl	uf
	.align 8
	.type	uf, @object
	.size	uf, 8
uf:
	.long	6
	.long	7
	.globl	pf
	.align 4
	.type	pf, @object
	.size	pf, 4
pf:
	.long	5
	.globl	g
	.align 8
	.type	g, @object
	.size	g, 8
g:
	.long	3
	.long	4
	.globl	u
	.align 8
	.type	u, @object
	.size	u, 8
u:
	.long	1
	.long	2
	.globl	p
	.bss
	.align 4
	.type	p, @object
	.size	p, 4
p:
	.zero	4
	.globl	TOLERANCE
	.data
	.align 8
	.type	TOLERANCE, @object
	.size	TOLERANCE, 8
TOLERANCE:
	.long	-755914244
	.long	1062232653
	.globl	NITERMIN
	.align 4
	.type	NITERMIN, @object
	.size	NITERMIN, 4
NITERMIN:
	.long	1
	.globl	NITERMAX
	.align 4
	.type	NITERMAX, @object
	.size	NITERMAX, 4
NITERMAX:
	.long	100
	.local	open_image_data
	.comm	open_image_data,24,16
	.globl	theta
	.align 8
	.type	theta, @object
	.size	theta, 8
theta:
	.long	-858993459
	.long	1073007820
	.globl	perf
	.bss
	.align 32
	.type	perf, @object
	.size	perf, 64
perf:
	.zero	64
	.globl	CFL
	.data
	.align 8
	.type	CFL, @object
	.size	CFL, 8
CFL:
	.long	0
	.long	1071644672
	.globl	DT
	.align 8
	.type	DT, @object
	.size	DT, 8
DT:
	.long	536870912
	.long	1107468383
	.globl	dt
	.align 8
	.type	dt, @object
	.size	dt, 8
dt:
	.long	0
	.long	1072693248
	.globl	restriction
	.bss
	.align 8
	.type	restriction, @object
	.size	restriction, 8
restriction:
	.zero	8
	.globl	default_vector_bc
	.data
	.align 32
	.type	default_vector_bc, @object
	.size	default_vector_bc, 48
default_vector_bc:
	.quad	antisymmetry
	.quad	antisymmetry
	.quad	antisymmetry
	.quad	antisymmetry
	.quad	antisymmetry
	.quad	antisymmetry
	.globl	default_scalar_bc
	.align 32
	.type	default_scalar_bc, @object
	.size	default_scalar_bc, 48
default_scalar_bc:
	.quad	symmetry
	.quad	symmetry
	.quad	symmetry
	.quad	symmetry
	.quad	symmetry
	.quad	symmetry
	.globl	boundary_level
	.bss
	.align 8
	.type	boundary_level, @object
	.size	boundary_level, 8
boundary_level:
	.zero	8
	.local	nconst
	.comm	nconst,4,4
	.globl	debug
	.align 8
	.type	debug, @object
	.size	debug, 8
debug:
	.zero	8
	.local	last_point
	.comm	last_point,12,8
	.globl	boundary_face
	.align 8
	.type	boundary_face, @object
	.size	boundary_face, 8
boundary_face:
	.zero	8
	.globl	_stencil_nop
	.align 4
	.type	_stencil_nop, @object
	.size	_stencil_nop, 4
_stencil_nop:
	.zero	4
	.local	display_defaults
	.comm	display_defaults,8,8
	.local	free_solver_funcs
	.comm	free_solver_funcs,8,8
	.local	qpopen_pipes
	.comm	qpopen_pipes,8,8
	.globl	cm
	.data
	.align 4
	.type	cm, @object
	.size	cm, 4
cm:
	.long	65540
	.globl	fm
	.align 8
	.type	fm, @object
	.size	fm, 8
fm:
	.long	65538
	.long	65539
	.globl	zeroc
	.section	.rodata
	.align 4
	.type	zeroc, @object
	.size	zeroc, 4
zeroc:
	.long	65541
	.globl	unity
	.align 4
	.type	unity, @object
	.size	unity, 4
unity:
	.long	65540
	.globl	unityf
	.align 8
	.type	unityf, @object
	.size	unityf, 8
unityf:
	.long	65538
	.long	65539
	.globl	zerof
	.align 8
	.type	zerof, @object
	.size	zerof, 8
zerof:
	.long	65536
	.long	65537
	.globl	tnext
	.bss
	.align 8
	.type	tnext, @object
	.size	tnext, 8
tnext:
	.zero	8
	.globl	t
	.align 8
	.type	t, @object
	.size	t, 8
t:
	.zero	8
	.globl	inext
	.align 4
	.type	inext, @object
	.size	inext, 4
inext:
	.zero	4
	.globl	iter
	.align 4
	.type	iter, @object
	.size	iter, 4
iter:
	.zero	4
	.local	Events
	.comm	Events,8,8
	.globl	init_face_vector
	.align 8
	.type	init_face_vector, @object
	.size	init_face_vector, 8
init_face_vector:
	.zero	8
	.globl	init_tensor
	.align 8
	.type	init_tensor, @object
	.size	init_tensor, 8
init_tensor:
	.zero	8
	.globl	init_vector
	.align 8
	.type	init_vector, @object
	.size	init_vector, 8
init_vector:
	.zero	8
	.globl	init_vertex_scalar
	.align 8
	.type	init_vertex_scalar, @object
	.size	init_vertex_scalar, 8
init_vertex_scalar:
	.zero	8
	.globl	init_scalar
	.align 8
	.type	init_scalar, @object
	.size	init_scalar, 8
init_scalar:
	.zero	8
	.globl	baseblock
	.align 8
	.type	baseblock, @object
	.size	baseblock, 8
baseblock:
	.zero	8
	.globl	all
	.align 8
	.type	all, @object
	.size	all, 8
all:
	.zero	8
	.local	_attribute
	.comm	_attribute,8,8
	.local	boundaries
	.comm	boundaries,8,8
	.globl	datasize
	.align 8
	.type	datasize, @object
	.size	datasize, 8
datasize:
	.zero	8
	.globl	_constant
	.align 8
	.type	_constant, @object
	.size	_constant, 8
_constant:
	.zero	8
	.globl	nboundary
	.data
	.align 4
	.type	nboundary, @object
	.size	nboundary, 4
nboundary:
	.long	4
	.globl	Period
	.bss
	.align 8
	.type	Period, @object
	.size	Period, 12
Period:
	.zero	12
	.globl	N
	.data
	.align 4
	.type	N, @object
	.size	N, 4
N:
	.long	64
	.globl	L0
	.align 8
	.type	L0, @object
	.size	L0, 8
L0:
	.long	0
	.long	1072693248
	.globl	Z0
	.bss
	.align 8
	.type	Z0, @object
	.size	Z0, 8
Z0:
	.zero	8
	.globl	Y0
	.align 8
	.type	Y0, @object
	.size	Y0, 8
Y0:
	.zero	8
	.globl	X0
	.align 8
	.type	X0, @object
	.size	X0, 8
X0:
	.zero	8
	.globl	grid
	.align 8
	.type	grid, @object
	.size	grid, 8
grid:
	.zero	8
	.globl	undefined
	.align 8
	.type	undefined, @object
	.size	undefined, 8
undefined:
	.zero	8
	.globl	_val_higher_dimension
	.align 8
	.type	_val_higher_dimension, @object
	.size	_val_higher_dimension, 8
_val_higher_dimension:
	.zero	8
	.set	.LC0,.LC1+8
	.section	.rodata.cst16,"aM",@progbits,16
	.align 16
.LC1:
	.long	0
	.long	-2147483648
	.long	0
	.long	0
	.section	.rodata.cst8,"aM",@progbits,8
	.align 8
.LC2:
	.long	966823146
	.long	1177108057
	.align 8
.LC3:
	.long	0
	.long	1070596096
	.align 8
.LC4:
	.long	-18103648
	.long	968116299
	.align 8
.LC5:
	.long	0
	.long	1071644672
	.align 8
.LC6:
	.long	0
	.long	1074266112
	.align 8
.LC7:
	.long	0
	.long	1075970048
	.align 8
.LC8:
	.long	0
	.long	1068498944
	.align 8
.LC9:
	.long	0
	.long	1069547520
	.align 8
.LC10:
	.long	0
	.long	1072693248
	.align 8
.LC11:
	.long	0
	.long	-1080033280
	.align 8
.LC12:
	.long	0
	.long	1067450368
	.align 8
.LC13:
	.long	-1266679808
	.long	1104307584
	.align 8
.LC14:
	.long	0
	.long	1074790400
	.align 8
.LC15:
	.long	0
	.long	1076101120
	.align 8
.LC16:
	.long	0
	.long	1077149696
	.section	.rodata.cst16
	.align 16
.LC17:
	.long	-1
	.long	2147483647
	.long	0
	.long	0
	.section	.rodata.cst8
	.align 8
.LC18:
	.long	0
	.long	1074528256
	.align 8
.LC19:
	.long	0
	.long	-1071382528
	.align 8
.LC20:
	.long	0
	.long	1077805056
	.align 8
.LC21:
	.long	920840988
	.long	1075314714
	.align 8
.LC22:
	.long	-1717986918
	.long	1069128089
	.align 8
.LC23:
	.long	0
	.long	-1074790400
	.align 8
.LC33:
	.long	0
	.long	1073217536
	.align 8
.LC47:
	.long	0
	.long	-1057086464
	.align 8
.LC62:
	.long	0
	.long	1093567616
	.align 8
.LC64:
	.long	-640172613
	.long	1037794527
	.align 8
.LC75:
	.long	0
	.long	-1075838976
	.align 8
.LC80:
	.long	0
	.long	1073741824
	.align 8
.LC85:
	.long	-400107883
	.long	1041313291
	.align 8
.LC122:
	.long	1202590843
	.long	1066695393
	.align 8
.LC130:
	.long	966823146
	.long	-970375591
	.align 8
.LC132:
	.long	1413754129
	.long	1074340347
	.section	.rodata.cst16
	.align 16
.LC136:
	.quad	8025246784910748018
	.quad	6861620461066810485
	.align 16
.LC137:
	.quad	7594862719462551346
	.quad	128060694095212
	.section	.rodata.cst8
	.align 8
.LC144:
	.long	-171798692
	.long	1072651304
	.align 8
.LC149:
	.long	-1717986918
	.long	1072273817
	.align 8
.LC196:
	.long	0
	.long	1138753536
	.align 8
.LC199:
	.long	630506365
	.long	-726513235
	.align 8
.LC200:
	.long	630506365
	.long	1420970413
	.align 8
.LC218:
	.long	-417264663
	.long	1072693245
	.align 8
.LC224:
	.long	-739509531
	.long	1070664185
	.align 8
.LC225:
	.long	-285763072
	.long	1070426693
	.align 8
.LC226:
	.long	-28147
	.long	1077936127
	.align 8
.LC227:
	.long	0
	.long	1080000512
	.align 8
.LC228:
	.long	-4194304
	.long	1105199103
	.align 8
.LC229:
	.long	0
	.long	1078951936
	.align 8
.LC231:
	.long	0
	.long	1081073664
	.align 8
.LC239:
	.long	0
	.long	1075052544
	.align 8
.LC249:
	.long	-1
	.long	2146435071
	.align 8
.LC279:
	.long	-1717986918
	.long	1072798105
	.align 8
.LC283:
	.long	858993459
	.long	1072902963
	.align 8
.LC287:
	.long	-350469331
	.long	1058682594
	.align 8
.LC288:
	.long	0
	.long	1075314688
	.align 8
.LC293:
	.long	417264663
	.long	1071644674
	.align 8
.LC295:
	.long	-1598689907
	.long	1051772663
	.section	.rodata.cst16
	.align 16
.LC297:
	.quad	7382074289956663090
	.quad	32783537688372065
	.section	.rodata.cst8
	.align 8
.LC300:
	.long	0
	.long	1080623104
	.align 8
.LC301:
	.long	0
	.long	1079574528
	.align 8
.LC302:
	.long	0
	.long	1081262080
	.align 8
.LC303:
	.long	536870912
	.long	1107468383
	.align 8
.LC305:
	.long	0
	.long	-1073741824
	.align 8
.LC308:
	.long	0
	.long	1083129856
	.align 8
.LC309:
	.long	-171798692
	.long	1073699880
	.ident	"GCC: (mk-2022.0) 11.2.0"
	.section	.note.GNU-stack,"",@progbits
